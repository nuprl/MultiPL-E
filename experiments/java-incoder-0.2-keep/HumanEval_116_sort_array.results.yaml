name: HumanEval_116_sort_array
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.longValue() == 1) {\n       \
    \         ones++;\n            } else if (i.longValue() == 10) {\n           \
    \     tens++;\n            } else if (i.longValue() == 100) {\n              \
    \  hundreds++;\n            } else if (i.longValue() == 1000) {\n            \
    \    thousands++;\n            }\n        }\n        long onesDecimal = ones /\
    \ 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal = (hundreds\
    \ / 10) * 100;\n        long thousandsDecimal = (thousands / 10) * 1000;\n   \
    \     long decimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal2 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal3 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal4 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal5 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal6 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal7 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal8 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal9 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal10 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal11 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal12 = onesDecimal + tensDeci\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoi12d9cc.java:48: error: ';' expected\n        long decimal12 =\
    \ onesDecimal + tensDeci\n                                               ^\n1\
    \ error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num == 1000) {\n                thousands++;\n            } else {\n\
    \                result.add(num);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long totalCount = onesCount\
    \ + tensCount + hundredsCount + thousandsCount;\n        long onesCount2 = onesCount\
    \ * onesCount;\n        long tensCount2 = tensCount * tensCount;\n        long\
    \ hundredsCount2 = hundredsCount * hundredsCount;\n        long thousandsCount2\
    \ = thousandsCount * thousandsCount;\n        long totalCount2 = onesCount2 +\
    \ tensCount2 + hundredsCount2 + thousandsCount2;\n        long onesCount3 = onesCount\
    \ * onesCount2;\n        long tensCount3 = tensCount * tensCount2;\n        long\
    \ hundredsCount3 = hundredsCount * hundredsCount2;\n        long thousandsCount3\
    \ = thousandsCount * thousandsCount2;\n        long totalCount3 = onesCount3 +\
    \ tensCount3 + hundredsCount3 + thousandsCount3;\n        long onesCount4 = onesCount\
    \ * onesCount3;\n        long tensCount4 = tensCount * tensCount3;\n        long\
    \ hundredsCount4 = hundredsCount * hundredsCount3;\n        long thousandsCount4\
    \ = thousandsCount * thousandsCount3;\n        long totalCount4 = onesCount4 +\
    \ tensCount4 + hundredsCount4 + thousandsCount4;\n        long onesCount5 = onesCount\
    \ * onesCount4;\n        long tensCount5 = tensCount * tensCount4;\n        long\
    \ hundredsCount5 = hundredsCount * hundredsCount4;\n        long thousandsCount5\
    \ = thousandsCount * thousandsCount4;\n        long totalCount5 = onesCount5 +\
    \ tensCount5 + hundredsCount5 + thous\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp33it7prl.java:59: error: ';' expected\n        long totalCount5\
    \ = onesCount5 + tensCount5 + hundredsCount5 + thous\n                       \
    \                                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 2) {\n                tens++;\n     \
    \       } else if (num == 4) {\n                hundreds++;\n            } else\
    \ if (num == 8) {\n                thousands++;\n            }\n        }\n  \
    \      long onesDecimal = ones * 1000;\n        long tensDecimal = tens * 1000;\n\
    \        long hundredsDecimal = hundreds * 1000;\n        long thousandsDecimal\
    \ = thousands * 1000;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimalDecimal = maxDecimal * 10;\n   \
    \     long maxDecimalDecimalDecimal = maxDecimalDecimal * 10;\n        long maxDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimal * 10;\n        long maxDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimal * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimal * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10;\n      \
    \  long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvm6imypz.java:52: error: ';' expected\n        long maxDecimalDecimalDecimalDecimalDecimal\n\
    \                                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.intValue() == 1) {\n        \
    \        ones++;\n            } else if (i.intValue() == 10) {\n             \
    \   tens++;\n            } else if (i.intValue() == 100) {\n                hundreds++;\n\
    \            } else if (i.intValue() == 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n\
    \        long thousandsDecimal = (thousands / 10) * 1000;\n        long decimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ decimal2 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal3 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal4 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal5 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal6 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal7 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal8 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal9 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal10 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal11 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal12 = onesDecimal + tensDeci\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgny4vrad.java:48: error: ';' expected\n        long decimal12 =\
    \ onesDecimal + tensDeci\n                                               ^\n1\
    \ error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.compareTo(Long.MIN_VALUE) ==\
    \ 0) {\n                ones++;\n            } else if (i.compareTo(Long.MAX_VALUE)\
    \ == 0) {\n                tens++;\n            } else if (i.compareTo(Long.MAX_VALUE\
    \ * 10) == 0) {\n                tens++;\n                hundreds++;\n      \
    \      } else if (i.compareTo(Long.MAX_VALUE * 100) == 0) {\n                tens++;\n\
    \                hundreds++;\n                thousands++;\n            } else\
    \ if (i.compareTo(Long.MAX_VALUE * 1000) == 0) {\n                tens++;\n  \
    \              hundreds++;\n                thousands++;\n                thousands++;\n\
    \            } else {\n                tens++;\n                hundreds++;\n\
    \                thousands++;\n                thousands++;\n                thousands++;\n\
    \                thousands++;\n                thousands++;\n            }\n \
    \       }\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        for (Long i :\
    \ arr) {\n            if (i.compareTo(Long.MIN_VALUE) == 0) {\n              \
    \  onesCount++;\n            } else if (i.compareTo(Long.MAX_VALUE) == 0) {\n\
    \                tensCount++;\n            } else if (i.compareTo(Long.MAX_VALUE\
    \ * 10) == 0) {\n                tensCount++;\n                hundredsCount++;\n\
    \            } else if (i.compareTo(Long.MAX_VALUE * 100) == 0) {\n          \
    \      tensCount++;\n                hundredsCount++;\n                thousandsCount++;\n\
    \            } else if (i.compareTo(Long.MAX_VALUE * 1000) == 0) {\n         \
    \       tensCount++;\n                hundredsCount++;\n                thousandsCount++;\n\
    \                thousandsCount++;\n                thousandsCount++;\n      \
    \      } else {\n                tensCount++;\n                hundredsCount++;\n\
    \                thousandsCount++;\n                thousandsCount++;\n      \
    \          thousandsCount++;\n                thousandsCount++;\n            \
    \    thousandsCount++;\n            }\n        }\n        long onesCount2 = onesCount\
    \ * ones;\n        long tensCount2 = tensCount * tens;\n        long hundredsCount2\
    \ = hundredsCount * hundreds;\n        long thousandsCount2 = thousandsCount *\
    \ thousands;\n        long onesCount3 = onesCount2 * ones;\n        long tensCount3\
    \ = tensCount2 * ten\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplv42yi92.java:86: error: ';' expected\n        long tensCount3\
    \ = tensCount2 * ten\n                                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesCount = ones;\n        long tensCount = tens;\n        long\
    \ hundredsCount = hundreds;\n        long thousandsCount = thousands;\n      \
    \  if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \            hundredsCount = onesCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n            thousandsCount = onesCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n            hundredsCount = tensCount;\n        }\n        if\
    \ (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n  \
    \          thousandsCount = tensCount;\n        }\n        if (hundredsCount >\
    \ thousandsCount) {\n            hundredsCount = thousandsCount;\n           \
    \ thousandsCount = hundredsCount;\n        }\n        long onesCount2 = onesCount;\n\
    \        long tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount;\n        if (onesCount2 > hundredsCount2)\
    \ {\n            onesCount2 = hundredsCount2;\n            hundredsCount2 = onesCount2;\n\
    \        }\n        if (onesCount2 > thousandsCount2) {\n            onesCount2\
    \ = thousandsCount2;\n            thousandsCount2 = onesCount2;\n        }\n \
    \       if (tensCount2 > hundredsCount2) {\n            tensCount2 = hundredsCount2;\n\
    \            hundredsCount2 = tensCount2;\n        }\n        if (tensCount2 >\
    \ thousandsCount2) {\n            tensCount2 = thousandsCount2;\n            thousandsCount2\
    \ = tensCount2;\n        }\n        if (hundredsCount2 > thousandsCount2) {\n\
    \            hundredsCount2 = thousandsCount2;\n            thousandsCount\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9lwiqek.java:79: error: not a statement\n            thousandsCount\n\
    \            ^\n/tmp/tmpf9lwiqek.java:79: error: ';' expected\n            thousandsCount\n\
    \                          ^\n/tmp/tmpf9lwiqek.java:81: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesDiff = ones - zeros;\n        long\
    \ zerosDiff =  zeros - ones;\n        long onesDiff2 = ones - ones;\n        long\
    \ zerosDiff2 = zeros - zeros;\n        long onesDiff3 = ones - onesDiff;\n   \
    \     long zerosDiff3 = zeros - zerosDiff;\n        long onesDiff4 = ones - onesDiff2;\n\
    \        long zerosDiff4 = zeros - zerosDiff2;\n        long onesDiff5 = ones\
    \ - onesDiff3;\n        long zerosDiff5 = zeros - zerosDiff3;\n        long onesDiff6\
    \ = ones - onesDiff4;\n        long zerosDiff6 = zeros - zerosDiff4;\n       \
    \ long onesDiff7 = ones - onesDiff5;\n        long zerosDiff7 = zeros - zerosDiff5;\n\
    \        long onesDiff8 = ones - onesDiff6;\n        long zerosDiff8 = zeros -\
    \ zerosDiff6;\n        long onesDiff9 = ones - onesDiff7;\n        long zerosDiff9\
    \ = zeros - zerosDiff7;\n        long onesDiff10 = ones - onesDiff8;\n       \
    \ long zerosDiff10 = zeros - zerosDiff8;\n        long onesDiff11 = ones - onesDiff9;\n\
    \        long zerosDiff11 = zeros - zerosDiff9;\n        long onesDiff12 = ones\
    \ - onesDiff10;\n        long zerosDiff12 = zeros - zerosDiff10;\n        long\
    \ onesDiff13 = ones - onesDiff11;\n        long zerosDiff13 = zeros - zerosDiff11;\n\
    \        long onesDiff14 = ones - onesDiff12;\n        long zerosDiff14 = zeros\
    \ - zerosDiff12;\n        long onesDiff15 = ones - onesDiff13;\n        long zerosDiff15\
    \ = zeros - zerosDiff13;\n        long onesDiff16 = ones - onesDiff14;\n     \
    \   long zerosDiff16 = zeros - zerosDiff14;\n        long onesDiff17 = ones -\
    \ onesDiff15;\n        long zerosDiff17 = zeros - zerosDiff15;\n        long onesDiff18\
    \ = ones - onesDiff16;\n        long zerosDiff18 = zeros - zerosDiff16;\n    \
    \    long onesDiff19 = ones - onesDiff17;\n        long zerosDiff19 = zeros -\
    \ zerosDiff17;\n        long \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx0k9meo8.java:65: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpx0k9meo8.java:65: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            } else\
    \ {\n                throw new RuntimeException(\"Unexpected input\");\n     \
    \       }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (long i : arr) {\n            if (i % 2 == 0) {\n                onesCount++;\n\
    \            } else if (i % 10 == 0) {\n                tensCount++;\n       \
    \     } else if (i % 100 == 0) {\n                hundredsCount++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousandsCount++;\n         \
    \   } else {\n                throw new RuntimeException(\"Unexpected input\"\
    );\n            }\n        }\n        long onesCountInt = onesCount;\n       \
    \ long tensCountInt = tensCount;\n        long hundredsCountInt = hundredsCount;\n\
    \        long thousandsCountInt = thousandsCount;\n        long onesCountLong\
    \ = onesCount;\n        long tensCountLong = tensCount;\n        long hundredsCountLong\
    \ = hundredsCount;\n        long thousandsCountLong = thousandsCount;\n      \
    \  long onesCountDouble = onesCount;\n        long tensCountDouble = tensCount;\n\
    \        long hundredsCountDouble = hundredsCount;\n        long thousandsCountDouble\
    \ = thousandsCount;\n        long onesCountBigDecimal = onesCount;\n        long\
    \ tensCountBigDecimal = tensCount;\n        long hundredsCountBigDecimal = hundredsCount;\n\
    \        long thousandsCountBigDecimal = thousandsCount;\n        long onesCountBigDecimalDouble\
    \ = onesCountDouble;\n        long tensCountBigDecimalDouble = tensCountDouble;\n\
    \        long hundredsCountBigDecimalDouble = hundredsCountDouble;\n        long\
    \ thousandsCountBigDecimalDouble = thousandsCountDouble;\n        long onesCountBigDecimalLong\
    \ = onesCountLong;\n        long tensCountBigDecimalLong = tensCountLong;\n  \
    \      long hundredsCountBigDecimalLong = hundredsCountLong\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp75q6z_35.java:74: error: ';' expected\n        long hundredsCountBigDecimalLong\
    \ = hundredsCountLong\n                                                      \
    \      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num >= 1000 && num < 1000000) {\n                thousands++;\n   \
    \         } else {\n                result.add(num);\n            }\n        }\n\
    \        long onesDecimal = ones / 10;\n        long tensDecimal = tens / 10;\n\
    \        long hundredsDecimal = (hundreds / 10) * 100;\n        long thousandsDecimal\
    \ = (thousands / 10) * 1000;\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        Collections.sort(result);\n \
    \       Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                long diff = o1.longValue()\
    \ - o2.longValue();\n                if (diff == 0) {\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    return (int)\
    \ diff;\n                }\n            }\n        });\n        ArrayList<Long>\
    \ result2 = new ArrayList<>();\n        for (long num : result) {\n          \
    \  if (num == 1) {\n                result2.add(num);\n            } else if (num\
    \ == 10) {\n                result2.add(num);\n            } else if (num == 100)\
    \ {\n                result2.add(num);\n            } else if (num >= 1000 &&\
    \ num < 1000000) {\n                result2.add(num);\n            } else {\n\
    \                result2.add(num);\n            }\n        }\n        Collections.sort(result2);\n\
    \        ArrayList<Long> result3 = new ArrayList<>();\n        for (long num :\
    \ result2) {\n            if (num == 1) {\n                result3.add(num);\n\
    \            } else if (num == 10) {\n                result3.add(num);\n    \
    \        } else if (num == 100) {\n                result3.add(num);\n       \
    \     } else if (num >= 1000 && num < 1000000) {\n                result3.add(num);\n\
    \            } else {\n                result3.add(num);\n            }\n    \
    \    }\n        Collections.sort(result3);\n        ArrayList<Long> result4 =\
    \ new ArrayList<>();\n        for (long num : result3) {\n            if (num\
    \ == 1) {\n                result4.add(num);\n            } else if (num == 10)\
    \ {\n                result4.add(num);\n            } else if (num == 100) {\n\
    \                result4.add(num);\n            } else if (num >= 1000 && num\
    \ < 1000000) {\n                result4.add(num);\n            } else {\n    \
    \            result4.add(num);\n            }\n        }\n        Collections.sort(result4);\n\
    \        ArrayList<Long> result5 = new \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36lt1b9d.java:96: error: <identifier> expected\n        ArrayList<Long>\
    \ result5 = new \n                                     ^\n/tmp/tmp36lt1b9d.java:97:\
    \ error: '(' or '[' expected\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long ten_thousands = 0;\n        long hundred_thousands = 0;\n      \
    \  long thousand_thousands = 0;\n        long ten_hundred_thousands = 0;\n   \
    \     long hundred_hundred_thousands = 0;\n        long thousand_hundred_thousands\
    \ = 0;\n        long ten_hundred_hundred_thousands = 0;\n        long hundred_hundred_hundred_thousands\
    \ = 0;\n        long thousand_hundred_hundred_thousands = 0;\n        long ten_hundred_hundred_hundred_thousands\
    \ = 0;\n        long hundred_hundred_hundred_hundred_thousands = 0;\n        long\
    \ thousand_hundred_hundred_hundred_thousands = 0;\n        long ten_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long hundred_hundred_hundred_hundred_hundred_thousands = 0;\n\
    \        long thousand_hundred_hundred_hundred_hundred_thousands = 0;\n      \
    \  long ten_hundred_hundred_hundred_hundred_thousands = 0;\n        long hundred_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long thousand_hundred_hundred_hundred_hundred_thousands = 0;\n\
    \        long ten_hundred_hundred_hundred_hundred_hundred_thousands = 0;\n   \
    \     long hundred_hundred_hundred_hundred_hundred_hundred_thousands = 0;\n  \
    \      long thousand_hundred_hundred_hundred_hundred_hundred_thousands = 0;\n\
    \        long ten_hundred_hundred_hundred_hundred_hundred_thousands = 0;\n   \
    \     long hundred_hundred_hundred_hundred_hundred_hundred_thousands = 0;\n  \
    \      long thousand_hundred_hundred_hundred_hundred_hundred_thousands = 0;\n\
    \        long ten_hundred_hundred_hundred_hundred_hundred_hundred_thousands =\
    \ 0;\n        long hundred_hundred_hundred_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long thousand_hundred_hundred_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long ten_hundred_hundred_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long hundred_hundred_hundred_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long thousand_hundred_hundred_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long ten_hundred_hundred_hundred_hundred_hundred_hundred_thousands\
    \ = 0;\n        long hundred_hund\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdhr_ik08.java:53: error: ';' expected\n        long hundred_hund\n\
    \                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num == 1000) {\n                thousands++;\n            } else {\n\
    \                result.add(num);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            tensCount = onesCount\
    \ - hundredsCount;\n        } else if (onesCount > thousandsCount) {\n       \
    \     onesCount = thousandsCount;\n            tensCount = onesCount - thousandsCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n            hundredsCount = tensCount - hundredsCount;\n   \
    \     } else if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \            hundredsCount = tensCount - thousandsCount;\n        }\n        if\
    \ (hundredsCount > thousandsCount) {\n            hundredsCount = thousandsCount;\n\
    \            thousandsCount = hundredsCount - thousandsCount;\n        }\n   \
    \     long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n   \
    \     long hundredsCount2 = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n\
    \        if (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \            tensCount2 = onesCount2 - hundredsCount2;\n        } else if (onesCount2\
    \ > thousandsCount2) {\n            onesCount2 = thousandsCount2;\n          \
    \  tensCount2 = onesCount2 - thousandsCount2;\n        }\n        if (tensCount2\
    \ > hundredsCount2) {\n            tensCount2 = hundredsCount2;\n            hundredsCount2\
    \ = tensCount2 - hundredsCount2;\n        } else if (tensCount2 > thousandsCount2)\
    \ {\n            tensCount2 = thousandsCount2;\n            hundredsCount\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp44aj6kv3.java:73: error: not a statement\n            hundredsCount\n\
    \            ^\n/tmp/tmp44aj6kv3.java:73: error: ';' expected\n            hundredsCount\n\
    \                         ^\n/tmp/tmp44aj6kv3.java:75: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            ones += bin == 1 ? 1 : 0;\n            tens += bin == 2 ? 10 : 0;\n\
    \            hundreds += bin == 4 ? 100 : 0;\n            thousands += bin ==\
    \ 8 ? 1000 : 0;\n        }\n        long onesTotal = ones * ones;\n        long\
    \ tensTotal = tens * tens;\n        long hundredsTotal = hundreds * hundreds;\n\
    \        long thousandsTotal = thousands * thousands;\n        long total = (onesTotal\
    \ + tensTotal + hundredsTotal + thousandsTotal);\n        long onesTotal2 = ones\
    \ * ones * ones;\n        long tensTotal2 = tens * tens * tens;\n        long\
    \ hundredsTotal2 = hundreds * hundreds * hundreds;\n        long thousandsTotal2\
    \ = thousands * thousands * thousands;\n        long total2 = (onesTotal2 + tensTotal2\
    \ + hundredsTotal2 + thousandsTotal2);\n        long onesTotal3 = ones * ones\
    \ * ones * ones;\n        long tensTotal3 = tens * tens * tens * tens;\n     \
    \   long hundredsTotal3 = hundreds * hundreds * hundreds * hundreds;\n       \
    \ long thousandsTotal3 = thousands * thousands * thousands * thousands;\n    \
    \    long total3 = (onesTotal3 + tensTotal3 + hundredsTotal3 + thousandsTotal3);\n\
    \        long onesTotal4 = ones * ones * ones * ones * ones;\n        long tensTotal4\
    \ = tens * tens * tens * tens * tens;\n        long hundredsTotal4 = hundreds\
    \ * hundreds * hundreds * hundreds * hundreds;\n        long thousandsTotal4 =\
    \ thousands * thousands * thousands * thousands * thousands;\n        long total4\
    \ = (onesTotal4 + tensTotal4 + hundredsTotal4 + thousandsTotal4);\n        long\
    \ onesTotal5 = ones * ones * ones * ones * ones * ones;\n        long tensTotal5\
    \ = tens * tens * tens * tens * tens * tens;\n        long hundredsTotal5 = hundreds\
    \ * hundreds * hundreds * hundreds * hundreds * hund\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ydjoger.java:51: error: ';' expected\n        long hundredsTotal5\
    \ = hundreds * hundreds * hundreds * hundreds * hundreds * hund\n            \
    \                                                                            \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        if (ones == 0) {\n            result.addAll(Arrays.asList(arr));\n\
    \            return result;\n        }\n        long onesCount = 0;\n        long\
    \ tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        for (Long num : arr) {\n            if (num == 1) {\n        \
    \        onesCount++;\n            } else if (num == 10) {\n                tensCount++;\n\
    \            } else if (num == 100) {\n                hundredsCount++;\n    \
    \        } else if (num > 100 && num < 1000) {\n                thousandsCount++;\n\
    \            }\n        }\n        long onesCountInt = onesCount;\n        long\
    \ tensCountInt = tensCount;\n        long hundredsCountInt = hundredsCount;\n\
    \        long thousandsCountInt = thousandsCount;\n        long onesCountLong\
    \ = onesCount;\n        long tensCountLong = tensCount;\n        long hundredsCountLong\
    \ = hundredsCount;\n        long thousandsCountLong = thousandsCount;\n      \
    \  long onesCountLongInt = onesCountInt;\n        long tensCountLongInt = tensCountInt;\n\
    \        long hundredsCountLongInt = hundredsCountInt;\n        long thousandsCountLongInt\
    \ = thousandsCountInt;\n        long onesCountLongLong = onesCountLong;\n    \
    \    long tensCountLongLong = tensCountLong;\n        long hundredsCountLongLong\
    \ = hundredsCountLong;\n        long thousandsCountLongLong = thousandsCountLong;\n\
    \        long onesCountLongLongInt = onesCountLongInt;\n        long tensCountLongLongInt\
    \ = tensCountLongInt;\n        long hundredsCountLongLongInt = hundredsCountLongInt;\n\
    \        long thousandsCountLongLongInt = thousandsCountLongInt;\n        long\
    \ onesCountLongLongLong = onesCountLongLong;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpne_ois24.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n            result.addAll(Arrays.asList(arr));\n\
    \                  ^\n    lower bounds: Long,Object\n    lower bounds: ArrayList<Long>\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1) {\n                ones++;\n            } else if (l\
    \ == 0) {\n                zeros++;\n            } else {\n                max\
    \ = Math.max(ones, zeros);\n                if (ones > zeros) {\n            \
    \        result.add(max);\n                    ones = 1;\n                } else\
    \ {\n                    result.add(zeros);\n                    zeros = 0;\n\
    \                }\n            }\n        }\n        if (ones > zeros) {\n  \
    \          result.add(max);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdda3ontk.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n\
    \        for (long i : arr) {\n            if (i == 1) {\n                maxOnesCount++;\n\
    \                if (maxOnesCount > maxOnes) {\n                    maxOnes =\
    \ maxOnesCount;\n                }\n            } else {\n                maxZerosCount++;\n\
    \                if (maxZerosCount > maxZeros) {\n                    maxZeros\
    \ = maxZerosCount;\n                }\n            }\n        }\n        long\
    \ maxOnesDecimal = maxOnes / maxOnesCount;\n        long maxZerosDecimal = maxZeros\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimal = maxOnesDecimal / maxOnesCount;\n\
    \        long maxZerosDecimalDecimal = maxZerosDecimal / maxZerosCount;\n    \
    \    long maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal / maxOnesCount;\n\
    \        long maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal / maxZerosCount;\n\
    \        long maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / maxOnesCount;\n        long maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimal / maxOnesCount;\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesCount;\n      \
    \  long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesCount;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimal\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvvhcdi6e.java:57: error: ';' expected\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\n\
    \                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            } else {\n                throw new RuntimeException(\"Invalid input\"\
    );\n            }\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = hundreds / 10;\n  \
    \      long thousandsDecimal = thousands / 10;\n        long onesDecimalDecimal\
    \ = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n \
    \       long hundredsDecimalDecimal = hundredsDecimal / 10;\n        long thousandsDecimalDecimal\
    \ = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n \
    \       long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n  \
    \      long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal / 10;\n \
    \       long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppiwhzuwu.java:57: error: ';' expected\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimal\n                                                            \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    } else {\n                result.add(num);\n            }\n        }\n  \
    \      long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long num : arr) {\n   \
    \         if (num == 1) {\n                onesCount++;\n            } else if\
    \ (num == 10) {\n                tensCount++;\n            } else if (num == 100)\
    \ {\n                hundredsCount++;\n            } else if (num > 100 && num\
    \ < 1000) {\n                thousandsCount++;\n            }\n        }\n   \
    \     long onesDecimal = ones / onesCount;\n        long tensDecimal = tens /\
    \ tensCount;\n        long hundredsDecimal = (hundreds / hundredsCount);\n   \
    \     long thousandsDecimal = (thousands / thousandsCount);\n        long decimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        Collections.sort(result);\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                if (o1 == o2) {\n         \
    \           return 0;\n                }\n                if (o1 > o2) {\n   \
    \                 return 1;\n                }\n                return -1;\n \
    \           }\n        });\n        ArrayList<Long> sortedResult = new ArrayList<>();\n\
    \        for (Long num : result) {\n            if (num == decimal) {\n      \
    \          sortedResult.add(num);\n            }\n        }\n        return sortedResult;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.sortArray(tmpgbfg_czu.java:51)\n\tat Problem.main(tmpgbfg_czu.java:77)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            long bin = Long.parseLong(Integer.toBinaryString(i),\
    \ 2);\n            ones += bin.longValue();\n            tens += bin.longValue()\
    \ * 10;\n            hundreds += bin.longValue() * 100;\n            thousands\
    \ += bin.longValue() * 1000;\n        }\n        long onesSum = ones;\n      \
    \  long tensSum = tens;\n        long hundredsSum = hundreds;\n        long thousandsSum\
    \ = thousands;\n        for (long i : arr) {\n            long bin = Long.parseLong(Integer.toBinaryString(i),\
    \ 2);\n            onesSum += bin.longValue();\n            tensSum += bin.longValue()\
    \ * 10;\n            hundredsSum += bin.longValue() * 100;\n            thousandsSum\
    \ += bin.longValue() * 1000;\n        }\n        long onesDiff = onesSum - ones;\n\
    \        long tensDiff = tensSum - tens;\n        long hundredsDiff = hundredsSum\
    \ - hundreds;\n        long thousandsDiff = thousandsSum - thousands;\n      \
    \  for (long i : arr) {\n            long bin = Long.parseLong(Integer.toBinaryString(i),\
    \ 2);\n            onesDiff += bin.longValue();\n            tensDiff += bin.longValue()\
    \ * 10;\n            hundredsDiff += bin.longValue() * 100;\n            thousandsDiff\
    \ += bin.longValue() * 1000;\n        }\n        long onesDiffSum = onesDiff;\n\
    \        long tensDiffSum = tensDiff;\n        long hundredsDiffSum = hundredsDiff;\n\
    \        long thousandsDiffSum = thousandsDiff;\n        for (long i : arr) {\n\
    \            long bin = Long.parseLong(Integer.toBinaryString(i), 2);\n      \
    \      onesDiffSum += bin.longValue();\n            tensDiffSum += bin.longValue()\
    \ * 10;\n            hundredsDiffSum += bin.longValue() * 100;\n            thousandsDiffSum\
    \ += bin.longValue() * 1000;\n        }\n        long onesDiffSumDiff = onesDiffSum\
    \ - onesDiff;\n        long tensDiff\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfjhtye47.java:63: error: ';' expected\n        long tensDiff\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i % 2 == 1) {\n               \
    \ ones++;\n            } else if (i % 10 == 1) {\n                tens++;\n  \
    \          } else if (i % 100 == 1) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 1) {\n                thousands++;\n            } else\
    \ {\n                result.add(i);\n            }\n        }\n        long onesSorted\
    \ = ones;\n        long tensSorted = tens;\n        long hundredsSorted = hundreds;\n\
    \        long thousandsSorted = thousands;\n        if (onesSorted > tensSorted)\
    \ {\n            onesSorted = tensSorted;\n        }\n        if (onesSorted >\
    \ hundredsSorted) {\n            onesSorted = hundredsSorted;\n        }\n   \
    \     if (onesSorted > thousandsSorted) {\n            onesSorted = thousandsSorted;\n\
    \        }\n        if (tensSorted > hundredsSorted) {\n            tensSorted\
    \ = hundredsSorted;\n        }\n        if (tensSorted > thousandsSorted) {\n\
    \            tensSorted = thousandsSorted;\n        }\n        if (hundredsSorted\
    \ > thousandsSorted) {\n            hundredsSorted = thousandsSorted;\n      \
    \  }\n        if (hundredsSorted > onesSorted) {\n            hundredsSorted =\
    \ onesSorted;\n        }\n        if (thousandsSorted > onesSorted) {\n      \
    \      thousandsSorted = onesSorted;\n        }\n        if (thousandsSorted >\
    \ tensSorted) {\n            thousandsSorted = tensSorted;\n        }\n      \
    \  if (onesSorted > hundredsSorted) {\n            onesSorted = hundredsSorted;\n\
    \        }\n        if (onesSorted > thousandsSorted) {\n            onesSorted\
    \ = thousandsSorted;\n        }\n        if (tensSorted > hundredsSorted) {\n\
    \            tensSorted = hundredsSorted;\n        }\n        if (tensSorted >\
    \ thousandsSorted) {\n            tensSorted = thousandsSorted;\n        }\n \
    \       if (hundredsSorted > thousandsSorted) {\n            hundredsSorted =\
    \ thousandsSorted;\n        }\n        if (hundredsSorted > onesSorted) {\n  \
    \          hundredsSorted = onesSorted;\n        }\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl6tj9rwx.java:85: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.intValue() == 1) {\n        \
    \        ones++;\n            } else if (i.intValue() == 10) {\n             \
    \   tens++;\n            } else if (i.intValue() == 100) {\n                hundreds++;\n\
    \            } else if (i.intValue() == 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 10 + tens * 10 +\
    \ hundreds * 10 + thousands * 10;\n        long tensDecimal = tens * 10 + hundreds\
    \ * 10 + thousands * 10;\n        long hundredsDecimal = (hundreds * 10 + thousands)\
    \ * 10;\n        long thousandsDecimal = (thousands * 10);\n        long totalDecimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ maxDecimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long minDecimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long maxDecimalDecimal = maxDecimal * 10;\n        long minDecimalDecimal\
    \ = minDecimal * 10;\n        long maxDecimalDecimalDecimal = maxDecimalDecimal\
    \ * 10;\n        long minDecimalDecimalDecimal = minDecimalDecimal * 10;\n   \
    \     long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal * 10;\n\
    \        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimal * 10;\n\
    \        long maxDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimal\
    \ * 10;\n        long minDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq0gwxnq6.java:54: error: ';' expected\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimal\n                                                      \
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (Long num : arr) {\n            total +=\
    \ num;\n            if (num == 1) {\n                ones++;\n            } else\
    \ if (num == 10) {\n                tens++;\n            } else if (num == 100)\
    \ {\n                hundreds++;\n            } else if (num == 1000) {\n    \
    \            thousands++;\n            }\n        }\n        long onesTotal =\
    \ ones * ones;\n        long tensTotal = tens * tens;\n        long hundredsTotal\
    \ = hundreds * hundreds;\n        long thousandsTotal = thousands * thousands;\n\
    \        long totalTotal = total * total;\n        long onesTotalTotal = onesTotal\
    \ * onesTotal;\n        long tensTotalTotal = tensTotal * tensTotal;\n       \
    \ long hundredsTotalTotal = hundredsTotal * hundredsTotal;\n        long thousandsTotalTotal\
    \ = thousandsTotal * thousandsTotal;\n        long totalTotalTotal = totalTotal\
    \ * totalTotal;\n        long onesTotalTotalTotal = onesTotalTotal * onesTotalTotal;\n\
    \        long tensTotalTotalTotal = tensTotalTotal * tensTotalTotal;\n       \
    \ long hundredsTotalTotal = hundredsTotalTotal * hundredsTotalTotal;\n       \
    \ long thousandsTotalTotal = thousandsTotalTotal * thousandsTotalTotal;\n    \
    \    long totalTotalTotalTotal = totalTotalTotal * totalTotalTotal;\n        long\
    \ onesTotalTotalTotalTotal = onesTotalTotalTotal * onesTotalTotalTotal;\n    \
    \    long tensTotalTotalTotal = tensTotalTotal * tensTotalTotal;\n        long\
    \ hundredsTotalTotalTotal = hundredsTotalTotal * hundredsTotalTotal;\n       \
    \ long thousandsTotalTotalTotal = thousandsTotalTotal * thousandsTotalTotal;\n\
    \        long totalTotalTotalTotalTotal = totalTotalTotalTotal * totalTotalTotalTotal;\n\
    \        long onesTotalTotalTotalTotalTotal = onesTotalTotalTotalTotal * onesTotalTotalTotalTotal;\n\
    \        long tensTotalTotalTotalTotal = tensTotalTotalTotal * tensTotalTotalTotal;\n\
    \        long hundredsTotalTotalTotalTotal = hundredsTotalTotalTotal * hundredsTotalTotalTotal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi2tuu9je.java:47: error: variable hundredsTotalTotal is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long hundredsTotalTotal\
    \ = hundredsTotalTotal * hundredsTotalTotal;\n             ^\n/tmp/tmpi2tuu9je.java:48:\
    \ error: variable thousandsTotalTotal is already defined in method sortArray(ArrayList<Long>)\n\
    \        long thousandsTotalTotal = thousandsTotalTotal * thousandsTotalTotal;\n\
    \             ^\n/tmp/tmpi2tuu9je.java:51: error: variable tensTotalTotalTotal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long tensTotalTotalTotal\
    \ = tensTotalTotal * tensTotalTotal;\n             ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (long num : arr) {\n   \
    \         if (num == 1) {\n                onesCount++;\n            } else if\
    \ (num == 10) {\n                tensCount++;\n            } else if (num == 100)\
    \ {\n                hundredsCount++;\n            } else if (num > 100) {\n \
    \               thousandsCount++;\n            }\n        }\n        long onesCount2\
    \ = onesCount * ones;\n        long tensCount2 = tensCount * tens;\n        long\
    \ hundredsCount2 = hundredsCount * hundreds;\n        long thousandsCount2 = thousandsCount\
    \ * thousands;\n        long onesCount3 = onesCount2 * ones;\n        long tensCount3\
    \ = tensCount2 * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n\
    \        long thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4\
    \ = onesCount3 * ones;\n        long tensCount4 = tensCount3 * tens;\n       \
    \ long hundredsCount4 = hundredsCount3 * hundreds;\n        long thousandsCount4\
    \ = thousandsCount3 * thousands;\n        long onesCount5 = onesCount4 * ones;\n\
    \        long tensCount5 = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4\
    \ * hundreds;\n        long thousandsCount5 = thousandsCount4 * thousands;\n \
    \       long onesCount6 = onesCount5 * ones;\n        long tensCount6 = tensCount5\
    \ * tens;\n        long hundredsCount6 = hundredsCount5 * hundreds;\n        long\
    \ thousandsCount6 = thousandsCount5 * thousands;\n        long onesCount7 = onesCount6\
    \ * ones;\n        long tensCount7 = tensCount6 * tens;\n        long hundredsCount7\
    \ = hundredsCount6 * hundreds;\n        long thousands\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp56txwkxr.java:71: error: ';' expected\n        long thousands\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num >= 1000 && num < 1000000) {\n                thousands++;\n   \
    \         } else {\n                throw new RuntimeException(\"Invalid input\"\
    );\n            }\n        }\n        long onesDecimal = ones * 10 + tens * 100\
    \ + hundreds * 1000;\n        long tensDecimal = tens * 10;\n        long hundredsDecimal\
    \ = (hundreds * 100) * 10;\n        long thousandsDecimal = (thousands * 1000)\
    \ * 10;\n        long onesDecimalDecimal = onesDecimal * 10;\n        long tensDecimalDecimal\
    \ = tensDecimal * 10;\n        long hundredsDecimalDecimal = (hundredsDecimal\
    \ * 100) * 10;\n        long thousandsDecimalDecimal = (thousandsDecimal * 1000)\
    \ * 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal * 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal * 10;\n        long\
    \ hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal * 100) * 10;\n     \
    \   long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal * 1000) * 10;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal * 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ * 100) * 10;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ * 1000) * 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ * 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimalDecimal\
    \ * 100) * 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimalDecimal\
    \ * 1000) * 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimal * 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimal * 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = (hundredsDecimalDecimalDecimalDecimalDecimal * 100) * 10;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw51zcdnu.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThous\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppw1bpvg2.java:41: error: ';' expected\n        long oneThous\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (Long i : arr) {\n                if (i == 1) {\n           \
    \         result.add(i);\n                }\n            }\n        } else {\n\
    \            Collections.sort(arr);\n            for (Long i : arr) {\n      \
    \          if (i == 0) {\n                    result.add(i);\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvv0tzsk.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            } else if (i > 0) {\n                tens += i;\n       \
    \     } else if (i > 0) {\n                hundreds += i;\n            } else\
    \ if (i > 0) {\n                thousands += i;\n            }\n        }\n  \
    \      long onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n            hundredsCount\
    \ = onesCount;\n        }\n        if (onesCount > thousandsCount) {\n       \
    \     onesCount = thousandsCount;\n            thousandsCount = onesCount;\n \
    \       }\n        if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \            hundredsCount = tensCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n            thousandsCount = tensCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n            thousandsCount = hundredsCount;\n        }\n\
    \        if (hundredsCount > onesCount) {\n            hundredsCount = onesCount;\n\
    \            onesCount = hundredsCount;\n        }\n        if (thousandsCount\
    \ > onesCount) {\n            thousandsCount = onesCount;\n            onesCount\
    \ = thousandsCount;\n        }\n        if (thousandsCount > tensCount) {\n  \
    \          thousandsCount = tensCount;\n            tensCount = thousandsCount;\n\
    \        }\n        if (onesCount > tensCount) {\n            onesCount = tensCount;\n\
    \            tensCount = onesCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            hundredsCount = onesCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n            thousandsCount = onesCount;\n        }\n      \
    \  if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \            thousandsCount = tensCount;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8hxiokwt.java:85: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 100;\n        long\
    \ tensDecimal = tens * 10;\n        long hundredsDecimal = hundreds * 100;\n \
    \       long thousandsDecimal = thousands * 1000;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long onesDecimal2\
    \ = ones * 10;\n        long tensDecimal2 = tens * 100;\n        long hundredsDecimal2\
    \ = hundreds * 1000;\n        long thousandsDecimal2 = thousands * 10000;\n  \
    \      long decimal2 = onesDecimal2 + tensDecimal2 + hundredsDecimal2 + thousandsDecimal2;\n\
    \        long onesDecimal3 = ones * 100;\n        long tensDecimal3 = tens * 10;\n\
    \        long hundredsDecimal3 = hundreds * 100;\n        long thousandsDecimal3\
    \ = thousands * 1000;\n        long decimal3 = onesDecimal3 + tensDecimal3 + hundredsDecimal3\
    \ + thousandsDecimal3;\n        long onesDecimal4 = ones * 100;\n        long\
    \ tensDecimal4 = tens * 10;\n        long hundredsDecimal4 = hundreds * 100;\n\
    \        long thousandsDecimal4 = thousands * 1000;\n        long decimal4 = onesDecimal4\
    \ + tensDecimal4 + hundredsDecimal4 + thousandsDecimal4;\n        long onesDecimal5\
    \ = ones * 100;\n        long tensDecimal5 = tens * 10;\n        long hundredsDecimal5\
    \ = hundreds * 100;\n        long thousandsDecimal5 = thousands * 1000;\n    \
    \    long decimal5 = onesDecimal5 + tensDecimal5 + hundredsDecimal5 + thousandsDecimal5;\n\
    \        long onesDecimal6 = ones * 100;\n        long tensDecimal6 = tens * 10;\n\
    \        long hundredsDecimal6 = hundreds * 100;\n        long thousandsDecimal6\
    \ = thousands * 1000;\n        long decimal6 = onesDecimal6 + tensDecimal6 + hundred\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjtnji93j.java:63: error: ';' expected\n        long decimal6 =\
    \ onesDecimal6 + tensDecimal6 + hundred\n                                    \
    \                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            } else if (i == 0) {\n                result.add(i);\n  \
    \          } else if (i < 0) {\n                tens += i;\n            } else\
    \ if (i < 10) {\n                hundreds += i;\n            } else if (i < 100)\
    \ {\n                thousands += i;\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            tensCount = onesCount\
    \ / 10;\n            hundredsCount = onesCount % 10;\n        } else if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n            tensCount\
    \ = onesCount / 100;\n            thousandsCount = onesCount % 100;\n        }\n\
    \        long tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount;\n        if (tensCount2 > hundredsCount2)\
    \ {\n            tensCount2 = hundredsCount2;\n            hundredsCount2 = tensCount2\
    \ / 10;\n            thousandsCount2 = tensCount2 % 10;\n        } else if (tensCount2\
    \ > thousandsCount2) {\n            tensCount2 = thousandsCount2;\n          \
    \  thousandsCount2 = tensCount2 / 100;\n            hundredsCount2 = tensCount2\
    \ % 100;\n        }\n        long hundredsCount3 = hundredsCount2;\n        long\
    \ thousandsCount3 = thousandsCount2;\n        if (hundredsCount3 > thousandsCount3)\
    \ {\n            hundredsCount3 = thousandsCount3;\n            thousandsCount3\
    \ = hundredsCount3 / 100;\n            hundredsCount2 = hundredsCount3 % 100;\n\
    \        } else if (hundredsCount3 > hundredsCount2) {\n            hundredsCount3\
    \ = hundredsCount2;\n            hundredsCount2 = hundredsCount3 / 10;\n     \
    \       thousandsCount3 = hundredsCount3 % 10;\n        } else if (hundredsCount3\
    \ > thousandsCount2) {\n            hundredsCount3 = thousandsCount2;\n      \
    \      thousandsCount\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt7_wb238.java:72: error: not a statement\n            thousandsCount\n\
    \            ^\n/tmp/tmpt7_wb238.java:72: error: ';' expected\n            thousandsCount\n\
    \                          ^\n/tmp/tmpt7_wb238.java:74: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneThousandThousands\
    \ = 0;\n        long oneHundredThousands = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandThousands = 0;\n        long oneThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousands = 0;\n        long oneHundredThousandThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousands = 0;\n       \
    \ long oneHundredThousandHundredThousandHundreds = 0;\n        long oneHundredThousandThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousands = 0;\n\
    \        long oneThousandHundredThousandHundredThousandHundreds = 0;\n       \
    \ long oneHundredThousandThousandHundredThousandHundredThousands = 0;\n      \
    \  long oneHundredThousandHundredThousandHundredThousandHundredThousands = 0;\n\
    \        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHund\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq17v03q8.java:44: error: ';' expected\n        long oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHund\n\
    \                                                                            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones--;\n            } else {\n                zeros--;\n       \
    \     }\n        }\n        if (ones > maxOnes) {\n            maxOnes = ones;\n\
    \        }\n        if (zeros > maxZeros) {\n            maxZeros = zeros;\n \
    \       }\n        long maxOnesDecimal = ones / maxOnes;\n        long maxZerosDecimal\
    \ = zeros / maxZeros;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                result.add(maxOnesDecimal);\n            } else {\n  \
    \              result.add(maxZerosDecimal);\n            }\n        }\n      \
    \  return result;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprt0ml__a.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ tenHundreds = 0;\n        long oneHundreds = 0;\n        long tenThousandHundreds\
    \ = 0;\n        long oneThousandHundreds = 0;\n        long tenHundredThousands\
    \ = 0;\n        long oneHundredThousands = 0;\n        long tenThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long tenHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundreds = 0;\n        long tenThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundreds = 0;\n        long tenHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousands = 0;\n        long tenThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousands = 0;\n       \
    \ long tenHundredThousandHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long tenThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneThousandHundredThousandHundredThousandHundredThousands = 0;\n\
    \        long tenHundredThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long tenThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long tenHundredThousandHundredThousandHundredThousandHundredThousandHundredThousand\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzjbpq00d.java:48: error: ';' expected\n        long tenHundredThousandHundredThousandHundredThousandHundredThousandHundredThousand\n\
    \                                                                            \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (Long i : arr) {\n                if (i == 1) {\n           \
    \         result.add(i);\n                }\n            }\n        } else {\n\
    \            Collections.sort(arr);\n            for (Long i : arr) {\n      \
    \          if (i == 0) {\n                    result.add(i);\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpepuoue88.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (Long l : arr) {\n            total += l;\n\
    \            if (l == 1) {\n                ones++;\n            } else if (l\
    \ == 10) {\n                tens++;\n            } else if (l == 100) {\n    \
    \            hundreds++;\n            } else if (l == 1000) {\n              \
    \  thousands++;\n            }\n        }\n        long onesTotal = ones * total;\n\
    \        long tensTotal = tens * total;\n        long hundredsTotal = hundreds\
    \ * total;\n        long thousandsTotal = thousands * total;\n        long totalTotal\
    \ = onesTotal + tensTotal + hundredsTotal + thousandsTotal;\n        long onesTotal2\
    \ = ones * onesTotal;\n        long tensTotal2 = tens * tensTotal;\n        long\
    \ hundredsTotal2 = hundreds * hundredsTotal;\n        long thousandsTotal2 = thousands\
    \ * thousandsTotal;\n        long totalTotal2 = onesTotal2 + tensTotal2 + hundredsTotal2\
    \ + thousandsTotal2;\n        long onesTotal3 = ones * onesTotal2;\n        long\
    \ tensTotal3 = tens * tensTotal2;\n        long hundredsTotal3 = hundreds * hundredsTotal2;\n\
    \        long thousandsTotal3 = thousands * thousandsTotal2;\n        long totalTotal3\
    \ = onesTotal3 + tensTotal3 + hundredsTotal3 + thousandsTotal3;\n        long\
    \ onesTotal4 = ones * onesTotal3;\n        long tensTotal4 = tens * tensTotal3;\n\
    \        long hundredsTotal4 = hundreds * hundredsTotal3;\n        long thousandsTotal4\
    \ = thousands * thousandsTotal3;\n        long totalTotal4 = onesTotal4 + tensTotal4\
    \ + hundredsTotal4 + thousandsTotal4;\n        long onesTotal5 = ones * onesTotal4;\n\
    \        long tensTotal5 = tens * tensTotal4;\n        long hundredsTotal5 = hundreds\
    \ * hundredsTotal4;\n        long thousandsTotal5 = thousands * thousandsTotal4;\n\
    \        long totalTotal5 = onesTotal5 + tensTotal5 + hundredsTotal5 + thousandsTotal5;\n\
    \        long onesTotal6 = ones * onesTotal\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77zw9whi.java:60: error: ';' expected\n        long onesTotal6\
    \ = ones * onesTotal\n                                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (long num : arr) {\n            total +=\
    \ num;\n            if (num == 1) {\n                ones++;\n            } else\
    \ if (num == 10) {\n                tens++;\n            } else if (num == 100)\
    \ {\n                hundreds++;\n            } else if (num > 100 && num < 1000)\
    \ {\n                thousands++;\n            }\n        }\n        long onesTotal\
    \ = ones * ones;\n        long tensTotal = tens * tens;\n        long hundredsTotal\
    \ = hundreds * hundreds;\n        long thousandsTotal = thousands * thousands;\n\
    \        long total = total + onesTotal + tensTotal + hundredsTotal + thousandsTotal;\n\
    \        long onesTotal2 = ones * ones * ones;\n        long tensTotal2 = tens\
    \ * tens * tens;\n        long hundredsTotal2 = hundreds * hundreds * hundreds;\n\
    \        long thousandsTotal2 = thousands * thousands * thousands;\n        long\
    \ total2 = total + onesTotal2 + tensTotal2 + hundredsTotal2 + thousandsTotal2;\n\
    \        long onesTotal3 = ones * ones * ones * ones;\n        long tensTotal3\
    \ = tens * tens * tens * tens;\n        long hundredsTotal3 = hundreds * hundreds\
    \ * hundreds * hundreds;\n        long thousandsTotal3 = thousands * thousands\
    \ * thousands * thousands;\n        long total3 = total + onesTotal3 + tensTotal3\
    \ + hundredsTotal3 + thousandsTotal3;\n        long onesTotal4 = ones * ones *\
    \ ones * ones * ones;\n        long tensTotal4 = tens * tens * tens * tens * tens;\n\
    \        long hundredsTotal4 = hundreds * hundreds * hundreds * hundreds * hundreds;\n\
    \        long thousandsTotal4 = thousands * thousands * thousands * thousands\
    \ * thousands;\n        long total4 = total + onesTotal4 + tensTotal4 + hundredsTotal4\
    \ + thousandsTotal4;\n        long onesTotal5 = ones * ones * ones * ones * ones\
    \ * ones;\n        long tensTotal5 = tens * tens * tens * tens * tens * tens;\n\
    \        long hundredsTotal5 = hundreds * hundreds * hund\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4f9mz8dd.java:57: error: ';' expected\n        long hundredsTotal5\
    \ = hundreds * hundreds * hund\n                                             \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens /\
    \ 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n        long thousandsDecimal\
    \ = (thousands / 10) * 1000;\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        long decimal2 = onesDecimal +\
    \ tensDecimal + hundredsDecimal;\n        long decimal3 = onesDecimal + hundredsDecimal;\n\
    \        long decimal4 = onesDecimal;\n        long decimal5 = thousandsDecimal;\n\
    \        long decimal6 = hundredsDecimal;\n        long decimal7 = tensDecimal;\n\
    \        long decimal8 = onesDecimal;\n        long decimal9 = thousandsDecimal;\n\
    \        long decimal10 = hundredsDecimal;\n        long decimal11 = tensDecimal;\n\
    \        long decimal12 = onesDecimal;\n        long decimal13 = thousandsDecimal;\n\
    \        long decimal14 = hundredsDecimal;\n        long decimal15 = tensDecimal;\n\
    \        long decimal16 = onesDecimal;\n        long decimal17 = thousandsDecimal;\n\
    \        long decimal18 = hundredsDecimal;\n        long decimal19 = tensDecimal;\n\
    \        long decimal20 = onesDecimal;\n        long decimal21 = thousandsDecimal;\n\
    \        long decimal22 = hundredsDecimal;\n        long decimal23 = tensDecimal;\n\
    \        long decimal24 = onesDecimal;\n        long decimal25 = thousandsDecimal;\n\
    \        long decimal26 = hundredsDecimal;\n        long decimal27 = tensDecimal;\n\
    \        long decimal28 = onesDecimal;\n        long decimal29 = thousandsDecimal;\n\
    \        long decimal30 = hundredsDecimal;\n        long decimal31 = tensDecimal;\n\
    \        long decimal32 = onesDecimal;\n        long decimal33 = thousands\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8yclvtq1.java:69: error: ';' expected\n        long decimal33 =\
    \ thousands\n                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxValue = maxOnes + maxZeros;\n        long maxValue2\
    \ = maxZeros + maxOnes;\n        long maxValue3 = maxZeros + maxOnes + maxZeros;\n\
    \        long maxValue4 = maxZeros + maxOnes + maxZeros + maxOnes;\n        long\
    \ maxValue5 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros;\n        long\
    \ maxValue6 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes;\n\
    \        long maxValue7 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros +\
    \ maxOnes + maxZeros;\n        long maxValue8 = maxZeros + maxOnes + maxZeros\
    \ + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes;\n        long maxValue9\
    \ = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes + maxZeros +\
    \ maxOnes + maxZeros;\n        long maxValue10 = maxZeros + maxOnes + maxZeros\
    \ + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes;\n\
    \        long maxValue11 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros\
    \ + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes + maxZeros;\n        long\
    \ maxValue12 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes +\
    \ maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes;\n        long\
    \ maxValue13 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes +\
    \ maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes + maxZeros;\n \
    \       long maxValue14 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros +\
    \ maxOnes + maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes + maxZeros;\n\
    \        long maxValue15 = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros\
    \ + maxOnes + maxZeros + maxOnes + maxZeros + maxOne\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplibwtmdt.java:43: error: ';' expected\n        long maxValue15\
    \ = maxZeros + maxOnes + maxZeros + maxOnes + maxZeros + maxOnes + maxZeros +\
    \ maxOnes + maxZeros + maxOne\n                                              \
    \                                                                            \
    \     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            } else if (i > 0) {\n                tens += i;\n       \
    \     } else if (i > 0) {\n                hundreds += i;\n            } else\
    \ if (i > 0) {\n                thousands += i;\n            }\n        }\n  \
    \      long onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        if (onesCount\
    \ > hundredsCount) {\n            result.add(onesCount);\n            result.add(hundredsCount);\n\
    \        } else if (onesCount > thousandsCount) {\n            result.add(onesCount);\n\
    \            result.add(thousandsCount);\n        } else if (tensCount > hundredsCount)\
    \ {\n            result.add(tensCount);\n            result.add(hundredsCount);\n\
    \        } else if (tensCount > thousandsCount) {\n            result.add(tensCount);\n\
    \            result.add(thousandsCount);\n        } else if (hundredsCount > thousandsCount)\
    \ {\n            result.add(hundredsCount);\n            result.add(thousandsCount);\n\
    \        } else {\n            result.add(onesCount);\n            result.add(tensCount);\n\
    \            result.add(hundredsCount);\n        }\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cnijtia.java:61)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 2) {\n                tens++;\n     \
    \       } else if (num == 4) {\n                hundreds++;\n            } else\
    \ if (num == 8) {\n                thousands++;\n            } else {\n      \
    \          result.add(num);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long totalCount = onesCount\
    \ + tensCount + hundredsCount + thousandsCount;\n        long onesCount2 = onesCount\
    \ * onesCount;\n        long tensCount2 = tensCount * tensCount;\n        long\
    \ hundredsCount2 = hundredsCount * hundredsCount;\n        long thousandsCount2\
    \ = thousandsCount * thousandsCount;\n        long totalCount2 = onesCount2 +\
    \ tensCount2 + hundredsCount2 + thousandsCount2;\n        long onesCount3 = onesCount\
    \ * tensCount;\n        long tensCount3 = tensCount * hundredsCount;\n       \
    \ long hundredsCount3 = hundredsCount * thousandsCount;\n        long thousandsCount3\
    \ = thousandsCount * onesCount;\n        long totalCount3 = onesCount3 + tensCount3\
    \ + hundredsCount3 + thousandsCount3;\n        long onesCount4 = onesCount * hundredsCount;\n\
    \        long tensCount4 = tensCount * thousandsCount;\n        long hundredsCount4\
    \ = hundredsCount * onesCount;\n        long thousandsCount4 = thousandsCount\
    \ * tensCount;\n        long totalCount4 = onesCount4 + tensCount4 + hundredsCount4\
    \ + thousandsCount4;\n        long onesCount5 = onesCount * thousandsCount;\n\
    \        long tensCount5 = tensCount * hundredsCount;\n        long hundredsCount5\
    \ = hundredsCount * tensCount;\n        long thousandsCount5 = thousandsCount\
    \ * onesCount;\n        long totalCount5 = onesCount5 + tensCount5 + hundredsCount5\
    \ + thousands\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9e4pzcf1.java:59: error: ';' expected\n        long totalCount5\
    \ = onesCount5 + tensCount5 + hundredsCount5 + thousands\n                   \
    \                                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 2) {\n                tens++;\n     \
    \       } else if (num == 4) {\n                hundreds++;\n            } else\
    \ if (num == 8) {\n                thousands++;\n            }\n        }\n  \
    \      if (ones == 0) {\n            ones = 1;\n        }\n        if (tens ==\
    \ 0) {\n            tens = 1;\n        }\n        if (hundreds == 0) {\n     \
    \       hundreds = 1;\n        }\n        if (thousands == 0) {\n            thousands\
    \ = 1;\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long ones\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm5dqnyg8.java:65: error: ';' expected\n        long ones\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThous\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsks7zdti.java:29: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmpsks7zdti.java:30: error:\
    \ ';' expected\n        long oneHundredThousandHundredThousands++;\n         \
    \                                      ^\n/tmp/tmpsks7zdti.java:31: error: ';'\
    \ expected\n        long oneHundredThousandHundredThousands++;\n             \
    \                                  ^\n/tmp/tmpsks7zdti.java:32: error: ';' expected\n\
    \        long oneHundredThousandHundredThousands++;\n                        \
    \                       ^\n/tmp/tmpsks7zdti.java:33: error: ';' expected\n   \
    \     long oneHundredThousandHundredThousands++;\n                           \
    \                    ^\n/tmp/tmpsks7zdti.java:34: error: ';' expected\n      \
    \  long oneHundredThousandHundredThousands++;\n                              \
    \                 ^\n/tmp/tmpsks7zdti.java:35: error: ';' expected\n        long\
    \ oneHundredThousandHundredThousands++;\n                                    \
    \           ^\n/tmp/tmpsks7zdti.java:36: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmpsks7zdti.java:37: error:\
    \ ';' expected\n        long oneHundredThousandHundredThousands++;\n         \
    \                                      ^\n/tmp/tmpsks7zdti.java:38: error: ';'\
    \ expected\n        long oneHundredThousandHundredThousands++;\n             \
    \                                  ^\n/tmp/tmpsks7zdti.java:39: error: ';' expected\n\
    \        long oneHundredThousandHundredThousands++;\n                        \
    \                       ^\n/tmp/tmpsks7zdti.java:40: error: ';' expected\n   \
    \     long oneHundredThousandHundredThousands++;\n                           \
    \                    ^\n/tmp/tmpsks7zdti.java:41: error: ';' expected\n      \
    \  long oneHundredThousandHundredThousands++;\n                              \
    \                 ^\n/tmp/tmpsks7zdti.java:42: error: ';' expected\n        long\
    \ oneHundredThousandHundredThousands++;\n                                    \
    \           ^\n/tmp/tmpsks7zdti.java:43: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmpsks7zdti.java:44: error:\
    \ ';' expected\n        long oneHundredThousandHundredThousands++;\n         \
    \                                      ^\n/tmp/tmpsks7zdti.java:45: error: ';'\
    \ expected\n        long oneHundredThousandHundredThousands++;\n             \
    \                                  ^\n/tmp/tmpsks7zdti.java:46: error: ';' expected\n\
    \        long oneHundredThousandHundredThousands++;\n                        \
    \                       ^\n/tmp/tmpsks7zdti.java:47: error: ';' expected\n   \
    \     long oneHundredThousandHundredThousands++;\n                           \
    \                    ^\n/tmp/tmpsks7zdti.java:48: error: ';' expected\n      \
    \  long oneHundredThousandHundredThousands++;\n                              \
    \                 ^\n/tmp/tmpsks7zdti.java:49: error: ';' expected\n        long\
    \ oneHundredThousandHundredThousands++;\n                                    \
    \           ^\n/tmp/tmpsks7zdti.java:50: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmpsks7zdti.java:51: error:\
    \ ';' expected\n        long oneHundredThous\n                            ^\n\
    23 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else {\n                total += num;\n            }\n        }\n    \
    \    long onesTotal = ones * ones;\n        long tensTotal = tens * tens;\n  \
    \      long hundredsTotal = hundreds * hundreds;\n        long thousandsTotal\
    \ = thousands * thousands;\n        long totalTotal = total * total;\n       \
    \ long onesTotal2 = onesTotal * ones;\n        long tensTotal2 = tensTotal * tens;\n\
    \        long hundredsTotal2 = hundredsTotal * hundreds;\n        long thousandsTotal2\
    \ = thousandsTotal * thousands;\n        long totalTotal2 = totalTotal * total;\n\
    \        long onesTotal3 = onesTotal2 * ones;\n        long tensTotal3 = tensTotal2\
    \ * tens;\n        long hundredsTotal3 = hundredsTotal2 * hundreds;\n        long\
    \ thousandsTotal3 = thousandsTotal2 * thousands;\n        long totalTotal3 = totalTotal2\
    \ * total;\n        long onesTotal4 = onesTotal3 * ones;\n        long tensTotal4\
    \ = tensTotal3 * tens;\n        long hundredsTotal4 = hundredsTotal3 * hundreds;\n\
    \        long thousandsTotal4 = thousandsTotal3 * thousands;\n        long totalTotal4\
    \ = totalTotal3 * total;\n        long onesTotal5 = onesTotal4 * ones;\n     \
    \   long tensTotal5 = tensTotal4 * tens;\n        long hundredsTotal5 = hundredsTotal4\
    \ * hundreds;\n        long thousandsTotal5 = thousandsTotal4 * thousands;\n \
    \       long totalTotal5 = totalTotal4 * total;\n        long onesTotal6 = onesTotal5\
    \ * ones;\n        long tensTotal6 = tensTotal5 * tens;\n        long hundredsTotal6\
    \ = hundredsTotal5 * hundreds;\n        long thousandsTotal6 = thousandsTotal5\
    \ * thousands;\n        long totalTotal6 = totalTotal5 * total;\n        long\
    \ onesTotal7 = ones\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp4ys2c8y.java:66: error: ';' expected\n        long onesTotal7\
    \ = ones\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxNum = ones + zeros;\n        long maxOnesNum = ones;\n\
    \        long maxZerosNum = zeros;\n        long maxNumNum = ones + zeros;\n \
    \       long maxOnesNumNum = ones;\n        long maxZerosNumNum = zeros;\n   \
    \     long maxNumNumNum = ones + zeros;\n        long maxOnesNumNumNum = ones;\n\
    \        long maxZerosNumNumNum = zeros;\n        long maxNumNumNumNum = ones\
    \ + zeros;\n        long maxOnesNumNumNumNum = ones;\n        long maxZerosNumNumNumNum\
    \ = zeros;\n        long maxNumNumNumNumNum = ones + zeros;\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n        long maxZerosNumNumNumNum = zeros;\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n        long maxOnesNumNumNumNumNum = ones;\n        long maxZerosNumNumNumNum\
    \ = zeros;\n        long maxNumNumNumNumNum = ones + zeros;\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n        long maxZerosNumNumNumNum = zeros;\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n        long maxOnesNumNumNumNumNum = ones;\n        long maxZerosNumNumNumNum\
    \ = zeros;\n        long maxNumNumNumNumNum = ones + zeros;\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n        long maxZerosNumNumNumNum = zeros;\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n        long maxOnesNumNumNumNumNum = ones;\n        long maxZerosNumNumNumNum\
    \ = zeros;\n        long maxNumNumNumNumNum = ones + zeros;\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n        long maxZerosNumNumNumNum = zeros;\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ulzxyax.java:43: error: variable maxZerosNumNumNumNum is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long maxZerosNumNumNumNum\
    \ = zeros;\n             ^\n/tmp/tmp9ulzxyax.java:44: error: variable maxNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n             ^\n/tmp/tmp9ulzxyax.java:45: error: variable maxOnesNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n             ^\n/tmp/tmp9ulzxyax.java:46: error: variable maxZerosNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosNumNumNumNum\
    \ = zeros;\n             ^\n/tmp/tmp9ulzxyax.java:47: error: variable maxNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n             ^\n/tmp/tmp9ulzxyax.java:48: error: variable maxOnesNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n             ^\n/tmp/tmp9ulzxyax.java:49: error: variable maxZerosNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosNumNumNumNum\
    \ = zeros;\n             ^\n/tmp/tmp9ulzxyax.java:50: error: variable maxNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n             ^\n/tmp/tmp9ulzxyax.java:51: error: variable maxOnesNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n             ^\n/tmp/tmp9ulzxyax.java:52: error: variable maxZerosNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosNumNumNumNum\
    \ = zeros;\n             ^\n/tmp/tmp9ulzxyax.java:53: error: variable maxNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n             ^\n/tmp/tmp9ulzxyax.java:54: error: variable maxOnesNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n             ^\n/tmp/tmp9ulzxyax.java:55: error: variable maxZerosNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosNumNumNumNum\
    \ = zeros;\n             ^\n/tmp/tmp9ulzxyax.java:56: error: variable maxNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n             ^\n/tmp/tmp9ulzxyax.java:57: error: variable maxOnesNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n             ^\n/tmp/tmp9ulzxyax.java:58: error: variable maxZerosNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosNumNumNumNum\
    \ = zeros;\n             ^\n/tmp/tmp9ulzxyax.java:59: error: variable maxNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n             ^\n/tmp/tmp9ulzxyax.java:60: error: variable maxOnesNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesNumNumNumNumNum\
    \ = ones;\n             ^\n/tmp/tmp9ulzxyax.java:61: error: variable maxZerosNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosNumNumNumNum\
    \ = zeros;\n             ^\n/tmp/tmp9ulzxyax.java:62: error: variable maxNumNumNumNumNum\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxNumNumNumNumNum\
    \ = ones + zeros;\n             ^\n20 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            ones += i;\n        }\n        for\
    \ (Long i : arr) {\n            if (i % 10 == 0) {\n                tens += i;\n\
    \            }\n            if (i % 100 == 0) {\n                hundreds += i;\n\
    \            }\n            if (i % 1000 == 0) {\n                thousands +=\
    \ i;\n            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > hundredsCount) {\n            onesCount\
    \ = hundredsCount;\n            tensCount = onesCount / 10;\n            hundredsCount\
    \ = onesCount % 10;\n        } else if (onesCount > thousandsCount) {\n      \
    \      onesCount = thousandsCount;\n            tensCount = onesCount / 100;\n\
    \            hundredsCount = onesCount % 100;\n        }\n        if (tensCount\
    \ > hundredsCount) {\n            tensCount = hundredsCount;\n            hundredsCount\
    \ = tensCount / 10;\n        } else if (tensCount > thousandsCount) {\n      \
    \      tensCount = thousandsCount;\n            hundredsCount = tensCount / 100;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n            thousandsCount = hundredsCount / 1000;\n    \
    \    } else if (hundredsCount > thousandsCount) {\n            hundredsCount =\
    \ thousandsCount;\n            thousandsCount = hundredsCount / 1000;\n      \
    \  }\n        if (thousandsCount > hundredsCount) {\n            thousandsCount\
    \ = hundredsCount;\n            hundredsCount = thousandsCount / 1000;\n     \
    \   } else if (thousandsCount > hundredsCount) {\n            thousandsCount =\
    \ hundredsCount;\n            hundredsCount = thousandsCount / 1000;\n       \
    \ }\n        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        if (onesCount2 > hundredsCount2) {\n            onesCount2\
    \ = hundredsCount2;\n            tensCount2 = onesCount2 / 10;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphposz6uh.java:79: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long val : arr) {\n            if (val ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        for (Long val : arr) {\n            if (val == 1) {\n    \
    \            ones--;\n            } else {\n                zeros--;\n       \
    \     }\n        }\n        if (ones > maxOnes) {\n            maxOnes = ones;\n\
    \        }\n        if (zeros > maxZeros) {\n            maxZeros = zeros;\n \
    \       }\n        long maxOnesVal = maxOnes;\n        long maxZerosVal = maxZeros;\n\
    \        for (Long val : arr) {\n            if (val == 1) {\n               \
    \ ones++;\n            } else {\n                zeros++;\n            }\n   \
    \     }\n        if (ones > maxOnesVal) {\n            maxOnesVal = ones;\n  \
    \      }\n        if (zeros > maxZerosVal) {\n            maxZerosVal = zeros;\n\
    \        }\n        long maxOnesVal2 = maxOnesVal;\n        long maxZerosVal2\
    \ = maxZerosVal;\n        for (Long val : arr) {\n            if (val == 1) {\n\
    \                ones--;\n            } else {\n                zeros--;\n   \
    \         }\n        }\n        if (ones > maxOnesVal2) {\n            maxOnesVal2\
    \ = ones;\n        }\n        if (zeros > maxZerosVal2) {\n            maxZerosVal2\
    \ = zeros;\n        }\n        long maxOnesVal3 = maxOnesVal2;\n        long maxZerosVal3\
    \ = maxZerosVal2;\n        for (Long val : arr) {\n            if (val == 1) {\n\
    \                ones++;\n            } else {\n                zeros++;\n   \
    \         }\n        }\n        if (ones > maxOnesVal3) {\n            maxOnesVal3\
    \ = ones;\n        }\n        if (zeros > maxZerosVal3) {\n            maxZerosVal3\
    \ = zeros;\n        }\n        long maxOnesVal4 = maxOnesVal3;\n        long maxZerosVal4\
    \ = maxZerosVal3;\n        for (Long val : arr) {\n            if (val == 1) {\n\
    \                ones--;\n            } else {\n                zeros--;\n   \
    \         }\n        }\n        if (ones > maxOnesVal4) {\n            maxOnesVal4\
    \ = ones;\n        }\n        if (zeros > maxZerosVal4) {\n            maxZerosVal4\
    \ = zeros;\n        }\n        long maxOnesVal5 = max\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbo3jpyr6.java:102: error: ';' expected\n        long maxOnesVal5\
    \ = max\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num >= 1000 && num < 1000000) {\n                thousands++;\n   \
    \         }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > tensCount) {\n            onesCount =\
    \ tensCount;\n        }\n        if (onesCount > hundredsCount) {\n          \
    \  onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > hundredsCount) {\n            tensCount = hundredsCount;\n        }\n    \
    \    if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n        }\n        long onesCount2 = ones;\n        long\
    \ tensCount2 = tens;\n        long hundredsCount2 = hundreds;\n        long thousandsCount2\
    \ = thousands;\n        if (onesCount2 > tensCount2) {\n            onesCount2\
    \ = tensCount2;\n        }\n        if (onesCount2 > hundredsCount2) {\n     \
    \       onesCount2 = hundredsCount2;\n        }\n        if (onesCount2 > thousandsCount2)\
    \ {\n            onesCount2 = thousandsCount2;\n        }\n        if (tensCount2\
    \ > hundredsCount2) {\n            tensCount2 = hundredsCount2;\n        }\n \
    \       if (tensCount2 > thousandsCount2) {\n            tensCount2 = thousandsCount2;\n\
    \        }\n        if (hundredsCount2 > thousandsCount2) {\n            hundredsCount2\
    \ = thousandsCount2;\n        }\n        long onesCount3 = ones;\n        long\
    \ tensCount3 = tens;\n        long hundredsCount3 = hundreds;\n        long thousandsCount3\
    \ = thousands;\n        if (onesCount3 > tensCount3) {\n            onesCount3\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfsoi146n.java:83: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfsoi146n.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (Long i : arr) {\n            total += i;\n\
    \            if (i < 100) {\n                hundreds += i;\n            } else\
    \ if (i < 1000) {\n                thousands += i;\n            } else if (i <\
    \ 1000000) {\n                tens += i;\n            } else if (i < 1000000000)\
    \ {\n                ones += i;\n            } else {\n                throw new\
    \ RuntimeException(\"Too many digits!\");\n            }\n        }\n        long\
    \ tensTotal = tens * 10;\n        long hundredsTotal = hundreds * 100;\n     \
    \   long thousandsTotal = thousands * 1000;\n        long onesTotal = ones * 1000;\n\
    \        long tensOnes = tens * ones;\n        long hundredsOnes = hundreds *\
    \ ones;\n        long thousandsOnes = thousands * ones;\n        long onesOnes\
    \ = ones * ones;\n        long tensHundreds = tens * hundreds;\n        long hundredsHundreds\
    \ = hundreds * hundreds;\n        long thousandsHundreds = thousands * hundreds;\n\
    \        long onesHundreds = ones * hundreds;\n        long tensThousands = tens\
    \ * thousands;\n        long hundredsThousands = hundreds * thousands;\n     \
    \   long thousandsThousands = thousands * thousands;\n        long onesThousands\
    \ = ones * thousands;\n        long tensOnesOnes = tens * ones * ones;\n     \
    \   long hundredsOnesOnes = hundreds * ones * ones;\n        long thousandsOnesOnes\
    \ = thousands * ones * ones;\n        long onesOnesOnes = ones * ones * ones;\n\
    \        long tensOnesHundreds = tens * ones * hundreds;\n        long hundredsOnesHundreds\
    \ = hundreds * ones * hundreds;\n        long thousandsOnesHundreds = thousands\
    \ * ones * hundreds;\n        long onesOnesHundreds = ones * ones * hundreds;\n\
    \        long tensOnesThousands = tens * ones * thousands;\n        long hundredsOnesThousands\
    \ = hundreds * ones * thousands;\n        long thousandsOnesThousands = thous\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzg92qtjn.java:63: error: ';' expected\n        long thousandsOnesThousands\
    \ = thous\n                                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1lrpel1b.java:55: error: ';' expected\n        long hundredsDecimal\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            } else\
    \ {\n                throw new RuntimeException(\"Invalid input\");\n        \
    \    }\n        }\n        long onesCount = ones;\n        long tensCount = tens;\n\
    \        long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        long onesSum = 0;\n        long tensSum = 0;\n        long hundredsSum\
    \ = 0;\n        long thousandsSum = 0;\n        for (long i : arr) {\n       \
    \     if (i % 2 == 0) {\n                onesSum += i;\n            } else if\
    \ (i % 10 == 0) {\n                tensSum += i;\n            } else if (i % 100\
    \ == 0) {\n                hundredsSum += i;\n            } else if (i % 1000\
    \ == 0) {\n                thousandsSum += i;\n            } else {\n        \
    \        throw new RuntimeException(\"Invalid input\");\n            }\n     \
    \   }\n        long onesSumCount = onesSum;\n        long tensSumCount = tensSum;\n\
    \        long hundredsSumCount = hundredsSum;\n        long thousandsSumCount\
    \ = thousandsSum;\n        long onesSumCount2 = onesSumCount * onesCount;\n  \
    \      long tensSumCount2 = tensSumCount * tensCount;\n        long hundredsSumCount2\
    \ = hundredsSumCount * hundredsCount;\n        long thousandsSumCount2 = thousandsSumCount\
    \ * thousandsCount;\n        long onesSumCount3 = onesSumCount2 * onesCount;\n\
    \        long tensSumCount3 = tensSumCount2 * tensCount;\n        long hundredsSumCount3\
    \ = hundredsSumCount2 * hundredsCount;\n        long thousandsSumCount3 = thousandsSumCount2\
    \ * thousandsCount;\n        long onesSumCount4 = onesSumCount3 * onesCount;\n\
    \        long tensSumCount4 = tensSumCount3 * tensCount;\n        long hundredsSumCount4\
    \ = hundredsSumCount3 * hundredsCount;\n        long thousandsSumCount4 = thousandsSumCount3\
    \ * thousandsCount;\n        long onesSumCount5 = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp40f3k0gz.java:73: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        for (Long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ if (num == 2) {\n                tens++;\n            } else if (num == 4) {\n\
    \                hundreds++;\n            } else if (num == 8) {\n           \
    \     thousands++;\n            } else if (num == 10) {\n                tenths++;\n\
    \            } else if (num == 100) {\n                oneths++;\n           \
    \ } else {\n                result.add(num);\n            }\n        }\n     \
    \   long onesNum = ones;\n        long tensNum = tens;\n        long hundredsNum\
    \ = hundreds;\n        long thousandsNum = thousands;\n        long tenthsNum\
    \ = tenths;\n        long onethsNum = oneths;\n        long onesNum2 = onesNum;\n\
    \        long tensNum2 = tensNum;\n        long hundredsNum2 = hundredsNum;\n\
    \        long thousandsNum2 = thousandsNum;\n        long tenthsNum2 = tenthsNum;\n\
    \        long onethsNum2 = onethsNum;\n        if (onesNum > onesNum2) {\n   \
    \         onesNum2 = onesNum;\n        }\n        if (tensNum > tensNum2) {\n\
    \            tensNum2 = tensNum;\n        }\n        if (hundredsNum > hundredsNum2)\
    \ {\n            hundredsNum2 = hundredsNum;\n        }\n        if (thousandsNum\
    \ > thousandsNum2) {\n            thousandsNum2 = thousandsNum;\n        }\n \
    \       if (tenthsNum > tenthsNum2) {\n            tenthsNum2 = tenthsNum;\n \
    \       }\n        if (onethsNum > onethsNum2) {\n            onethsNum2 = onethsNum;\n\
    \        }\n        ArrayList<Long> temp = new ArrayList<>();\n        temp.add(onesNum2);\n\
    \        temp.add(tensNum2);\n        temp.add(hundredsNum2);\n        temp.add(thousandsNum2);\n\
    \        temp.add(tenthsNum2);\n        temp.add(onethsNum2);\n        Collections.sort(temp);\n\
    \        onesNum2 = temp.get(0);\n        tensNum2 = temp.get(1);\n        hundredsNum2\
    \ = temp.get(2);\n        thousandsNum2 = temp.get(3);\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfvs54lcm.java:84: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                result.add(ones);\n            }\
    \ else {\n                result.add(zeros);\n            }\n        }\n     \
    \   return result;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9bs1t9u7.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            }\n\
    \        }\n        long onesDecimal = ones / 10;\n        long tensDecimal =\
    \ tens / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hund\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8cktklyi.java:55: error: ';' expected\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hund\n                                                                   \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesCount = ones;\n        long tensCount = tens;\n\
    \        long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \      }\n        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (tensCount > hundredsCount) {\n     \
    \       tensCount = hundredsCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n        }\n\
    \        if (hundredsCount == 0) {\n            hundredsCount = 1;\n        }\n\
    \        long onesCount2 = onesCount * onesCount;\n        long tensCount2 = tensCount\
    \ * tensCount;\n        long hundredsCount2 = hundredsCount * hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount * thousandsCount;\n        long\
    \ onesCount3 = onesCount2 * onesCount;\n        long tensCount3 = tensCount2 *\
    \ tensCount;\n        long hundredsCount3 = hundredsCount2 * hundredsCount;\n\
    \        long thousandsCount3 = thousandsCount2 * thousandsCount;\n        long\
    \ onesCount4 = onesCount3 * onesCount;\n        long tensCount4 = tensCount3 *\
    \ tensCount;\n        long hundredsCount4 = hundredsCount3 * hundredsCount;\n\
    \        long thousandsCount4 = thousandsCount3 * thousandsCount;\n        long\
    \ onesCount5 = onesCount4 * onesCount;\n        long tensCount5 = tensCount4 *\
    \ tensCount;\n        long \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ee9hdr5.java:72: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp9ee9hdr5.java:72: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (Long val : arr) {\n            if (val\
    \ == 1) {\n                ones++;\n            } else if (val == 2) {\n     \
    \           tens++;\n            } else if (val == 3) {\n                hundreds++;\n\
    \            } else if (val == 4) {\n                thousands++;\n          \
    \  } else {\n                total++;\n            }\n        }\n        long\
    \ onesTotal = ones * 10;\n        long tensTotal = tens * 100;\n        long hundredsTotal\
    \ = hundreds * 1000;\n        long thousandsTotal = thousands * 10000;\n     \
    \   long totalTotal = total * 1000000;\n        long onesTotal2 = onesTotal *\
    \ ones;\n        long tensTotal2 = tensTotal * tens;\n        long hundredsTotal2\
    \ = hundredsTotal * hundreds;\n        long thousandsTotal2 = thousandsTotal *\
    \ thousands;\n        long totalTotal2 = totalTotal * total;\n        long onesTotal3\
    \ = onesTotal2 * ones;\n        long tensTotal3 = tensTotal2 * tens;\n       \
    \ long hundredsTotal3 = hundredsTotal2 * hundreds;\n        long thousandsTotal3\
    \ = thousandsTotal2 * thousands;\n        long totalTotal3 = totalTotal2 * total;\n\
    \        long onesTotal4 = onesTotal3 * ones;\n        long tensTotal4 = tensTotal3\
    \ * tens;\n        long hundredsTotal4 = hundredsTotal3 * hundreds;\n        long\
    \ thousandsTotal4 = thousandsTotal3 * thousands;\n        long totalTotal4 = totalTotal3\
    \ * total;\n        long onesTotal5 = onesTotal4 * ones;\n        long tensTotal5\
    \ = tensTotal4 * tens;\n        long hundredsTotal5 = hundredsTotal4 * hundreds;\n\
    \        long thousandsTotal5 = thousandsTotal4 * thousands;\n        long totalTotal5\
    \ = totalTotal4 * total;\n        long onesTotal6 = onesTotal5 * ones;\n     \
    \   long tensTotal6 = tensTotal5 * tens;\n        long hundredsTotal6 = hundredsTotal5\
    \ * hundreds;\n        long thousandsTotal6 = thousandsTotal5 * thousands;\n \
    \       long totalTotal6 = totalTotal5 * total;\n        long onesTotal7 = onesTotal6\
    \ * ones;\n        long \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7so_xxo1.java:67: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp7so_xxo1.java:67: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        for (long i : arr) {\n\
    \            if (i == 1) {\n                ones++;\n            } else if (i\
    \ == 0) {\n                zeros++;\n            } else {\n                if\
    \ (ones > zeros) {\n                    result.add(max);\n                   \
    \ max = 0;\n                }\n                ones = 0;\n                zeros++;\n\
    \                max = i;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            result.add(max);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7zzuy8x7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            }\n\
    \        }\n        long onesDecimal = ones * 10 + tens * 100 + hundreds * 1000;\n\
    \        long tensDecimal = tens * 10;\n        long hundredsDecimal = hundreds\
    \ * 100;\n        long thousandsDecimal = thousands * 1000;\n        long onesDecimalDecimal\
    \ = onesDecimal * 10;\n        long tensDecimalDecimal = tensDecimal * 10;\n \
    \       long hundredsDecimalDecimal = hundredsDecimal * 100;\n        long thousandsDecimalDecimal\
    \ = thousandsDecimal * 1000;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal * 10;\n \
    \       long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal * 100;\n \
    \       long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal * 1000;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal * 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ * 100;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ * 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimal\
    \ * 100;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 100;\n        long thousandsDecimalDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 1000;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpngf2nwt4.java:55: error: cannot find symbol\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 100;\n       \
    \                                                           ^\n  symbol:   variable\
    \ hundredsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n  location: class\
    \ Problem\n/tmp/tmpngf2nwt4.java:56: error: cannot find symbol\n        long thousandsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 1000;\n     \
    \                                                              ^\n  symbol:  \
    \ variable thousandsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n  location:\
    \ class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            ones += i;\n            if (ones >\
    \ 0) {\n                result.add(i);\n                ones = 0;\n          \
    \  }\n        }\n        for (Long i : arr) {\n            tens += i;\n      \
    \      if (tens > 0) {\n                result.add(i);\n                tens =\
    \ 0;\n            }\n        }\n        for (Long i : arr) {\n            hundreds\
    \ += i;\n            if (hundreds > 0) {\n                result.add(i);\n   \
    \             hundreds = 0;\n            }\n        }\n        for (Long i : arr)\
    \ {\n            thousands += i;\n            if (thousands > 0) {\n         \
    \       result.add(i);\n                thousands = 0;\n            }\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcycxazv.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n       \
    \ long thousandsDecimal = (thousands / 10) * 10;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long decimalDecimal\
    \ = decimal / 10;\n        long decimalDecimalDecimal = decimalDecimal / 10;\n\
    \        long decimalDecimalDecimalDecimal = decimalDecimalDecimal / 10;\n   \
    \     long decimalDecimalDecimalDecimalDecimal = decimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimal = decimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n\
    \        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnupqbq63.java:52: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredTh\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpokttlyy4.java:40: error: ';' expected\n        long oneHundredThousandHundredThousandHundredTh\n\
    \                                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            }\n\
    \        }\n        long onesCount = ones;\n        long tensCount = tens;\n \
    \       long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \      }\n        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (tensCount > hundredsCount) {\n     \
    \       tensCount = hundredsCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n        }\n\
    \        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        if (onesCount2 > tensCount2) {\n            onesCount2\
    \ = tensCount2;\n        }\n        if (onesCount2 > hundredsCount2) {\n     \
    \       onesCount2 = hundredsCount2;\n        }\n        if (onesCount2 > thousandsCount2)\
    \ {\n            onesCount2 = thousandsCount2;\n        }\n        if (tensCount2\
    \ > hundredsCount2) {\n            tensCount2 = hundredsCount2;\n        }\n \
    \       if (tensCount2 > thousandsCount2) {\n            tensCount2 = thousandsCount2;\n\
    \        }\n        if (hundredsCount2 > thousandsCount2) {\n            hundredsCount2\
    \ = thousandsCount2;\n        }\n        long onesCount3 = onesCount2;\n     \
    \   long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount2;\n        if (onesCount3 > tens\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpibghoxd8.java:81: error: ')' expected\n        if (onesCount3 >\
    \ tens\n                             ^\n/tmp/tmpibghoxd8.java:82: error: illegal\
    \ start of statement\n    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            if (bin == 1) {\n                onesCount++;\n            } else\
    \ if (bin == 2) {\n                tensCount++;\n            } else if (bin ==\
    \ 3) {\n                hundredsCount++;\n            } else if (bin == 4) {\n\
    \                thousandsCount++;\n            }\n        }\n        long onesCountInt\
    \ = onesCount;\n        long tensCountInt = tensCount;\n        long hundredsCountInt\
    \ = hundredsCount;\n        long thousandsCountInt = thousandsCount;\n       \
    \ long onesCountLong = onesCount;\n        long tensCountLong = tensCount;\n \
    \       long hundredsCountLong = hundredsCount;\n        long thousandsCountLong\
    \ = thousandsCount;\n        long onesCountLongInt = onesCountLong;\n        long\
    \ tensCountLongInt = tensCountLong;\n        long hundredsCountLongInt = hundredsCountLong;\n\
    \        long thousandsCountLongInt = thousandsCountLong;\n        long onesCountLongLong\
    \ = onesCountLong;\n        long tensCountLongLong = tensCountLong;\n        long\
    \ hundredsCountLongLong = hundredsCountLong;\n        long thousandsCountLongLong\
    \ = thousandsCountLong;\n        long onesCountLongLongInt = onesCountLongLong;\n\
    \        long tensCountLongLongInt = tensCountLongLong;\n        long hundredsCountLongLongInt\
    \ = hundredsCountLongLong;\n        long thousandsCountLongLongInt = thousandsCountLongLong;\n\
    \        long onesCountLongLongLong = onesCountLongLong;\n        long tensCount\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_94iuo_o.java:71: error: ';' expected\n        long tensCount\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            ones += num;\n            if (num\
    \ >= 10) {\n                tens += num;\n                if (num >= 100) {\n\
    \                    hundreds += num;\n                    if (num >= 1000) {\n\
    \                        thousands += num;\n                    }\n          \
    \      }\n            }\n        }\n        long onesCount = ones;\n        long\
    \ tensCount = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > tensCount) {\n            onesCount =\
    \ tensCount;\n        }\n        if (onesCount > hundredsCount) {\n          \
    \  onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > hundredsCount) {\n            tensCount = hundredsCount;\n        }\n    \
    \    if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n        }\n        onesCount = onesCount / 10;\n        tensCount\
    \ = tensCount / 10;\n        hundredsCount = hundredsCount / 10;\n        thousandsCount\
    \ = thousandsCount / 10;\n        onesCount = onesCount % 10;\n        tensCount\
    \ = tensCount % 10;\n        hundredsCount = hundredsCount % 10;\n        thousandsCount\
    \ = thousandsCount % 10;\n        if (onesCount > tensCount) {\n            onesCount\
    \ = tensCount;\n        }\n        if (onesCount > hundredsCount) {\n        \
    \    onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > hundredsCount) {\n            tensCount = hundredsCount;\n        }\n    \
    \    if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n        }\n        onesCount = onesCount * 100;\n       \
    \ tensCount = tensCount * 100;\n        hund\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1vb117hm.java:84: error: not a statement\n        hund\n      \
    \  ^\n/tmp/tmp1vb117hm.java:84: error: ';' expected\n        hund\n          \
    \  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        ones = ones * 10;\n        tens = tens * 10;\n        hundreds =\
    \ hundreds * 10;\n        thousands = thousands * 10;\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        for (Long num : arr) {\n            if (num\
    \ == 1) {\n                onesCount++;\n            } else if (num == 10) {\n\
    \                tensCount++;\n            } else if (num == 100) {\n        \
    \        hundredsCount++;\n            } else if (num > 100) {\n             \
    \   thousandsCount++;\n            }\n        }\n        long onesCount2 = ones\
    \ * ones;\n        long tensCount2 = tens * tens;\n        long hundredsCount2\
    \ = hundreds * hundreds;\n        long thousandsCount2 = thousands * thousands;\n\
    \        long onesCount3 = ones * ones * ones;\n        long tensCount3 = tens\
    \ * tens * tens;\n        long hundredsCount3 = hundreds * hundreds * hundreds;\n\
    \        long thousandsCount3 = thousands * thousands * thousands;\n        long\
    \ onesCount4 = ones * ones * ones * ones;\n        long tensCount4 = tens * tens\
    \ * tens * tens;\n        long hundredsCount4 = hundreds * hundreds * hundreds\
    \ * hundreds;\n        long thousandsCount4 = thousands * thousands * thousands\
    \ * thousands;\n        long onesCount5 = ones * ones * ones * ones * ones;\n\
    \        long tensCount5 = tens * tens * tens * tens * tens;\n        long hundredsCount5\
    \ = hundreds * hundreds * hundreds * hundreds * hundreds;\n        long thousandsCount5\
    \ = thousands * thousands * thousands * thousands * thousands;\n        long onesCount6\
    \ = ones * ones * ones * ones * ones * ones;\n        long tensCount6 = tens *\
    \ tens * tens * tens * tens * tens;\n        long hund\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8v1up1v.java:70: error: ';' expected\n        long hund\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n      \
    \  long thousandsDecimal = (thousands / 10) * 1000;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long decimal2 =\
    \ onesDecimal + tensDecimal + hundredsDecimal;\n        long decimal3 = onesDecimal\
    \ + hundredsDecimal;\n        long decimal4 = onesDecimal;\n        long decimal5\
    \ = thousandsDecimal;\n        long decimal6 = hundredsDecimal;\n        long\
    \ decimal7 = tensDecimal;\n        long decimal8 = onesDecimal;\n        long\
    \ decimal9 = thousandsDecimal;\n        long decimal10 = hundredsDecimal;\n  \
    \      long decimal11 = tensDecimal;\n        long decimal12 = onesDecimal;\n\
    \        long decimal13 = thousandsDecimal;\n        long decimal14 = hundredsDecimal;\n\
    \        long decimal15 = tensDecimal;\n        long decimal16 = onesDecimal;\n\
    \        long decimal17 = thousandsDecimal;\n        long decimal18 = hundredsDecimal;\n\
    \        long decimal19 = tensDecimal;\n        long decimal20 = onesDecimal;\n\
    \        long decimal21 = thousandsDecimal;\n        long decimal22 = hundredsDecimal;\n\
    \        long decimal23 = tensDecimal;\n        long decimal24 = onesDecimal;\n\
    \        long decimal25 = thousandsDecimal;\n        long decimal26 = hundredsDecimal;\n\
    \        long decimal27 = tensDecimal;\n        long decimal28 = onesDecimal;\n\
    \        long decimal29 = thousandsDecimal;\n        long decimal30 = hundredsDecimal;\n\
    \        long decimal31 = tensDecimal;\n        long decimal32 = onesDecimal;\n\
    \        long decimal33 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyrwmdkxn.java:70: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesDecimal = ones * 10 + tens * 10 + hundreds\
    \ * 10 + thousands * 10;\n        long tensDecimal = tens * 10 + hundreds * 10\
    \ + thousands * 10;\n        long hundredsDecimal = (hundreds * 10 + thousands)\
    \ * 10;\n        long thousandsDecimal = (thousands * 10);\n        long onesDecimalDecimal\
    \ = onesDecimal * 10 + tensDecimal * 10 + hundredsDecimal * 10 + thousandsDecimal\
    \ * 10;\n        long tensDecimalDecimal = tensDecimal * 10 + hundredsDecimal\
    \ * 10 + thousandsDecimal * 10;\n        long hundredsDecimalDecimal = (hundredsDecimal\
    \ * 10 + thousandsDecimal) * 10;\n        long thousandsDecimalDecimal = (thousandsDecimal\
    \ * 10);\n        long onesDecimalDecimalDecimal = onesDecimalDecimal * 10 + tensDecimalDecimal\
    \ * 10 + hundredsDecimalDecimal * 10 + thousandsDecimalDecimal * 10;\n       \
    \ long tensDecimalDecimalDecimal = tensDecimalDecimal * 10 + hundredsDecimalDecimal\
    \ * 10 + thousandsDecimalDecimal * 10;\n        long hundredsDecimalDecimalDecimal\
    \ = (hundredsDecimalDecimal * 10 + thousandsDecimalDecimal) * 10;\n        long\
    \ thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal * 10);\n        long\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10 + tensDecimalDecimalDecimal\
    \ * 10 + hundredsDecimalDecimalDecimal * 10 + thousandsDecimalDecimalDecimal *\
    \ 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ * 10 + hundredsDecimalDecimalDecimal * 10 + thousandsDecimalDecimalDecimal *\
    \ 10;\n        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ * 10 + thousandsDecimalDecimalDecimal) * 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = (thousandsDecimalDecimalDecimal * 10);\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimal\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmponyp662t.java:49: error: ';' expected\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimal\n                                                     \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n\
    \        long tensDecimal = tens / Math.pow(10, arr.size());\n        long hundredsDecimal\
    \ = (hundreds / Math.pow(10, arr.size()));\n        long thousandsDecimal = (thousands\
    \ / Math.pow(10, arr.size()));\n        Collections.sort(result);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(arr);\n        Collections.reverse(arr);\n\
    \        Collections.sort(arr);\n        Collections.reverse(arr);\n        Collections.sort(arr);\n\
    \        Collections.reverse(arr);\n        Collections.sort(\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvcn5tye_.java:94: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long num : arr) {\n   \
    \         if (num == 1) {\n                onesCount++;\n            } else if\
    \ (num == 10) {\n                tensCount++;\n            } else if (num == 100)\
    \ {\n                hundredsCount++;\n            } else if (num > 100) {\n \
    \               thousandsCount++;\n            }\n        }\n        long onesDecimal\
    \ = ones / onesCount;\n        long tensDecimal = tens / tensCount;\n        long\
    \ hundredsDecimal = (hundreds / hundredsCount);\n        long thousandsDecimal\
    \ = (thousands / thousandsCount);\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        for (Long num : arr) {\n    \
    \        if (num == 1) {\n                result.add(num);\n            } else\
    \ if (num == 10) {\n                result.add(num);\n            } else if (num\
    \ == 100) {\n                result.add(num);\n            } else if (num > 100)\
    \ {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.sortArray(tmp14m5hcs5.java:49)\n\tat Problem.main(tmp14m5hcs5.java:69)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenthththths = 0;\n        long onethththths = 0;\n        long\
    \ tenthththth = 0;\n        long onethththth = 0;\n        long tenthththths =\
    \ 0;\n        long onethththths = 0;\n        long tenthththth = 0;\n        long\
    \ onethththth = 0;\n        long tenthththths = 0;\n        long onethththths\
    \ = 0;\n        long tenthththth = 0;\n        long onethththth = 0;\n       \
    \ long tenthththths = 0;\n        long onethththths = 0;\n        long tenthththth\
    \ = 0;\n        long onethththth = 0;\n        long tenthththths = 0;\n      \
    \  long onethththths = 0;\n        long tenthththth = 0;\n        long onethththth\
    \ = 0;\n        long tenthththths = 0;\n        long onethththths = 0;\n     \
    \   long tenthththth = 0;\n        long onethththth = 0;\n        long tenthththths\
    \ = 0;\n        long onethththths = 0;\n        long tenthththth = 0;\n      \
    \  long onethththth = 0;\n        long tenthththths = 0;\n        long onethththths\
    \ = 0;\n        long tenthththth = 0;\n        long onethththth = 0;\n       \
    \ long tenthththths = 0;\n        long onethththths = 0;\n        long tenthththth\
    \ = 0;\n        long onethththth = 0;\n        long tenthththths = 0;\n      \
    \  long onethththths = 0;\n        long tenthththth = 0;\n        long onethththth\
    \ = 0;\n        long tenthththths = 0;\n        long onethththths = 0;\n     \
    \   long tenthththth\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprq4le1pw.java:78: error: ';' expected\n        long tenthththth\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            long bin = Long.parseLong(Long.toBinaryString(num));\n\
    \            ones += bin & 1;\n            tens += bin >> 1 & 1;\n           \
    \ hundreds += bin >> 2 & 1;\n            thousands += bin >> 3 & 1;\n        }\n\
    \        ones = ones == 0 ? 1 : ones;\n        tens = tens == 0 ? 1 : tens;\n\
    \        hundreds = hundreds == 0 ? 1 : hundreds;\n        thousands = thousands\
    \ == 0 ? 1 : thousands;\n        long onesCount = ones * 1000;\n        long tensCount\
    \ = tens * 1000;\n        long hundredsCount = hundreds * 1000;\n        long\
    \ thousandsCount = thousands * 1000;\n        long onesCount2 = onesCount * 1000;\n\
    \        long tensCount2 = tensCount * 1000;\n        long hundredsCount2 = hundredsCount\
    \ * 1000;\n        long thousandsCount2 = thousandsCount * 1000;\n        long\
    \ onesCount3 = onesCount2 * 1000;\n        long tensCount3 = tensCount2 * 1000;\n\
    \        long hundredsCount3 = hundredsCount2 * 1000;\n        long thousandsCount3\
    \ = thousandsCount2 * 1000;\n        long onesCount4 = onesCount3 * 1000;\n  \
    \      long tensCount4 = tensCount3 * 1000;\n        long hundredsCount4 = hundredsCount3\
    \ * 1000;\n        long thousandsCount4 = thousandsCount3 * 1000;\n        long\
    \ onesCount5 = onesCount4 * 1000;\n        long tensCount5 = tensCount4 * 1000;\n\
    \        long hundredsCount5 = hundredsCount4 * 1000;\n        long thousandsCount5\
    \ = thousandsCount4 * 1000;\n        long onesCount6 = onesCount5 * 1000;\n  \
    \      long tensCount6 = tensCount5 * 1000;\n        long hundredsCount6 = hundredsCount5\
    \ * 1000;\n        long thousandsCount6 = thousandsCount5 * 1000;\n        long\
    \ onesCount7 = onesCount6 * 1000;\n        long tensCount7 = tensCount6 * 1000;\n\
    \        long hundredsCount7 = hundredsCount6 * 1000;\n        long thousandsCount7\
    \ = thousand\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07y7bpx8.java:60: error: ';' expected\n        long thousandsCount7\
    \ = thousand\n                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long l : arr) {\n            if (l == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                maxOnesCount++;\n\
    \                if (maxOnesCount > maxOnes) {\n                    maxOnes =\
    \ maxOnesCount;\n                }\n            } else {\n                maxZerosCount++;\n\
    \                if (maxZerosCount > maxZeros) {\n                    maxZeros\
    \ = maxZerosCount;\n                }\n            }\n        }\n        long\
    \ maxOnesDecimal = maxOnes / maxOnesCount;\n        long maxZerosDecimal = maxZeros\
    \ / maxZerosCount;\n        long maxDecimal = maxOnesDecimal > maxZerosDecimal\
    \ ? maxOnesDecimal : maxZerosDecimal;\n        long maxDecimalCount = maxOnesCount\
    \ > maxZerosCount ? maxOnesCount : maxZerosCount;\n        long maxDecimalDecimal\
    \ = maxDecimal / maxDecimalCount;\n        long maxDecimalDecimalCount = maxDecimalCount\
    \ / maxDecimalCount;\n        long maxDecimalDecimalCountDecimal = maxDecimalDecimalCount\
    \ / maxDecimalCount;\n        long maxDecimalDecimalCountDecimalCount = maxDecimalDecimalCountDecimal\
    \ / maxDecimalCount;\n        long maxDecimalDecimalCountDecimalCountDecimal =\
    \ maxDecimalDecimalCountDecimalCount / maxDecimalCount;\n        long maxDecimalDecimalCountDecimalCountDecimalCount\
    \ = maxDecimalDecimalCountDecimalCountDecimal / maxDecimalCount;\n        long\
    \ maxDecimalDecimalCountDecimalCountDecimalCountDecimal = maxDecimalDecimalCountDecimalCountDecimalCountDecimal\
    \ / maxDecimalCount;\n        long maxDecimalDecimalCountDecimalCountDecimalCountDecimalCount\
    \ = maxDecimalDecimalCountDecimalCountDecimalCountDecimalCount / maxDecimalCount;\n\
    \        long maxDecimalDecimalCountDecimalCountDecimalCountDecimalCountDecimal\
    \ = maxDecimalDecimalCountDecimalCountDecimalCountDecimalCountDecimal / maxDecimalCount;\n\
    \        long maxDecimalDecimalCountDecimalCountDecimalCountDecimalCountDecimalCount\
    \ = maxDecimalDecimalCountDecimalCountDecimalCountDecimalCountDecimalCount / maxDecimalCount;\n\
    \        long maxDecimalDecimalCountDecimalCountDecimal\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_lf25re5.java:58: error: ';' expected\n        long maxDecimalDecimalCountDecimalCountDecimal\n\
    \                                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 2) {\n                tens++;\n     \
    \       } else if (num == 4) {\n                hundreds++;\n            } else\
    \ if (num == 8) {\n                thousands++;\n            } else {\n      \
    \          result.add(num);\n            }\n        }\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<>();\n        if (ones > 0) {\n            sortedArray.add(ones);\n\
    \        }\n        if (tens > 0) {\n            sortedArray.add(tens);\n    \
    \    }\n        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n\
    \        }\n        if (thousands > 0) {\n            sortedArray.add(thousands);\n\
    \        }\n        if (ones > 0) {\n            sortedArray.add(ones);\n    \
    \    }\n        if (tens > 0) {\n            sortedArray.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n       \
    \ }\n        if (thousands > 0) {\n            sortedArray.add(thousands);\n \
    \       }\n        if (ones > 0) {\n            sortedArray.add(ones);\n     \
    \   }\n        if (tens > 0) {\n            sortedArray.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n       \
    \ }\n        if (thousands > 0) {\n            sortedArray.add(thousands);\n \
    \       }\n        if (ones > 0) {\n            sortedArray.add(ones);\n     \
    \   }\n        if (tens > 0) {\n            sortedArray.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n       \
    \ }\n        if (thousands > 0) {\n            sortedArray.add(thousands);\n \
    \       }\n        if (ones > 0) {\n            sortedArray.add(ones);\n     \
    \   }\n        if (tens > 0) {\n            sortedArray.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n       \
    \ }\n        if (thousands > 0) {\n            sortedArray.add(thousands);\n \
    \       }\n        if (ones > 0) {\n            sortedArray.add(ones);\n     \
    \   }\n        if (tens > 0) {\n            sortedArray.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n       \
    \ }\n        if (thousands > 0) {\n            sortedArray.add(thousands);\n \
    \       }\n        if (ones > 0) {\n            sortedArray.add(ones);\n     \
    \   }\n        if (tens > 0) {\n            sortedArray.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n       \
    \ }\n        if (thousands > 0) {\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd112p9d0.java:120: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            ones += i;\n\
    \            zeros += (i ^ 1);\n        }\n        long onesMinusOnes = ones -\
    \ 1;\n        long zerosMinusOnes = zeros - 1;\n        long onesMinusOnesMinusOnes\
    \ = onesMinusOnes - 1;\n        long zerosMinusOnesMinusOnes = zerosMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnes = onesMinusOnesMinusOnes\
    \ - 1;\n        long zerosMinusOnesMinusOnesMinusOnes = zerosMinusOnesMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnes = onesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnes = zerosMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes - 1;\n\
    \        long zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ - 1;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp47tm8nqy.java:36: error: ';' expected\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\n    \
    \                                                                            \
    \                                                                            \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i >= 1) {\n                ones++;\n\
    \            } else if (i >= 10) {\n                tens++;\n            } else\
    \ if (i >= 100) {\n                hundreds++;\n            } else if (i >= 1000)\
    \ {\n                thousands++;\n            }\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf8rs30ry.java:55: error: ';' expected\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimal\n                                                 \
    \                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n      \
    \  long thousandsDecimal = (thousands / 10) * 1000;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long decimal2 =\
    \ onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ decimal3 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal4 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal5 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal6 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal7 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal8 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal9 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal10 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal11 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal12 = onesDecimal + tensDecimal + hundred\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcg916yln.java:48: error: ';' expected\n        long decimal12 =\
    \ onesDecimal + tensDecimal + hundred\n                                      \
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            long bin = Long.parseLong(Long.toBinaryString(num));\n\
    \            ones += bin.charAt(0) == '1' ? 1 : 0;\n            tens += bin.charAt(1)\
    \ == '0' ? 1 : 0;\n            hundreds += bin.charAt(2) == '0' ? 1 : 0;\n   \
    \         thousands += bin.charAt(3) == '0' ? 1 : 0;\n        }\n        long\
    \ onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        long totalCount\
    \ = onesCount + tensCount + hundredsCount + thousandsCount;\n        if (onesCount\
    \ > tensCount) {\n            onesCount -= tensCount;\n            tensCount +=\
    \ onesCount;\n        }\n        if (onesCount > hundredsCount) {\n          \
    \  onesCount -= hundredsCount;\n            hundredsCount += onesCount;\n    \
    \    }\n        if (onesCount > thousandsCount) {\n            onesCount -= thousandsCount;\n\
    \            thousandsCount += onesCount;\n        }\n        onesCount *= 100;\n\
    \        tensCount *= 10;\n        hundredsCount *= 100;\n        thousandsCount\
    \ *= 1000;\n        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        long totalCount2 = onesCount2 + tensCount2 + hundredsCount2\
    \ + thousandsCount2;\n        if (onesCount2 > tensCount2) {\n            onesCount2\
    \ -= tensCount2;\n            tensCount2 += onesCount2;\n        }\n        if\
    \ (onesCount2 > hundredsCount2) {\n            onesCount2 -= hundredsCount2;\n\
    \            hundredsCount2 += onesCount2;\n        }\n        if (onesCount2\
    \ > thousandsCount2) {\n            onesCount2 -= thousandsCount2;\n         \
    \   thousandsCount2 += onesCount2;\n        }\n        onesCount2 *= 100;\n  \
    \      tensCount2 *= 10;\n        hundredsCount2 *= 100;\n        thousandsCount2\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsrvv8vei.java:70: error: not a statement\n        thousandsCount2\n\
    \        ^\n/tmp/tmpsrvv8vei.java:70: error: ';' expected\n        thousandsCount2\n\
    \                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long ten_thousands = 0;\n        long hundred_thousands = 0;\n      \
    \  long millions = 0;\n        long billions = 0;\n        long trillions = 0;\n\
    \        long quadrillions = 0;\n        long quintillions = 0;\n        long\
    \ sextillions = 0;\n        long septillions = 0;\n        long octillions = 0;\n\
    \        long nonillions = 0;\n        long decillions = 0;\n        long undecillions\
    \ = 0;\n        long duodecillions = 0;\n        long tredecillions = 0;\n   \
    \     long quattuordecillions = 0;\n        long quindecillions = 0;\n       \
    \ long sexdecillions = 0;\n        long septendecillions = 0;\n        long octodecillions\
    \ = 0;\n        long novemdecillions = 0;\n        long vigintillions = 0;\n \
    \       long unvigintillions = 0;\n        long duovigintillions = 0;\n      \
    \  long trevigintillions = 0;\n        long quattuorvigintillions = 0;\n     \
    \   long quinvigintillions = 0;\n        long sexvigintillions = 0;\n        long\
    \ septenvigintillions = 0;\n        long octovigintillions = 0;\n        long\
    \ novemvigintillions = 0;\n        long vigintillions = 0;\n        long unvigintillions\
    \ = 0;\n        long duovigintillions = 0;\n        long trevigintillions = 0;\n\
    \        long quattuorvigintillions = 0;\n        long quinvigintillions = 0;\n\
    \        long sexvigintillions = 0;\n        long septenvigintillions = 0;\n \
    \       long octovigintillions = 0;\n        long novemvigintillions = 0;\n  \
    \      long vigintillions = 0;\n        long unvigintillions = 0;\n        long\
    \ duovigintillions = 0;\n        long trevigintillions = 0;\n        long quattuorvigintillions\
    \ = 0;\n        long quinvigintillions = 0;\n        long sexvigintillions = 0;\n\
    \        long septenvigintillions = 0;\n        long octovigintillions = 0;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd18_g79c.java:53: error: variable vigintillions is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long vigintillions = 0;\n    \
    \         ^\n/tmp/tmpd18_g79c.java:54: error: variable unvigintillions is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long unvigintillions =\
    \ 0;\n             ^\n/tmp/tmpd18_g79c.java:55: error: variable duovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long duovigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:56: error: variable trevigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long trevigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:57: error: variable quattuorvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quattuorvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:58: error: variable quinvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quinvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:59: error: variable sexvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long sexvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:60: error: variable septenvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long septenvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:61: error: variable octovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long octovigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:62: error: variable novemvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long novemvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:63: error: variable vigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long vigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:64: error: variable unvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long unvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:65: error: variable duovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long duovigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:66: error: variable trevigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long trevigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:67: error: variable quattuorvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quattuorvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:68: error: variable quinvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quinvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:69: error: variable sexvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long sexvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:70: error: variable septenvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long septenvigintillions\
    \ = 0;\n             ^\n/tmp/tmpd18_g79c.java:71: error: variable octovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long octovigintillions\
    \ = 0;\n             ^\n19 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i < 0) {\n                throw\
    \ new IllegalArgumentException(\"Negative numbers are not allowed\");\n      \
    \      }\n            if (i == 1) {\n                ones++;\n            } else\
    \ if (i >= 10 && i <= 100) {\n                tens++;\n            } else if (i\
    \ >= 100 && i <= 1000) {\n                hundreds++;\n            } else if (i\
    \ >= 1000 && i <= 1000000) {\n                thousands++;\n            } else\
    \ {\n                throw new IllegalArgumentException(\"Number too big\");\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (Long i : arr) {\n            if (i < 0) {\n                throw new\
    \ IllegalArgumentException(\"Negative numbers are not allowed\");\n          \
    \  }\n            if (i == 1) {\n                onesCount++;\n            } else\
    \ if (i >= 10 && i <= 100) {\n                tensCount++;\n            } else\
    \ if (i >= 100 && i <= 1000) {\n                hundredsCount++;\n           \
    \ } else if (i >= 1000 && i <= 1000000) {\n                thousandsCount++;\n\
    \            } else {\n                throw new IllegalArgumentException(\"Number\
    \ too big\");\n            }\n        }\n        long onesCount2 = onesCount *\
    \ ones;\n        long tensCount2 = tensCount * tens;\n        long hundredsCount2\
    \ = hundredsCount * hundreds;\n        long thousandsCount2 = thousandsCount *\
    \ thousands;\n        long onesCount3 = onesCount2 * ones;\n        long tensCount3\
    \ = tensCount2 * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n\
    \        long thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4\
    \ = onesCount3 * ones;\n        long tensCount4 = tensCount3 * tens;\n       \
    \ long hundredsCount4 = hundredsCount3 * hundreds;\n        long thousandsCount4\
    \ = thousandsCount3 * thousands;\n        long onesCount5 = onesCount4 * ones;\n\
    \        long tensCount5 = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4\
    \ * hundreds;\n        long thousandsCount5 = thousandsCount4 * thousands;\n \
    \       long onesCount6 = onesCount5 * ones;\n        long tensCount6 = tensCount5\
    \ * tens;\n        long hund\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpch9dhxjm.java:76: error: ';' expected\n        long hund\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        for (long i : arr) {\n            if (i % 2\
    \ == 0) {\n                ones++;\n            } else if (i % 10 == 0) {\n  \
    \              tens++;\n            } else if (i % 100 == 0) {\n             \
    \   hundreds++;\n            } else if (i % 1000 == 0) {\n                thousands++;\n\
    \            } else if (i % 10000 == 0) {\n                tenths++;\n       \
    \     }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        long\
    \ tenthsCount = 0;\n        for (long i : arr) {\n            if (i % 2 == 0)\
    \ {\n                onesCount++;\n            } else if (i % 10 == 0) {\n   \
    \             tensCount++;\n            } else if (i % 100 == 0) {\n         \
    \       hundredsCount++;\n            } else if (i % 1000 == 0) {\n          \
    \      thousandsCount++;\n            } else if (i % 10000 == 0) {\n         \
    \       tenthsCount++;\n            }\n        }\n        long onesCountInt =\
    \ onesCount;\n        long tensCountInt = tensCount;\n        long hundredsCountInt\
    \ = hundredsCount;\n        long thousandsCountInt = thousandsCount;\n       \
    \ long tenthsCountInt = tenthsCount;\n        long onesCountLong = onesCount;\n\
    \        long tensCountLong = tensCount;\n        long hundredsCountLong = hundredsCount;\n\
    \        long thousandsCountLong = thousandsCount;\n        long tenthsCountLong\
    \ = tenthsCount;\n        long onesCountDouble = onesCount;\n        long tensCountDouble\
    \ = tensCount;\n        long hundredsCountDouble = hundredsCount;\n        long\
    \ thousandsCountDouble = thousandsCount;\n        long tenthsCountDouble = tenthsCount;\n\
    \        long onesCountFloat = onesCount;\n        long tensCountFloat = tensCount;\n\
    \        long hundredsCountFloat = hundredsCount;\n        long thousandsCountFloat\
    \ = thousandsCount;\n        long tenthsCountFloat = tenthsCount;\n        long\
    \ onesCountBigDecimal = onesCount;\n        long tensCountBigDecimal = tensCount;\n\
    \        long hundredsCountBigDecimal = hundredsCount;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaf1b086q.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i >= 1) {\n                ones++;\n\
    \            } else if (i >= 10) {\n                tens++;\n            } else\
    \ if (i >= 100) {\n                hundreds++;\n            } else if (i >= 1000)\
    \ {\n                thousands++;\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long totalCount = onesCount\
    \ + tensCount + hundredsCount + thousandsCount;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n            tensCount = onesCount;\n\
    \        }\n        if (onesCount > hundredsCount) {\n            onesCount =\
    \ hundredsCount;\n            hundredsCount = onesCount;\n        }\n        if\
    \ (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n  \
    \          thousandsCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n            thousandsCount = tensCount;\n        }\n      \
    \  if (hundredsCount > thousandsCount) {\n            hundredsCount = thousandsCount;\n\
    \            thousandsCount = hundredsCount;\n        }\n        long onesCount2\
    \ = onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        long\
    \ totalCount2 = onesCount2 + tensCount2 + hundredsCount2 + thousandsCount2;\n\
    \        if (onesCount2 > tensCount2) {\n            onesCount2 = tensCount2;\n\
    \            tensCount2 = onesCount2;\n        }\n        if (onesCount2 > hundredsCount2)\
    \ {\n            onesCount2 = hundredsCount2;\n            hundredsCount2 = onesCount2;\n\
    \        }\n        if (onesCount2 > thousandsCount2) {\n            onesCount2\
    \ = thousandsCount2;\n            thousandsCount2 = ones\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp092zgppy.java:77: error: ';' expected\n            thousandsCount2\
    \ = ones\n                                  ^\n/tmp/tmp092zgppy.java:79: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            } else\
    \ {\n                throw new RuntimeException(\"Invalid input\");\n        \
    \    }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long hundred\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp4tal9g5.java:57: error: ';' expected\n        long hundred\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long val : arr) {\n            if (val == 1) {\n               \
    \ ones++;\n            } else if (val == 2) {\n                tens++;\n     \
    \       } else if (val == 4) {\n                hundreds++;\n            } else\
    \ if (val == 8) {\n                thousands++;\n            }\n        }\n  \
    \      long onesDecimal = ones * 100;\n        long tensDecimal = tens * 10;\n\
    \        long hundredsDecimal = hundreds * 100;\n        long thousandsDecimal\
    \ = thousands * 1000;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long minDecimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimalDecimal = maxDecimal * maxDecimal;\n\
    \        long minDecimalDecimal = minDecimal * minDecimal;\n        long maxDecimalDecimalDecimal\
    \ = maxDecimalDecimal * maxDecimalDecimal;\n        long minDecimalDecimalDecimal\
    \ = minDecimalDecimal * minDecimalDecimal;\n        long maxDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimal * maxDecimalDecimalDecimal;\n        long minDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimal * minDecimalDecimalDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimal * maxDecimalDecimalDecimalDecimal;\n     \
    \   long minDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimal\
    \ * minDecimalDecimalDecimalDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimal * maxDecimalDecimalDecimalDecimalDecimal;\n\
    \        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ * minDecimalDecimalDecimalDecimalDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimal * maxDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * minDecimalDecimalDecimalDecimalDecimalDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimal * maxDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4i6i4k1g.java:53: error: ';' expected\n        long minDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimal\n                                               \
    \                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneHundreds = 0;\n        long oneThousands\
    \ = 0;\n        long oneHundredThousands = 0;\n        long oneThousandThousands\
    \ = 0;\n        long oneHundredThousandThousands = 0;\n        long oneThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousands = 0;\n        long oneThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousands = 0;\n      \
    \  long oneThousandThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousands = 0;\n\
    \        long oneHundredThousandThousandThousandThousandThousandThousands = 0;\n\
    \        long oneThousandThousandThousandThousandThousandThousandThousands = 0;\n\
    \        long oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThous\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2dxo9qqr.java:44: error: ';' expected\n        long oneThous\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n\
    \        for (long i : arr) {\n            if (i == 1) {\n                maxOnesCount++;\n\
    \            } else {\n                maxZerosCount++;\n            }\n     \
    \   }\n        long maxOnesCountInt = maxOnesCount;\n        long maxZerosCountInt\
    \ = maxZerosCount;\n        if (maxOnesCount > maxZerosCount) {\n            maxOnesCountInt\
    \ = maxZerosCount;\n            maxZerosCountInt = maxOnesCount;\n        }\n\
    \        long maxOnesCountLong = Long.parseLong(Long.toString(maxOnesCountInt));\n\
    \        long maxZerosCountLong = Long.parseLong(Long.toString(maxZerosCountInt));\n\
    \        long maxOnesCountLongInt = maxOnesCountLong;\n        long maxZerosCountLongInt\
    \ = maxZerosCountLong;\n        if (maxOnesCountLong > maxZerosCountLong) {\n\
    \            maxOnesCountLongInt = maxZerosCountLong;\n            maxZerosCountLongInt\
    \ = maxOnesCountLong;\n        }\n        long maxOnesCountLongLong = Long.parseLong(Long.toString(maxOnesCountLongInt));\n\
    \        long maxZerosCountLongLong = Long.parseLong(Long.toString(maxZerosCountLongInt));\n\
    \        long maxOnesCountLongLongInt = maxOnesCountLongLong;\n        long maxZerosCountLongLongInt\
    \ = maxZerosCountLongLong;\n        if (maxOnesCountLongLong > maxZerosCountLongLong)\
    \ {\n            maxOnesCountLongLongInt = maxZerosCountLongLong;\n          \
    \  maxZerosCountLongLongInt = maxOnesCountLongLong;\n        }\n        long maxOnesCountLongLongLong\
    \ = Long.parseLong(Long.toString(maxOnesCountLongLongInt));\n        long maxZerosCountLongLongLong\
    \ = Long.parseLong(Long.toString(maxZerosCountLongLongInt));\n        long max\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7g01rqa.java:62: error: ';' expected\n        long max\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long hundredths = 0;\n        long thousandths\
    \ = 0;\n        long tenthhundredths = 0;\n        long hundredththousandths =\
    \ 0;\n        long thousandthhundredths = 0;\n        long hundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredths = 0;\n        long\
    \ hundredththousandthhundredththousandthhundredths = 0;\n        long thousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousand\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1y5_0ebk.java:39: error: ';' expected\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousand\n\
    \                                                                            \
    \                                                                            \
    \  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesDiff = ones - zeros;\n        long\
    \ zerosDiff = zeros - ones;\n        long onesDiff2 = ones - ones;\n        long\
    \ zerosDiff2 = zeros - zeros;\n        long onesDiff3 = ones - onesDiff;\n   \
    \     long zerosDiff3 = zeros - zerosDiff;\n        long onesDiff4 = ones - onesDiff2;\n\
    \        long zerosDiff4 = zeros - zerosDiff2;\n        long onesDiff5 = ones\
    \ - onesDiff3;\n        long zerosDiff5 = zeros - zerosDiff3;\n        long onesDiff6\
    \ = ones - onesDiff4;\n        long zerosDiff6 = zeros - zerosDiff4;\n       \
    \ long onesDiff7 = ones - onesDiff5;\n        long zerosDiff7 = zeros - zerosDiff5;\n\
    \        long onesDiff8 = ones - onesDiff6;\n        long zerosDiff8 = zeros -\
    \ zerosDiff6;\n        long onesDiff9 = ones - onesDiff7;\n        long zerosDiff9\
    \ = zeros - zerosDiff7;\n        long onesDiff10 = ones - onesDiff8;\n       \
    \ long zerosDiff10 = zeros - zerosDiff8;\n        long onesDiff11 = ones - onesDiff9;\n\
    \        long zerosDiff11 = zeros - zerosDiff9;\n        long onesDiff12 = ones\
    \ - onesDiff10;\n        long zerosDiff12 = zeros - zerosDiff10;\n        long\
    \ onesDiff13 = ones - onesDiff11;\n        long zerosDiff13 = zeros - zerosDiff11;\n\
    \        long onesDiff14 = ones - onesDiff12;\n        long zerosDiff14 = zeros\
    \ - zerosDiff12;\n        long onesDiff15 = ones - onesDiff13;\n        long zerosDiff15\
    \ = zeros - zerosDiff13;\n        long onesDiff16 = ones - onesDiff14;\n     \
    \   long zerosDiff16 = zeros - zerosDiff14;\n        long onesDiff17 = ones -\
    \ onesDiff15;\n        long zerosDiff17 = zeros - zerosDiff15;\n        long onesDiff18\
    \ = ones - onesDiff16;\n        long zerosDiff18 = zeros - zerosDiff16;\n    \
    \    long onesDiff19 = ones - onesDiff17;\n        long zerosDiff19 = zeros -\
    \ zerosDiff17;\n        long \n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0mrvwfxj.java:65: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp0mrvwfxj.java:65: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (Long i : arr) {\n                if (i == 1) {\n           \
    \         result.add(i);\n                }\n            }\n        } else {\n\
    \            Collections.sort(arr);\n            for (Long i : arr) {\n      \
    \          if (i == 0) {\n                    result.add(i);\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzru8an20.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long onesCount2 = ones;\n        long tensCount2 = tens;\n\
    \        long hundredsCount2 = hundreds;\n        long thousandsCount2 = thousands;\n\
    \        long onesCount3 = ones;\n        long tensCount3 = tens;\n        long\
    \ hundredsCount3 = hundreds;\n        long thousandsCount3 = thousands;\n    \
    \    long onesCount4 = ones;\n        long tensCount4 = tens;\n        long hundredsCount4\
    \ = hundreds;\n        long thousandsCount4 = thousands;\n        long onesCount5\
    \ = ones;\n        long tensCount5 = tens;\n        long hundredsCount5 = hundreds;\n\
    \        long thousandsCount5 = thousands;\n        long onesCount6 = ones;\n\
    \        long tensCount6 = tens;\n        long hundredsCount6 = hundreds;\n  \
    \      long thousandsCount6 = thousands;\n        long onesCount7 = ones;\n  \
    \      long tensCount7 = tens;\n        long hundredsCount7 = hundreds;\n    \
    \    long thousandsCount7 = thousands;\n        long onesCount8 = ones;\n    \
    \    long tensCount8 = tens;\n        long hundredsCount8 = hundreds;\n      \
    \  long thousandsCount8 = thousands;\n        long onesCount9 = ones;\n      \
    \  long tensCount9 = tens;\n        long hundredsCount9 = 100;\n        long thousandsCount9\
    \ = 1000;\n        long onesCount10 = ones;\n        long tensCount10 = tens;\n\
    \        long hundredsCount10 = hundreds;\n        long thousandsCount10 = thousands;\n\
    \        long onesCount11 = ones;\n        long tensCount11 = tens;\n        long\
    \ hundreds\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpccnfnkm4.java:77: error: ';' expected\n        long hundreds\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            } else\
    \ {\n                throw new RuntimeException(\"Unexpected input\");\n     \
    \       }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (long i : arr) {\n            if (i % 2 == 0) {\n                onesCount++;\n\
    \            } else if (i % 10 == 0) {\n                tensCount++;\n       \
    \     } else if (i % 100 == 0) {\n                hundredsCount++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousandsCount++;\n         \
    \   } else {\n                throw new RuntimeException(\"Unexpected input\"\
    );\n            }\n        }\n        long onesCountInt = onesCount * 1;\n   \
    \     long tensCountInt = tensCount * 10;\n        long hundredsCountInt = hundredsCount\
    \ * 100;\n        long thousandsCountInt = thousandsCount * 1000;\n        long\
    \ onesCountLong = onesCountInt * 1;\n        long tensCountLong = tensCountInt\
    \ * 10;\n        long hundredsCountLong = hundredsCountInt * 100;\n        long\
    \ thousandsCountLong = thousandsCountInt * 1000;\n        long onesCountDouble\
    \ = onesCountLong * 1;\n        long tensCountDouble = tensCountLong * 10;\n \
    \       long hundredsCountDouble = hundredsCountLong * 100;\n        long thousandsCountDouble\
    \ = thousandsCountLong * 1000;\n        long onesCountFloat = onesCountDouble\
    \ * 1;\n        long tensCountFloat = tensCountDouble * 10;\n        long hundredsCountFloat\
    \ = hundredsCountDouble * 100;\n        long thousandsCountFloat = thousandsCountDouble\
    \ * 1000;\n        long onesCountBigDecimal = onesCountFloat * 1;\n        long\
    \ tensCountBigDecimal = tensCountFloat * 10;\n        long hundredsCountBigDecimal\
    \ = hundredsCountFloat * 100;\n        long thousandsCountBigDecimal = thousandsCountFloat\
    \ * 1000;\n        long onesCountBigInteger = onesCountBig\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphdd2tekc.java:72: error: ';' expected\n        long onesCountBigInteger\
    \ = onesCountBig\n                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenthsOnes =\
    \ 0;\n        long onethsTens = 0;\n        long tenthsHundreds = 0;\n       \
    \ long onethsHundreds = 0;\n        long tenthsThousands = 0;\n        long onethsThousands\
    \ = 0;\n        long tenthsTenths = 0;\n        long onethsTenths = 0;\n     \
    \   long tenthsOneths = 0;\n        long onethsOneths = 0;\n        long tenthsTenthsOnes\
    \ = 0;\n        long onethsTenthsOnes = 0;\n        long tenthsOnethsTens = 0;\n\
    \        long onethsOnethsTens = 0;\n        long tenthsTenthsHundreds = 0;\n\
    \        long onethsTenthsHundreds = 0;\n        long tenthsOnethsHundreds = 0;\n\
    \        long onethsOnethsHundreds = 0;\n        long tenthsTenthsThousands =\
    \ 0;\n        long onethsTenthsThousands = 0;\n        long tenthsOnethsThousands\
    \ = 0;\n        long onethsOnethsThousands = 0;\n        long tenthsTenthsTenths\
    \ = 0;\n        long onethsTenthsTenths = 0;\n        long tenthsOnethsTenths\
    \ = 0;\n        long onethsOnethsTenths = 0;\n        long tenthsTenthsOneths\
    \ = 0;\n        long onethsTenthsOneths = 0;\n        long tenthsOnethsOneths\
    \ = 0;\n        long onethsOnethsOneths = 0;\n        long tenthsTenthsTenthsOnes\
    \ = 0;\n        long onethsTenthsTenthsOnes = 0;\n        long tenthsOnethsTenthsOnes\
    \ = 0;\n        long onethsOnethsTenthsOnes = 0;\n        long tenthsTenthsOnethsTens\
    \ = 0;\n        long onethsTenthsOnethsTens = 0;\n        long tenthsOnethsOnethsTens\
    \ = 0;\n        long onethsOnethsOnethsTens = 0;\n        long tenthsTenthsTenthsHundreds\
    \ = 0;\n        long oneths\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpljjfg1hn.java:63: error: ';' expected\n        long oneths\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            ones += i;\n        }\n        for\
    \ (Long i : arr) {\n            tens += i;\n        }\n        for (Long i : arr)\
    \ {\n            hundreds += i;\n        }\n        for (Long i : arr) {\n   \
    \         thousands += i;\n        }\n        long onesTens = ones * tens;\n \
    \       long onesHundreds = ones * hundreds;\n        long onesThousands = ones\
    \ * thousands;\n        long tensHundreds = tens * hundreds;\n        long tensThousands\
    \ = tens * thousands;\n        long hundredsThousands = hundreds * thousands;\n\
    \        long thousandsThousands = thousands * thousands;\n        long onesTensHundreds\
    \ = onesTens * hundreds;\n        long onesTensThousands = onesTens * thousands;\n\
    \        long onesHundredsThousands = onesHundreds * thousands;\n        long\
    \ tensHundredsThousands = tensHundreds * thousands;\n        long hundredsThousandsThousands\
    \ = hundredsThousands * thousands;\n        long thousandsThousandsThousands =\
    \ thousandsThousands * thousands;\n        long onesTensHundredsThousands = onesTensHundreds\
    \ * hundreds;\n        long onesTensThousandsThousands = onesTensThousands * thousands;\n\
    \        long onesHundredsThousandsThousands = onesHundredsThousands * thousands;\n\
    \        long tensHundredsThousandsThousands = tensHundredsThousands * thousands;\n\
    \        long hundredsThousandsThousandsThousands = hundredsThousandsThousands\
    \ * thousands;\n        long thousandsThousandsThousandsThousands = thousandsThousandsThousands\
    \ * thousands;\n        long onesTensHundredsThousandsThous\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpunxpue4n.java:53: error: ';' expected\n        long onesTensHundredsThousandsThous\n\
    \                                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            ones += num;\n            tens +=\
    \ num * num;\n            hundreds += num * num * num;\n            thousands\
    \ += num * num * num * num;\n        }\n        long onesCount = ones;\n     \
    \   long tensCount = tens;\n        long hundredsCount = hundreds;\n        long\
    \ thousandsCount = thousands;\n        long onesCount2 = ones;\n        long tensCount2\
    \ = tens;\n        long hundredsCount2 = hundreds;\n        long thousandsCount2\
    \ = thousands;\n        long onesCount3 = ones;\n        long tensCount3 = tens;\n\
    \        long hundredsCount3 = hundreds;\n        long thousandsCount3 = thousands;\n\
    \        long onesCount4 = ones;\n        long tensCount4 = tens;\n        long\
    \ hundredsCount4 = hundreds;\n        long thousandsCount4 = thousands;\n    \
    \    long onesCount5 = ones;\n        long tensCount5 = tens;\n        long hundredsCount5\
    \ = hundreds;\n        long thousandsCount5 = thousands;\n        long onesCount6\
    \ = ones;\n        long tensCount6 = tens;\n        long hundredsCount6 = hundreds;\n\
    \        long thousandsCount6 = thousands;\n        long onesCount7 = ones;\n\
    \        long tensCount7 = tens;\n        long hundredsCount7 = hundreds;\n  \
    \      long thousandsCount7 = thousands;\n        long onesCount8 = ones;\n  \
    \      long tensCount8 = tens;\n        long hundredsCount8 = hundreds;\n    \
    \    long thousandsCount8 = thousands;\n        long onesCount9 = ones;\n    \
    \    long tensCount9 = tens;\n        long hundredsCount9 = 100;\n        long\
    \ thousandsCount9 = 1000;\n        long onesCount10 = ones;\n        long tensCount10\
    \ = tens;\n        long hundredsCount10 = 200;\n        long thousandsCount10\
    \ = 2000;\n        long onesCount11 = ones;\n        long tensCount11 = tens;\n\
    \        long hundredsCount11 = 300;\n        long thousandsCount11 = 3000;\n\
    \        long one\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1p_4zjwn.java:72: error: ';' expected\n        long one\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (Long l : arr) {\n            if (l == 1) {\n                onesCount++;\n\
    \            } else if (l == 10) {\n                tensCount++;\n           \
    \ } else if (l == 100) {\n                hundredsCount++;\n            } else\
    \ if (l == 1000) {\n                thousandsCount++;\n            }\n       \
    \ }\n        long onesCountInt = onesCount;\n        long tensCountInt = tensCount;\n\
    \        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        if (onesCount > onesCountInt) {\n            onesCountInt\
    \ = onesCount;\n        }\n        if (tensCount > tensCountInt) {\n         \
    \   tensCountInt = tensCount;\n        }\n        if (hundredsCount > hundredsCountInt)\
    \ {\n            hundredsCountInt = hundredsCount;\n        }\n        if (thousandsCount\
    \ > thousandsCountInt) {\n            thousandsCountInt = thousandsCount;\n  \
    \      }\n        long onesCountDecimal = onesCountInt / 10;\n        long tensCountDecimal\
    \ = tensCountInt / 10;\n        long hundredsCountDecimal = hundredsCountInt /\
    \ 10;\n        long thousandsCountDecimal = thousandsCountInt / 10;\n        long\
    \ onesCountDecimalInt = onesCountDecimal / 10;\n        long tensCountDecimalInt\
    \ = tensCountDecimal / 10;\n        long hundredsCountDecimalInt = hundredsCountDecimal\
    \ / 10;\n        long thousandsCountDecimalInt = thousandsCountDecimal / 10;\n\
    \        long onesCountDecimalDecimal = onesCountDecimalInt / 10;\n        long\
    \ tensCountDecimalDecimal = tensCountDecimalInt / 10;\n        long \n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rkjlynx.java:76: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp2rkjlynx.java:76: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num > 0) {\n                ones\
    \ += num;\n            } else if (num < 0) {\n                tens += num;\n \
    \           } else if (num > 0) {\n                hundreds += num;\n        \
    \    } else if (num < 0) {\n                thousands += num;\n            }\n\
    \        }\n        long onesCount = ones;\n        long tensCount = tens;\n \
    \       long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \          tensCount = onesCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            hundredsCount = onesCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n            thousandsCount = onesCount;\n        }\n      \
    \  long onesSum = onesCount;\n        long tensSum = tensCount;\n        long\
    \ hundredsSum = hundredsCount;\n        long thousandsSum = thousandsCount;\n\
    \        if (onesCount > hundredsCount) {\n            onesSum = hundredsCount;\n\
    \            hundredsCount = onesSum;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesSum = thousandsCount;\n            thousandsCount = onesSum;\n\
    \        }\n        if (onesSum > tensCount) {\n            onesSum = tensCount;\n\
    \            tensCount = onesSum;\n        }\n        if (onesSum > hundredsCount)\
    \ {\n            onesSum = hundredsCount;\n            hundredsCount = onesSum;\n\
    \        }\n        if (onesSum > thousandsCount) {\n            onesSum = thousandsCount;\n\
    \            thousandsCount = onesSum;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensSum = hundredsCount;\n            hundredsCount = tensSum;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensSum = thousandsCount;\n\
    \            thousandsCount = tensSum;\n        }\n        if (hundredsCount >\
    \ thousandsCount) {\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpua1int5e.java:83: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenthousands = 0;\n        long onethousands = 0;\n        long\
    \ onemillions = 0;\n        long onebillions = 0;\n        long onetrillions =\
    \ 0;\n        long onequadrillions = 0;\n        long onequintillions = 0;\n \
    \       long onesextillions = 0;\n        long oneseptillions = 0;\n        long\
    \ oneoctillions = 0;\n        long onenonillions = 0;\n        long onedecillions\
    \ = 0;\n        long oneundecillions = 0;\n        long oneundecillions = 0;\n\
    \        long oneundecillions = 0;\n        long oneundecillions = 0;\n      \
    \  long oneundecillions = 0;\n        long oneundecillions = 0;\n        long\
    \ oneundecillions = 0;\n        long oneundecillions = 0;\n        long oneundecillions\
    \ = 0;\n        long oneundecillions = 0;\n        long oneundecillions = 0;\n\
    \        long oneundecillions = 0;\n        long oneundecillions = 0;\n      \
    \  long oneundecillions = 0;\n        long oneundecillions = 0;\n        long\
    \ oneundecillions = 0;\n        long oneundecillions = 0;\n        long oneundecillions\
    \ = 0;\n        long oneundecillions = 0;\n        long oneundecillions = 0;\n\
    \        long oneundecillions = 0;\n        long oneundecillions = 0;\n      \
    \  long oneundecillions = 0;\n        long oneundecillions = 0;\n        long\
    \ oneundecillions = 0;\n        long oneundecillions = 0;\n        long oneundecillions\
    \ = 0;\n        long oneundecillions = 0;\n        long oneundecillions = 0;\n\
    \        long oneundecillions = 0;\n        long oneundecillions = 0;\n      \
    \  long oneundecillions = 0;\n        long oneundecillions = 0;\n        long\
    \ oneundecillions = 0;\n        long oneundecillions = 0;\n        long oneundecillions\
    \ = 0;\n        long oneundecillions = 0;\n        long oneundecillions = 0;\n\
    \        long oneundecillions = 0;\n        long oneundecillions = 0;\n      \
    \  long oneundecillions = 0;\n        long oneundecillions = 0;\n        long\
    \ oneun\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1gl_3mu.java:76: error: ';' expected\n        long oneun\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (Long num : arr) {\n            total +=\
    \ num;\n            if (num == 1) {\n                ones++;\n            } else\
    \ if (num == 10) {\n                tens++;\n            } else if (num == 100)\
    \ {\n                hundreds++;\n            } else if (num == 1000) {\n    \
    \            thousands++;\n            }\n        }\n        long onesTotal =\
    \ ones * ones;\n        long tensTotal = tens * tens;\n        long hundredsTotal\
    \ = hundreds * hundreds;\n        long thousandsTotal = thousands * thousands;\n\
    \        long totalTotal = total * total;\n        long onesTotal2 = onesTotal\
    \ * onesTotal;\n        long tensTotal2 = tensTotal * tensTotal;\n        long\
    \ hundredsTotal2 = hundredsTotal * hundredsTotal;\n        long thousandsTotal2\
    \ = thousandsTotal * thousandsTotal;\n        long totalTotal2 = totalTotal *\
    \ totalTotal;\n        long onesTotal3 = onesTotal2 * onesTotal;\n        long\
    \ tensTotal3 = tensTotal2 * tensTotal;\n        long hundredsTotal3 = hundredsTotal2\
    \ * hundredsTotal;\n        long thousandsTotal3 = thousandsTotal2 * thousandsTotal;\n\
    \        long totalTotal3 = totalTotal2 * totalTotal;\n        long onesTotal4\
    \ = onesTotal3 * onesTotal;\n        long tensTotal4 = tensTotal3 * tensTotal;\n\
    \        long hundredsTotal4 = hundredsTotal3 * hundredsTotal;\n        long thousandsTotal4\
    \ = thousandsTotal3 * thousandsTotal;\n        long totalTotal4 = totalTotal3\
    \ * totalTotal;\n        long onesTotal5 = onesTotal4 * onesTotal;\n        long\
    \ tensTotal5 = tensTotal4 * tensTotal;\n        long hundredsTotal5 = hundredsTotal4\
    \ * hundredsTotal;\n        long thousandsTotal5 = thousandsTotal4 * thousandsTotal;\n\
    \        long totalTotal5 = totalTotal4 * totalTotal;\n        long onesTotal6\
    \ = onesTotal5 * onesTotal;\n        long tensTotal6 = tensTotal5 * tensTotal;\n\
    \        long hundredsTotal6 = hundredsTotal5 * \n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8c2yu4n0.java:63: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesDecimal = ones;\n        long maxZerosDecimal\
    \ = zeros;\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones--;\n            } else {\n                zeros--;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            maxOnes = ones;\n\
    \            maxOnesDecimal = ones;\n        } else {\n            maxZeros =\
    \ zeros;\n            maxZerosDecimal = zeros;\n        }\n        Collections.sort(arr);\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else {\n                zeros++;\n            }\n   \
    \     }\n        if (ones > zeros) {\n            maxOnes = ones;\n          \
    \  maxOnesDecimal = ones;\n        } else {\n            maxZeros = zeros;\n \
    \           maxZerosDecimal = zeros;\n        }\n        Collections.sort(arr);\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones--;\n            } else {\n                zeros--;\n            }\n   \
    \     }\n        if (ones > zeros) {\n            maxOnes = ones;\n          \
    \  maxOnesDecimal = ones;\n        } else {\n            maxZeros = zeros;\n \
    \           maxZerosDecimal = zeros;\n        }\n        Collections.sort(arr);\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else {\n                zeros++;\n            }\n   \
    \     }\n        if (ones > zeros) {\n            maxOnes = ones;\n          \
    \  maxOnesDecimal = ones;\n        } else {\n            maxZeros = zeros;\n \
    \           maxZerosDecimal = zeros;\n        }\n        Collections.sort(arr);\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones--;\n            } else {\n                zeros--;\n            }\n   \
    \     }\n        if (ones > zeros) {\n            maxOnes = ones;\n          \
    \  maxOnesDecimal = ones;\n        } else {\n            maxZeros = zeros;\n \
    \           maxZerosDecimal = zeros;\n        }\n        Collections.sort(arr);\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else {\n                zeros++;\n            }\n   \
    \     }\n        if (ones > zeros) {\n            maxOnes = ones;\n          \
    \  maxOnesDecimal = ones;\n        } else {\n            maxZeros = zeros;\n \
    \           maxZerosDecimal = zeros;\n        }\n        Collections.sort(\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65skx9ai.java:121: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 2) {\n                tens++;\n     \
    \       } else if (num == 4) {\n                hundreds++;\n            } else\
    \ if (num == 8) {\n                thousands++;\n            } else {\n      \
    \          result.add(num);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            hundredsCount = onesCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n            thousandsCount = onesCount;\n        }\n      \
    \  if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \            hundredsCount = tensCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n            thousandsCount = tensCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n            thousandsCount = hundredsCount;\n        }\n\
    \        if (thousandsCount > hundredsCount) {\n            thousandsCount = hundredsCount;\n\
    \            hundredsCount = thousandsCount;\n        }\n        long onesCount2\
    \ = onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        if\
    \ (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \            hundredsCount2 = onesCount2;\n        }\n        if (onesCount2 >\
    \ thousandsCount2) {\n            onesCount2 = thousandsCount2;\n            thousandsCount2\
    \ = onesCount2;\n        }\n        if (tensCount2 > hundredsCount2) {\n     \
    \       tensCount2 = hundredsCount2;\n            hundredsCount2 = tensCount2;\n\
    \        }\n        if (tensCount2 > thousandsCount2) {\n            tensCount2\
    \ = thousandsCount2;\n            \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14ebj8hn.java:83: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i > 0) {\n\
    \                ones += i;\n            } else {\n                zeros += i;\n\
    \            }\n        }\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        for (long i : arr) {\n            if (i > 0) {\n             \
    \   onesCount += i;\n            } else {\n                zerosCount += i;\n\
    \            }\n        }\n        long onesDecimal = ones / onesCount;\n    \
    \    long zerosDecimal = zeros / zerosCount;\n        long onesDecimalCount =\
    \ onesCount / onesCount;\n        long zerosDecimalCount = zerosCount / zerosCount;\n\
    \        long onesDecimalCount2 = onesCount / onesDecimalCount;\n        long\
    \ zerosDecimalCount2 = zerosCount / zerosDecimalCount;\n        long onesDecimalCount3\
    \ = onesCount / onesDecimalCount2;\n        long zerosDecimalCount3 = zerosCount\
    \ / zerosDecimalCount2;\n        long onesDecimalCount4 = onesCount / onesDecimalCount3;\n\
    \        long zerosDecimalCount4 = zerosCount / zerosDecimalCount3;\n        long\
    \ onesDecimalCount5 = onesCount / onesDecimalCount4;\n        long zerosDecimalCount5\
    \ = zerosCount / zerosDecimalCount4;\n        long onesDecimalCount6 = onesCount\
    \ / onesDecimalCount5;\n        long zerosDecimalCount6 = zerosCount / zerosDecimalCount5;\n\
    \        long onesDecimalCount7 = onesCount / onesDecimalCount6;\n        long\
    \ zerosDecimalCount7 = zerosCount / zerosDecimalCount6;\n        long onesDecimalCount8\
    \ = onesCount / onesDecimalCount7;\n        long zerosDecimalCount8 = zerosCount\
    \ / zerosDecimalCount7;\n        long onesDecimalCount9 = onesCount / onesDecimalCount8;\n\
    \        long zerosDecimalCount9 = zerosCount / zerosDecimalCount8;\n        long\
    \ onesDecimalCount10 = onesCount / onesDecimalCount9;\n        long zerosDecimalCount10\
    \ = zerosCount / zerosDecimalCount9;\n        long onesDecimalCount11 = onesCount\
    \ / onesDecimalCount10;\n        long zerosDecimalCount11 = zerosCount / zerosDecimalCount10;\n\
    \        long onesDecimalCount12 = onesCount / onesDecimalCount11;\n        long\
    \ zerosDecimalCount12 = zerosCount / zerosDecimalCount11;\n        long onesDecimalCount13\
    \ = onesCount / onesDecimalCount12;\n        long zerosDecimalCount13 = zerosCount\
    \ / zerosDecimalCount\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpir5psrvm.java:63: error: ';' expected\n        long zerosDecimalCount13\
    \ = zerosCount / zerosDecimalCount\n                                         \
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i >= 1) {\n                ones++;\n\
    \            } else if (i >= 10) {\n                tens++;\n            } else\
    \ if (i >= 100) {\n                hundreds++;\n            } else if (i >= 1000)\
    \ {\n                thousands++;\n            }\n        }\n        ones = ones\
    \ * 10 + ones;\n        tens = tens * 10 + tens;\n        hundreds = hundreds\
    \ * 10 + hundreds;\n        thousands = thousands * 10 + thousands;\n        long\
    \ maxOnes = ones;\n        long maxTens = tens;\n        long maxHundreds = hundreds;\n\
    \        long maxThousands = thousands;\n        long maxValue = maxOnes;\n  \
    \      if (maxTens > maxOnes) {\n            maxValue = maxTens;\n        } else\
    \ if (maxHundreds > maxOnes) {\n            maxValue = maxHundreds;\n        }\
    \ else if (maxThousands > maxOnes) {\n            maxValue = maxThousands;\n \
    \       }\n        long maxValueOnes = maxValue / 10;\n        long maxValueTens\
    \ = maxValue % 10;\n        long maxValueHundreds = maxValue % 100;\n        long\
    \ maxValueThousands = maxValue % 1000;\n        long maxValueOnesTens = maxValueOnes\
    \ / 10;\n        long maxValueOnesHundreds = maxValueOnes % 10;\n        long\
    \ maxValueOnesThousands = maxValueOnes % 100;\n        long maxValueTensHundreds\
    \ = maxValueTens / 10;\n        long maxValueTensThousands = maxValueTens % 100;\n\
    \        long maxValueHundredsThousands = maxValueHundreds / 10;\n        long\
    \ maxValueHundredsThousands = maxValueHundreds % 100;\n        long maxValueThousandsHundreds\
    \ = maxValueThousands / 10;\n        long maxValueThousandsHundreds = maxValueThousands\
    \ % 100;\n        long maxValueOnesTensHundreds = maxValueOnesTens / 10;\n   \
    \     long maxValueOnesTensThousands = maxValueOnesTens % 100;\n        long maxValueOnesHundredsThousands\
    \ = maxValueOnesHundreds / 10;\n        long maxValueOnesHund\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx2daytoi.java:65: error: ';' expected\n        long maxValueOnesHund\n\
    \                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            } else\
    \ {\n                throw new RuntimeException(\"Unexpected input\");\n     \
    \       }\n        }\n        long onesCount = ones;\n        long tensCount =\
    \ tens;\n        long hundredsCount = hundreds;\n        long thousandsCount =\
    \ thousands;\n        long totalCount = onesCount + tensCount + hundredsCount\
    \ + thousandsCount;\n        if (totalCount > 0) {\n            long onesFraction\
    \ = onesCount * 1.0 / totalCount;\n            long tensFraction = tensCount *\
    \ 1.0 / totalCount;\n            long hundredsFraction = hundredsCount * 1.0 /\
    \ totalCount;\n            long thousandsFraction = thousandsCount * 1.0 / totalCount;\n\
    \            long totalFraction = onesFraction + tensFraction + hundredsFraction\
    \ + thousandsFraction;\n            long onesDecimal = onesCount * onesFraction;\n\
    \            long tensDecimal = tensCount * tensFraction;\n            long hundredsDecimal\
    \ = hundredsCount * hundredsFraction;\n            long thousandsDecimal = thousandsCount\
    \ * thousandsFraction;\n            long totalDecimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n            long onesDecimalDecimal =\
    \ onesDecimal * onesDecimal;\n            long tensDecimalDecimal = tensDecimal\
    \ * tensDecimal;\n            long hundredsDecimalDecimal = hundredsDecimal *\
    \ hundredsDecimal;\n            long thousandsDecimalDecimal = thousandsDecimal\
    \ * thousandsDecimal;\n            long totalDecimalDecimal = onesDecimalDecimal\
    \ + tensDecimalDecimal + hundredsDecimalDecimal + thousandsDecimalDecimal;\n \
    \           long onesDecimalDecimalDecimal = onesDecimalDecimal * onesDecimalDecimal;\n\
    \            long tensDecimalDecimalDecimal = tensDecimalDecimal * tensDecimalDecimal;\n\
    \            long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal * hundredsDecimalDecimal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1mkfqx96.java:60: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesCount = ones;\n        long tensCount = tens;\n        long\
    \ hundredsCount = hundreds;\n        long thousandsCount = thousands;\n      \
    \  long onesSum = 0;\n        long tensSum = 0;\n        long hundredsSum = 0;\n\
    \        long thousandsSum = 0;\n        long onesMax = 0;\n        long tensMax\
    \ = 0;\n        long hundredsMax = 0;\n        long thousandsMax = 0;\n      \
    \  long onesMin = Long.MAX_VALUE;\n        long tensMin = Long.MAX_VALUE;\n  \
    \      long hundredsMin = Long.MAX_VALUE;\n        long thousandsMin = Long.MAX_VALUE;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ onesSum++;\n                if (onesSum > onesMax) {\n                    onesMax\
    \ = onesSum;\n                }\n                if (onesSum < onesMin) {\n  \
    \                  onesMin = onesSum;\n                }\n            } else if\
    \ (num == 10) {\n                tensSum++;\n                if (tensSum > tensMax)\
    \ {\n                    tensMax = tensSum;\n                }\n             \
    \   if (tensSum < tensMin) {\n                    tensMin = tensSum;\n       \
    \         }\n            } else if (num == 100) {\n                hundredsSum++;\n\
    \                if (hundredsSum > hundredsMax) {\n                    hundredsMax\
    \ = hundredsSum;\n                }\n                if (hundredsSum < hundredsMin)\
    \ {\n                    hundredsMin = hundredsSum;\n                }\n     \
    \       } else if (num > 100) {\n                thousandsSum++;\n           \
    \     if (thousandsSum > thousandsMax) {\n                    thousandsMax = thousandsSum;\n\
    \                }\n                if (thousandsSum < thousandsMin) {\n     \
    \               thousandsMin = thousandsSum;\n                }\n            }\n\
    \        }\n        long onesDiff = onesMax - onesMin;\n        long tensDiff\
    \ = tensMax - tensMin;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpftfk_tub.java:86: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long val : arr) {\n            if (val == 1) {\n               \
    \ ones++;\n            } else if (val == 10) {\n                tens++;\n    \
    \        } else if (val == 100) {\n                hundreds++;\n            }\
    \ else if (val > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long val : arr) {\n   \
    \         if (val == 1) {\n                onesCount++;\n            } else if\
    \ (val == 10) {\n                tensCount++;\n            } else if (val == 100)\
    \ {\n                hundredsCount++;\n            } else if (val > 100) {\n \
    \               thousandsCount++;\n            }\n        }\n        long onesCount2\
    \ = onesCount * ones;\n        long tensCount2 = tensCount * tens;\n        long\
    \ hundredsCount2 = hundredsCount * hundreds;\n        long thousandsCount2 = thousandsCount\
    \ * thousands;\n        long onesCount3 = onesCount2 * ones;\n        long tensCount3\
    \ = tensCount2 * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n\
    \        long thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4\
    \ = onesCount3 * ones;\n        long tensCount4 = tensCount3 * tens;\n       \
    \ long hundredsCount4 = hundredsCount3 * hundreds;\n        long thousandsCount4\
    \ = thousandsCount3 * thousands;\n        long onesCount5 = onesCount4 * ones;\n\
    \        long tensCount5 = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4\
    \ * hundreds;\n        long thousandsCount5 = thousandsCount4 * thousands;\n \
    \       long onesCount6 = onesCount5 * ones;\n        long tensCount6 = tensCount5\
    \ * tens;\n        long hundredsCount6 = hundredsCount5 * hundreds;\n        long\
    \ thousandsCount6 = thousandsCount5 * thousands;\n        long onesCount7 = onesCount6\
    \ * ones;\n        long tensCount7 = tensCount6 * tens;\n        long hundredsCount7\
    \ = hundredsCount6 * hundreds;\n        long thous\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_95c1qxi.java:71: error: ';' expected\n        long thous\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        for (long i : arr) {\n\
    \            if (i == 1) {\n                ones++;\n            } else if (i\
    \ == 0) {\n                zeros++;\n            } else {\n                max\
    \ = Math.max(max, i);\n            }\n        }\n        long onesMax = ones *\
    \ max;\n        long zerosMax = zeros * max;\n        long maxDiff = onesMax -\
    \ zerosMax;\n        long onesDiff = onesMax - max;\n        long zerosDiff =\
    \ zerosMax - max;\n        if (onesDiff > zerosDiff) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1) {\n           \
    \         ones--;\n                } else if (i == 0) {\n                    zeros--;\n\
    \                } else {\n                    max = Math.max(max, i);\n     \
    \           }\n            }\n            onesMax = ones * max;\n            zerosMax\
    \ = zeros * max;\n            maxDiff = onesMax - zerosMax;\n            onesDiff\
    \ = onesMax - max;\n            zerosDiff = zerosMax - max;\n        }\n     \
    \   long onesDiff2 = onesDiff + zerosDiff;\n        long zerosDiff2 = onesDiff\
    \ - zerosDiff;\n        long maxDiff2 = onesDiff2 + zerosDiff2;\n        long\
    \ maxDiff3 = maxDiff + maxDiff2;\n        long maxDiff4 = maxDiff3 - maxDiff;\n\
    \        long maxDiff5 = maxDiff4 - maxDiff3;\n        long maxDiff6 = maxDiff5\
    \ - maxDiff4;\n        long maxDiff7 = maxDiff6 - maxDiff5;\n        long maxDiff8\
    \ = maxDiff7 - maxDiff6;\n        long maxDiff9 = maxDiff8 - maxDiff7;\n     \
    \   long maxDiff10 = maxDiff9 - maxDiff8;\n        long maxDiff11 = maxDiff10\
    \ - maxDiff9;\n        long maxDiff12 = maxDiff11 - maxDiff10;\n        long maxDiff13\
    \ = maxDiff12 - maxDiff11;\n        long maxDiff14 = maxDiff13 - maxDiff12;\n\
    \        long maxDiff15 = maxDiff14 - maxDiff13;\n        long maxDiff16 = maxDiff15\
    \ - maxDiff14;\n        long maxDiff17 = maxDiff16 - maxDiff15;\n        long\
    \ maxDiff18 = maxDiff17 - maxDiff16;\n        long maxDiff19 = maxDiff18 - maxDiff17;\n\
    \        long maxDiff20 = maxDiff19 - maxDiff18;\n        long maxDiff\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnq3euelu.java:73: error: ';' expected\n        long maxDiff\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesDiff = ones - zeros;\n        long\
    \ zerosDiff =  zeros - ones;\n        long onesDiff2 = ones - ones;\n        long\
    \ zerosDiff2 = zeros - zeros;\n        long onesDiff3 = ones - onesDiff;\n   \
    \     long zerosDiff3 = zeros - zerosDiff;\n        long onesDiff4 = ones - onesDiff2;\n\
    \        long zerosDiff4 = zeros - zerosDiff2;\n        long onesDiff5 = ones\
    \ - onesDiff3;\n        long zerosDiff5 = zeros - zerosDiff3;\n        long onesDiff6\
    \ = ones - onesDiff4;\n        long zerosDiff6 = zeros - zerosDiff4;\n       \
    \ long onesDiff7 = ones - onesDiff5;\n        long zerosDiff7 = zeros - zerosDiff5;\n\
    \        long onesDiff8 = ones - onesDiff6;\n        long zerosDiff8 = zeros -\
    \ zerosDiff6;\n        long onesDiff9 = ones - onesDiff7;\n        long zerosDiff9\
    \ = zeros - zerosDiff7;\n        long onesDiff10 = ones - onesDiff8;\n       \
    \ long zerosDiff10 = zeros - zerosDiff8;\n        long onesDiff11 = ones - onesDiff9;\n\
    \        long zerosDiff11 = zeros - zerosDiff9;\n        long onesDiff12 = ones\
    \ - onesDiff10;\n        long zerosDiff12 = zeros - zerosDiff10;\n        long\
    \ onesDiff13 = ones - onesDiff11;\n        long zerosDiff13 = zeros - zerosDiff11;\n\
    \        long onesDiff14 = ones - onesDiff12;\n        long zerosDiff14 = zeros\
    \ - zerosDiff12;\n        long onesDiff15 = ones - onesDiff13;\n        long zerosDiff15\
    \ = zeros - zerosDiff13;\n        long onesDiff16 = ones - onesDiff14;\n     \
    \   long zerosDiff16 = zeros - zerosDiff14;\n        long onesDiff17 = ones -\
    \ onesDiff15;\n        long zerosDiff17 = zeros - zerosDiff15;\n        long onesDiff18\
    \ = ones - onesDiff16;\n        long zerosDiff18 = zeros - zerosDiff16;\n    \
    \    long onesDiff19 = ones - onesDiff17;\n        long zerosDiff19 = zeros -\
    \ zerosDiff17;\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7r70g7bs.java:66: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i > 0) {\n\
    \                ones += i;\n            } else {\n                zeros += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long zerosCount\
    \ = zeros;\n        long maxOnesCount = ones;\n        long maxZeroCount = zeros;\n\
    \        for (long i : arr) {\n            if (i > 0) {\n                onesCount\
    \ -= i;\n            } else {\n                zerosCount -= i;\n            }\n\
    \            if (onesCount > maxOnesCount) {\n                maxOnesCount = onesCount;\n\
    \            }\n            if (zerosCount > maxZeroCount) {\n               \
    \ maxZeroCount = zerosCount;\n            }\n        }\n        long maxOnesCountInt\
    \ = maxOnesCount;\n        long maxZeroCountInt = maxZeroCount;\n        long\
    \ maxOnesCountLong = maxOnesCount;\n        long maxZeroCountLong = maxZeroCount;\n\
    \        for (long i : arr) {\n            if (i > 0) {\n                onesCount\
    \ -= i;\n            } else {\n                zerosCount -= i;\n            }\n\
    \            if (onesCount > maxOnesCountInt) {\n                maxOnesCountInt\
    \ = onesCount;\n            }\n            if (zerosCount > maxZeroCountInt) {\n\
    \                maxZeroCountInt = zerosCount;\n            }\n            if\
    \ (onesCount > maxOnesCountLong) {\n                maxOnesCountLong = onesCount;\n\
    \            }\n            if (zerosCount > maxZeroCountLong) {\n           \
    \     maxZeroCountLong = zerosCount;\n            }\n        }\n        long maxOnesCountLongInt\
    \ = maxOnesCountLong;\n        long maxZeroCountLongInt = maxZeroCountLong;\n\
    \        long maxOnesCountLongLong = maxOnesCountLong;\n        long maxZeroCountLongLong\
    \ = maxZeroCountLong;\n        for (long i : arr) {\n            if (i > 0) {\n\
    \                onesCount -= i;\n            } else {\n                zerosCount\
    \ -= i;\n            }\n            if (onesCount > maxOnesCountLongInt) {\n \
    \               maxOnesCountLongInt = onesCount;\n            }\n            if\
    \ (zerosCount > maxZeroCountLongInt) {\n                maxZeroCountLongInt =\
    \ zerosCount;\n            }\n            if (onesCount > maxOnesCountLongLong)\
    \ {\n                maxOnesCountLongLong = onesCount;\n            }\n      \
    \      if (zerosCount > maxZeroCountLongLong) {\n                maxZeroCountLong\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5w_blsho.java:87: error: not a statement\n                maxZeroCountLong\n\
    \                ^\n/tmp/tmp5w_blsho.java:87: error: ';' expected\n          \
    \      maxZeroCountLong\n                                ^\n/tmp/tmp5w_blsho.java:89:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long hundredths = 0;\n        long thousandths\
    \ = 0;\n        long tenthhundredths = 0;\n        long onehundredths = 0;\n \
    \       long onethousandths = 0;\n        long onetenthhundredths = 0;\n     \
    \   long onehundredththousandths = 0;\n        long onethousandthhundredths =\
    \ 0;\n        long onethousandthtenthhundredths = 0;\n        long onethousandthhundredththousandths\
    \ = 0;\n        long onethousandthhundredththousandthtenthhundredths = 0;\n  \
    \      long onethousandthhundredththousandthhundredththousandths = 0;\n      \
    \  long onethousandthhundredththousandthhundredththousandthtenthhundredths = 0;\n\
    \        long onethousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthtenthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long onethousandthhundredththous\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph5zf57zu.java:44: error: ';' expected\n        long onethousandthhundredththous\n\
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n\
    \        long tensDecimal = tens / Math.pow(10, arr.size());\n        long hundredsDecimal\
    \ = (hundreds / Math.pow(10, arr.size()));\n        long thousandsDecimal = (thousands\
    \ / Math.pow(10, arr.size()));\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        Collections.sort(result);\n \
    \       ArrayList<Long> sortedArray = new ArrayList<>();\n        for (Long l\
    \ : result) {\n            if (l == decimal) {\n                sortedArray.add(l);\n\
    \            }\n        }\n        return sortedArray;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpprvvde73.java:35: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long onesDecimal = ones / Math.pow(10, arr.size());\n\
    \                                ^\n/tmp/tmpprvvde73.java:36: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long tensDecimal\
    \ = tens / Math.pow(10, arr.size());\n                                ^\n/tmp/tmpprvvde73.java:37:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       long hundredsDecimal = (hundreds / Math.pow(10, arr.size()));\n      \
    \                                   ^\n/tmp/tmpprvvde73.java:38: error: incompatible\
    \ types: possible lossy conversion from double to long\n        long thousandsDecimal\
    \ = (thousands / Math.pow(10, arr.size()));\n                                \
    \           ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long hundredths = 0;\n        long thousandths\
    \ = 0;\n        long tenthhundredths = 0;\n        long hundredththousandths =\
    \ 0;\n        long thousandthhundredths = 0;\n        long tenththousandths =\
    \ 0;\n        long hundredthtenththousandths = 0;\n        long thousandthhundredthtenths\
    \ = 0;\n        long tenthhundredththousandths = 0;\n        long hundredththousandthtenths\
    \ = 0;\n        long thousandthhundredthtenthhundreds = 0;\n        long tenththousandthhundredththousands\
    \ = 0;\n        long hundredthtenththousandthhundredths = 0;\n        long thousandthhundredthtenthhundredththousands\
    \ = 0;\n        long tenthhundredththousandthhundredthtenths = 0;\n        long\
    \ hundredththousandthtenthhundredththousandths = 0;\n        long thousandthhundredthtenthhundredththousandthhundreds\
    \ = 0;\n        long tenththousandthhundredththousandthhundredththousands = 0;\n\
    \        long hundredthtenththousandthhundredththousandthhundredththousands =\
    \ 0;\n        long thousandthhundredthtenthhundredththousandthhundredththousandthhundreds\
    \ = 0;\n        long tenthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long hundredththousandthtenthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long thousandthhundredthtenthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long tenththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long hundredthtenththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3kt3kux9.java:49: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxNum = ones + zeros;\n        long maxOnesNum = ones;\n\
    \        long maxZerosNum = zeros;\n        for (long num : arr) {\n         \
    \   if (num == 1) {\n                ones++;\n                if (ones > maxOnes)\
    \ {\n                    maxOnes = ones;\n                    maxOnesNum = ones;\n\
    \                }\n            } else {\n                zeros++;\n         \
    \       if (zeros > maxZeros) {\n                    maxZeros = zeros;\n     \
    \               maxZerosNum = zeros;\n                }\n            }\n     \
    \   }\n        long maxNumOnes = ones + zeros;\n        long maxNumZeros = zeros\
    \ + ones;\n        long maxNumOnesNum = ones + zeros;\n        long maxNumZerosNum\
    \ = zeros + ones;\n        long maxNumOnesZeros = ones;\n        long maxNumZerosOnes\
    \ = zeros;\n        for (long num : arr) {\n            if (num == 1) {\n    \
    \            ones++;\n                if (ones > maxNumOnes) {\n             \
    \       maxNumOnes = ones;\n                    maxNumOnesNum = ones;\n      \
    \          }\n            } else {\n                zeros++;\n               \
    \ if (zeros > maxNumZeros) {\n                    maxNumZeros = zeros;\n     \
    \               maxNumZerosNum = zeros;\n                }\n            }\n  \
    \      }\n        long maxNumOnesZeros = ones;\n        long maxNumZerosOnes =\
    \ zeros;\n        for (long num : arr) {\n            if (num == 1) {\n      \
    \          ones++;\n                if (ones > maxNumOnesZeros) {\n          \
    \          maxNumOnesZeros = ones;\n                    maxNumOnesNum = ones;\n\
    \                }\n            } else {\n                zeros++;\n         \
    \       if (zeros > maxNumZerosOnes) {\n                    maxNumZerosOnes =\
    \ zeros;\n                    maxNumZerosNum = zeros;\n                }\n   \
    \         }\n        }\n        long maxNumOnesNumZeros = ones + zeros;\n    \
    \    long maxNumZerosNumOnes = zeros + ones;\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n                if (ones\
    \ > maxNumOnesNumZeros) {\n                    maxNumOnesNumZeros = ones;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7dxsi6bz.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long val : arr) {\n            int bin = Integer.toBinaryString(val).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 1000;\n        long\
    \ tensDecimal = tens * 100;\n        long hundredsDecimal = hundreds * 10;\n \
    \       long thousandsDecimal = thousands * 1;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long maxDecimal\
    \ = Long.MAX_VALUE;\n        for (Long val : arr) {\n            int bin = Integer.toBinaryString(val).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 1000;\n        long\
    \ tensDecimal = tens * 100;\n        long hundredsDecimal = hundreds * 10;\n \
    \       long thousandsDecimal = thousands * 1;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long maxDecimal\
    \ = Long.MAX_VALUE;\n        for (Long val : arr) {\n            int bin = Integer.toBinaryString(val).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 1000;\n        long\
    \ tensDecimal = tens * 100;\n        long hundredsDecimal = hundreds * 10;\n \
    \       long thousandsDecimal = thousands * 1;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long maxDecimal\
    \ = Long.MAX_VALUE;\n        for (Long val : arr) {\n            int bin = Integer.\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp11bnhc3_.java:77: error: <identifier> expected\n            int\
    \ bin = Integer.\n                              ^\n/tmp/tmp11bnhc3_.java:79: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (Long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousandsCount++;\n   \
    \         }\n        }\n        long onesDecimal = 0;\n        long tensDecimal\
    \ = 0;\n        long hundredsDecimal = 0;\n        long thousandsDecimal = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ onesDecimal++;\n            } else if (num == 10) {\n                tensDecimal++;\n\
    \            } else if (num == 100) {\n                hundredsDecimal++;\n  \
    \          } else if (num > 100 && num < 1000) {\n                thousandsDecimal++;\n\
    \            }\n        }\n        long onesDecimalCount = 0;\n        long tensDecimalCount\
    \ = 0;\n        long hundredsDecimalCount = 0;\n        long thousandsDecimalCount\
    \ = 0;\n        for (Long num : arr) {\n            if (num == 1) {\n        \
    \        onesDecimalCount++;\n            } else if (num == 10) {\n          \
    \      tensDecimalCount++;\n            } else if (num == 100) {\n           \
    \     hundredsDecimalCount++;\n            } else if (num > 100 && num < 1000)\
    \ {\n                thousandsDecimalCount++;\n            }\n        }\n    \
    \    long onesDecimalDecimal = 0;\n        long tensDecimalDecimal = 0;\n    \
    \    long hundredsDecimalDecimal = 0;\n        long thousandsDecimalDecimal =\
    \ 0;\n        for (Long num : arr) {\n            if (num == 1) {\n          \
    \      onesDecimalDecimal++;\n            } else if (num == 10) {\n          \
    \      tensDecimalDecimal++;\n            } else if (num == 100) {\n         \
    \       hundredsDecimalDecimal++;\n            } else if (num > 100 && num < 1000)\
    \ {\n                thousandsDecimalDecimal++;\n            }\n        }\n  \
    \      long onesDecimalDecimalCount = 0;\n        long tensDecimalDecimalCount\
    \ = 0;\n        long hundredsDecimalDecimalCount = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc6f9l3or.java:97: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesDiff = ones - zeros;\n        long\
    \ zerosDiff =  zeros - ones;\n        long onesDiff2 = ones - ones;\n        long\
    \ zerosDiff2 = zeros - zeros;\n        long onesDiff3 = ones - onesDiff;\n   \
    \     long zerosDiff3 = zeros - zerosDiff;\n        long onesDiff4 = ones - onesDiff2;\n\
    \        long zerosDiff4 = zeros - zerosDiff2;\n        long onesDiff5 = ones\
    \ - onesDiff3;\n        long zerosDiff5 = zeros - zerosDiff3;\n        long onesDiff6\
    \ = ones - onesDiff4;\n        long zerosDiff6 = zeros - zerosDiff4;\n       \
    \ long onesDiff7 = ones - onesDiff5;\n        long zerosDiff7 = zeros - zerosDiff5;\n\
    \        long onesDiff8 = ones - onesDiff6;\n        long zerosDiff8 = zeros -\
    \ zerosDiff6;\n        long onesDiff9 = ones - onesDiff7;\n        long zerosDiff9\
    \ = zeros - zerosDiff7;\n        long onesDiff10 = ones - onesDiff8;\n       \
    \ long zerosDiff10 = zeros - zerosDiff8;\n        long onesDiff11 = ones - onesDiff9;\n\
    \        long zerosDiff11 = zeros - zerosDiff9;\n        long onesDiff12 = ones\
    \ - onesDiff10;\n        long zerosDiff12 = zeros - zerosDiff10;\n        long\
    \ onesDiff13 = ones - onesDiff11;\n        long zerosDiff13 = zeros - zerosDiff11;\n\
    \        long onesDiff14 = ones - onesDiff12;\n        long zerosDiff14 = zeros\
    \ - zerosDiff12;\n        long onesDiff15 = ones - onesDiff13;\n        long zerosDiff15\
    \ = zeros - zerosDiff13;\n        long onesDiff16 = ones - onesDiff14;\n     \
    \   long zerosDiff16 = zeros - zerosDiff14;\n        long onesDiff17 = ones -\
    \ onesDiff15;\n        long zerosDiff17 = zeros - zerosDiff15;\n        long onesDiff18\
    \ = ones - onesDiff16;\n        long zerosDiff18 = zeros - zerosDiff16;\n    \
    \    long onesDiff19 = ones - onesDiff17;\n        long zerosDiff19 = zeros -\
    \ zerosDiff17;\n        \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1hmfwcvw.java:66: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.compareTo(Long.MIN_VALUE) ==\
    \ 0) {\n                ones++;\n            } else if (i.compareTo(Long.MAX_VALUE)\
    \ == 0) {\n                tens++;\n            } else if (i.compareTo(Long.MAX_VALUE\
    \ * 10) == 0) {\n                tens++;\n                hundreds++;\n      \
    \      } else if (i.compareTo(Long.MAX_VALUE * 100) == 0) {\n                tens++;\n\
    \                hundreds++;\n                thousands++;\n            } else\
    \ if (i.compareTo(Long.MAX_VALUE * 1000) == 0) {\n                tens++;\n  \
    \              hundreds++;\n                thousands++;\n                thousands++;\n\
    \            }\n        }\n        ones = ones * 10;\n        tens = tens * 100;\n\
    \        hundreds = hundreds * 1000;\n        thousands = thousands * 1000;\n\
    \        ArrayList<Long> temp = new ArrayList<>();\n        long onesCount = 0;\n\
    \        long tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        for (Long i : arr) {\n            if (i.compareTo(Long.MIN_VALUE)\
    \ == 0) {\n                onesCount++;\n            } else if (i.compareTo(Long.MAX_VALUE)\
    \ == 0) {\n                tensCount++;\n            } else if (i.compareTo(Long.MAX_VALUE\
    \ * 10) == 0) {\n                tensCount++;\n                hundredsCount++;\n\
    \            } else if (i.compareTo(Long.MAX_VALUE * 100) == 0) {\n          \
    \      tensCount++;\n                hundredsCount++;\n                thousandsCount++;\n\
    \            } else if (i.compareTo(Long.MAX_VALUE * 1000) == 0) {\n         \
    \       tensCount++;\n                hundredsCount++;\n                thousandsCount++;\n\
    \                thousandsCount++;\n            }\n        }\n        onesCount\
    \ = onesCount * 10;\n        tensCount = tensCount * 100;\n        hundredsCount\
    \ = hundredsCount * 1000;\n        thousandsCount = thousandsCount * 1000;\n \
    \       long onesCountTemp = 0;\n        long tensCountTemp = 0;\n        long\
    \ hundredsCountTemp = 0;\n        long thousandsCountTemp = 0;\n        for (Long\
    \ i : arr) {\n            if (i.compareTo(Long.MIN_VALUE) == 0) {\n          \
    \      onesCountTemp++;\n            } else if (i.compareTo(Long.MAX_VALUE) ==\
    \ 0) {\n                tensCountTemp++;\n            } else if (i.compareTo(Long.MAX_VALUE\
    \ * 10) == 0) {\n                tensCountTemp\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfq_32680.java:83: error: not a statement\n                tensCountTemp\n\
    \                ^\n/tmp/tmpfq_32680.java:83: error: ';' expected\n          \
    \      tensCountTemp\n                             ^\n/tmp/tmpfq_32680.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThous\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5g5u9662.java:29: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmp5g5u9662.java:30: error:\
    \ ';' expected\n        long oneHundredThousandHundredThousands++;\n         \
    \                                      ^\n/tmp/tmp5g5u9662.java:31: error: ';'\
    \ expected\n        long oneHundredThousandHundredThousands++;\n             \
    \                                  ^\n/tmp/tmp5g5u9662.java:32: error: ';' expected\n\
    \        long oneHundredThousandHundredThousands++;\n                        \
    \                       ^\n/tmp/tmp5g5u9662.java:33: error: ';' expected\n   \
    \     long oneHundredThousandHundredThousands++;\n                           \
    \                    ^\n/tmp/tmp5g5u9662.java:34: error: ';' expected\n      \
    \  long oneHundredThousandHundredThousands++;\n                              \
    \                 ^\n/tmp/tmp5g5u9662.java:35: error: ';' expected\n        long\
    \ oneHundredThousandHundredThousands++;\n                                    \
    \           ^\n/tmp/tmp5g5u9662.java:36: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmp5g5u9662.java:37: error:\
    \ ';' expected\n        long oneHundredThousandHundredThousands++;\n         \
    \                                      ^\n/tmp/tmp5g5u9662.java:38: error: ';'\
    \ expected\n        long oneHundredThousandHundredThousands++;\n             \
    \                                  ^\n/tmp/tmp5g5u9662.java:39: error: ';' expected\n\
    \        long oneHundredThousandHundredThousands++;\n                        \
    \                       ^\n/tmp/tmp5g5u9662.java:40: error: ';' expected\n   \
    \     long oneHundredThousandHundredThousands++;\n                           \
    \                    ^\n/tmp/tmp5g5u9662.java:41: error: ';' expected\n      \
    \  long oneHundredThousandHundredThousands++;\n                              \
    \                 ^\n/tmp/tmp5g5u9662.java:42: error: ';' expected\n        long\
    \ oneHundredThousandHundredThousands++;\n                                    \
    \           ^\n/tmp/tmp5g5u9662.java:43: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmp5g5u9662.java:44: error:\
    \ ';' expected\n        long oneHundredThousandHundredThousands++;\n         \
    \                                      ^\n/tmp/tmp5g5u9662.java:45: error: ';'\
    \ expected\n        long oneHundredThousandHundredThousands++;\n             \
    \                                  ^\n/tmp/tmp5g5u9662.java:46: error: ';' expected\n\
    \        long oneHundredThousandHundredThousands++;\n                        \
    \                       ^\n/tmp/tmp5g5u9662.java:47: error: ';' expected\n   \
    \     long oneHundredThousandHundredThousands++;\n                           \
    \                    ^\n/tmp/tmp5g5u9662.java:48: error: ';' expected\n      \
    \  long oneHundredThousandHundredThousands++;\n                              \
    \                 ^\n/tmp/tmp5g5u9662.java:49: error: ';' expected\n        long\
    \ oneHundredThousandHundredThousands++;\n                                    \
    \           ^\n/tmp/tmp5g5u9662.java:50: error: ';' expected\n        long oneHundredThousandHundredThousands++;\n\
    \                                               ^\n/tmp/tmp5g5u9662.java:51: error:\
    \ ';' expected\n        long oneHundredThous\n                            ^\n\
    23 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.compareTo(Long.MIN_VALUE) < 0)\
    \ {\n                result.add(i);\n            } else if (i.compareTo(Long.MIN_VALUE)\
    \ == 0) {\n                ones++;\n            } else if (i.compareTo(Long.MIN_VALUE)\
    \ > 0 && i.compareTo(Long.MIN_VALUE) % 10 == 0) {\n                tens++;\n \
    \           } else if (i.compareTo(Long.MIN_VALUE) > 0 && i.compareTo(Long.MIN_VALUE)\
    \ % 100 == 0) {\n                hundreds++;\n            } else if (i.compareTo(Long.MIN_VALUE)\
    \ > 0 && i.compareTo(Long.MIN_VALUE) % 1000 == 0) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > tensCount) {\n            onesCount =\
    \ tensCount;\n            hundredsCount = onesCount;\n        }\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n            thousandsCount\
    \ = onesCount;\n        }\n        if (onesCount > thousandsCount) {\n       \
    \     onesCount = thousandsCount;\n            hundredsCount = onesCount;\n  \
    \      }\n        if (onesCount == 0) {\n            onesCount = 1;\n        }\n\
    \        if (tensCount == 0) {\n            tensCount = 1;\n        }\n      \
    \  if (hundredsCount == 0) {\n            hundredsCount = 1;\n        }\n    \
    \    if (thousandsCount == 0) {\n            thousandsCount = 1;\n        }\n\
    \        long onesCount2 = onesCount * onesCount;\n        long tensCount2 = tensCount\
    \ * tensCount;\n        long hundredsCount2 = hundredsCount * hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount * thousandsCount;\n        long\
    \ onesCount3 = onesCount2 * onesCount;\n        long tensCount3 = tensCount2 *\
    \ tensCount;\n        long hundredsCount3 = hundredsCount2 * hundredsCount;\n\
    \        long thousandsCount3 = thousandsCount2 * thousandsCount;\n        long\
    \ onesCount4 = onesCount3 * onesCount;\n        long tensCount4 = tensCount3 *\
    \ tensCount;\n        long hundredsCount\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06s9i8x6.java:73: error: ';' expected\n        long hundredsCount\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (Long l : arr) {\n            total += l;\n\
    \            ones += l == 1 ? 1 : 0;\n            tens += l == 10 ? 1 : 0;\n \
    \           hundreds += l == 100 ? 1 : 0;\n            thousands += l == 1000\
    \ ? 1 : 0;\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long totalCount = total;\n        long onesCountTotal\
    \ = onesCount * totalCount;\n        long tensCountTotal = tensCount * totalCount;\n\
    \        long hundredsCountTotal = hundredsCount * totalCount;\n        long thousandsCountTotal\
    \ = thousandsCount * totalCount;\n        long totalCountTotal = totalCount *\
    \ totalCount;\n        long onesCountOnes = onesCount * onesCount;\n        long\
    \ tensCountTens = tensCount * tensCount;\n        long hundredsCountHundreds =\
    \ hundredsCount * hundredsCount;\n        long thousandsCountThousands = thousandsCount\
    \ * thousandsCount;\n        long totalCountTotal = totalCount * totalCount;\n\
    \        long onesCountOnesTotal = onesCountTotal * onesCount;\n        long tensCountTensTotal\
    \ = tensCountTotal * tensCount;\n        long hundredsCountHundredsTotal = hundredsCountTotal\
    \ * hundredsCount;\n        long thousandsCountThousandsTotal = thousandsCountTotal\
    \ * thousandsCount;\n        long totalCountTotalTotal = totalCountTotal * totalCount;\n\
    \        long onesCountOnesOnes = onesCountOnes * onesCount;\n        long tensCountTensTens\
    \ = tensCountTens * tensCount;\n        long hundredsCountHundredsHundreds = hundredsCountHundreds\
    \ * hundredsCount;\n        long thousandsCountThousandsThousands = thousandsCountThousands\
    \ * thousandsCount;\n        long totalCountTotalTotal = totalCountTotal * totalCount;\n\
    \        long onesCountOnes\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsj6eany9.java:55: error: ';' expected\n        long onesCountOnes\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenthousands = 0;\n        long millions = 0;\n        long billions\
    \ = 0;\n        long trillions = 0;\n        long quadrillions = 0;\n        long\
    \ quintillions = 0;\n        long sextillions = 0;\n        long septillions =\
    \ 0;\n        long octillions = 0;\n        long nonillions = 0;\n        long\
    \ decillions = 0;\n        long undecillions = 0;\n        long duodecillions\
    \ = 0;\n        long tredecillions = 0;\n        long quattuordecillions = 0;\n\
    \        long quindecillions = 0;\n        long sexdecillions = 0;\n        long\
    \ septendecillions = 0;\n        long octodecillions = 0;\n        long novemdecillions\
    \ = 0;\n        long vigintillions = 0;\n        long unvigintillions = 0;\n \
    \       long duovigintillions = 0;\n        long trevigintillions = 0;\n     \
    \   long quattuorvigintillions = 0;\n        long quinvigintillions = 0;\n   \
    \     long sexvigintillions = 0;\n        long septenvigintillions = 0;\n    \
    \    long octovigintillions = 0;\n        long novemvigintillions = 0;\n     \
    \   long vigintillions = 0;\n        long unvigintillions = 0;\n        long duovigintillions\
    \ = 0;\n        long trevigintillions = 0;\n        long quattuorvigintillions\
    \ = 0;\n        long quinvigintillions = 0;\n        long sexvigintillions = 0;\n\
    \        long septenvigintillions = 0;\n        long octovigintillions = 0;\n\
    \        long novemvigintillions = 0;\n        long vigintillions = 0;\n     \
    \   long unvigintillions = 0;\n        long duovigintillions = 0;\n        long\
    \ trevigintillions = 0;\n        long quattuorvigintillions = 0;\n        long\
    \ quinvigintillions = 0;\n        long sexvigintillions = 0;\n        long septenvigintillions\
    \ = 0;\n        long octovigintillions = 0;\n        long novemvigintillion\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xrfqyzd.java:71: error: ';' expected\n        long novemvigintillion\n\
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1) {\n           \
    \         result.add(i);\n                }\n            }\n        } else {\n\
    \            Collections.sort(arr);\n            for (long i : arr) {\n      \
    \          if (i == 0) {\n                    result.add(i);\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7bad6vm.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        for (Long num : arr) {\n            if (num == 1) {\n    \
    \            ones--;\n            } else {\n                zeros--;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            maxOnes = ones;\n\
    \            maxZeros = zeros;\n        }\n        long maxOnesDecimal = maxOnes\
    \ / Math.pow(10, maxOnes - 1);\n        long maxZerosDecimal = maxZeros / Math.pow(10,\
    \ maxZeros - 1);\n        long maxDecimal = Math.max(maxOnesDecimal, maxZerosDecimal);\n\
    \        long maxDecimalDecimal = maxDecimal / Math.pow(10, maxDecimal - 1);\n\
    \        long maxDecimalDecimalDecimal = maxDecimalDecimal / Math.pow(10, maxDecimalDecimal\
    \ - 1);\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimal - 1);\n        long maxDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimal\
    \ - 1);\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimal - 1);\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ - 1);\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal - 1);\n\
    \        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal -\
    \ 1);\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal - 1);\n \
    \       long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimal\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpam3d1sdj.java:52: error: ')' expected\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimal\n                           \
    \                                                                            \
    \                                                                            \
    \                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num == 1000) {\n                thousands++;\n            }\n     \
    \   }\n        long onesDecimal = ones * 10 + tens;\n        long tensDecimal\
    \ = tens * 10 + hundreds;\n        long hundredsDecimal = hundreds * 10 + thousands;\n\
    \        long thousandsDecimal = thousands * 10;\n        long onesDecimalDecimal\
    \ = onesDecimal * 10 + tensDecimal;\n        long tensDecimalDecimal = tensDecimal\
    \ * 10 + hundredsDecimal;\n        long hundredsDecimalDecimal = hundredsDecimal\
    \ * 10 + thousandsDecimal;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ * 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal * 10 + tensDecimalDecimal;\n\
    \        long tensDecimalDecimalDecimal = tensDecimalDecimal * 10 + hundredsDecimalDecimal;\n\
    \        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal * 10 + thousandsDecimalDecimal;\n\
    \        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal * 10;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10\
    \ + tensDecimalDecimalDecimal;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal * 10 + hundredsDecimalDecimalDecimal;\n        long\
    \ hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal * 10 +\
    \ thousandsDecimalDecimalDecimalDecimal;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal * 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal * 10 + tensDecimalDecimalDecimalDecimalDecimal;\n\
    \        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ * 10 + hundredsDecimalDecimalDecimalDecimalDecimal;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimalDecimal * 10 + thousandsDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long ones\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8l_wk2y8.java:53: error: ';' expected\n        long ones\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        for (Long i : arr) {\n            if (i == 1) {\n        \
    \        ones--;\n            } else {\n                zeros--;\n           \
    \ }\n        }\n        if (ones > zeros) {\n            long maxOnesNew = ones;\n\
    \            long maxZerosNew = zeros;\n            for (Long i : arr) {\n   \
    \             if (i == 1) {\n                    ones++;\n                } else\
    \ {\n                    zeros++;\n                }\n            }\n        \
    \    if (ones > zeros) {\n                maxOnesNew = ones;\n               \
    \ maxZerosNew = zeros;\n            }\n            ones = maxOnesNew;\n      \
    \      zeros = maxZerosNew;\n        }\n        long maxOnesNew = ones;\n    \
    \    long maxZerosNew = zeros;\n        for (Long i : arr) {\n            if (i\
    \ == 1) {\n                ones--;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        if (ones > zeros) {\n            maxOnesNew\
    \ = ones;\n            maxZerosNew = zeros;\n        }\n        ones = maxOnesNew;\n\
    \        zeros = maxZerosNew;\n        long maxOnesNew = ones;\n        long maxZerosNew\
    \ = zeros;\n        for (Long i : arr) {\n            if (i == 1) {\n        \
    \        ones++;\n            } else {\n                zeros++;\n           \
    \ }\n        }\n        if (ones > zeros) {\n            maxOnesNew = ones;\n\
    \            maxZerosNew = zeros;\n        }\n        ones = maxOnesNew;\n   \
    \     zeros = maxZerosNew;\n        long maxOnesNew = ones;\n        long maxZerosNew\
    \ = zeros;\n        for (Long i : arr) {\n            if (i == 1) {\n        \
    \        ones--;\n            } else {\n                zeros--;\n           \
    \ }\n        }\n        if (ones > zeros) {\n            maxOnesNew = ones;\n\
    \            maxZerosNew = zeros;\n        }\n        ones = maxOnesNew;\n   \
    \     zeros = maxZerosNew;\n        long maxOnesNew = ones;\n        long maxZerosNew\
    \ = zeros;\n        for (Long i : arr) {\n            if (i == 1) {\n        \
    \        ones++;\n            } else {\n                zeros++;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzjbzk0e1.java:107: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num >= 1000) {\n                thousands++;\n            }\n     \
    \   }\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                onesCount++;\n      \
    \      } else if (num == 10) {\n                tensCount++;\n            } else\
    \ if (num == 100) {\n                hundredsCount++;\n            } else if (num\
    \ >= 1000) {\n                thousandsCount++;\n            }\n        }\n  \
    \      long onesCount2 = onesCount * ones;\n        long tensCount2 = tensCount\
    \ * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n        long\
    \ thousandsCount2 = thousandsCount * thousands;\n        long onesCount3 = onesCount2\
    \ * ones;\n        long tensCount3 = tensCount2 * tens;\n        long hundredsCount3\
    \ = hundredsCount2 * hundreds;\n        long thousandsCount3 = thousandsCount2\
    \ * thousands;\n        long onesCount4 = onesCount3 * ones;\n        long tensCount4\
    \ = tensCount3 * tens;\n        long hundredsCount4 = hundredsCount3 * hundreds;\n\
    \        long thousandsCount4 = thousandsCount3 * thousands;\n        long onesCount5\
    \ = onesCount4 * ones;\n        long tensCount5 = tensCount4 * tens;\n       \
    \ long hundredsCount5 = hundredsCount4 * hundreds;\n        long thousandsCount5\
    \ = thousandsCount4 * thousands;\n        long onesCount6 = onesCount5 * ones;\n\
    \        long tensCount6 = tensCount5 * tens;\n        long hundredsCount6 = hundredsCount5\
    \ * hundreds;\n        long thousandsCount6 = thousandsCount5 * thousands;\n \
    \       long onesCount7 = onesCount6 * ones;\n        long tensCount7 = tensCount6\
    \ * tens;\n        long hundredsCount7 = hundredsCount6 * hundreds;\n        long\
    \ thousands\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu7a563e4.java:71: error: ';' expected\n        long thousands\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n       \
    \ long thousandsDecimal = (thousands / 10) * 10;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long onesDecimalDecimal\
    \ = onesDecimal / decimal;\n        long tensDecimalDecimal = tensDecimal / decimal;\n\
    \        long hundredsDecimalDecimal = (hundredsDecimal / decimal) * decimal;\n\
    \        long thousandsDecimalDecimal = (thousandsDecimal / decimal) * decimal;\n\
    \        long decimalDecimal = onesDecimalDecimal + tensDecimalDecimal + hundredsDecimalDecimal\
    \ + thousandsDecimalDecimal;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / decimalDecimal;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / decimalDecimal;\n        long hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal\
    \ / decimalDecimal) * decimalDecimal;\n        long thousandsDecimalDecimalDecimal\
    \ = (thousandsDecimalDecimal / decimalDecimal) * decimalDecimal;\n        long\
    \ decimalDecimalDecimal = onesDecimalDecimalDecimal + tensDecimalDecimalDecimal\
    \ + hundredsDecimalDecimalDecimal + thousandsDecimalDecimalDecimal;\n        long\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / decimalDecimalDecimal;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / decimalDecimalDecimal;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / decimalDecimalDecimal) * decimalDecimalDecimal;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = (thousandsDecimalDecimalDecimal / decimalDecimal\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu2mtgxa7.java:51: error: ')' expected\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = (thousandsDecimalDecimalDecimal / decimalDecimal\n                       \
    \                                                                            \
    \  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredTh\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnj8ktc3y.java:40: error: ';' expected\n        long oneHundredThousandHundredThousandHundredTh\n\
    \                                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            }\n            if (i > 10) {\n                tens += i;\n\
    \            }\n            if (i > 100) {\n                hundreds += i;\n \
    \           }\n            if (i > 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long ones_count = ones;\n        long tens_count\
    \ = tens;\n        long hundreds_count = hundreds;\n        long thousands_count\
    \ = thousands;\n        long total_count = ones_count + tens_count + hundreds_count\
    \ + thousands_count;\n        long total_value = ones_count * 10 + tens_count\
    \ * 100 + hundreds_count * 1000 + thousands_count;\n        long total_value_2\
    \ = ones_count * 100 + tens_count * 1000 + hundreds_count * 10000 + thousands_count;\n\
    \        long total_value_3 = ones_count * 1000 + tens_count * 10000 + hundreds_count\
    \ * 100000 + thousands_count;\n        long total_value_4 = ones_count * 10000\
    \ + tens_count * 100000 + hundreds_count * 1000000 + thousands_count;\n      \
    \  long total_value_5 = ones_count * 1000000 + tens_count * 10000000 + hundreds_count\
    \ * 100000000 + thousands_count;\n        long total_value_6 = ones_count * 100000000\
    \ + tens_count * 1000000000 + hundreds_count * 10000000000 + thousands_count;\n\
    \        long total_value_7 = ones_count * 10000000000 + tens_count * 100000000000\
    \ + hundreds_count * 1000000000000 + thousands_count;\n        long total_value_8\
    \ = ones_count * 1000000000000 + tens_count * 10000000000000 + hundreds_count\
    \ * 100000000000000 + thousands_count;\n        long total_value_9 = ones_count\
    \ * 100000000000000 + tens_count * 1000000000000000 + hundreds_count * 10000000000000000\
    \ + thousands_count;\n        long total_value_10 = ones_count * 10000000000000000\
    \ + tens_count * 100000000000000000 + hundreds_count * 1000000000000000000 + thousands_count;\n\
    \        long total_value_11 = ones_count * 1000000000000000000 + tens_count *\
    \ 10000000000000000000 + hundreds_count * 100000000000000000000 + thousands_count;\n\
    \        long total_value_12 = ones_count * 1000000000000000000\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvizi6d1c.java:46: error: integer number too large\n        long\
    \ total_value_6 = ones_count * 100000000 + tens_count * 1000000000 + hundreds_count\
    \ * 10000000000 + thousands_count;\n                                         \
    \                                                        ^\n/tmp/tmpvizi6d1c.java:47:\
    \ error: integer number too large\n        long total_value_7 = ones_count * 10000000000\
    \ + tens_count * 100000000000 + hundreds_count * 1000000000000 + thousands_count;\n\
    \                                          ^\n/tmp/tmpvizi6d1c.java:47: error:\
    \ integer number too large\n        long total_value_7 = ones_count * 10000000000\
    \ + tens_count * 100000000000 + hundreds_count * 1000000000000 + thousands_count;\n\
    \                                                                     ^\n/tmp/tmpvizi6d1c.java:47:\
    \ error: integer number too large\n        long total_value_7 = ones_count * 10000000000\
    \ + tens_count * 100000000000 + hundreds_count * 1000000000000 + thousands_count;\n\
    \                                                                            \
    \                         ^\n/tmp/tmpvizi6d1c.java:48: error: integer number too\
    \ large\n        long total_value_8 = ones_count * 1000000000000 + tens_count\
    \ * 10000000000000 + hundreds_count * 100000000000000 + thousands_count;\n   \
    \                                       ^\n/tmp/tmpvizi6d1c.java:48: error: integer\
    \ number too large\n        long total_value_8 = ones_count * 1000000000000 +\
    \ tens_count * 10000000000000 + hundreds_count * 100000000000000 + thousands_count;\n\
    \                                                                       ^\n/tmp/tmpvizi6d1c.java:48:\
    \ error: integer number too large\n        long total_value_8 = ones_count * 1000000000000\
    \ + tens_count * 10000000000000 + hundreds_count * 100000000000000 + thousands_count;\n\
    \                                                                            \
    \                             ^\n/tmp/tmpvizi6d1c.java:49: error: integer number\
    \ too large\n        long total_value_9 = ones_count * 100000000000000 + tens_count\
    \ * 1000000000000000 + hundreds_count * 10000000000000000 + thousands_count;\n\
    \                                          ^\n/tmp/tmpvizi6d1c.java:49: error:\
    \ integer number too large\n        long total_value_9 = ones_count * 100000000000000\
    \ + tens_count * 1000000000000000 + hundreds_count * 10000000000000000 + thousands_count;\n\
    \                                                                         ^\n\
    /tmp/tmpvizi6d1c.java:49: error: integer number too large\n        long total_value_9\
    \ = ones_count * 100000000000000 + tens_count * 1000000000000000 + hundreds_count\
    \ * 10000000000000000 + thousands_count;\n                                   \
    \                                                                          ^\n\
    /tmp/tmpvizi6d1c.java:50: error: integer number too large\n        long total_value_10\
    \ = ones_count * 10000000000000000 + tens_count * 100000000000000000 + hundreds_count\
    \ * 1000000000000000000 + thousands_count;\n                                 \
    \          ^\n/tmp/tmpvizi6d1c.java:50: error: integer number too large\n    \
    \    long total_value_10 = ones_count * 10000000000000000 + tens_count * 100000000000000000\
    \ + hundreds_count * 1000000000000000000 + thousands_count;\n                \
    \                                                            ^\n/tmp/tmpvizi6d1c.java:50:\
    \ error: integer number too large\n        long total_value_10 = ones_count *\
    \ 10000000000000000 + tens_count * 100000000000000000 + hundreds_count * 1000000000000000000\
    \ + thousands_count;\n                                                       \
    \                                                           ^\n/tmp/tmpvizi6d1c.java:51:\
    \ error: integer number too large\n        long total_value_11 = ones_count *\
    \ 1000000000000000000 + tens_count * 10000000000000000000 + hundreds_count * 100000000000000000000\
    \ + thousands_count;\n                                           ^\n/tmp/tmpvizi6d1c.java:51:\
    \ error: integer number too large\n        long total_value_11 = ones_count *\
    \ 1000000000000000000 + tens_count * 10000000000000000000 + hundreds_count * 100000000000000000000\
    \ + thousands_count;\n                                                       \
    \                       ^\n/tmp/tmpvizi6d1c.java:51: error: integer number too\
    \ large\n        long total_value_11 = ones_count * 1000000000000000000 + tens_count\
    \ * 10000000000000000000 + hundreds_count * 100000000000000000000 + thousands_count;\n\
    \                                                                            \
    \                                          ^\n/tmp/tmpvizi6d1c.java:52: error:\
    \ integer number too large\n        long total_value_12 = ones_count * 1000000000000000000\n\
    \                                           ^\n/tmp/tmpvizi6d1c.java:52: error:\
    \ ';' expected\n        long total_value_12 = ones_count * 1000000000000000000\n\
    \                                                              ^\n18 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens /\
    \ 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n        long thousandsDecimal\
    \ = (thousands / 10) * 1000;\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        long maxDecimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long maxDecimalDecimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ maxDecimalDecimalDecimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long maxDecimalDecimalDecimalDecimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimal +\
    \ tensDecimal + hundredsDecimal + thousandsDecimal;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe3g9twl5.java:48: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            ones += l;\n            if (ones ==\
    \ 1) {\n                result.add(ones);\n                ones = 0;\n       \
    \     }\n        }\n        for (Long l : arr) {\n            tens += l;\n   \
    \         if (tens == 10) {\n                result.add(tens);\n             \
    \   tens = 0;\n            }\n        }\n        for (Long l : arr) {\n      \
    \      hundreds += l;\n            if (hundreds == 100) {\n                result.add(hundreds);\n\
    \                hundreds = 0;\n            }\n        }\n        for (Long l\
    \ : arr) {\n            thousands += l;\n            if (thousands == 1000) {\n\
    \                result.add(thousands);\n                thousands = 0;\n    \
    \        }\n        }\n        return result;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcottjnvv.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens /\
    \ 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n        long thousandsDecimal\
    \ = (thousands / 10) * 10;\n        long decimal = onesDecimal + tensDecimal +\
    \ hundredsDecimal + thousandsDecimal;\n        long decimalDecimal = decimal /\
    \ 10;\n        long decimalDecimalDecimal = decimalDecimal / 10;\n        long\
    \ decimalDecimalDecimalDecimal = decimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n  \
    \      long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n\
    \        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8gukmk0v.java:51: error: ';' expected\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe\n\
    \                                                                            \
    \                                                                            \
    \                                                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 2) {\n                tens++;\n     \
    \       } else if (num == 4) {\n                hundreds++;\n            } else\
    \ if (num == 8) {\n                thousands++;\n            }\n        }\n  \
    \      long onesDecimal = ones * 100;\n        long tensDecimal = tens * 10;\n\
    \        long hundredsDecimal = hundreds * 100;\n        long thousandsDecimal\
    \ = thousands * 1000;\n        long totalDecimal = onesDecimal + tensDecimal +\
    \ hundredsDecimal + thousandsDecimal;\n        long onesDecimalDecimal = onesDecimal\
    \ * 10;\n        long tensDecimalDecimal = tensDecimal * 100;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal * 1000;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ * 1000000;\n        long totalDecimalDecimal = onesDecimalDecimal + tensDecimalDecimal\
    \ + hundredsDecimalDecimal + thousandsDecimalDecimal;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ * 100;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal\
    \ * 1000;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal\
    \ * 1000000;\n        long totalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ + tensDecimalDecimalDecimal + hundredsDecimalDecimalDecimal + thousandsDecimalDecimalDecimal;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal * 100;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ * 1000;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ * 1000000;\n        long totalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ + tensDecimalDecimalDecimalDecimal + hundredsDecimalDecimalDecimalDecimal +\
    \ thousandsDecimalDecimalDecimalDecimal;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal * 10;\n        long ten\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsk6i3009.java:54: error: ';' expected\n        long ten\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long val : arr) {\n            if (val == 1) {\n               \
    \ ones++;\n            } else if (val == 10) {\n                tens++;\n    \
    \        } else if (val == 100) {\n                hundreds++;\n            }\
    \ else if (val == 1000) {\n                thousands++;\n            } else {\n\
    \                result.add(val);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long totalCount = onesCount\
    \ + tensCount + hundredsCount + thousandsCount;\n        long onesCount2 = ones;\n\
    \        long tensCount2 = tens;\n        long hundredsCount2 = hundreds;\n  \
    \      long thousandsCount2 = thousands;\n        long totalCount2 = onesCount2\
    \ + tensCount2 + hundredsCount2 + thousandsCount2;\n        long onesCount3 =\
    \ ones;\n        long tensCount3 = tens;\n        long hundredsCount3 = hundreds;\n\
    \        long thousandsCount3 = thousands;\n        long totalCount3 = onesCount3\
    \ + tensCount3 + hundredsCount3 + thousandsCount3;\n        long onesCount4 =\
    \ ones;\n        long tensCount4 = tens;\n        long hundredsCount4 = hundreds;\n\
    \        long thousandsCount4 = thousands;\n        long totalCount4 = onesCount4\
    \ + tensCount4 + hundredsCount4 + thousandsCount4;\n        long onesCount5 =\
    \ ones;\n        long tensCount5 = tens;\n        long hundredsCount5 = hundreds;\n\
    \        long thousandsCount5 = thousands;\n        long totalCount5 = onesCount5\
    \ + tensCount5 + hundredsCount5 + thousandsCount5;\n        long onesCount6 =\
    \ ones;\n        long tensCount6 = tens;\n        long hundredsCount6 = hundreds;\n\
    \        long thousandsCount6 = thousands;\n        long totalCount6 = onesCount6\
    \ + tensCount6 + hundredsCount6 + thousandsCount6;\n        long onesCount7 =\
    \ ones;\n        long tensCount7 = tens;\n        long hundredsCount7 = hundreds;\n\
    \        long thous\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmpb35rxe.java:68: error: ';' expected\n        long thous\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesDecimal = 0;\n        long maxZerosDecimal = 0;\n\
    \        for (Long i : arr) {\n            if (i == 1) {\n                ones++;\n\
    \                maxOnesDecimal = maxOnes;\n            } else {\n           \
    \     zeros++;\n                maxZerosDecimal = maxZeros;\n            }\n \
    \       }\n        long maxOnesDecimalDecimal = maxOnesDecimal;\n        long\
    \ maxZerosDecimalDecimal = maxZerosDecimal;\n        long maxOnesDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimal;\n        long maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal;\n\
    \        long maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb53fnbuw.java:47: error: cannot find symbol\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal;\n                    \
    \                                       ^\n  symbol:   variable maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpb53fnbuw.java:48: error: cannot find symbol\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \                                                                 ^\n  symbol:\
    \   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n  location:\
    \ class Problem\n/tmp/tmpb53fnbuw.java:49: error: cannot find symbol\n       \
    \ long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \                                                                  ^\n  symbol:\
    \   variable maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n  location:\
    \ class Problem\n/tmp/tmpb53fnbuw.java:50: error: cannot find symbol\n       \
    \ long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n\
    \                                                                        ^\n \
    \ symbol:   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpb53fnbuw.java:51: error: variable maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n      \
    \       ^\n/tmp/tmpb53fnbuw.java:51: error: cannot find symbol\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n      \
    \                                                            ^\n  symbol:   variable\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n  location:\
    \ class Problem\n/tmp/tmpb53fnbuw.java:52: error: variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n       \
    \      ^\n/tmp/tmpb53fnbuw.java:52: error: cannot find symbol\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n       \
    \                                                                 ^\n  symbol:\
    \   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpb53fnbuw.java:53: error: variable maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n      \
    \       ^\n/tmp/tmpb53fnbuw.java:53: error: cannot find symbol\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n      \
    \                                                            ^\n  symbol:   variable\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n  location:\
    \ class Problem\n/tmp/tmpb53fnbuw.java:54: error: variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n       \
    \      ^\n/tmp/tmpb53fnbuw.java:54: error: cannot find symbol\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n       \
    \                                                                 ^\n  symbol:\
    \   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpb53fnbuw.java:55: error: variable maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n      \
    \       ^\n/tmp/tmpb53fnbuw.java:55: error: cannot find symbol\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n      \
    \                                                            ^\n  symbol:   variable\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n  location:\
    \ class Problem\n/tmp/tmpb53fnbuw.java:56: error: variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n       \
    \      ^\n/tmp/tmpb53fnbuw.java:56: error: cannot find symbol\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal;\n       \
    \                                                                 ^\n  symbol:\
    \   variable maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n16 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num > 0) {\n                ones++;\n\
    \            } else if (num < 0) {\n                tens++;\n            } else\
    \ if (num > 0) {\n                hundreds++;\n            } else if (num < 0)\
    \ {\n                thousands++;\n            }\n        }\n        long onesDecimal\
    \ = ones * 1000;\n        long tensDecimal = tens * 100;\n        long hundredsDecimal\
    \ = hundreds * 10;\n        long thousandsDecimal = thousands * 1;\n        long\
    \ decimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long maxDecimal = decimal;\n        long maxDecimalIndex = 0;\n     \
    \   long maxDecimalValue = 0;\n        for (long num : arr) {\n            if\
    \ (num > 0) {\n                ones++;\n            } else if (num < 0) {\n  \
    \              tens++;\n            } else if (num > 0) {\n                hundreds++;\n\
    \            } else if (num < 0) {\n                thousands++;\n           \
    \ }\n        }\n        long onesDecimal = ones * 1000;\n        long tensDecimal\
    \ = tens * 100;\n        long hundredsDecimal = hundreds * 10;\n        long thousandsDecimal\
    \ = thousands * 1;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = decimal;\n        long maxDecimalIndex\
    \ = 0;\n        long maxDecimalValue = 0;\n        for (long num : arr) {\n  \
    \          if (num > 0) {\n                ones++;\n            } else if (num\
    \ < 0) {\n                tens++;\n            } else if (num > 0) {\n       \
    \         hundreds++;\n            } else if (num < 0) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 1000;\n        long\
    \ tensDecimal = tens * 100;\n        long hundredsDecimal = hundreds * 10;\n \
    \       long thousandsDecimal = thousands * 1;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long maxDecimal\
    \ = decimal;\n        long maxDecimalIndex = 0;\n        long maxDecimalValue\
    \ = 0;\n        for (long num : arr) {\n            if (num > 0) {\n         \
    \       ones++;\n            } else if (num < 0) {\n                tens++;\n\
    \            } else if (\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy8njipq8.java:85: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpy8njipq8.java:86: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                if (i\
    \ % 2 == 0) {\n                    ones++;\n                } else {\n       \
    \             tens++;\n                }\n                if (i % 10 == 0) {\n\
    \                    hundreds++;\n                }\n                if (i % 100\
    \ == 0) {\n                    thousands++;\n                }\n            }\n\
    \        }\n        long onesCount = ones;\n        long tensCount = tens;\n \
    \       long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \      }\n        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (tensCount > hundredsCount) {\n     \
    \       tensCount = hundredsCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n        }\n\
    \        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        if (onesCount2 > tensCount2) {\n            onesCount2\
    \ = tensCount2;\n        }\n        if (onesCount2 > hundredsCount2) {\n     \
    \       onesCount2 = hundredsCount2;\n        }\n        if (onesCount2 > thousandsCount2)\
    \ {\n            onesCount2 = thousandsCount2;\n        }\n        if (tensCount2\
    \ > hundredsCount2) {\n            tensCount2 = hundredsCount2;\n        }\n \
    \       if (tensCount2 > thousandsCount2) {\n            tensCount2 = thousandsCount2;\n\
    \        }\n        if (hundredsCount2 > thousandsCount2) {\n            hundredsCount2\
    \ = thousandsCount2;\n        }\n        long onesCount3 = onesCount2;\n     \
    \   long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount2;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0e18_qt.java:86: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long l : arr) {\n            ones += l;\n\
    \        }\n        for (Long l : arr) {\n            zeros += l;\n        }\n\
    \        long onesCount = 0;\n        long zerosCount = 0;\n        for (Long\
    \ l : arr) {\n            onesCount += l;\n        }\n        for (Long l : arr)\
    \ {\n            zerosCount += l;\n        }\n        long onesCount2 = onesCount\
    \ * onesCount;\n        long zerosCount2 = zerosCount * zerosCount;\n        long\
    \ onesCount3 = onesCount2 * onesCount;\n        long zerosCount3 = zerosCount2\
    \ * zerosCount;\n        long onesCount4 = onesCount3 * onesCount;\n        long\
    \ zerosCount4 = zerosCount3 * zerosCount;\n        long onesCount5 = onesCount4\
    \ * onesCount;\n        long zerosCount5 = zerosCount4 * zerosCount;\n       \
    \ long onesCount6 = onesCount5 * onesCount;\n        long zerosCount6 = zerosCount5\
    \ * zerosCount;\n        long onesCount7 = onesCount6 * onesCount;\n        long\
    \ zerosCount7 = zerosCount6 * zerosCount;\n        long onesCount8 = onesCount7\
    \ * onesCount;\n        long zerosCount8 = zerosCount7 * zerosCount;\n       \
    \ long onesCount9 = onesCount8 * onesCount;\n        long zerosCount9 = zerosCount8\
    \ * zerosCount;\n        long onesCount10 = onesCount9 * onesCount;\n        long\
    \ zerosCount10 = zerosCount9 * zerosCount;\n        long onesCount11 = onesCount10\
    \ * onesCount;\n        long zerosCount11 = zerosCount10 * zerosCount;\n     \
    \   long onesCount12 = onesCount11 * onesCount;\n        long zerosCount12 = zerosCount11\
    \ * zerosCount;\n        long onesCount13 = onesCount12 * onesCount;\n       \
    \ long zerosCount13 = zerosCount12 * zerosCount;\n        long onesCount14 = onesCount13\
    \ * onesCount;\n        long zerosCount14 = zerosCount13 * zerosCount;\n     \
    \   long onesCount15 = onesCount14 * onesCount;\n        long zerosCount15 = zerosCount14\
    \ * zerosCount;\n        long onesCount16 = onesCount15 * onesCount;\n       \
    \ long \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgwyy0f48.java:63: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpgwyy0f48.java:63: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long hundredths = 0;\n        long thousandths\
    \ = 0;\n        long tenthhundredths = 0;\n        long hundredththousandths =\
    \ 0;\n        long thousandthhundredths = 0;\n        long thousandththousandths\
    \ = 0;\n        long tenthhundredththousandths = 0;\n        long hundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandths = 0;\n        long thousandththousandthhundredths\
    \ = 0;\n        long tenthhundredththousandthhundredths = 0;\n        long hundredththousandthhundredththousandths\
    \ = 0;\n        long thousandthhundredththousandthhundredths = 0;\n        long\
    \ thousandththousandthhundredththousandthhundredths = 0;\n        long tenthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        hundredththousandthhundredththousandthhundredths = 0;\n      \
    \  thousandthhundredththousandthhundredththousandthhundredths = 0;\n        thousandththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        tenthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        thousandththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        tenthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredth\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphsq6g_zz.java:46: error: not a statement\n        hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredth\n\
    \        ^\n/tmp/tmphsq6g_zz.java:46: error: ';' expected\n        hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredth\n\
    \                                                                            \
    \                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (Long i : arr) {\n            total += i;\n\
    \            if (i < 1000) {\n                thousands += i;\n            } else\
    \ if (i < 100) {\n                hundreds += i;\n            } else if (i < 10)\
    \ {\n                tens += i;\n            } else if (i < 1) {\n           \
    \     ones += i;\n            }\n        }\n        long onesCount = ones;\n \
    \       long tensCount = tens;\n        long hundredsCount = hundreds;\n     \
    \   long thousandsCount = thousands;\n        long totalCount = total;\n     \
    \   long onesCount2 = ones;\n        long tensCount2 = tens;\n        long hundredsCount2\
    \ = hundreds;\n        long thousandsCount2 = thousands;\n        long totalCount2\
    \ = total;\n        long onesCount3 = ones;\n        long tensCount3 = tens;\n\
    \        long hundredsCount3 = hundreds;\n        long thousandsCount3 = thousands;\n\
    \        long totalCount3 = total;\n        long onesCount4 = ones;\n        long\
    \ tensCount4 = tens;\n        long hundredsCount4 = hundreds;\n        long thousandsCount4\
    \ = thousands;\n        long totalCount4 = total;\n        long onesCount5 = ones;\n\
    \        long tensCount5 = tens;\n        long hundredsCount5 = hundreds;\n  \
    \      long thousandsCount5 = thousands;\n        long totalCount5 = total;\n\
    \        long onesCount6 = ones;\n        long tensCount6 = tens;\n        long\
    \ hundredsCount6 = hundreds;\n        long thousandsCount6 = thousands;\n    \
    \    long totalCount6 = total;\n        long onesCount7 = ones;\n        long\
    \ tensCount7 = tens;\n        long hundredsCount7 = hundreds;\n        long thousandsCount7\
    \ = thousands;\n        long totalCount7 = total;\n        long onesCount8 = ones;\n\
    \        long tensCount8 = tens;\n        long hundredsCount8 = hundreds;\n  \
    \      long thousandsCount8 = thousands;\n        long totalCount8 = total;\n\
    \        long onesCount9 = ones;\n        long tensCount9 = tens;\n        long\
    \ hundredsCount9 = 100;\n        long thousandsCount9 = 1000;\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph2jwfhn0.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesSorted = ones;\n        long tensSorted\
    \ = tens;\n        long hundredsSorted = hundreds;\n        long thousandsSorted\
    \ = thousands;\n        if (onesSorted < tensSorted) {\n            if (onesSorted\
    \ < hundredsSorted) {\n                if (onesSorted < thousandsSorted) {\n \
    \                   result.add(onesSorted);\n                } else {\n      \
    \              result.add(hundredsSorted);\n                }\n            } else\
    \ {\n                result.add(thousandsSorted);\n            }\n        } else\
    \ {\n            result.add(hundredsSorted);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63p328l2.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenthousands = 0;\n        long millions = 0;\n        long billions\
    \ = 0;\n        long trillions = 0;\n        long quadrillions = 0;\n        long\
    \ quintillions = 0;\n        long sextillions = 0;\n        long septillions =\
    \ 0;\n        long octillions = 0;\n        long nonillions = 0;\n        long\
    \ decillions = 0;\n        long undecillions = 0;\n        long duodecillions\
    \ = 0;\n        long tredecillions = 0;\n        long quattuordecillions = 0;\n\
    \        long quindecillions = 0;\n        long sexdecillions = 0;\n        long\
    \ septendecillions = 0;\n        long octodecillions = 0;\n        long novemdecillions\
    \ = 0;\n        long vigintillions = 0;\n        long unvigintillions = 0;\n \
    \       long duovigintillions = 0;\n        long trevigintillions = 0;\n     \
    \   long quattuorvigintillions = 0;\n        long quinvigintillions = 0;\n   \
    \     long sexvigintillions = 0;\n        long septenvigintillions = 0;\n    \
    \    long octovigintillions = 0;\n        long novemvigintillions = 0;\n     \
    \   long vigintillions = 0;\n        long unvigintillions = 0;\n        long duovigintillions\
    \ = 0;\n        long trevigintillions = 0;\n        long quattuorvigintillions\
    \ = 0;\n        long quinvigintillions = 0;\n        long sexvigintillions = 0;\n\
    \        long septenvigintillions = 0;\n        long octovigintillions = 0;\n\
    \        long novemvigintillions = 0;\n        long vigintillions = 0;\n     \
    \   long unvigintillions = 0;\n        long duovigintillions = 0;\n        long\
    \ trevigintillions = 0;\n        long quattuorvigintillions = 0;\n        long\
    \ quinvigintillions = 0;\n        long sexvigintillions = 0;\n        long septenvigintillions\
    \ = 0;\n        long octovigintillions = 0;\n        long novemvigintillion\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqna5s1bh.java:71: error: ';' expected\n        long novemvigintillion\n\
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else {\n                total += num;\n            }\n        }\n    \
    \    long onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        long totalCount\
    \ = total;\n        if (onesCount > tensCount) {\n            onesCount = tensCount;\n\
    \            tensCount = onesCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n            thousandsCount =\
    \ hundredsCount;\n        }\n        long onesCount2 = onesCount;\n        long\
    \ tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n    \
    \    long thousandsCount2 = thousandsCount;\n        long totalCount2 = totalCount;\n\
    \        if (onesCount2 > tensCount2) {\n            onesCount2 = tensCount2;\n\
    \            tensCount2 = onesCount2;\n        }\n        if (hundredsCount2 >\
    \ thousandsCount2) {\n            hundredsCount2 = thousandsCount2;\n        \
    \    thousandsCount2 = hundredsCount2;\n        }\n        long onesCount3 = onesCount2;\n\
    \        long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount2;\n        long totalCount3 = totalCount2;\n\
    \        if (onesCount3 > tensCount3) {\n            onesCount3 = tensCount3;\n\
    \            tensCount3 = onesCount3;\n        }\n        if (hundredsCount3 >\
    \ thousandsCount3) {\n            hundredsCount3 = thousandsCount3;\n        \
    \    thousandsCount3 = hundredsCount3;\n        }\n        long onesCount4 = onesCount3;\n\
    \        long tensCount4 = tensCount3;\n        long hundredsCount4 = hundredsCount3;\n\
    \        long thousandsCount4 = thousand\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoq4w9td5.java:78: error: ';' expected\n        long thousandsCount4\
    \ = thousand\n                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i.signum()\
    \ == 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesDecimal = ones;\n        long maxZerosDecimal\
    \ = zeros;\n        long maxOnesDecimalDecimal = ones;\n        long maxZerosDecimalDecimal\
    \ = zeros;\n        for (Long i : arr) {\n            if (i.signum() == 1) {\n\
    \                maxOnesDecimalDecimal++;\n            } else {\n            \
    \    maxZerosDecimalDecimal++;\n            }\n        }\n        long maxOnesDecimalDecimalDecimal\
    \ = ones;\n        long maxZerosDecimalDecimalDecimal = zeros;\n        if (maxOnesDecimal\
    \ > maxOnesDecimalDecimal) {\n            maxOnesDecimal = maxOnesDecimalDecimal;\n\
    \        }\n        if (maxZerosDecimal > maxZerosDecimalDecimal) {\n        \
    \    maxZerosDecimal = maxZerosDecimalDecimal;\n        }\n        if (maxOnesDecimalDecimal\
    \ > maxOnesDecimalDecimalDecimal) {\n            maxOnesDecimalDecimal = maxOnesDecimalDecimalDecimal;\n\
    \        }\n        if (maxZerosDecimalDecimal > maxZerosDecimalDecimalDecimal)\
    \ {\n            maxZerosDecimalDecimal = maxZerosDecimalDecimalDecimal;\n   \
    \     }\n        long maxOnesDecimalDecimalDecimalDecimal = ones;\n        long\
    \ maxZerosDecimalDecimalDecimalDecimal = zeros;\n        if (maxOnesDecimalDecimal\
    \ > maxOnesDecimalDecimalDecimal) {\n            maxOnesDecimalDecimal = maxOnesDecimalDecimalDecimal;\n\
    \        }\n        if (maxZerosDecimalDecimal > maxZerosDecimalDecimalDecimal)\
    \ {\n            maxZerosDecimalDecimal = maxZerosDecimalDecimalDecimal;\n   \
    \     }\n        if (maxOnesDecimalDecimalDecimal > maxOnesDecimalDecimalDecimal)\
    \ {\n            maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal;\n\
    \        }\n        if (maxZerosDecimalDecimalDecimal > maxZerosDecimalDecimalDecimal)\
    \ {\n            maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimal;\n\
    \        }\n        long maxOnesDecimalDecimalDecimalDecimalDecimal = ones;\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimal = zeros;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqjj_8jt8.java:21: error: method signum in class Long cannot be\
    \ applied to given types;\n            if (i.signum() == 1) {\n              \
    \   ^\n  required: long\n  found:    no arguments\n  reason: actual and formal\
    \ argument lists differ in length\n/tmp/tmpqjj_8jt8.java:34: error: method signum\
    \ in class Long cannot be applied to given types;\n            if (i.signum()\
    \ == 1) {\n                 ^\n  required: long\n  found:    no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenthsOnes =\
    \ 0;\n        long onethsTens = 0;\n        long tenthsHundreds = 0;\n       \
    \ long onethsHundreds = 0;\n        long tenthsThousands = 0;\n        long onethsThousands\
    \ = 0;\n        long tenthsTenths = 0;\n        long onethsTenths = 0;\n     \
    \   long tenthsOneths = 0;\n        long onethsOneths = 0;\n        for (Long\
    \ i : arr) {\n            if (i < 0) {\n                result.add(-i);\n    \
    \        } else {\n                if (i < 100) {\n                    hundreds\
    \ += i;\n                } else if (i < 1000) {\n                    thousands\
    \ += i;\n                } else if (i < 10000) {\n                    tenthsHundreds\
    \ += i;\n                } else if (i < 100000) {\n                    onethsHundreds\
    \ += i;\n                } else if (i < 1000000) {\n                    tenthsThousands\
    \ += i;\n                } else if (i < 10000000) {\n                    onethsThousands\
    \ += i;\n                } else if (i < 100000000) {\n                    tenthsTenths\
    \ += i;\n                } else if (i < 1000000000) {\n                    onethsTenths\
    \ += i;\n                } else if (i < 10000000000) {\n                    tenthsOneths\
    \ += i;\n                } else if (i < 100000000000) {\n                    onethsOneths\
    \ += i;\n                } else if (i < 1000000000000) {\n                   \
    \ tenthsTenths += i;\n                } else if (i < 10000000000000) {\n     \
    \               onethsTenths += i;\n                } else if (i < 100000000000000)\
    \ {\n                    tenthsOneths += i;\n                } else if (i < 1000000000000000)\
    \ {\n                    onethsOneths += i;\n                } else if (i < 10000000000000000)\
    \ {\n                    tenthsTenths += i;\n                } else if (i < 100000000000000000)\
    \ {\n                    onethsTenths += i;\n                } else if (i < 100000000000000000)\
    \ {\n                    tenthsOneths += i;\n                } else if (i < 100000000000000000)\
    \ {\n                    onethsOneths += i;\n                } else {\n      \
    \              tenthsTenths += i;\n                    onethsTenths += i;\n  \
    \              }\n            }\n        }\n        ones = hundreds / 100;\n \
    \       hundreds = hundreds % 100;\n        tens = thousands / 1000;\n       \
    \ thousands = thousands % 1000;\n        tenths = tenth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt7241yij.java:54: error: integer number too large\n           \
    \     } else if (i < 10000000000) {\n                               ^\n/tmp/tmpt7241yij.java:56:\
    \ error: integer number too large\n                } else if (i < 100000000000)\
    \ {\n                               ^\n/tmp/tmpt7241yij.java:58: error: integer\
    \ number too large\n                } else if (i < 1000000000000) {\n        \
    \                       ^\n/tmp/tmpt7241yij.java:60: error: integer number too\
    \ large\n                } else if (i < 10000000000000) {\n                  \
    \             ^\n/tmp/tmpt7241yij.java:62: error: integer number too large\n \
    \               } else if (i < 100000000000000) {\n                          \
    \     ^\n/tmp/tmpt7241yij.java:64: error: integer number too large\n         \
    \       } else if (i < 1000000000000000) {\n                               ^\n\
    /tmp/tmpt7241yij.java:66: error: integer number too large\n                } else\
    \ if (i < 10000000000000000) {\n                               ^\n/tmp/tmpt7241yij.java:68:\
    \ error: integer number too large\n                } else if (i < 100000000000000000)\
    \ {\n                               ^\n/tmp/tmpt7241yij.java:70: error: integer\
    \ number too large\n                } else if (i < 100000000000000000) {\n   \
    \                            ^\n/tmp/tmpt7241yij.java:72: error: integer number\
    \ too large\n                } else if (i < 100000000000000000) {\n          \
    \                     ^\n/tmp/tmpt7241yij.java:84: error: ';' expected\n     \
    \   tenths = tenth\n                      ^\n11 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            }\n            if (i > 10) {\n                tens += i;\n\
    \            }\n            if (i > 100) {\n                hundreds += i;\n \
    \           }\n            if (i > 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = hundreds / 10;\n  \
    \      long thousandsDecimal = thousands / 10;\n        long onesDecimalDecimal\
    \ = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n \
    \       long hundredsDecimalDecimal = hundredsDecimal / 10;\n        long thousandsDecimalDecimal\
    \ = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n \
    \       long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n  \
    \      long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal / 10;\n \
    \       long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4t8u0os1.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            }\n\
    \        }\n        long onesDecimal = ones / 10;\n        long tensDecimal =\
    \ tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n        long\
    \ thousandsDecimal = (thousands / 10) * 10;\n        long totalDecimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long totalDecimalDecimal\
    \ = totalDecimal / 10;\n        long totalDecimalDecimalDecimal = totalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimal = totalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimal = totalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimal = totalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n      \
    \  long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk2qjs5f3.java:50: error: ';' expected\n        long totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = totalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci\n\
    \                                                                            \
    \                                                                            \
    \                                                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        for (long i : arr) {\n\
    \            ones += i;\n            zeros -= i;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n        }\n        long maxOnes\
    \ = max;\n        long maxZeros = max;\n        for (long i : arr) {\n       \
    \     ones += i;\n            zeros -= i;\n            if (ones > maxOnes) {\n\
    \                maxOnes = ones;\n            }\n            if (zeros > maxZeros)\
    \ {\n                maxZeros = zeros;\n            }\n        }\n        long\
    \ maxOnesDecimal = maxOnes / Math.pow(10, maxOnes % 10);\n        long maxZerosDecimal\
    \ = maxZeros / Math.pow(10, maxZeros % 10);\n        for (long i : arr) {\n  \
    \          ones += i;\n            zeros -= i;\n            if (ones > maxOnesDecimal)\
    \ {\n                maxOnesDecimal = ones;\n            }\n            if (zeros\
    \ > maxZerosDecimal) {\n                maxZerosDecimal = zeros;\n           \
    \ }\n        }\n        long maxOnesDecimalDecimal = maxOnesDecimal / Math.pow(10,\
    \ maxOnesDecimal % 10);\n        long maxZerosDecimalDecimal = maxZerosDecimal\
    \ / Math.pow(10, maxZerosDecimal % 10);\n        for (long i : arr) {\n      \
    \      ones += i;\n            zeros -= i;\n            if (ones > maxOnesDecimalDecimal)\
    \ {\n                maxOnesDecimalDecimal = ones;\n            }\n          \
    \  if (zeros > maxZerosDecimalDecimal) {\n                maxZerosDecimalDecimal\
    \ = zeros;\n            }\n        }\n        long maxOnesDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimal / Math.pow(10, maxOnesDecimalDecimal % 10);\n      \
    \  long maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal / Math.pow(10,\
    \ maxZerosDecimalDecimal % 10);\n        for (long i : arr) {\n            ones\
    \ += i;\n            zeros -= i;\n            if (ones > maxOnesDecimalDecimalDecimal)\
    \ {\n                maxOnesDecimalDecimalDecimal = ones;\n            }\n   \
    \         if (zeros > maxZerosDecimalDecimalDecimal) {\n                maxZerosDecimalDecimalDecimal\
    \ = zeros;\n            }\n        }\n        long maxOnesDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimal / Math.pow(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpduff_b3p.java:77: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long val : arr) {\n            if (val == 1) {\n               \
    \ ones++;\n            } else if (val == 2) {\n                tens++;\n     \
    \       } else if (val == 4) {\n                hundreds++;\n            } else\
    \ if (val == 8) {\n                thousands++;\n            } else {\n      \
    \          result.add(val);\n            }\n        }\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<>();\n        if (ones > 0) {\n            sortedArray.add(ones);\n\
    \        }\n        if (tens > 0) {\n            sortedArray.add(tens);\n    \
    \    }\n        if (hundreds > 0) {\n            sortedArray.add(hundreds);\n\
    \        }\n        if (thousands > 0) {\n            sortedArray.add(thousands);\n\
    \        }\n        Collections.sort(sortedArray);\n        for (Long val : sortedArray)\
    \ {\n            result.add(val);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6woig42.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long ten_thousands = 0;\n        long hundred_thousands = 0;\n      \
    \  long thousand_hundreds = 0;\n        long thousand_thousands = 0;\n       \
    \ long thousand_ten_thousands = 0;\n        long thousand_hundred_thousands =\
    \ 0;\n        long thousand_thousand_hundreds = 0;\n        long thousand_thousand_thousands\
    \ = 0;\n        long thousand_thousand_ten_thousands = 0;\n        long thousand_thousand_hundred_thousands\
    \ = 0;\n        long thousand_thousand_thousand_hundreds = 0;\n        long thousand_thousand_thousand_thousands\
    \ = 0;\n        long thousand_thousand_thousand_ten_thousands = 0;\n        long\
    \ thousand_thousand_thousand_hundred_thousands = 0;\n        long thousand_thousand_thousand_thousand_hundreds\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousands = 0;\n    \
    \    long thousand_thousand_thousand_thousand_ten_thousands = 0;\n        long\
    \ thousand_thousand_thousand_thousand_hundred_thousands = 0;\n        long thousand_thousand_thousand_thousand_thousand_hundreds\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousands =\
    \ 0;\n        long thousand_thousand_thousand_thousand_thousand_ten_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_hundred_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_hundreds\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_ten_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_hundred_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_thousand_hundreds\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_thousand_ten_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_thousand_hundred_thousands\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_hundreds\
    \ = 0;\n        long thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousands\
    \ = 0;\n        \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkf18zxjq.java:55: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesCount = ones;\n        long tensCount = tens;\n        long\
    \ hundredsCount = hundreds;\n        long thousandsCount = thousands;\n      \
    \  if (onesCount > tensCount) {\n            onesCount = tensCount;\n        }\n\
    \        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (tensCount > hundredsCount) {\n     \
    \       tensCount = hundredsCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n        }\n\
    \        if (hundredsCount == 0) {\n            hundredsCount = 1;\n        }\n\
    \        long onesCountInt = onesCount;\n        long tensCountInt = tensCount;\n\
    \        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        if (onesCountInt > tensCountInt) {\n            onesCountInt\
    \ = tensCountInt;\n        }\n        if (onesCountInt > hundredsCountInt) {\n\
    \            onesCountInt = hundredsCountInt;\n        }\n        if (onesCountInt\
    \ > thousandsCountInt) {\n            onesCountInt = thousandsCountInt;\n    \
    \    }\n        if (tensCountInt > hundredsCountInt) {\n            tensCountInt\
    \ = hundredsCountInt;\n        }\n        if (tensCountInt > thousandsCountInt)\
    \ {\n            tensCountInt = thousandsCountInt;\n        }\n        if (hundredsCountInt\
    \ > thousandsCountInt) {\n            hundredsCountInt = thousandsCountInt;\n\
    \        }\n        if (hundredsCountInt == 0) {\n            hundreds\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4ohdgwy.java:81: error: not a statement\n            hundreds\n\
    \            ^\n/tmp/tmpu4ohdgwy.java:81: error: ';' expected\n            hundreds\n\
    \                    ^\n/tmp/tmpu4ohdgwy.java:83: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            ones += l;\n            if (ones ==\
    \ 1) {\n                result.add(l);\n                ones = 0;\n          \
    \  }\n        }\n        for (Long l : arr) {\n            tens += l;\n      \
    \      if (tens == 10) {\n                result.add(l);\n                tens\
    \ = 0;\n            }\n        }\n        for (Long l : arr) {\n            hundreds\
    \ += l;\n            if (hundreds == 100) {\n                result.add(l);\n\
    \                hundreds = 0;\n            }\n        }\n        for (Long l\
    \ : arr) {\n            thousands += l;\n            if (thousands == 1000) {\n\
    \                result.add(l);\n                thousands = 0;\n            }\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwh_jccq.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ tenHundreds = 0;\n        long oneHundreds = 0;\n        long tenThousandHundreds\
    \ = 0;\n        long oneThousandHundreds = 0;\n        long tenHundredThousands\
    \ = 0;\n        long oneHundredThousands = 0;\n        long tenThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long tenHundredThousandThousands\
    \ = 0;\n        long oneHundredThousandThousands = 0;\n        long tenThousandHundredThousandThousands\
    \ = 0;\n        long oneThousandHundredThousandThousands = 0;\n        long tenHundredThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousands = 0;\n        long tenThousandHundredThousandThousandThousands\
    \ = 0;\n        long oneThousandHundredThousandThousandThousands = 0;\n      \
    \  long tenHundredThousandThousandThousandThousands = 0;\n        long oneHundredThousandThousandThousandThousands\
    \ = 0;\n        long tenThousandHundredThousandThousandThousandThousands = 0;\n\
    \        long oneThousandHundredThousandThousandThousandThousands = 0;\n     \
    \   long tenHundredThousandThousandThousandThousandThousands = 0;\n        long\
    \ oneHundredThousandThousandThousandThousandThousands = 0;\n        long tenThousandHundredThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneThousandHundredThousandThousandThousandThousandThousands\
    \ = 0;\n        long tenHundredThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long oneHundredThousandThousandThousandThousandThousandThousands\
    \ = 0;\n        long tenThous\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph10rgru0.java:50: error: ';' expected\n        long tenThous\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            } else if (i < 0) {\n                tens += i;\n       \
    \     } else if (i < 100) {\n                hundreds += i;\n            } else\
    \ if (i < 1000) {\n                thousands += i;\n            }\n        }\n\
    \        long onesDecimal = ones / Math.pow(10, arr.size());\n        long tensDecimal\
    \ = tens / Math.pow(10, arr.size());\n        long hundredsDecimal = (hundreds\
    \ / Math.pow(10, arr.size()));\n        long thousandsDecimal = (thousands / Math.pow(10,\
    \ arr.size()));\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long decimalDecimal = decimal / Math.pow(10, arr.size());\n\
    \        long decimalDecimalDecimal = decimalDecimal / Math.pow(10, arr.size());\n\
    \        long decimalDecimalDecimalDecimal = decimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long decimalDecimalDecimalDecimalDecimal = decimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long decimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n \
    \       long decimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7gf19dk.java:50: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenthousands = 0;\n        long hundredthousands = 0;\n        long\
    \ millions = 0;\n        long billions = 0;\n        long trillions = 0;\n   \
    \     long quadrillions = 0;\n        long quintillions = 0;\n        long sextillions\
    \ = 0;\n        long septillions = 0;\n        long octillions = 0;\n        long\
    \ nonillions = 0;\n        long decillions = 0;\n        long undecillions = 0;\n\
    \        long duodecillions = 0;\n        long tredecillions = 0;\n        long\
    \ quattuordecillions = 0;\n        long quindecillions = 0;\n        long sexdecillions\
    \ = 0;\n        long septendecillions = 0;\n        long octodecillions = 0;\n\
    \        long novemdecillions = 0;\n        long vigintillions = 0;\n        long\
    \ unvigintillions = 0;\n        long duovigintillions = 0;\n        long trevigintillions\
    \ = 0;\n        long quattuorvigintillions = 0;\n        long quinvigintillions\
    \ = 0;\n        long sexvigintillions = 0;\n        long septenvigintillions =\
    \ 0;\n        long octovigintillions = 0;\n        long novemvigintillions = 0;\n\
    \        long quadrillions = 0;\n        long quintillions = 0;\n        long\
    \ sextillions = 0;\n        long septillions = 0;\n        long octillions = 0;\n\
    \        long nonillions = 0;\n        long decillions = 0;\n        long undecillions\
    \ = 0;\n        long duodecillions = 0;\n        long tredecillions = 0;\n   \
    \     long quattuordecillions = 0;\n        long quindecillions = 0;\n       \
    \ long sexdecillions = 0;\n        long septendecillions = 0;\n        long octodecillions\
    \ = 0;\n        long novemdecillions = 0;\n        long vigintillions = 0;\n \
    \       long unvigintillions = 0;\n        long duovigintillions = 0;\n      \
    \  long trevigintillions = 0;\n        long quattuorvigintillions = 0;\n     \
    \   long quinvigintillions = 0;\n        long sexvigin\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0kfgh8ta.java:75: error: ';' expected\n        long sexvigin\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 2) {\n                tens++;\n     \
    \       } else if (num == 4) {\n                hundreds++;\n            } else\
    \ if (num == 8) {\n                thousands++;\n            }\n        }\n  \
    \      long onesDecimal = ones / 10;\n        long tensDecimal = tens / 10;\n\
    \        long hundredsDecimal = (hundreds / 10) * 100;\n        long thousandsDecimal\
    \ = (thousands / 10) * 1000;\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        long decimal2 = onesDecimal +\
    \ tensDecimal + hundredsDecimal + thousandsDecimal;\n        long decimal3 = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long decimal4 =\
    \ onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ decimal5 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal6 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal7 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal8 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal9 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal10 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal11 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal12 = onesDecimal + tensDecimal + hundredsDecimal + \n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsb243_1p.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        for (Long val : arr) {\n\
    \            if (val == 1) {\n                ones++;\n            } else if (val\
    \ == 0) {\n                zeros++;\n            } else {\n                max\
    \ = Math.max(max, val);\n            }\n        }\n        long onesMax = ones\
    \ * max;\n        long zerosMax = zeros * max;\n        long maxDiff = onesMax\
    \ - zerosMax;\n        long maxDiffIndex = -1;\n        long maxDiffVal = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n\
    \            if (val == 1) {\n                ones--;\n            } else if (val\
    \ == 0) {\n                zeros--;\n            } else {\n                long\
    \ diff = Math.abs(val - max);\n                if (diff > maxDiff) {\n       \
    \             maxDiff = diff;\n                    maxDiffIndex = i;\n       \
    \             maxDiffVal = val;\n                }\n            }\n        }\n\
    \        if (maxDiffIndex == -1) {\n            return arr;\n        }\n     \
    \   ArrayList<Long> tmp = new ArrayList<>();\n        tmp.add(maxDiffVal);\n \
    \       tmp.add(maxDiffIndex);\n        tmp.add(maxDiff);\n        Collections.sort(tmp);\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        res.add(tmp.get(0));\n\
    \        res.add(tmp.get(1));\n        res.add(tmp.get(2));\n        for (int\
    \ i = 2; i < tmp.size(); i++) {\n            res.add(tmp.get(i));\n        }\n\
    \        return res;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeo2rczch.java:69)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long max = 0;\n        for (long i : arr) {\n            if\
    \ (i == 1) {\n                ones--;\n            } else {\n                zeros--;\n\
    \            }\n            if (ones > zeros) {\n                onesMax = ones;\n\
    \                zerosMax = zeros;\n                max = i;\n            }\n\
    \        }\n        long onesMin = ones;\n        long zerosMin = zeros;\n   \
    \     long min = 0;\n        for (long i : arr) {\n            if (i == 1) {\n\
    \                ones++;\n            } else {\n                zeros++;\n   \
    \         }\n            if (ones < zeros) {\n                onesMin = ones;\n\
    \                zerosMin = zeros;\n                min = i;\n            }\n\
    \        }\n        long onesAvg = (ones + zeros) / 2;\n        long zerosAvg\
    \ = (zeros + ones) / 2;\n        long avg = (onesAvg + zerosAvg) / 2;\n      \
    \  long onesDev = ones - onesAvg;\n        long zerosDev = zeros - zerosAvg;\n\
    \        long dev = (onesDev + zerosDev) / 2;\n        long onesDeviation = onesDev\
    \ / avg;\n        long zerosDeviation = zerosDev / avg;\n        long deviation\
    \ = (onesDeviation + zerosDeviation) / 2;\n        long onesVariance = onesDev\
    \ / dev;\n        long zerosVariance = zerosDev / dev;\n        long variance\
    \ = (onesVariance + zerosVariance) / 2;\n        long onesStdDev = Math.sqrt(onesVariance);\n\
    \        long zerosStdDev = Math.sqrt(zerosVariance);\n        long stdDev = (onesStdDev\
    \ + zerosStdDev) / 2;\n        long onesStdDeviation = onesStdDev / avg;\n   \
    \     long zerosStdDeviation = zerosStdDev / avg;\n        long stdDeviation =\
    \ (onesStdDeviation + zerosStdDeviation) / 2;\n        long onesVarianceDeviation\
    \ = onesStdDev / dev;\n        long zerosVarianceDeviation = zerosStdDev / dev;\n\
    \        long varianceDeviation = (onesVarianceDeviation + zerosVarianceDeviation)\
    \ / 2;\n        long onesStdDev\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpofxndlpd.java:78: error: ';' expected\n        long onesStdDev\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            }\n\
    \        }\n        long onesCount = 0;\n        long tensCount = 0;\n       \
    \ long hundredsCount = 0;\n        long thousandsCount = 0;\n        for (long\
    \ i : arr) {\n            if (i % 2 == 0) {\n                onesCount++;\n  \
    \          } else if (i % 10 == 0) {\n                tensCount++;\n         \
    \   } else if (i % 100 == 0) {\n                hundredsCount++;\n           \
    \ } else if (i % 1000 == 0) {\n                thousandsCount++;\n           \
    \ }\n        }\n        long onesCountInt = onesCount * 1;\n        long tensCountInt\
    \ = tensCount * 10;\n        long hundredsCountInt = hundredsCount * 100;\n  \
    \      long thousandsCountInt = thousandsCount * 1000;\n        long onesCountLong\
    \ = onesCountInt * 1;\n        long tensCountLong = tensCountInt * 10;\n     \
    \   long hundredsCountLong = hundredsCountInt * 100;\n        long thousandsCountLong\
    \ = thousandsCountInt * 1000;\n        long onesCountLongLong = onesCountLong\
    \ * 1;\n        long tensCountLongLong = tensCountLong * 10;\n        long hundredsCountLongLong\
    \ = hundredsCountInt * 100;\n        long thousandsCountLongLong = thousandsCountInt\
    \ * 1000;\n        long onesCountLongLongLong = onesCountLongLong * 1;\n     \
    \   long tensCountLongLongLong = tensCountLongLong * 10;\n        long hundredsCountLongLongLong\
    \ = hundredsCountLongInt * 100;\n        long thousandsCountLongLongLong = thousandsCountInt\
    \ * 1000;\n        long onesCountLongLongLongLong = onesCountLongLongLong * 1;\n\
    \        long tensCountLongLongLongLong = tensCountLongLongLong * 10;\n      \
    \  long hundredsCountLongLongLongLong = hundredsCountLongLongLongInt * 100;\n\
    \        long thousandsCountLongLongLongLong = thousandsCountInt * 1000;\n   \
    \     long onesCountLong\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7le9l0v9.java:68: error: ';' expected\n        long onesCountLong\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxValue = maxOnes > maxZeros ? maxOnes : maxZeros;\n\
    \        long minValue = maxOnes < maxZeros ? maxOnes : maxZeros;\n        long\
    \ maxDecimal = maxValue / Math.pow(10, maxValue.length());\n        long minDecimal\
    \ = minValue / Math.pow(10, minValue.length());\n        long maxDecimalDecimal\
    \ = maxDecimal / Math.pow(10, maxDecimal.length());\n        long minDecimalDecimal\
    \ = minDecimal / Math.pow(10, minDecimal.length());\n        long maxDecimalDecimalDecimal\
    \ = maxDecimalDecimal / Math.pow(10, maxDecimalDecimal.length());\n        long\
    \ minDecimalDecimalDecimal = minDecimalDecimal / Math.pow(10, minDecimalDecimal.length());\n\
    \        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal / Math.pow(10,\
    \ maxDecimalDecimalDecimal.length());\n        long minDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimal / Math.pow(10, minDecimalDecimalDecimal.length());\n\
    \        long maxDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimal.length());\n        long minDecimalDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimalDecimal / Math.pow(10, minDecimalDecimalDecimalDecimal.length());\n\
    \        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimal.length());\n        long\
    \ minDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, minDecimalDecimalDecimalDecimalDecimal.length());\n        long\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimal.length());\n  \
    \      long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, minDecimalDecimalDecimalDecimalDecimalDecimal.length());\n  \
    \      long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal.length());\n\
    \        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimalDe\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeparc8j8.java:46: error: ';' expected\n        long minDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimalDecimalDecimalDecimalDe\n                        \
    \                                                                            \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            long bin = Long.parseLong(Long.toBinaryString(num));\n\
    \            ones += bin & 1;\n            tens += bin >> 1 & 1;\n           \
    \ hundreds += bin >> 2 & 1;\n            thousands += bin >> 3 & 1;\n        }\n\
    \        long onesCount = ones + tens + hundreds + thousands;\n        long tensCount\
    \ = ones + hundreds + thousands;\n        long hundredsCount = ones + thousands;\n\
    \        long thousandsCount = ones;\n        long tensCount2 = tens;\n      \
    \  long hundredsCount2 = hundreds;\n        long thousandsCount2 = thousands;\n\
    \        long tensCount3 = tensCount;\n        long hundredsCount3 = hundredsCount;\n\
    \        long thousandsCount3 = thousandsCount;\n        long tensCount4 = tensCount2;\n\
    \        long hundredsCount4 = hundredsCount2;\n        long thousandsCount4 =\
    \ thousandsCount2;\n        long tensCount5 = tensCount3;\n        long hundredsCount5\
    \ = hundredsCount3;\n        long thousandsCount5 = thousandsCount3;\n       \
    \ long tensCount6 = tensCount4;\n        long hundredsCount6 = hundredsCount4;\n\
    \        long thousandsCount6 = thousandsCount4;\n        long tensCount7 = tensCount5;\n\
    \        long hundredsCount7 = hundredsCount5;\n        long thousandsCount7 =\
    \ thousandsCount5;\n        long tensCount8 = tensCount6;\n        long hundredsCount8\
    \ = hundredsCount6;\n        long thousandsCount8 = thousandsCount6;\n       \
    \ long tensCount9 = tensCount7;\n        long hundredsCount9 = 0;\n        long\
    \ thousandsCount9 = 0;\n        long tensCount10 = tensCount8;\n        long hundredsCount10\
    \ = 0;\n        long thousandsCount10 = 0;\n        long tensCount11 = tensCount9;\n\
    \        long hundredsCount11 = 0;\n        long thousandsCount11 = 0;\n     \
    \   long tensCount12 = tensCount10;\n        long hundredsCount12 = 0;\n     \
    \   long thousandsCount12 = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nrm_6zd.java:67: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n\
    \        long thousandsDecimal = (thousands / 10) * 1000;\n        long decimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        Collections.sort(result);\n\
    \        Collections.sort(result, (a, b) -> {\n            long aDecimal = a /\
    \ 10;\n            long bDecimal = b / 10;\n            return aDecimal - bDecimal;\n\
    \        });\n        ArrayList<Long> result2 = new ArrayList<>();\n        for\
    \ (Long l : result) {\n            if (l == decimal) {\n                result2.add(l);\n\
    \            }\n        }\n        return result2;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3gbkw255.java:41: error: incompatible types: cannot infer type-variable(s)\
    \ T\n        Collections.sort(result, (a, b) -> {\n                        ^\n\
    \    (argument mismatch; bad return type in lambda expression\n      possible\
    \ lossy conversion from long to int)\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>sort(List<T>,Comparator<? super T>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        for (Long l : arr)\
    \ {\n            if (l == 1) {\n                ones++;\n            } else if\
    \ (l == 10) {\n                tens++;\n            } else if (l == 100) {\n \
    \               hundreds++;\n            } else if (l == 1000) {\n           \
    \     thousands++;\n            } else if (l == 10000) {\n                tenths++;\n\
    \            } else if (l == 100000) {\n                oneths++;\n          \
    \  } else {\n                result.add(l);\n            }\n        }\n      \
    \  long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        long tenthsCount = 0;\n    \
    \    long onethsCount = 0;\n        for (Long l : arr) {\n            if (l ==\
    \ 1) {\n                onesCount++;\n            } else if (l == 10) {\n    \
    \            tensCount++;\n            } else if (l == 100) {\n              \
    \  hundredsCount++;\n            } else if (l == 1000) {\n                thousandsCount++;\n\
    \            } else if (l == 10000) {\n                tenthsCount++;\n      \
    \      } else if (l == 100000) {\n                onethsCount++;\n           \
    \ }\n        }\n        long onesCount2 = onesCount * ones;\n        long tensCount2\
    \ = tensCount * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n\
    \        long thousandsCount2 = thousandsCount * thousands;\n        long tenthsCount2\
    \ = tenthsCount * tenths;\n        long onethsCount2 = onethsCount * oneths;\n\
    \        long onesCount3 = onesCount2 * ones;\n        long tensCount3 = tensCount2\
    \ * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n        long\
    \ thousandsCount3 = thousandsCount2 * thousands;\n        long tenthsCount3 =\
    \ tenthsCount2 * tenths;\n        long onethsCount3 = onethsCount2 * oneths;\n\
    \        long onesCount4 = onesCount3 * ones;\n        long tensCount4 = tensCount3\
    \ * tens;\n        long hundredsCount4 = hundredsCount3 * hundreds;\n        long\
    \ thousandsCount4 = thousandsCount3 * thousands;\n        long tenthsCount4 =\
    \ tenths\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6shlx7u6.java:78: error: ';' expected\n        long tenthsCount4\
    \ = tenths\n                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            long l = Long.parseLong(l.toString());\n\
    \            ones += l;\n            tens += (l / 10);\n            hundreds +=\
    \ (l / 100);\n            thousands += (l / 1000);\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long onesCount2 = ones;\n \
    \       long tensCount2 = tens;\n        long hundredsCount2 = hundreds;\n   \
    \     long thousandsCount2 = thousands;\n        long onesCount3 = ones;\n   \
    \     long tensCount3 = tens;\n        long hundredsCount3 = hundreds;\n     \
    \   long thousandsCount3 = thousands;\n        long onesCount4 = ones;\n     \
    \   long tensCount4 = tens;\n        long hundredsCount4 = hundreds;\n       \
    \ long thousandsCount4 = thousands;\n        long onesCount5 = ones;\n       \
    \ long tensCount5 = tens;\n        long hundredsCount5 = hundreds;\n        long\
    \ thousandsCount5 = thousands;\n        long onesCount6 = ones;\n        long\
    \ tensCount6 = tens;\n        long hundredsCount6 = hundreds;\n        long thousandsCount6\
    \ = thousands;\n        long onesCount7 = ones;\n        long tensCount7 = tens;\n\
    \        long hundredsCount7 = hundreds;\n        long thousandsCount7 = thousands;\n\
    \        long onesCount8 = ones;\n        long tensCount8 = tens;\n        long\
    \ hundredsCount8 = hundreds;\n        long thousandsCount8 = thousands;\n    \
    \    long onesCount9 = ones;\n        long tensCount9 = tens;\n        long hundredsCount9\
    \ = 100;\n        long thousandsCount9 = 1000;\n        long onesCount10 = ones;\n\
    \        long tensCount10 = tens;\n        long hundredsCount10 = 200;\n     \
    \   long thousandsCount10 = 300;\n        long onesCount11 = ones;\n        long\
    \ tensCount11 = tens;\n        long hundredsCount11 = 300;\n        long thousandsCount11\
    \ = 100\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7jx4eww.java:72: error: ';' expected\n        long thousandsCount11\
    \ = 100\n                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1) {\n           \
    \         result.add(i);\n                }\n            }\n        } else {\n\
    \            Collections.sort(arr);\n            for (long i : arr) {\n      \
    \          if (i == 0) {\n                    result.add(i);\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkz2lf5lg.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long l : arr) {\n            if (l == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                maxOnesCount++;\n\
    \                if (maxOnesCount > maxOnes) {\n                    maxOnes =\
    \ maxOnesCount;\n                }\n            } else {\n                maxZerosCount++;\n\
    \                if (maxZerosCount > maxZeros) {\n                    maxZeros\
    \ = maxZerosCount;\n                }\n            }\n        }\n        long\
    \ maxOnesDecimal = maxOnes / maxOnesCount;\n        long maxZerosDecimal = maxZeros\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimal = maxOnesDecimal / maxOnesCount;\n\
    \        long maxZerosDecimalDecimal = maxZerosDecimal / maxZerosCount;\n    \
    \    long maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal / maxOnesCount;\n\
    \        long maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal / maxZerosCount;\n\
    \        long maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / maxOnesCount;\n        long maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimal / maxOnesCount;\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesCount;\n      \
    \  long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZerosCount;\n        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnesCount;\n\
    \        long maxZerosDecimal\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8817k2sb.java:57: error: ';' expected\n        long maxZerosDecimal\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.bitLength() > 1) {\n        \
    \        ones += i;\n            } else if (i.bitLength() == 1) {\n          \
    \      tens += i;\n            } else if (i.bitLength() == 10) {\n           \
    \     tens += i;\n                hundreds += i;\n            } else if (i.bitLength()\
    \ == 100) {\n                tens += i;\n                hundreds += i;\n    \
    \            thousands += i;\n            } else if (i.bitLength() == 1000) {\n\
    \                tens += i;\n                hundreds += i;\n                thousands\
    \ += i;\n                thousands += i;\n            }\n        }\n        long\
    \ onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        long totalCount\
    \ = onesCount + tensCount + hundredsCount + thousandsCount;\n        if (onesCount\
    \ > tensCount) {\n            onesCount = tensCount;\n            tensCount =\
    \ onesCount;\n        }\n        if (hundredsCount > thousandsCount) {\n     \
    \       hundredsCount = thousandsCount;\n            thousandsCount = hundredsCount;\n\
    \        }\n        if (onesCount > hundredsCount) {\n            onesCount =\
    \ hundredsCount;\n            hundredsCount = onesCount;\n        }\n        if\
    \ (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n  \
    \          thousandsCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n            thousandsCount = tensCount;\n        }\n      \
    \  if (hundredsCount > thousandsCount) {\n            hundredsCount = thousandsCount;\n\
    \            thousandsCount = hundredsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundredsCount = onesCount;\n            onesCount\
    \ = hundredsCount;\n        }\n        if (thousandsCount > onesCount) {\n   \
    \         thousandsCount = onesCount;\n            onesCount = thousandsCount;\n\
    \        }\n        if (thousandsCount > tensCount) {\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmzaojm3s.java:85: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            } else if (i < 0) {\n                tens += i;\n       \
    \     } else if (i < 100) {\n                hundreds += i;\n            } else\
    \ if (i < 1000) {\n                thousands += i;\n            }\n        }\n\
    \        long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long i : arr) {\n     \
    \       if (i > 0) {\n                onesCount += i;\n            } else if (i\
    \ < 0) {\n                tensCount += i;\n            } else if (i < 100) {\n\
    \                hundredsCount += i;\n            } else if (i < 1000) {\n   \
    \             thousandsCount += i;\n            }\n        }\n        long onesCount2\
    \ = onesCount * ones;\n        long tensCount2 = tensCount * tens;\n        long\
    \ hundredsCount2 = hundredsCount * hundreds;\n        long thousandsCount2 = thousandsCount\
    \ * thousands;\n        long onesCount3 = onesCount2 * ones;\n        long tensCount3\
    \ = tensCount2 * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n\
    \        long thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4\
    \ = onesCount3 * ones;\n        long tensCount4 = tensCount3 * tens;\n       \
    \ long hundredsCount4 = hundredsCount3 * hundreds;\n        long thousandsCount4\
    \ = thousandsCount3 * thousands;\n        long onesCount5 = onesCount4 * ones;\n\
    \        long tensCount5 = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4\
    \ * hundreds;\n        long thousandsCount5 = thousandsCount4 * thousands;\n \
    \       long onesCount6 = onesCount5 * ones;\n        long tensCount6 = tensCount5\
    \ * tens;\n        long hundredsCount6 = hundredsCount5 * hundreds;\n        long\
    \ thousandsCount6 = thousandsCount5 * thousands;\n        long onesCount7 = onesCount6\
    \ * ones;\n        long tensCount7 = tensCount6 * tens;\n        long hundredsCount7\
    \ = hundredsCount6 * hundreds;\n        long thousandsCount7 = \n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdu9y3z4r.java:72: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            int bin = Integer.toBinaryString(num).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            }\n        }\n        if (ones > 0) {\n            ones = ones /\
    \ 2;\n        }\n        if (tens > 0) {\n            tens = tens / 2;\n     \
    \   }\n        if (hundreds > 0) {\n            hundreds = hundreds / 2;\n   \
    \     }\n        if (thousands > 0) {\n            thousands = thousands / 2;\n\
    \        }\n        ArrayList<Long> temp = new ArrayList<>();\n        if (ones\
    \ > 0) {\n            temp.add(ones);\n        }\n        if (tens > 0) {\n  \
    \          temp.add(tens);\n        }\n        if (hundreds > 0) {\n         \
    \   temp.add(hundreds);\n        }\n        if (thousands > 0) {\n           \
    \ temp.add(thousands);\n        }\n        if (ones > 0) {\n            temp.add(ones);\n\
    \        }\n        if (tens > 0) {\n            temp.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            temp.add(hundreds);\n        }\n   \
    \     if (thousands > 0) {\n            temp.add(thousands);\n        }\n    \
    \    if (ones > 0) {\n            temp.add(ones);\n        }\n        if (tens\
    \ > 0) {\n            temp.add(tens);\n        }\n        if (hundreds > 0) {\n\
    \            temp.add(hundreds);\n        }\n        if (thousands > 0) {\n  \
    \          temp.add(thousands);\n        }\n        if (ones > 0) {\n        \
    \    temp.add(ones);\n        }\n        if (tens > 0) {\n            temp.add(tens);\n\
    \        }\n        if (hundreds > 0) {\n            temp.add(hundreds);\n   \
    \     }\n        if (thousands > 0) {\n            temp.add(thousands);\n    \
    \    }\n        if (ones > 0) {\n            temp.add(ones);\n        }\n    \
    \    if (tens > 0) {\n            temp.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            temp.add(hundreds);\n        }\n        if (thousands >\
    \ 0) {\n            temp.add(thousands);\n        }\n        if (ones > 0) {\n\
    \            temp.add(ones);\n        }\n        if (tens > 0) {\n           \
    \ temp.add(tens);\n        }\n        if (hundreds > 0) {\n            temp.add(hundreds);\n\
    \        }\n        if (thousands > 0) {\n            temp.add(thousands);\n \
    \       }\n        if (ones > 0) {\n            temp.add(ones);\n        }\n \
    \       if (tens > 0) {\n            temp.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprkasov7i.java:128: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousands++;\n        \
    \    }\n        }\n        long onesCount = ones;\n        long tensCount = tens;\n\
    \        long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        long totalCount = onesCount + tensCount + hundredsCount + thousandsCount;\n\
    \        if (onesCount > tensCount) {\n            onesCount = tensCount;\n  \
    \          tensCount = onesCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n            hundredsCount = onesCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n            thousandsCount = onesCount;\n        }\n      \
    \  if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \            hundredsCount = tensCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n            thousandsCount = tensCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n            thousandsCount = hundredsCount;\n        }\n\
    \        long onesCountTotal = onesCount + tensCount + hundredsCount + thousandsCount;\n\
    \        long tensCountTotal = tensCount + hundredsCount + thousandsCount;\n \
    \       long hundredsCountTotal = hundredsCount + thousandsCount;\n        long\
    \ thousandsCountTotal = thousandsCount;\n        long totalCountTotal = onesCountTotal\
    \ + tensCountTotal + hundredsCountTotal + thousandsCountTotal;\n        long onesCountTotal2\
    \ = onesCountTotal + onesCount;\n        long tensCountTotal2 = tensCountTotal\
    \ + tensCount;\n        long hundredsCountTotal2 = hundredsCountTotal + hundredsCount;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4uiatu37.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i%10 == 1) {\n                ones++;\n\
    \            } else if (i%10 == 2) {\n                tens++;\n            } else\
    \ if (i%10 == 3) {\n                hundreds++;\n            } else if (i%10 ==\
    \ 4) {\n                thousands++;\n            }\n        }\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        for (Long i : arr) {\n            if (i%10\
    \ == 1) {\n                onesCount++;\n            } else if (i%10 == 2) {\n\
    \                tensCount++;\n            } else if (i%10 == 3) {\n         \
    \       hundredsCount++;\n            } else if (i%10 == 4) {\n              \
    \  thousandsCount++;\n            }\n        }\n        long onesCountInt = onesCount;\n\
    \        long tensCountInt = tensCount;\n        long hundredsCountInt = hundredsCount;\n\
    \        long thousandsCountInt = thousandsCount;\n        long onesCountLong\
    \ = onesCount;\n        long tensCountLong = tensCount;\n        long hundredsCountLong\
    \ = hundredsCount;\n        long thousandsCountLong = thousandsCount;\n      \
    \  long onesCountLongInt = onesCount;\n        long tensCountLongInt = tensCount;\n\
    \        long hundredsCountLongInt = hundredsCount;\n        long thousandsCountLongInt\
    \ = thousandsCount;\n        long onesCountLongLong = onesCount;\n        long\
    \ tensCountLongLong = tensCount;\n        long hundredsCountLongLong = hundredsCount;\n\
    \        long thousandsCountLongLong = thousandsCount;\n        long onesCountLongLongInt\
    \ = onesCount;\n        long tensCountLongLongInt = tensCount;\n        long hundredsCountLongLongInt\
    \ = hundredsCount;\n        long thousandsCountLongLongInt = thousandsCount;\n\
    \        long onesCountLongLongLong = onesCount;\n        long tensCountLongLongLong\
    \ = tensCount;\n        long hundredsCountLongLongLong = hundredsCount;\n    \
    \    long thous\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5iepkki6.java:71: error: ';' expected\n        long thous\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            }\n            if (i > 10) {\n                tens += i;\n\
    \            }\n            if (i > 100) {\n                hundreds += i;\n \
    \           }\n            if (i > 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long totalCount = onesCount + tensCount + hundredsCount\
    \ + thousandsCount;\n        if (onesCount > tensCount) {\n            onesCount\
    \ = tensCount;\n            tensCount = onesCount;\n        }\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n            hundredsCount\
    \ = onesCount;\n        }\n        if (onesCount > thousandsCount) {\n       \
    \     onesCount = thousandsCount;\n            thousandsCount = onesCount;\n \
    \       }\n        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        long totalCount2 = onesCount2 + tensCount2 + hundredsCount2\
    \ + thousandsCount2;\n        if (onesCount2 > tensCount2) {\n            onesCount2\
    \ = tensCount2;\n            tensCount2 = onesCount2;\n        }\n        if (onesCount2\
    \ > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n            hundredsCount2\
    \ = onesCount2;\n        }\n        if (onesCount2 > thousandsCount2) {\n    \
    \        onesCount2 = thousandsCount2;\n            thousandsCount2 = onesCount2;\n\
    \        }\n        long onesCount3 = onesCount2;\n        long tensCount3 = tensCount2;\n\
    \        long hundredsCount3 = hundredsCount2;\n        long thousandsCount3 =\
    \ thousandsCount2;\n        long totalCount3 = onesCount3 + tensCount3 + hundredsCount3\
    \ + thousandsCount3;\n        if (onesCount3 > tensCount3) {\n            onesCount3\
    \ = ten\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph2i1r46o.java:76: error: ';' expected\n            onesCount3 =\
    \ ten\n                            ^\n/tmp/tmph2i1r46o.java:78: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n2\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long hundredths = 0;\n        long thousandths\
    \ = 0;\n        long tenthhundredths = 0;\n        long hundredththousandths =\
    \ 0;\n        long thousandthhundredths = 0;\n        long tenththousandths =\
    \ 0;\n        long hundredthtenththousandths = 0;\n        long thousandthhundredthtenths\
    \ = 0;\n        long tenthhundredththousandths = 0;\n        long hundredththousandthtenths\
    \ = 0;\n        long thousandthhundredthtenthhundredths = 0;\n        long tenththousandthhundredththousandths\
    \ = 0;\n        long hundredthtenththousandthhundredththousandths = 0;\n     \
    \   long thousandthhundredthtenthhundredththousandthhundredths = 0;\n        long\
    \ tenthhundredththousandthhundredththousandthhundredthtenths = 0;\n        long\
    \ hundredththousandthhundredththousandthhundredthtenthhundredththousandths = 0;\n\
    \        long thousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredths\
    \ = 0;\n        long tenththousandthhundredththousandthhundredthtenthhundredththousandthhundredththousandthhundredthtenths\
    \ = 0;\n        long hundredthtenththousandthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredthtenths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththous\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqtlro0p.java:44: error: ';' expected\n        long thousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththousandthhundredthtenthhundredththous\n\
    \                                                                            \
    \                                                                          ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 2) {\n     \
    \           tens++;\n            } else if (num == 4) {\n                hundreds++;\n\
    \            } else if (num == 8) {\n                thousands++;\n          \
    \  } else {\n                total++;\n            }\n        }\n        long\
    \ onesTotal = ones * 10;\n        long tensTotal = tens * 100;\n        long hundredsTotal\
    \ = hundreds * 1000;\n        long thousandsTotal = thousands * 10000;\n     \
    \   long totalTotal = total * 1000000000;\n        long onesTotal2 = onesTotal\
    \ * ones;\n        long tensTotal2 = tensTotal * tens;\n        long hundredsTotal2\
    \ = hundredsTotal * hundreds;\n        long thousandsTotal2 = thousandsTotal *\
    \ thousands;\n        long totalTotal2 = totalTotal * total;\n        long onesTotal3\
    \ = onesTotal2 * ones;\n        long tensTotal3 = tensTotal2 * tens;\n       \
    \ long hundredsTotal3 = hundredsTotal2 * hundreds;\n        long thousandsTotal3\
    \ = thousandsTotal2 * thousands;\n        long totalTotal3 = totalTotal2 * total;\n\
    \        long onesTotal4 = onesTotal3 * ones;\n        long tensTotal4 = tensTotal3\
    \ * tens;\n        long hundredsTotal4 = hundredsTotal3 * hundreds;\n        long\
    \ thousandsTotal4 = thousandsTotal3 * thousands;\n        long totalTotal4 = totalTotal3\
    \ * total;\n        long onesTotal5 = onesTotal4 * ones;\n        long tensTotal5\
    \ = tensTotal4 * tens;\n        long hundredsTotal5 = hundredsTotal4 * hundreds;\n\
    \        long thousandsTotal5 = thousandsTotal4 * thousands;\n        long totalTotal5\
    \ = totalTotal4 * total;\n        long onesTotal6 = onesTotal5 * ones;\n     \
    \   long tensTotal6 = tensTotal5 * tens;\n        long hundredsTotal6 = hundredsTotal5\
    \ * hundreds;\n        long thousandsTotal6 = thousandsTotal5 * thousands;\n \
    \       long totalTotal6 = totalTotal5 * total;\n        long onesTotal7 = onesTotal6\
    \ * ones;\n        long \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqqk_h_k.java:67: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmprqqk_h_k.java:67: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 1) {\n               \
    \ ones++;\n            } else if (i % 10 == 1) {\n                tens++;\n  \
    \          } else if (i % 100 == 1) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 1) {\n                thousands++;\n            } else\
    \ {\n                result.add(i);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        long onesCount2\
    \ = onesCount;\n        long tensCount2 = tensCount;\n        long hundredsCount2\
    \ = hundredsCount;\n        long thousandsCount2 = thousandsCount;\n        if\
    \ (onesCount2 > tensCount2) {\n            onesCount2 = tensCount2;\n        }\n\
    \        if (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \        }\n        if (onesCount2 > thousandsCount2) {\n            onesCount2\
    \ = thousandsCount2;\n        }\n        if (tensCount2 > hundredsCount2) {\n\
    \            tensCount2 = hundredsCount2;\n        }\n        if (tensCount2 >\
    \ thousandsCount2) {\n            tensCount2 = thousandsCount2;\n        }\n \
    \       if (hundredsCount2 > thousandsCount2) {\n            hundredsCount2 =\
    \ thousandsCount2;\n        }\n        long onesCount3 = onesCount2;\n       \
    \ long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy20ynavu.java:82: error: ';' expected\n        long thousandsCount3\
    \ = thousandsCount\n                                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredTh\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpysypirex.java:40: error: ';' expected\n        long oneHundredThousandHundredThousandHundredTh\n\
    \                                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long val : arr) {\n            if (val ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxVal = ones;\n        if (ones > zeros) {\n       \
    \     maxVal = ones;\n        } else if (zeros > ones) {\n            maxVal =\
    \ zeros;\n        }\n        long maxValVal = maxVal;\n        long maxValValVal\
    \ = maxValVal;\n        long maxValValValVal = maxValValVal;\n        long maxValValValValVal\
    \ = maxValValValVal;\n        long maxValValValValValVal = maxValValValValVal;\n\
    \        long maxValValValValValValVal = maxValValValValValVal;\n        long\
    \ maxValValValValValValValVal = maxValValValValValValVal;\n        long maxValValValValValValValValVal\
    \ = maxValValValValValValValValVal;\n        long maxValValValValValValValValValVal\
    \ = maxValValValValValValValValValVal;\n        long maxValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValVal;\n        long maxValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValVal;\n        long maxValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValVal;\n        long maxValValValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValValVal;\n        long maxValValValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValValValVal;\n        long maxValValValValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValValValVal;\n        long maxValValValValValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValValValValValVal;\n        \n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9dbhedji.java:46: error: cannot find symbol\n        long maxValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValVal;\n                         \
    \                                 ^\n  symbol:   variable maxValValValValValValValValValValValValValVal\n\
    \  location: class Problem\n/tmp/tmp9dbhedji.java:48: error: variable maxValValValValValValValValValValValValValValVal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxValValValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValValValVal;\n             ^\n/tmp/tmp9dbhedji.java:48:\
    \ error: cannot find symbol\n        long maxValValValValValValValValValValValValValValVal\
    \ = maxValValValValValValValValValValValValValValValVal;\n                   \
    \                                             ^\n  symbol:   variable maxValValValValValValValValValValValValValValValVal\n\
    \  location: class Problem\n/tmp/tmp9dbhedji.java:50: error: cannot find symbol\n\
    \        long maxValValValValValValValValValValValValValValValValVal = maxValValValValValValValValValValValValValValValValValVal;\n\
    \                                                                      ^\n  symbol:\
    \   variable maxValValValValValValValValValValValValValValValValValVal\n  location:\
    \ class Problem\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n  \
    \          } else if (i % 100 == 0) {\n                hundreds++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousands++;\n            } else\
    \ {\n                throw new RuntimeException(\"Unexpected input\");\n     \
    \       }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (long i : arr) {\n            if (i % 2 == 0) {\n                onesCount++;\n\
    \            } else if (i % 10 == 0) {\n                tensCount++;\n       \
    \     } else if (i % 100 == 0) {\n                hundredsCount++;\n         \
    \   } else if (i % 1000 == 0) {\n                thousandsCount++;\n         \
    \   } else {\n                throw new RuntimeException(\"Unexpected input\"\
    );\n            }\n        }\n        long onesDecimal = ones / onesCount;\n \
    \       long tensDecimal = tens / tensCount;\n        long hundredsDecimal = hundreds\
    \ / hundredsCount;\n        long thousandsDecimal = thousands / thousandsCount;\n\
    \        long onesDecimalDecimal = onesDecimal / onesCount;\n        long tensDecimalDecimal\
    \ = tensDecimal / tensCount;\n        long hundredsDecimalDecimal = hundredsDecimal\
    \ / hundredsCount;\n        long thousandsDecimalDecimal = thousandsDecimal /\
    \ thousandsCount;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal /\
    \ tensCount;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal\
    \ / hundredsCount;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal\
    \ / thousandsCount;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / tensCount;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / hundredsCount;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7h2sg4bn.java:67: error: ';' expected\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal \n                                        \
    \                                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i > 0) {\n\
    \                ones++;\n            } else {\n                zeros++;\n   \
    \         }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i > 0) {\n            \
    \        result.add(i);\n                }\n            }\n        } else {\n\
    \            Collections.sort(arr);\n            for (long i : arr) {\n      \
    \          if (i < 0) {\n                    result.add(i);\n                }\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmu7zit8d.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenthththths = 0;\n        long onethththths = 0;\n        long\
    \ tenthththth = 0;\n        long onethththth = 0;\n        long tenthththths =\
    \ 0;\n        long onethththths = 0;\n        long tenthththth = 0;\n        long\
    \ onethththth = 0;\n        long tenthththths = 0;\n        long onethththths\
    \ = 0;\n        long tenthththth = 0;\n        long onethththth = 0;\n       \
    \ long tenthththths = 0;\n        long onethththths = 0;\n        long tenthththth\
    \ = 0;\n        long onethththth = 0;\n        long tenthththths = 0;\n      \
    \  long onethththths = 0;\n        long tenthththth = 0;\n        long onethththth\
    \ = 0;\n        long tenthththths = 0;\n        long onethththths = 0;\n     \
    \   long tenthththth = 0;\n        long onethththth = 0;\n        long tenthththths\
    \ = 0;\n        long onethththths = 0;\n        long tenthththth = 0;\n      \
    \  long onethththth = 0;\n        long tenthththths = 0;\n        long onethththths\
    \ = 0;\n        long tenthththth = 0;\n        long onethththth = 0;\n       \
    \ long tenthththths = 0;\n        long onethththths = 0;\n        long tenthththth\
    \ = 0;\n        long onethththth = 0;\n        long tenthththths = 0;\n      \
    \  long onethththths = 0;\n        long tenthththth = 0;\n        long onethththth\
    \ = 0;\n        long tenthththths = 0;\n        long onethththths = 0;\n     \
    \   long tenthththth\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfqfe_abx.java:78: error: ';' expected\n        long tenthththth\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n\
    \        long zerosDecimal = zeros / Math.pow(10, arr.size());\n        long onesDecimalDecimal\
    \ = onesDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimal\
    \ = zerosDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4lcfa_ir.java:45: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num > 100) {\n                thousands++;\n            }\n       \
    \ }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens /\
    \ 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n        long thousandsDecimal\
    \ = (thousands / 10) * 1000;\n        long decimal = onesDecimal + tensDecimal\
    \ + hundredsDecimal + thousandsDecimal;\n        long decimalDecimal = decimal\
    \ / 10;\n        long decimalDecimalDecimal = decimalDecimal / 10;\n        long\
    \ decimalDecimalDecimalDecimal = decimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n\
    \        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkrf7dhmh.java:47: error: variable decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n\
    \             ^\n/tmp/tmpkrf7dhmh.java:48: error: cannot find symbol\n       \
    \ long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n                                                                    \
    \                         ^\n  symbol:   variable decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpkrf7dhmh.java:49: error: cannot find symbol\n\
    \        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n                                                                    \
    \                                ^\n  symbol:   variable decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpkrf7dhmh.java:50: error: cannot find symbol\n\
    \        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n                                                                    \
    \                                       ^\n  symbol:   variable decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n/tmp/tmpkrf7dhmh.java:51: error: variable decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n             ^\n/tmp/tmpkrf7dhmh.java:51: error: cannot find symbol\n\
    \        long decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n                                                                    \
    \                                       ^\n  symbol:   variable decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \  location: class Problem\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        if (ones > 0) {\n            sorted.add(ones);\n        }\n        if\
    \ (tens > 0) {\n            sorted.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            sorted.add(hundreds);\n        }\n        if (thousands\
    \ > 0) {\n            sorted.add(thousands);\n        }\n        if (ones > 0)\
    \ {\n            sorted.add(ones);\n        }\n        if (tens > 0) {\n     \
    \       sorted.add(tens);\n        }\n        if (hundreds > 0) {\n          \
    \  sorted.add(hundreds);\n        }\n        if (thousands > 0) {\n          \
    \  sorted.add(thousands);\n        }\n        if (ones > 0) {\n            sorted.add(ones);\n\
    \        }\n        if (tens > 0) {\n            sorted.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sorted.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            sorted.add(thousands);\n        }\n\
    \        if (ones > 0) {\n            sorted.add(ones);\n        }\n        if\
    \ (tens > 0) {\n            sorted.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            sorted.add(hundreds);\n        }\n        if (thousands\
    \ > 0) {\n            sorted.add(thousands);\n        }\n        if (ones > 0)\
    \ {\n            sorted.add(ones);\n        }\n        if (tens > 0) {\n     \
    \       sorted.add(tens);\n        }\n        if (hundreds > 0) {\n          \
    \  sorted.add(hundreds);\n        }\n        if (thousands > 0) {\n          \
    \  sorted.add(thousands);\n        }\n        if (ones > 0) {\n            sorted.add(ones);\n\
    \        }\n        if (tens > 0) {\n            sorted.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            sorted.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            sorted.add(thousands);\n        }\n\
    \        if (ones > 0) {\n            sorted.add(ones);\n        }\n        if\
    \ (tens > 0) {\n            sorted.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            sorted.add(hundreds);\n        }\n        if (thousand\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9a720myk.java:117: error: ')' expected\n        if (thousand\n\
    \                    ^\n/tmp/tmp9a720myk.java:118: error: illegal start of statement\n\
    \    }\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long onehundreds = 0;\n        long onethousands\
    \ = 0;\n        long onetenths = 0;\n        long onehundredths = 0;\n       \
    \ long onethousandths = 0;\n        long onetenthths = 0;\n        long onehundredthths\
    \ = 0;\n        long onethousandthths = 0;\n        long onetenththths = 0;\n\
    \        long onehundredthths = 0;\n        long onethousandthths = 0;\n     \
    \   long onetenththths = 0;\n        long onehundredthths = 0;\n        long onethousandthths\
    \ = 0;\n        long onetenththths = 0;\n        long onehundredthths = 0;\n \
    \       long onethousandthths = 0;\n        long onetenththths = 0;\n        long\
    \ onehundredthths = 0;\n        long onethousandths = 0;\n        long onetenththths\
    \ = 0;\n        long onehundredthths = 0;\n        long onethousandths = 0;\n\
    \        long onetenththths = 0;\n        long onehundredthths = 0;\n        long\
    \ onethousandths = 0;\n        long onetenththths = 0;\n        long onehundredthths\
    \ = 0;\n        long onethousandths = 0;\n        long onetenththths = 0;\n  \
    \      long onehundredthths = 0;\n        long onethousandths = 0;\n        long\
    \ onetenththths = 0;\n        long onehundredthths = 0;\n        long onethousandths\
    \ = 0;\n        long onetenththths = 0;\n        long onehundredthths = 0;\n \
    \       long onethousandths = 0;\n        long onetenththths = 0;\n        long\
    \ onehundredthths = 0;\n        long onethousandths = 0;\n        long onetenththths\
    \ = 0;\n        long onehundredthths = 0;\n        long onethousandths = 0;\n\
    \        long onetenththths = 0;\n        long onehundredthths = 0;\n        long\
    \ onethousandths = 0;\n        long onetenththths = 0;\n        long onehundredthths\
    \ = 0;\n        long onethousandths = 0;\n        long onetenththths = 0;\n  \
    \      long onehundredthths = 0;\n        long onethousandths = 0;\n        long\
    \ onetenththths = 0;\n        long onehundredthths = 0;\n        \n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpskrj6bsy.java:32: error: variable onehundredthths is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long onehundredthths = 0;\n  \
    \           ^\n/tmp/tmpskrj6bsy.java:33: error: variable onethousandthths is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long onethousandthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:34: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:35: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:36: error: variable onethousandthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:37: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:38: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:39: error: variable onethousandthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:40: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:41: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:42: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:43: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:44: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:45: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:46: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:47: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:48: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:49: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:50: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:51: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:52: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:53: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:54: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:55: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:56: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:57: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:58: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:59: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:60: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:61: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:62: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:63: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:64: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:65: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:66: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:67: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:68: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:69: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:70: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:71: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:72: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:73: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:74: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:75: error: variable onethousandths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onethousandths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:76: error: variable onetenththths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onetenththths\
    \ = 0;\n             ^\n/tmp/tmpskrj6bsy.java:77: error: variable onehundredthths\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long onehundredthths\
    \ = 0;\n             ^\n46 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        for (Long num : arr) {\n            if (num == 1) {\n        \
    \        onesCount++;\n            } else {\n                zerosCount++;\n \
    \           }\n        }\n        long onesDecimal = ones / onesCount;\n     \
    \   long zerosDecimal = zeros / zerosCount;\n        long onesDecimalDecimal =\
    \ onesDecimal / onesCount;\n        long zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount;\n\
    \        long zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount;\n\
    \        long zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount;\n        long zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimal / onesCount;\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosCount;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount;\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount;\n     \
    \   long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount;\n     \
    \   long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5dr_d4nk.java:54: error: ';' expected\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal\n                                              \
    \                                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            if (bin == 1) {\n                ones++;\n            } else if (bin\
    \ == 2) {\n                tens++;\n            } else if (bin == 3) {\n     \
    \           hundreds++;\n            } else if (bin == 4) {\n                thousands++;\n\
    \            }\n        }\n        ones = ones * 10 + ones;\n        tens = tens\
    \ * 10 + tens;\n        hundreds = hundreds * 10 + hundreds;\n        thousands\
    \ = thousands * 10 + thousands;\n        long maxOnes = ones;\n        long maxTens\
    \ = tens;\n        long maxHundreds = hundreds;\n        long maxThousands = thousands;\n\
    \        for (long i : arr) {\n            int bin = Integer.toBinaryString(i).length();\n\
    \            if (bin == 1) {\n                maxOnes = Math.max(maxOnes, ones);\n\
    \                ones = 0;\n            } else if (bin == 2) {\n             \
    \   maxTens = Math.max(maxTens, tens);\n                tens = 0;\n          \
    \  } else if (bin == 3) {\n                maxHundreds = Math.max(maxHundreds,\
    \ hundreds);\n                hundreds = 0;\n            } else if (bin == 4)\
    \ {\n                maxThousands = Math.max(maxThousands, thousands);\n     \
    \           thousands = 0;\n            }\n        }\n        long maxOnesTens\
    \ = maxOnes * 10 + maxTens;\n        long maxOnesHundreds = maxOnes * 10 + maxHundreds;\n\
    \        long maxOnesThousands = maxOnes * 10 + maxThousands;\n        long maxTensHundreds\
    \ = maxTens * 10 + maxHundreds;\n        long maxTensThousands = maxTens * 10\
    \ + maxThousands;\n        long maxHundredsThousands = maxHundreds * 10 + maxThousands;\n\
    \        long maxOnesTensHundreds = maxOnesTens * 10 + maxHundreds;\n        long\
    \ maxOnesTensThousands = maxOnesTens * 10 + maxThousands;\n        long maxOnesHundredsThousands\
    \ = maxOnesHundreds * 10 + maxThousands;\n        long maxTensHundredsThousands\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp82f6a_5s.java:68: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneThousands = 0;\n        long\
    \ oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneThousandThousands\
    \ = 0;\n        long oneHundredThousands = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandThousands = 0;\n        long oneThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousands = 0;\n        long oneHundredThousandThousandHundreds\
    \ = 0;\n        long oneThousandThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandThousandHundredThousandHundreds = 0;\n       \
    \ long oneHundredThousandThousandHundredThousandHundreds = 0;\n        long oneThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandThousand\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8dexqgog.java:45: error: ';' expected\n        long oneThousandThousand\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.intValue() == 1) {\n        \
    \        ones++;\n            } else if (i.intValue() == 10) {\n             \
    \   tens++;\n            } else if (i.intValue() == 100) {\n                hundreds++;\n\
    \            } else if (i.intValue() == 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 1000;\n        long\
    \ tensDecimal = tens * 1000;\n        long hundredsDecimal = hundreds * 1000;\n\
    \        long thousandsDecimal = thousands * 1000;\n        long onesDecimalDecimal\
    \ = onesDecimal * 1000;\n        long tensDecimalDecimal = tensDecimal * 1000;\n\
    \        long hundredsDecimalDecimal = hundredsDecimal * 1000;\n        long thousandsDecimalDecimal\
    \ = thousandsDecimal * 1000;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 1000;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal * 1000;\n\
    \        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal * 1000;\n\
    \        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal * 1000;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal * 1000;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal * 1000;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ * 1000;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 1000;\n        long thousands\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm527eq9v.java:56: error: ';' expected\n        long thousands\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long max = 0;\n        for (Long num : arr) {\n          \
    \  if (num == 1) {\n                ones--;\n            } else {\n          \
    \      zeros--;\n            }\n            if (ones > zeros) {\n            \
    \    max = ones;\n            } else if (zeros > ones) {\n                max\
    \ = zeros;\n            }\n            if (max > maxOnes) {\n                maxOnes\
    \ = max;\n            } else if (max == maxOnes) {\n                result.add(num);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79d9xl5z.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxValue = maxOnes + maxZeros;\n        long minValue\
    \ = maxOnes - maxZeros;\n        long maxDecimal = maxValue / 10;\n        long\
    \ minDecimal = minValue / 10;\n        long maxDecimalDecimal = maxDecimal / 10;\n\
    \        long minDecimalDecimal = minDecimal / 10;\n        long maxDecimalDecimalDecimal\
    \ = maxDecimalDecimal / 10;\n        long minDecimalDecimalDecimal = minDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9unj2wjm.java:50: error: ';' expected\n        long minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = minDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe\n   \
    \                                                                            \
    \                                                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        for (long i : arr) {\n\
    \            if (i == 1) {\n                ones++;\n            } else {\n  \
    \              zeros++;\n            }\n            if (ones > zeros) {\n    \
    \            max = ones;\n            } else {\n                max = zeros;\n\
    \            }\n        }\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        for (long i : arr) {\n            if (i == 1) {\n            \
    \    onesCount++;\n            } else {\n                zerosCount++;\n     \
    \       }\n        }\n        long onesCountDecimal = 0;\n        long zerosCountDecimal\
    \ = 0;\n        for (long i : arr) {\n            if (i == 1) {\n            \
    \    onesCountDecimal++;\n            } else {\n                zerosCountDecimal++;\n\
    \            }\n        }\n        long onesCountDecimalDecimal = 0;\n       \
    \ long zerosCountDecimalDecimal = 0;\n        for (long i : arr) {\n         \
    \   if (i == 1) {\n                onesCountDecimalDecimal++;\n            } else\
    \ {\n                zerosCountDecimalDecimal++;\n            }\n        }\n \
    \       long onesCountDecimalDecimalDecimal = 0;\n        long zerosCountDecimalDecimalDecimal\
    \ = 0;\n        for (long i : arr) {\n            if (i == 1) {\n            \
    \    onesCountDecimalDecimalDecimal++;\n            } else {\n               \
    \ zerosCountDecimalDecimalDecimal++;\n            }\n        }\n        long onesCountDecimalDecimalDecimalDecimal\
    \ = 0;\n        long zerosCountDecimalDecimalDecimalDecimal = 0;\n        for\
    \ (long i : arr) {\n            if (i == 1) {\n                onesCountDecimalDecimalDecimalDecimal++;\n\
    \            } else {\n                zerosCountDecimalDecimalDecimalDecimal++;\n\
    \            }\n        }\n        long onesCountDecimalDecimalDecimalDecimalDecimal\
    \ = 0;\n        long zerosCountDecimalDecimalDecimalDecimalDecimal = 0;\n    \
    \    for (long i : arr) {\n            if (i == 1) {\n                onesCountDecimalDecimalDecimalDecimalDecimal++;\n\
    \            } else {\n                zerosCountDecimalDecimalDecimalDecimalDecimal++;\n\
    \            }\n        }\n        long onesCountDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = 0;\n        long zerosCountDecimalDecimalDecimalDecimalDecimalDecimal = 0;\n\
    \        for (long i : arr) {\n            if (i == 1) {\n                onesCountDecimalDecimalDecimalDecimalDecimalDecimal++;\n\
    \            } else {\n                zerosCountDecimalDecimalDecimalDecimalDecimalDecimal++;\n\
    \            }\n        }\n        long onesCountDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = 0;\n        long zerosCountDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = 0;\n        for (long i : arr) {\n            if (i == 1) {\n            \
    \    onesCountDecimalDecimalDecimalDecimalDecimalDecimalDecimal++;\n         \
    \   } else {\n                zerosCountDecimalDecimalDecimalDecimalDecimalDecimalDecimal++;\n\
    \            }\n        }\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxlagyy0t.java:105: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpxlagyy0t.java:105: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long max = 0;\n        for (long i : arr) {\n            if\
    \ (i == 1) {\n                ones--;\n                if (ones > maxOnes) {\n\
    \                    maxOnes = ones;\n                }\n            } else {\n\
    \                zeros--;\n                if (zeros > maxZeros) {\n         \
    \           maxZeros = zeros;\n                }\n            }\n        }\n \
    \       if (maxOnes > maxZeros) {\n            max = maxOnes;\n        } else\
    \ {\n            max = maxZeros;\n        }\n        long onesCount = 0;\n   \
    \     long zerosCount = 0;\n        for (long i : arr) {\n            if (i ==\
    \ 1) {\n                onesCount++;\n            } else {\n                zerosCount++;\n\
    \            }\n        }\n        long onesCountMax = onesCount;\n        long\
    \ zerosCountMax = zerosCount;\n        long maxCount = 0;\n        for (long i\
    \ : arr) {\n            if (i == 1) {\n                onesCount--;\n        \
    \        if (onesCount > onesCountMax) {\n                    onesCountMax = onesCount;\n\
    \                }\n            } else {\n                zerosCount--;\n    \
    \            if (zerosCount > zerosCountMax) {\n                    zerosCountMax\
    \ = zerosCount;\n                }\n            }\n        }\n        if (onesCountMax\
    \ < zerosCountMax) {\n            max = onesCountMax;\n        } else {\n    \
    \        max = zerosCountMax;\n        }\n        for (long i : arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            } else {\n       \
    \         zeros++;\n            }\n        }\n        long maxOnes = ones;\n \
    \       long maxZeros = zeros;\n        long max = 0;\n        for (long i : arr)\
    \ {\n            if (i == 1) {\n                ones--;\n                if (ones\
    \ > maxOnes) {\n                    maxOnes = ones;\n                }\n     \
    \       } else {\n                zeros--;\n                if (zeros > maxZeros)\
    \ {\n                    maxZeros = zeros;\n                }\n            }\n\
    \        }\n        if (maxOnes > maxZeros) {\n            max = maxOnes;\n  \
    \      } else {\n            max = maxZeros;\n        }\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        for (long i : arr) {\n         \
    \   if (i == 1) {\n                onesCount++;\n            } else {\n      \
    \          zerosCount++;\n            }\n        }\n        long onesCountMax\
    \ = onesCount;\n        long zeros\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw9slyauu.java:116: error: ';' expected\n        long zeros\n  \
    \                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num == 1000) {\n                thousands++;\n            } else {\n\
    \                throw new RuntimeException(\"Invalid input\");\n            }\n\
    \        }\n        long onesCount = ones;\n        long tensCount = tens;\n \
    \       long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \            tensCount = onesCount / 10;\n            hundredsCount = onesCount\
    \ % 10;\n        } else if (onesCount > thousandsCount) {\n            onesCount\
    \ = thousandsCount;\n            tensCount = onesCount / 100;\n            hundredsCount\
    \ = onesCount % 100;\n        }\n        long onesCount2 = onesCount;\n      \
    \  long tensCount2 = tensCount;\n        long hundredsCount2 = hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount;\n        if (onesCount2 > hundredsCount2)\
    \ {\n            onesCount2 = hundredsCount2;\n            tensCount2 = onesCount2\
    \ / 10;\n            hundredsCount2 = onesCount2 % 10;\n        } else if (onesCount2\
    \ > thousandsCount2) {\n            onesCount2 = thousandsCount2;\n          \
    \  tensCount2 = onesCount2 / 100;\n            hundredsCount2 = onesCount2 % 100;\n\
    \        }\n        long onesCount3 = onesCount2;\n        long tensCount3 = tensCount2;\n\
    \        long hundredsCount3 = hundredsCount2;\n        long thousandsCount3 =\
    \ thousandsCount2;\n        if (onesCount3 > hundredsCount3) {\n            onesCount3\
    \ = hundredsCount3;\n            tensCount3 = onesCount3 / 10;\n            hundredsCount3\
    \ = onesCount3 % 10;\n        } else if (onesCount3 > thousandsCount3) {\n   \
    \         onesCount3 = thousandsCount3;\n            tensCount3 = onesCount3 /\
    \ 100;\n            hundredsCount3 = onesCount3 % 100;\n        }\n        \n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjcoe9tzf.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        for (Long i : arr) {\n            if (i == 1) {\n        \
    \        ones--;\n            } else {\n                zeros--;\n           \
    \ }\n        }\n        if (ones > zeros) {\n            maxOnes = ones;\n   \
    \         maxZeros = zeros;\n        }\n        if (maxOnes > maxZeros) {\n  \
    \          Collections.reverse(result);\n        } else {\n            Collections.reverse(result);\n\
    \            Collections.reverse(result);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nigidn1.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1) {\n           \
    \         result.add(i);\n                }\n            }\n        } else {\n\
    \            Collections.sort(arr);\n            for (long i : arr) {\n      \
    \          if (i == 0) {\n                    result.add(i);\n               \
    \ }\n            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8u1zhw7.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (Long l : arr) {\n            if (l == 1) {\n                onesCount++;\n\
    \            } else if (l == 10) {\n                tensCount++;\n           \
    \ } else if (l == 100) {\n                hundredsCount++;\n            } else\
    \ if (l == 1000) {\n                thousandsCount++;\n            }\n       \
    \ }\n        long onesCount2 = onesCount * ones;\n        long tensCount2 = tensCount\
    \ * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n        long\
    \ thousandsCount2 = thousandsCount * thousands;\n        long onesCount3 = onesCount2\
    \ * ones;\n        long tensCount3 = tensCount2 * tens;\n        long hundredsCount3\
    \ = hundredsCount2 * hundreds;\n        long thousandsCount3 = thousandsCount2\
    \ * thousands;\n        long onesCount4 = onesCount3 * ones;\n        long tensCount4\
    \ = tensCount3 * tens;\n        long hundredsCount4 = hundredsCount3 * hundreds;\n\
    \        long thousandsCount4 = thousandsCount3 * thousands;\n        long onesCount5\
    \ = onesCount4 * ones;\n        long tensCount5 = tensCount4 * tens;\n       \
    \ long hundredsCount5 = hundredsCount4 * hundreds;\n        long thousandsCount5\
    \ = thousandsCount4 * thousands;\n        long onesCount6 = onesCount5 * ones;\n\
    \        long tensCount6 = tensCount5 * tens;\n        long hundredsCount6 = hundredsCount5\
    \ * hundreds;\n        long thousandsCount6 = thousandsCount5 * thousands;\n \
    \       long onesCount7 = onesCount6 * ones;\n        long tensCount7 = tensCount6\
    \ * tens;\n        long hundredsCount7 = hundreds\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbbzud9of.java:72: error: ';' expected\n        long hundredsCount7\
    \ = hundreds\n                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long ten_thousands = 0;\n        long hundred_thousands = 0;\n      \
    \  long millions = 0;\n        long billions = 0;\n        long trillions = 0;\n\
    \        long quadrillions = 0;\n        long quintillions = 0;\n        long\
    \ sextillions = 0;\n        long septillions = 0;\n        long octillions = 0;\n\
    \        long nonillions = 0;\n        long decillions = 0;\n        long undecillions\
    \ = 0;\n        long duodecillions = 0;\n        long tredecillions = 0;\n   \
    \     long quattuordecillions = 0;\n        long quindecillions = 0;\n       \
    \ long sexdecillions = 0;\n        long septendecillions = 0;\n        long octodecillions\
    \ = 0;\n        long novemdecillions = 0;\n        long vigintillions = 0;\n \
    \       long unvigintillions = 0;\n        long duovigintillions = 0;\n      \
    \  long trevigintillions = 0;\n        long quattuorvigintillions = 0;\n     \
    \   long quinvigintillions = 0;\n        long sexvigintillions = 0;\n        long\
    \ septenvigintillions = 0;\n        long octovigintillions = 0;\n        long\
    \ novemvigintillions = 0;\n        long vigintillions = 0;\n        long unvigintillions\
    \ = 0;\n        long duovigintillions = 0;\n        long trevigintillions = 0;\n\
    \        long quattuorvigintillions = 0;\n        long quinvigintillions = 0;\n\
    \        long sexvigintillions = 0;\n        long septenvigintillions = 0;\n \
    \       long octovigintillions = 0;\n        long novemvigintillions = 0;\n  \
    \      long vigintillions = 0;\n        long unvigintillions = 0;\n        long\
    \ duovigintillions = 0;\n        long trevigintillions = 0;\n        long quattuorvigintillions\
    \ = 0;\n        long quinvigintillions = 0;\n        long sexvigintillions = 0;\n\
    \        long septenvigintillions = 0;\n        long octovigintillions = 0;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiq1z3zwd.java:53: error: variable vigintillions is already defined\
    \ in method sortArray(ArrayList<Long>)\n        long vigintillions = 0;\n    \
    \         ^\n/tmp/tmpiq1z3zwd.java:54: error: variable unvigintillions is already\
    \ defined in method sortArray(ArrayList<Long>)\n        long unvigintillions =\
    \ 0;\n             ^\n/tmp/tmpiq1z3zwd.java:55: error: variable duovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long duovigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:56: error: variable trevigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long trevigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:57: error: variable quattuorvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quattuorvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:58: error: variable quinvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quinvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:59: error: variable sexvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long sexvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:60: error: variable septenvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long septenvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:61: error: variable octovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long octovigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:62: error: variable novemvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long novemvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:63: error: variable vigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long vigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:64: error: variable unvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long unvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:65: error: variable duovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long duovigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:66: error: variable trevigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long trevigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:67: error: variable quattuorvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quattuorvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:68: error: variable quinvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long quinvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:69: error: variable sexvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long sexvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:70: error: variable septenvigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long septenvigintillions\
    \ = 0;\n             ^\n/tmp/tmpiq1z3zwd.java:71: error: variable octovigintillions\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long octovigintillions\
    \ = 0;\n             ^\n19 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.intValue() == 1) {\n        \
    \        ones++;\n            } else if (i.intValue() == 10) {\n             \
    \   tens++;\n            } else if (i.intValue() == 100) {\n                hundreds++;\n\
    \            } else if (i.intValue() == 1000) {\n                thousands++;\n\
    \            } else {\n                throw new RuntimeException(\"Unexpected\
    \ input: \" + i);\n            }\n        }\n        long onesDecimal = ones *\
    \ 1000;\n        long tensDecimal = tens * 1000;\n        long hundredsDecimal\
    \ = hundreds * 1000;\n        long thousandsDecimal = thousands * 1000;\n    \
    \    long decimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal2 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal3 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal4 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal5 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal6 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal7 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal8 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal9 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal10 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal11 = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        long decimal12 = one\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv8f4y6kt.java:50: error: ';' expected\n        long decimal12 =\
    \ one\n                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long ten_thousands = 0;\n        long hundred_thousands = 0;\n      \
    \  long thousand_thousands = 0;\n        long ten_hundred_thousands = 0;\n   \
    \     long hundred_hundred_thousands = 0;\n        long thousand_hundred_thousands\
    \ = 0;\n        long ten_thousand_hundred_thousands = 0;\n        long hundred_thousand_hundred_thousands\
    \ = 0;\n        long thousand_thousand_hundred_thousands = 0;\n        long ten_hundred_thousand_hundred_thousands\
    \ = 0;\n        long hundred_hundred_thousand_hundred_thousands = 0;\n       \
    \ long thousand_hundred_thousand_hundred_thousands = 0;\n        long ten_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long hundred_thousand_hundred_thousand_hundred_thousands = 0;\n\
    \        long thousand_thousand_hundred_thousand_hundred_thousands = 0;\n    \
    \    long ten_hundred_thousand_hundred_thousand_hundred_thousands = 0;\n     \
    \   long hundred_hundred_thousand_hundred_thousand_hundred_thousands = 0;\n  \
    \      long thousand_hundred_thousand_hundred_thousand_hundred_thousands = 0;\n\
    \        long ten_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long thousand_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long ten_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long hundred_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long ten_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long thousand_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long ten_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n        long hundred_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thous\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkipuoumn.java:50: error: ';' expected\n        long hundred_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thous\n\
    \                                                                            \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesCount = ones;\n        long zerosCount\
    \ = zeros;\n        long maxOnesCount = onesCount;\n        long maxZeroCount\
    \ = zerosCount;\n        long maxOnesCountInDec = onesCount;\n        long maxZeroCountInDec\
    \ = zerosCount;\n        long maxOnesCountInDecDec = 0;\n        long maxZeroCountInDecDec\
    \ = 0;\n        long maxOnesCountInDecHex = 0;\n        long maxZeroCountInDecHex\
    \ = 0;\n        long maxOnesCountInHex = 0;\n        long maxZeroCountInHex =\
    \ 0;\n        long maxOnesCountInHexDec = 0;\n        long maxZeroCountInHexDec\
    \ = 0;\n        long maxOnesCountInHexHex = 0;\n        long maxZeroCountInHexHex\
    \ = 0;\n        long maxOnesCountInHexHexDec = 0;\n        long maxZeroCountInHexHexDec\
    \ = 0;\n        long maxOnesCountInHexHexHex = 0;\n        long maxZeroCountInHexHexHex\
    \ = 0;\n        long maxOnesCountInHexHexHexDec = 0;\n        long maxZeroCountInHexHexHexDec\
    \ = 0;\n        long maxOnesCountInHexHexHexHex = 0;\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n        long maxOnesCountInHexHexHexDec = 0;\n        long maxZeroCountInHexHexHexDec\
    \ = 0;\n        long maxOnesCountInHexHexHexHex = 0;\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n        long maxOnesCountInHexHexHexHexDec = 0;\n        long maxZeroCountInHexHexHexHexDec\
    \ = 0;\n        long maxOnesCountInHexHexHexHex = 0;\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n        long maxOnesCountInHexHexHexHexDec = 0;\n        long maxZeroCountInHexHexHexHexDec\
    \ = 0;\n        long maxOnesCountInHexHexHexHex = 0;\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n        long maxOnesCountInHexHexHexHexDec = 0;\n        long maxZeroCountInHexHexHexHexDec\
    \ = 0;\n        long maxOnesCountInHexHexHexHex = 0;\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgg_tjzf1.java:51: error: variable maxOnesCountInHexHexHexDec is\
    \ already defined in method sortArray(ArrayList<Long>)\n        long maxOnesCountInHexHexHexDec\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:52: error: variable maxZeroCountInHexHexHexDec\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZeroCountInHexHexHexDec\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:53: error: variable maxOnesCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesCountInHexHexHexHex\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:54: error: variable maxZeroCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:57: error: variable maxOnesCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesCountInHexHexHexHex\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:58: error: variable maxZeroCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:59: error: variable maxOnesCountInHexHexHexHexDec\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesCountInHexHexHexHexDec\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:60: error: variable maxZeroCountInHexHexHexHexDec\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZeroCountInHexHexHexHexDec\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:61: error: variable maxOnesCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesCountInHexHexHexHex\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:62: error: variable maxZeroCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:63: error: variable maxOnesCountInHexHexHexHexDec\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesCountInHexHexHexHexDec\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:64: error: variable maxZeroCountInHexHexHexHexDec\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZeroCountInHexHexHexHexDec\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:65: error: variable maxOnesCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxOnesCountInHexHexHexHex\
    \ = 0;\n             ^\n/tmp/tmpgg_tjzf1.java:66: error: variable maxZeroCountInHexHexHexHex\
    \ is already defined in method sortArray(ArrayList<Long>)\n        long maxZeroCountInHexHexHexHex\
    \ = 0;\n             ^\n14 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1) {\n                ones++;\n\
    \            } else if (l == 10) {\n                tens++;\n            } else\
    \ if (l == 100) {\n                hundreds++;\n            } else if (l == 1000)\
    \ {\n                thousands++;\n            } else {\n                result.add(l);\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (Long l : arr) {\n            if (l == 1) {\n                onesCount++;\n\
    \            } else if (l == 10) {\n                tensCount++;\n           \
    \ } else if (l == 100) {\n                hundredsCount++;\n            } else\
    \ if (l == 1000) {\n                thousandsCount++;\n            } else {\n\
    \                long tempOnes = ones;\n                ones = onesCount;\n  \
    \              onesCount = tempOnes;\n                long tempTens = tens;\n\
    \                tens = tensCount;\n                tensCount = tempTens;\n  \
    \              long tempHundreds = hundreds;\n                hundreds = hundredsCount;\n\
    \                hundredsCount = tempHundreds;\n                long tempThousands\
    \ = thousands;\n                thousands = thousandsCount;\n                thousandsCount\
    \ = tempThousands;\n            }\n        }\n        long onesCountTemp = ones;\n\
    \        ones = onesCount;\n        onesCount = onesCountTemp;\n        long tensCountTemp\
    \ = tens;\n        tens = tensCount;\n        tensCount = tensCountTemp;\n   \
    \     long hundredsCountTemp = hundreds;\n        hundreds = hundredsCount;\n\
    \        hundredsCount = hundredsCountTemp;\n        long thousandsCountTemp =\
    \ thousands;\n        thousands = thousandsCount;\n        thousandsCount = thousandsCountTemp;\n\
    \        long onesCountTemp2 = ones;\n        ones = onesCount;\n        onesCount\
    \ = onesCountTemp2;\n        long tensCountTemp2 = tens;\n        tens = tensCount;\n\
    \        tensCount = tensCountTemp2;\n        long hundredsCountTemp2 = hundreds;\n\
    \        hundreds = hundredsCount;\n        hundredsCount = hundredsCountTemp\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4j7zjxjx.java:83: error: ';' expected\n        hundredsCount =\
    \ hundredsCountTemp\n                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenThousands = 0;\n        long oneHundredThousands = 0;\n     \
    \   long oneThousand = 0;\n        long oneHundred = 0;\n        long ten = 0;\n\
    \        long hundred = 0;\n        long thousand = 0;\n        long tenThousand\
    \ = 0;\n        long oneHundredThousand = 0;\n        long oneThousand = 0;\n\
    \        long oneHundred = 0;\n        long ten = 0;\n        long hundred = 0;\n\
    \        long thousand = 0;\n        long tenThousand = 0;\n        long oneHundredThousand\
    \ = 0;\n        long oneThousand = 0;\n        long oneHundred = 0;\n        long\
    \ ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n        long\
    \ tenThousand = 0;\n        long oneHundredThousand = 0;\n        long oneThousand\
    \ = 0;\n        long oneHundred = 0;\n        long ten = 0;\n        long hundred\
    \ = 0;\n        long thousand = 0;\n        long tenThousand = 0;\n        long\
    \ oneHundredThousand = 0;\n        long oneThousand = 0;\n        long oneHundred\
    \ = 0;\n        long ten = 0;\n        long hundred = 0;\n        long thousand\
    \ = 0;\n        long tenThousand = 0;\n        long oneHundredThousand = 0;\n\
    \        long oneThousand = 0;\n        long oneHundred = 0;\n        long ten\
    \ = 0;\n        long hundred = 0;\n        long thousand = 0;\n        long tenThousand\
    \ = 0;\n        long oneHundredThousand = 0;\n        long oneThousand = 0;\n\
    \        long oneHundred = 0;\n        long ten = 0;\n        long hundred = 0;\n\
    \        long thousand = 0;\n        long tenThousand = 0;\n        long oneHundredThousand\
    \ = 0;\n        long oneThousand = 0;\n        long oneHundred = 0;\n        long\
    \ ten = 0;\n        long hundred = 0;\n        long thousand = 0;\n        long\
    \ tenThousand = 0;\n        long oneHundredThousand = 0;\n        long oneThousand\
    \ = 0;\n        long oneHundred = 0;\n        long ten = 0;\n        long hundred\
    \ = 0;\n        long thousand = 0;\n        long tenThousand = 0;\n        long\
    \ oneHund\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqdjemxz.java:86: error: ';' expected\n        long oneHund\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num >= 1000 && num < 1000000) {\n                thousands++;\n   \
    \         }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n       \
    \ long thousandsDecimal = (thousands / 10) * 10;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long onesDecimalDecimal\
    \ = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n \
    \       long hundredsDecimalDecimal = (hundredsDecimal / 10) * 10;\n        long\
    \ thousandsDecimalDecimal = (thousandsDecimal / 10) * 10;\n        long decimalDecimal\
    \ = onesDecimalDecimal + tensDecimalDecimal + hundredsDecimalDecimal + thousandsDecimalDecimal;\n\
    \        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n        long\
    \ tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimal\
    \ = (hundredsDecimalDecimal / 10) * 10;\n        long thousandsDecimalDecimalDecimal\
    \ = (thousandsDecimalDecimal / 10) * 10;\n        long decimalDecimalDecimal =\
    \ onesDecimalDecimalDecimal + tensDecimalDecimalDecimal + hundredsDecimalDecimalDecimal\
    \ + thousandsDecimalDecimalDecimal;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = (hundredsDecimalDecimalDecimal / 10) * 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = (thousandsDecimalDecimalDecimal / 10) * 10;\n        long decimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal + tensDecimalDecimalDecimalDe\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc364nf9y.java:52: error: ';' expected\n        long decimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal + tensDecimalDecimalDecimalDe\n         \
    \                                                                            \
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenthths = 0;\n\
    \        long hundredths = 0;\n        long thousandths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long tenththths = 0;\n      \
    \  long onethths = 0;\n        long tenththths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long hundredthths = 0;\n    \
    \    long thousandthths = 0;\n        long hundredthths = 0;\n        long thousandthths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandthths = 0;\n    \
    \    long hundredthths = 0;\n        long thousandthths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long hundredthths = 0;\n    \
    \    long thousandths = 0;\n        long hundredthths = 0;\n        long thousandths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandths = 0;\n      \
    \  long hundredthths = 0;\n        long thousandths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandths = 0;\n        long hundredthths = 0;\n      \
    \  long thousandths = 0;\n        long hundredthths = 0;\n        long thousandths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandths = 0;\n      \
    \  long hundredthths = 0;\n        long thousandths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandths = 0;\n        long hundredthths = 0;\n      \
    \  long thousandths = 0;\n        long hundredthths = 0;\n        long thousandths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandths = 0;\n      \
    \  long hundredthths = 0;\n        long thousandths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandths = 0;\n        long hundredthths = 0;\n      \
    \  long thousandths = 0;\n        long hundredthths = 0;\n        long thousandths\
    \ = 0;\n        long hundredthths = 0;\n        long thousandths = 0;\n      \
    \  long hundredthths = 0;\n        long thousandths = 0;\n        long hundredthths\
    \ = 0;\n        long thousandths = 0;\n        long hundredthths = 0;\n      \
    \  long thousandth\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp17v12k4n.java:85: error: ';' expected\n        long thousandth\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Long> sortArray(ArrayList<Long> arr) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            ones += i;\n            if (i / 10\
    \ > 0) {\n                tens += i / 10;\n                if (i / 100 > 0) {\n\
    \                    hundreds += i / 100;\n                    if (i / 1000 >\
    \ 0) {\n                        thousands += i / 1000;\n                    }\n\
    \                }\n            }\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        long totalCount = onesCount + tensCount\
    \ + hundredsCount + thousandsCount;\n        long onesCount2 = onesCount * onesCount;\n\
    \        long tensCount2 = tensCount * tensCount;\n        long hundredsCount2\
    \ = hundredsCount * hundredsCount;\n        long thousandsCount2 = thousandsCount\
    \ * thousandsCount;\n        long totalCount2 = onesCount2 + tensCount2 + hundredsCount2\
    \ + thousandsCount2;\n        long onesCount3 = onesCount * onesCount2;\n    \
    \    long tensCount3 = tensCount * tensCount2;\n        long hundredsCount3 =\
    \ hundredsCount * hundredsCount2;\n        long thousandsCount3 = thousandsCount\
    \ * thousandsCount2;\n        long totalCount3 = onesCount3 + tensCount3 + hundredsCount3\
    \ + thousandsCount3;\n        long onesCount4 = onesCount * onesCount3;\n    \
    \    long tensCount4 = tensCount * tensCount3;\n        long hundredsCount4 =\
    \ hundredsCount * hundredsCount3;\n        long thousandsCount4 = thousandsCount\
    \ * thousandsCount3;\n        long totalCount4 = onesCount4 + tensCount4 + hundredsCount4\
    \ + thousandsCount4;\n        long onesCount5 = onesCount * onesCount4;\n    \
    \    long tensCount5 = tensCount * tensCount4;\n        long hundredsCount5 =\
    \ hundredsCount * hundredsCount4;\n        long thousandsCount5 = thousandsCount\
    \ * thousandsCount4;\n        long totalCount5 = onesCount5 + tensCount5 + hundredsCount5\
    \ + \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp64jtn7v.java:59: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
