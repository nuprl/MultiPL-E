name: HumanEval_11_string_xor
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz33i5s4q.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n \
    \           if (xor > '9') {\n                xor = xor - 10;\n            }\n\
    \            if (xor < '0') {\n                xor = xor + 10;\n            }\n\
    \            sb.append(xor);\n        }\n        return sb.toString();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsr32z83b.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        int bIndex = b.indexOf(c);\n            if (bIndex >= 0) {\n        \
    \        sb.append(b.charAt(bIndex));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ny26ht3.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyduoxana.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprj68pltz.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int x = a.charAt(i) - '0';\n\
    \            int y = b.charAt(i) - '0';\n            int z = x ^ y;\n        \
    \    sb.append((char) z);\n        }\n        return sb.toString();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t9p5s8w.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmyf75iyh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv58cg5m3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            if (aChar != bChar) {\n    \
    \            sb.append(aChar);\n            } else {\n                sb.append(0);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3frz3lou.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgy9qgco2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppy43re1f.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyel14fjh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i));\n  \
    \      }\n        for (int i = 0; i < b.length(); i++) {\n            sb.append(b.charAt(i));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfgthxv0p.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjkyuqvu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb4r25ceg.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmcfb1gjz.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8fgie1xr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcgl7d7dy.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptod5lnef.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgzgql50o.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n \
    \           if (xor > 9) {\n                xor = xor - 10;\n            }\n \
    \           if (xor < 10) {\n                xor = xor + 10;\n            }\n\
    \            sb.append(String.valueOf(xor));\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp459yxtex.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqw6cw4hl.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqt_4q6z1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n         \
    \   char d = b.charAt(i);\n            int x = c ^ d;\n            if(x == 0)\
    \ sb.append('0');\n            else sb.append(Integer.toBinaryString(x));\n  \
    \      }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9wdpi2vu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdlhdfbr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n   \
    \         char cb = b.charAt(i);\n            if (ca == '0' && cb == '0') {\n\
    \                sb.append('0');\n            } else if (ca == '0' && cb != '0')\
    \ {\n                sb.append('1');\n            } else if (ca != '0' && cb ==\
    \ '0') {\n                sb.append('1');\n            } else {\n            \
    \    sb.append('0');\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n \
    \           if (xor > 9) {\n                xor = xor - 10;\n            }\n \
    \           if (xor < 10) {\n                xor = xor + 10;\n            }\n\
    \            sb.append(String.valueOf(xor));\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzol_6p6m.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmt3bo3_t.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8jf8nzc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        char d = b.charAt(i);\n            int xor = c ^ d;\n            xor\
    \ = (xor < 0) ? xor + 256 : xor;\n            xor = (xor > 255) ? xor - 256 :\
    \ xor;\n            sb.append(String.format(\"%c\", xor));\n        }\n      \
    \  return sb.toString();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubu9dyxd.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpozl7tm1o.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq_5y1cn7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmvn49rsh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpex1ikac2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wnnfws2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3bhbd4m.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        char d = b.charAt(i);\n            if (c == '0' && d == '1') {\n    \
    \            sb.append('1');\n            } else if (c == '1' && d == '0') {\n\
    \                sb.append('0');\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd37q89su.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxfgg_9d.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbbltesc9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9axxmr9.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91fmm7do.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk9rznr7l.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrf81l07.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpopruetn2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbc7nf3r3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92mxkhw5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuh3xto3y.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5wqgyjds.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaihahj5h.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22hip7vm.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n         \
    \   char d = b.charAt(i);\n            int x = Integer.parseInt(String.format(\"\
    %c\", c));\n            int y = Integer.parseInt(String.format(\"%c\", d));\n\
    \            int z = x ^ y;\n            String s = Integer.toString(z);\n   \
    \         sb.append(s);\n        }\n        return sb.toString();\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqdzan63s.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_xffoiq.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29p84t9w.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplatokxvp.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqq0bdc_d.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03jgauno.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qm1zdis.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7h2la4t.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd40nmrhu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpat8vuevp.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lf433ze.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_n1ggcyz.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk12rgx5k.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_3jqdmd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrjed3d2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjohbuqs_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int val = a.charAt(i) - '0';\n\
    \            int val2 = b.charAt(i) - '0';\n            int res = val ^ val2;\n\
    \            if (res < 10) {\n                sb.append(res);\n            } else\
    \ {\n                sb.append('0' + res);\n            }\n        }\n       \
    \ return sb.toString();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n         \
    \   char d = b.charAt(i);\n            int x = Character.getNumericValue(c);\n\
    \            int y = Character.getNumericValue(d);\n            int z = x ^ y;\n\
    \            String s = Integer.toString(z);\n            sb.append(s);\n    \
    \    }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp62eoa8cw.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gn4hy11.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvojr5mil.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vv_rjc4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbo_k0qhy.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akq4uf1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7g_fso3q.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5ua6tt6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprojr3f9a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7c_94n3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8j7t8jv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        char d = b.charAt(i);\n            sb.append((char)(c ^ d));\n      \
    \  }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i7eq8hj.java:24)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptot_2419.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n \
    \           if (xor > 9) {\n                xor = xor - 10;\n            }\n \
    \           if (xor < 10) {\n                xor = xor + 10;\n            }\n\
    \            sb.append(String.valueOf(xor));\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwe24yjf7.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxsswj9y.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgsr4gaxx.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr3jq4qn3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpygtl1dvj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt_b_4dt5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpakmqxmrg.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx1n4hzso.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n \
    \           if (xor > 9) {\n                xor = xor - 10;\n            }\n \
    \           if (xor < 10) {\n                xor = xor + 10;\n            }\n\
    \            sb.append(String.valueOf(xor));\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rjhjyn1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmx1w2kd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppd47vyel.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        int bIndex = b.indexOf(c);\n            if (bIndex >= 0) {\n        \
    \        sb.append(b.charAt(bIndex));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprquyfw0l.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3bgbrzv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplp6dajoa.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvwmrkeci.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0e6_33d8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdq364ryl.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpimyg6hit.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13qgfb9q.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcckf20a5.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9yhtoa8y.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8h5gcsvf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsyjycxsv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4wsdotbf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbagimhi.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_v46endi.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqaz_giht.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9b95wmyj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6y2hfq6d.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoflkyngh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int val = a.charAt(i) - '0';\n\
    \            int val2 = b.charAt(i) - '0';\n            int res = val ^ val2;\n\
    \            if (res < 10) {\n                sb.append('0');\n            }\n\
    \            sb.append(res);\n        }\n        return sb.toString();\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7j5vsmq.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps7eanql8.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpop41otyv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n   \
    \         char cb = b.charAt(i);\n            if (ca == '0' && cb == '0') {\n\
    \                sb.append('0');\n            } else if (ca == '0' && cb == '1')\
    \ {\n                sb.append('1');\n            } else if (ca == '1' && cb ==\
    \ '0') {\n                sb.append('1');\n            } else if (ca == '1' &&\
    \ cb == '1') {\n                sb.append('0');\n            } else {\n      \
    \          sb.append('0');\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        char d = b.charAt(i);\n            if (c == '0' && d == '0') {\n    \
    \            sb.append('0');\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmamnm31u.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsi3vy0ur.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n        \
    \    char cb = b.charAt(i);\n            int res = ca ^ cb;\n            if((int)res\
    \ == 0) {\n                sb.append('0');\n            } else {\n           \
    \     sb.append(Integer.toBinaryString(res));\n            }\n        }\n    \
    \    return sb.toString();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm87ccqtn.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpah5x1auo.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz30yfnj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp379dtdjr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5oq85if_.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91ymyd8a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkfjpd5h.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ws3tckb.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdniix5tc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplpvjj9it.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp0ueruef.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrwwa7v3.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5yf87m3v.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_qnpx2uv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07t5yhuj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9bsou1zh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n   \
    \         char cb = b.charAt(i);\n            int xor = Character.getNumericValue(ca)\
    \ ^ Character.getNumericValue(cb);\n            if (xor > 9) {\n             \
    \   xor = xor - 10;\n            }\n            if (xor < 10) {\n            \
    \    xor = xor + 10;\n            }\n            sb.append((char) (xor));\n  \
    \      }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe715z0v2.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0mejmb4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0q3i3uh.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrc8_ed0.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplx03v2xq.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppyu0sk6q.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_vs537y.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpljx_y802.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpka30nia4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm14wj79a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n   \
    \         char cb = b.charAt(i);\n            if (ca == '0' && cb == '0') {\n\
    \                sb.append('0');\n            } else {\n                sb.append(ca\
    \ ^ cb);\n            }\n        }\n        return sb.toString();\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq5gerhdb.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjx1xam90.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw78r278q.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n \
    \           if (xor > 9) {\n                xor = xor - 10;\n            }\n \
    \           if (xor < 10) {\n                xor = xor + 10;\n            }\n\
    \            sb.append(String.valueOf(xor));\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpghjcppxp.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6jou4bjq.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t6f9h37.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkzcyv5mn.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcfvr7wf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpblrt8g2e.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjsi2ina7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7wwj552o.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91v1w22e.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpanhsc4zu.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi22rl6hf.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            if (aChar != bChar) {\n    \
    \            sb.append(aChar);\n            } else {\n                sb.append('0');\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3pcr6qj_.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoi4qxd__.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptqm33k2i.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1147u7pd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qqhmsoj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwmplsk8k.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1pbw8jv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyq8kygwd.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4nlm9gc6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk70aw3i6.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvj0kawy.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        char d = b.charAt(i);\n            int xor = (int) c ^ d;\n         \
    \   if (xor > 9) {\n                xor -= 10;\n            }\n            sb.append((char)\
    \ (xor));\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrnlqi2m.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr4bjehqc.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        char d = b.charAt(i);\n            if (c == '0' && d == '0') {\n    \
    \            sb.append('0');\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2usikwq.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcgvmp1f.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpswkeyvg4.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6oi2if4i.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n    \
    \        char d = b.charAt(i);\n            sb.append(c ^ d);\n        }\n   \
    \     return sb.toString();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_sib26_a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u74j0yv.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5su0dj2m.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidtp_n7a.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6klhnkbl.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzurk6fjr.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n \
    \           if (xor > 9) {\n                xor = xor - 10;\n            }\n \
    \           if (xor < 10) {\n                xor = xor + 10;\n            }\n\
    \            sb.append((char) xor);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmktd22ik.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72ejw2dp.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpte439sg2.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpavuvgfm7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp98won7kj.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n         \
    \   char d = b.charAt(i);\n            sb.append(c ^ d);\n        }\n        return\
    \ sb.toString();\n\n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9n3gtxd7.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i));\n  \
    \      }\n        for (int i = 0; i < b.length(); i++) {\n            sb.append(b.charAt(i));\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfka1_69y.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n   \
    \         char cb = b.charAt(i);\n            if (ca == '1' && cb == '1') {\n\
    \                sb.append('0');\n            } else {\n                sb.append('1');\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_icmcfs0.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n \
    \           int bChar = b.charAt(i);\n            if (aChar != bChar) {\n    \
    \            sb.append(aChar);\n            } else {\n                sb.append('0');\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa5gok6kj.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8wk323h.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu01_um10.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.length(); i++) {\n            int x = a.charAt(i) - '0';\n\
    \            int y = b.charAt(i) - '0';\n            if (x == y) {\n         \
    \       sb.append(x);\n            } else {\n                sb.append('0');\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tlu5k9l.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0w2cv0p.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String\
    \ a, String b) {\n        StringBuilder result = new StringBuilder();\n      \
    \  for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpekwx1ewz.java:23)\n"
  exit_code: 1
  status: Exception
