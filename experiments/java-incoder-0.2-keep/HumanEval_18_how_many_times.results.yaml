name: HumanEval_18_how_many_times
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() < substring.length())\
    \ {\n            return 0;\n        }\n        long count = 0;\n        int i\
    \ = 0;\n        while (i < string.length() && i < substring.length() && string.charAt(i)\
    \ == substring.charAt(i)) {\n            i++;\n        }\n        while (i < string.length()\
    \ && i < substring.length() && string.charAt(i) != substring.charAt(i)) {\n  \
    \          i++;\n        }\n        while (i < string.length() && i < substring.length()\
    \ && string.charAt(i) == substring.charAt(i)) {\n            i++;\n          \
    \  count++;\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptbx9n5jd.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long i = 0;\n      \
    \  long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n\
    \        long n = 0;\n        long o = 0;\n        long p = 0;\n        long q\
    \ = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n      \
    \  long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n\
    \        long y = 0;\n        long z = 0;\n        long A = 0;\n        long B\
    \ = 0;\n        long C = 0;\n        long D = 0;\n        long E = 0;\n      \
    \  long F = 0;\n        long G = 0;\n        long H = 0;\n        long I = 0;\n\
    \        long J = 0;\n        long K = 0;\n        long L = 0;\n        long M\
    \ = 0;\n        long N = 0;\n        long O = 0;\n        long P = 0;\n      \
    \  long Q = 0;\n        long R = 0;\n        long S = 0;\n        long T = 0;\n\
    \        long U = 0;\n        long V = 0;\n        long W = 0;\n        long X\
    \ = 0;\n        long Y = 0;\n        long Z = 0;\n        long AA = 0;\n     \
    \   long AB = 0;\n        long AC = 0;\n        long AD = 0;\n        long AE\
    \ = 0;\n        long AF = 0;\n        long AG = 0;\n        long AH = 0;\n   \
    \     long AI = 0;\n        long AJ = 0;\n        long AK = 0;\n        long AL\
    \ = 0;\n        long AM = 0;\n        long AN = 0;\n        long AO = 0;\n   \
    \     long AP = 0;\n        long AQ = 0;\n        long AR = 0;\n        long AS\
    \ = 0;\n        long AT = 0;\n        long AU = 0;\n        long AV = 0;\n   \
    \     long AW = 0;\n        long AX = 0;\n        long AY = 0;\n        long AZ\
    \ = 0;\n        long BA = 0;\n        long BB = 0;\n        long BC = 0;\n   \
    \     long BD = 0;\n        long BE = 0;\n        long BF = 0;\n        long BG\
    \ = 0;\n        long BH = 0;\n        long BI = 0;\n        long BJ = 0;\n   \
    \     long BK = 0;\n        long BL = 0;\n        long BM = 0;\n        long BN\
    \ = 0;\n        long BO = 0;\n        long BP = 0;\n        long BQ = 0;\n   \
    \     long BR = 0;\n        long BS = 0;\n        long BT = 0;\n        long BU\
    \ = 0;\n        long BV = 0;\n        long BW = 0;\n        long BX = 0;\n   \
    \     long BY = 0;\n        long BZ = 0;\n        long CA = 0;\n        long \n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcpyyeowb.java:118: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpcpyyeowb.java:118: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35jf9j5a.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return 0;\n        }\n        string\
    \ = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n     \
    \   if (string.indexOf(substring) == -1) {\n            return 0;\n        }\n\
    \        char[] chars = string.toCharArray();\n        char[] subs = substring.toCharArray();\n\
    \        int start = 0;\n        int end = 0;\n        int i = 0;\n        int\
    \ j = 0;\n        while (end < chars.length) {\n            while (end < chars.length\
    \ && subs[j] == chars[end]) {\n                end++;\n            }\n       \
    \     if (end == chars.length) {\n                count++;\n                start\
    \ = i;\n            }\n            while (end < chars.length && subs[i] == chars[end])\
    \ {\n                i++;\n                end++;\n            }\n           \
    \ if (end == chars.length) {\n                count++;\n                start\
    \ = i;\n            }\n            while (end < chars.length && subs[j] == chars[end])\
    \ {\n                i++;\n                end++;\n            }\n           \
    \ if (end == chars.length) {\n                count++;\n                start\
    \ = i;\n            }\n            while (end < chars.length && subs[i] == chars[end])\
    \ {\n                j++;\n                end++;\n            }\n           \
    \ if (end == chars.length) {\n                count++;\n                start\
    \ = i;\n            }\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n\
    \                j--;\n                count++;\n            }\n            else\
    \ if (string.charAt(i) > substring.charAt(j)) {\n                i++;\n      \
    \      }\n            else {\n                j--;\n            }\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpb4na0ea_.java:21)\n\
    \tat Problem.main(tmpb4na0ea_.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int w = z; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(w) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ x = w; x < string.length(); x++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(x) == sub\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpad4m2r9z.java:57: error: ')' expected\n                       \
    \                                                                            \
    \                                                                 if(string.charAt(x)\
    \ == sub\n                                                                   \
    \                                                                            \
    \                                               ^\n/tmp/tmpad4m2r9z.java:58: error:\
    \ illegal start of statement\n    }\n    ^\n/tmp/tmpad4m2r9z.java:59: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\nprinting javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152324.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppejikgqt.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n\
    \                j--;\n                count++;\n            }\n            else\
    \ if (string.charAt(i) > substring.charAt(j)) {\n                i++;\n      \
    \      }\n            else {\n                j--;\n            }\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp1dh9695m.java:21)\n\
    \tat Problem.main(tmp1dh9695m.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int start = 0;\n\
    \        int end = 0;\n        while (start < string.length()) {\n           \
    \ end = string.indexOf(substring, start);\n            if (end == -1) {\n    \
    \            break;\n            }\n            count = count + 1;\n         \
    \   start = end + 1;\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() == 0 || substring.length()\
    \ == 0) {\n            return 0;\n        }\n        long count = 0;\n       \
    \ int i = 0;\n        int j = string.length() - substring.length();\n        while\
    \ (i < j) {\n            if (string.charAt(i) == substring.charAt(0)) {\n    \
    \            i++;\n                count++;\n            }\n            else if\
    \ (string.charAt(i) == substring.charAt(substring.length())) {\n             \
    \   j--;\n                count++;\n            }\n            else {\n      \
    \          i++;\n                j--;\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp427ba5r2.java:28)\n\
    \tat Problem.main(tmp427ba5r2.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqj3gljbf.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.isEmpty() || substring.isEmpty())\
    \ {\n            return 0;\n        }\n        long count = 0;\n        int start\
    \ = 0;\n        int end = string.length() - substring.length();\n        while\
    \ (start < string.length()) {\n            if (string.substring(start, start +\
    \ substring.length()).equals(substring)) {\n                count++;\n       \
    \         start += substring.length();\n            } else {\n               \
    \ while (start < string.length() && string.substring(start, start + substring.length()).equals(substring))\
    \ {\n                    count++;\n                    start++;\n            \
    \    }\n            }\n            end--;\n        }\n        return count;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwa0dqgc.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0lr95o_.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptxd9gzq6.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmptxd9gzq6.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152324.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2letg9g.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long index = 0;\n  \
    \      long index2 = 0;\n        long index3 = 0;\n        long index4 = 0;\n\
    \        long index5 = 0;\n        long index6 = 0;\n        long index7 = 0;\n\
    \        long index8 = 0;\n        long index9 = 0;\n        long index10 = 0;\n\
    \        long index11 = 0;\n        long index12 = 0;\n        long index13 =\
    \ 0;\n        long index14 = 0;\n        long index15 = 0;\n        long index16\
    \ = 0;\n        long index17 = 0;\n        long index18 = 0;\n        long index19\
    \ = 0;\n        long index20 = 0;\n        long index21 = 0;\n        long index22\
    \ = 0;\n        long index23 = 0;\n        long index24 = 0;\n        long index25\
    \ = 0;\n        long index26 = 0;\n        long index27 = 0;\n        long index28\
    \ = 0;\n        long index29 = 0;\n        long index30 = 0;\n        long index31\
    \ = 0;\n        long index32 = 0;\n        long index33 = 0;\n        long index34\
    \ = 0;\n        long index35 = 0;\n        long index36 = 0;\n        long index37\
    \ = 0;\n        long index38 = 0;\n        long index39 = 0;\n        long index40\
    \ = 0;\n        long index41 = 0;\n        long index42 = 0;\n        long index43\
    \ = 0;\n        long index44 = 0;\n        long index45 = 0;\n        long index46\
    \ = 0;\n        long index47 = 0;\n        long index48 = 0;\n        long index49\
    \ = 0;\n        long index50 = 0;\n        long index51 = 0;\n        long index52\
    \ = 0;\n        long index53 = 0;\n        long index54 = 0;\n        long index55\
    \ = 0;\n        long index56 = 0;\n        long index57 = 0;\n        long index58\
    \ = 0;\n        long index59 = 0;\n        long index60 = 0;\n        long index61\
    \ = 0;\n        long index62 = 0;\n        long index63 = 0;\n        long index64\
    \ = 0;\n        long index65 = 0;\n        long index66 = 0;\n        long index67\
    \ = 0;\n        long index68 = 0;\n        long index69 = 0;\n        long index70\
    \ = 0;\n        long index71 = 0;\n        long index72 = 0;\n        long index73\
    \ = 0;\n        long index74 = 0;\n        long index75 = 0;\n        long index76\
    \ = 0;\n        long index77 = 0;\n        long index78 = 0;\n        long index79\
    \ = 0;\n        long index80 = 0;\n        long index81 = 0;\n        long index82\
    \ = 0;\n        long index83 = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_d6bvm6.java:105: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpft_hkcsy.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long index = 0;\n  \
    \      long index2 = 0;\n        long index3 = 0;\n        long index4 = 0;\n\
    \        long index5 = 0;\n        long index6 = 0;\n        long index7 = 0;\n\
    \        long index8 = 0;\n        long index9 = 0;\n        long index10 = 0;\n\
    \        long index11 = 0;\n        long index12 = 0;\n        long index13 =\
    \ 0;\n        long index14 = 0;\n        long index15 = 0;\n        long index16\
    \ = 0;\n        long index17 = 0;\n        long index18 = 0;\n        long index19\
    \ = 0;\n        long index20 = 0;\n        long index21 = 0;\n        long index22\
    \ = 0;\n        long index23 = 0;\n        long index24 = 0;\n        long index25\
    \ = 0;\n        long index26 = 0;\n        long index27 = 0;\n        long index28\
    \ = 0;\n        long index29 = 0;\n        long index30 = 0;\n        long index31\
    \ = 0;\n        long index32 = 0;\n        long index33 = 0;\n        long index34\
    \ = 0;\n        long index35 = 0;\n        long index36 = 0;\n        long index37\
    \ = 0;\n        long index38 = 0;\n        long index39 = 0;\n        long index40\
    \ = 0;\n        long index41 = 0;\n        long index42 = 0;\n        long index43\
    \ = 0;\n        long index44 = 0;\n        long index45 = 0;\n        long index46\
    \ = 0;\n        long index47 = 0;\n        long index48 = 0;\n        long index49\
    \ = 0;\n        long index50 = 0;\n        long index51 = 0;\n        long index52\
    \ = 0;\n        long index53 = 0;\n        long index54 = 0;\n        long index55\
    \ = 0;\n        long index56 = 0;\n        long index57 = 0;\n        long index58\
    \ = 0;\n        long index59 = 0;\n        long index60 = 0;\n        long index61\
    \ = 0;\n        long index62 = 0;\n        long index63 = 0;\n        long index64\
    \ = 0;\n        long index65 = 0;\n        long index66 = 0;\n        long index67\
    \ = 0;\n        long index68 = 0;\n        long index69 = 0;\n        long index70\
    \ = 0;\n        long index71 = 0;\n        long index72 = 0;\n        long index73\
    \ = 0;\n        long index74 = 0;\n        long index75 = 0;\n        long index76\
    \ = 0;\n        long index77 = 0;\n        long index78 = 0;\n        long index79\
    \ = 0;\n        long index80 = 0;\n        long index81 = 0;\n        long index82\
    \ = 0;\n        long index83 = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdg58ju29.java:105: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            int index = string.indexOf(substring,\
    \ i);\n            if(index != -1) {\n                count++;\n             \
    \   i = index + substring.length();\n            } else {\n                break;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1bekcd7.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length() && i < substring.length()) {\n            if\
    \ (string.charAt(i) == substring.charAt(i)) {\n                count++;\n    \
    \            i++;\n            } else if (string.charAt(i) > substring.charAt(i))\
    \ {\n                i++;\n            } else {\n                i++;\n      \
    \      }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp495smwi5.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int index = string.indexOf(substring);\n\
    \        while (index != -1) {\n            count++;\n            index = string.indexOf(substring,\
    \ index + 1);\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82wlvfdo.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt5c7nx12.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpt5c7nx12.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152326.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzm6y69xy.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpz672ymv3.java:19)\n\
    \tat Problem.main(tmpz672ymv3.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 1; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i) == substring.charAt(j)) {\n                  \
    \      count++;\n                    }\n                }\n            }\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5thgvqok.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 1; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i) == substring.charAt(j)) {\n                  \
    \      count++;\n                    }\n                }\n            }\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdanbrpm.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length() && i < substring.length()) {\n            if\
    \ (string.charAt(i) == substring.charAt(i)) {\n                count++;\n    \
    \            i++;\n            } else {\n                if (string.charAt(i)\
    \ == substring.charAt(substring.length() - 1)) {\n                    count++;\n\
    \                } else {\n                    i++;\n                }\n     \
    \       }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b1g9q1r.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return 0;\n        }\n        string\
    \ = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n     \
    \   char[] stringArray = string.toCharArray();\n        char[] substringArray\
    \ = substring.toCharArray();\n        int i = 0;\n        int j = 0;\n       \
    \ while (i < stringArray.length && j < substringArray.length) {\n            if\
    \ (stringArray[i] == substringArray[j]) {\n                i++;\n            \
    \    j++;\n            } else if (stringArray[i] < substringArray[j]) {\n    \
    \            i++;\n            } else {\n                j++;\n            }\n\
    \        }\n        if (i == stringArray.length) {\n            count++;\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphgzsf_a5.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 0; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i + j + 1) == substring.charAt(j)) {\n          \
    \              count++;\n                    }\n                }\n          \
    \  }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 7\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmptt2hy15u.java:21)\n\
    \tat Problem.main(tmptt2hy15u.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp86fyhjlo.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpupk5kxwz.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() == 0 || substring.length()\
    \ == 0) {\n            return 0;\n        }\n        long count = 0;\n       \
    \ int start = 0;\n        int end = string.length() - substring.length();\n  \
    \      while (start < end) {\n            int middle = start + (end - start) /\
    \ 2;\n            if (string.regionMatches(middle, substring, 0, substring.length()))\
    \ {\n                count += 1;\n                start = middle + 1;\n      \
    \      } else {\n                end = middle;\n            }\n        }\n   \
    \     return count;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp68bgk5_9.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa7ei_yh_.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj3ejm1h8.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhrw2xtk.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpzhrw2xtk.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152327.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpe6ipwh20.java:19)\n\
    \tat Problem.main(tmpe6ipwh20.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ai_885g.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = 0;\n        while (i < string.length() && j < substring.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    i++;\n                j++;\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n            count++;\n        }\n        return count;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpznuwo42k.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long index = 0;\n  \
    \      while(index < string.length()) {\n            end = string.indexOf(substring,\
    \ index);\n            if(end == -1) {\n                end = string.length();\n\
    \            }\n            length = end - index;\n            if(length >= substring.length())\
    \ {\n                count += 1;\n                index = end;\n            }\
    \ else {\n                index = end + substring.length();\n            }\n \
    \       }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpitmi6ta3.java:23: error: no suitable method found for indexOf(String,long)\n\
    \            end = string.indexOf(substring, index);\n                       \
    \ ^\n    method String.indexOf(int,int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n    method String.indexOf(String,int) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(1)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(2)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(3)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(4)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(5)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(6)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(7)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(8)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(9)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(10))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(11))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(12))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(13))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(14))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(15))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(16))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(17\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8vyp1dun.java:70: error: ')' expected\n            else if(string.charAt(i)\
    \ == substring.charAt(17\n                                                   \
    \        ^\n/tmp/tmp8vyp1dun.java:71: error: illegal start of statement\n    }\n\
    \    ^\n/tmp/tmp8vyp1dun.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n\
    \                i++;\n                j--;\n            } else if (string.charAt(i)\
    \ > substring.charAt(j)) {\n                i++;\n            } else {\n     \
    \           j--;\n            }\n        }\n        return count;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp6bx4qpvs.java:21)\n\
    \tat Problem.main(tmp6bx4qpvs.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptyyz40yr.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string == null || substring == null)\
    \ {\n            return 0;\n        }\n        long count = 0;\n        int start\
    \ = 0;\n        int end = string.length() - substring.length();\n        while\
    \ (start < end) {\n            int index = string.indexOf(substring, start);\n\
    \            if (index == -1) {\n                break;\n            }\n     \
    \       count += 1;\n            start = index + substring.length();\n       \
    \ }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpumjmz9vo.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            int k = string.indexOf(substring, i);\n            if (k == -1) return\
    \ 0;\n            i += k;\n            count++;\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = 0;\n        while (i < string.length() && j < substring.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    i++;\n                j++;\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n            count++;\n        }\n        return count;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsz61d1ks.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return count;\n        }\n \
    \       char[] charArray = string.toCharArray();\n        char[] charArray2 =\
    \ substring.toCharArray();\n        Arrays.sort(charArray);\n        Arrays.sort(charArray2);\n\
    \        int i = 0;\n        int j = 0;\n        while (i < charArray.length &&\
    \ j < charArray2.length) {\n            if (charArray[i] == charArray2[j]) {\n\
    \                i++;\n                j++;\n            } else if (charArray[i]\
    \ < charArray2[j]) {\n                i++;\n            } else {\n           \
    \     j++;\n            }\n            count++;\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4jcyurr.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpvc4_eb4m.java:19)\n\
    \tat Problem.main(tmpvc4_eb4m.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long length2 = 0;\n\
    \        long length3 = 0;\n        long length4 = 0;\n        long length5 =\
    \ 0;\n        long length6 = 0;\n        long length7 = 0;\n        long length8\
    \ = 0;\n        long length9 = 0;\n        long length10 = 0;\n        long length11\
    \ = 0;\n        long length12 = 0;\n        long length13 = 0;\n        long length14\
    \ = 0;\n        long length15 = 0;\n        long length16 = 0;\n        long length17\
    \ = 0;\n        long length18 = 0;\n        long length19 = 0;\n        long length20\
    \ = 0;\n        long length21 = 0;\n        long length22 = 0;\n        long length23\
    \ = 0;\n        long length24 = 0;\n        long length25 = 0;\n        long length26\
    \ = 0;\n        long length27 = 0;\n        long length28 = 0;\n        long length29\
    \ = 0;\n        long length30 = 0;\n        long length31 = 0;\n        long length32\
    \ = 0;\n        long length33 = 0;\n        long length34 = 0;\n        long length35\
    \ = 0;\n        long length36 = 0;\n        long length37 = 0;\n        long length38\
    \ = 0;\n        long length39 = 0;\n        long length40 = 0;\n        long length41\
    \ = 0;\n        long length42 = 0;\n        long length43 = 0;\n        long length44\
    \ = 0;\n        long length45 = 0;\n        long length46 = 0;\n        long length47\
    \ = 0;\n        long length48 = 0;\n        long length49 = 0;\n        long length50\
    \ = 0;\n        long length51 = 0;\n        long length52 = 0;\n        long length53\
    \ = 0;\n        long length54 = 0;\n        long length55 = 0;\n        long length56\
    \ = 0;\n        long length57 = 0;\n        long length58 = 0;\n        long length59\
    \ = 0;\n        long length60 = 0;\n        long length61 = 0;\n        long length62\
    \ = 0;\n        long length63 = 0;\n        long length64 = 0;\n        long length65\
    \ = 0;\n        long length66 = 0;\n        long length67 = 0;\n        long length68\
    \ = 0;\n        long length69 = 0;\n        long length70 = 0;\n        long length71\
    \ = 0;\n        long length72 = 0;\n        long length73 = 0;\n        long length74\
    \ = 0;\n        long length75 = 0;\n        long length76 = 0;\n        long length77\
    \ = 0;\n        long length78 = 0;\n        long length79 = 0;\n        long length80\
    \ = 0;\n        long length81 = 0;\n        long length82 = 0;\n        long length83\
    \ = 0;\n        long length84 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4xnvbioh.java:104: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1lk8vbug.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp1lk8vbug.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152328.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhjrqoha.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfhjrqoha.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152329.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return count;\n        }\n       \
    \ string = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return count;\n        }\n \
    \       char[] stringArray = string.toCharArray();\n        char[] substringArray\
    \ = substring.toCharArray();\n        int i = 0;\n        int j = 0;\n       \
    \ int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n   \
    \     int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n\
    \        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n\
    \        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n\
    \        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n\
    \        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n\
    \        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n\
    \        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n\
    \        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n\
    \        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n\
    \        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n\
    \        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n\
    \        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n\
    \        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n\
    \        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n\
    \        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n\
    \        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n\
    \        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n\
    \        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n\
    \        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n\
    \        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n\
    \        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n\
    \        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n\
    \        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n\
    \        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n\
    \        int o = 0;\n        int p = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6peuokoa.java:80: error: variable i is already defined in method\
    \ howManyTimes(String,String)\n        int i = 0;\n            ^\n/tmp/tmp6peuokoa.java:81:\
    \ error: variable j is already defined in method howManyTimes(String,String)\n\
    \        int j = 0;\n            ^\n/tmp/tmp6peuokoa.java:82: error: variable\
    \ k is already defined in method howManyTimes(String,String)\n        int k =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:83: error: variable l is already defined\
    \ in method howManyTimes(String,String)\n        int l = 0;\n            ^\n/tmp/tmp6peuokoa.java:84:\
    \ error: variable m is already defined in method howManyTimes(String,String)\n\
    \        int m = 0;\n            ^\n/tmp/tmp6peuokoa.java:85: error: variable\
    \ n is already defined in method howManyTimes(String,String)\n        int n =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:86: error: variable o is already defined\
    \ in method howManyTimes(String,String)\n        int o = 0;\n            ^\n/tmp/tmp6peuokoa.java:87:\
    \ error: variable p is already defined in method howManyTimes(String,String)\n\
    \        int p = 0;\n            ^\n/tmp/tmp6peuokoa.java:88: error: variable\
    \ q is already defined in method howManyTimes(String,String)\n        int q =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:89: error: variable r is already defined\
    \ in method howManyTimes(String,String)\n        int r = 0;\n            ^\n/tmp/tmp6peuokoa.java:90:\
    \ error: variable s is already defined in method howManyTimes(String,String)\n\
    \        int s = 0;\n            ^\n/tmp/tmp6peuokoa.java:91: error: variable\
    \ t is already defined in method howManyTimes(String,String)\n        int t =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:92: error: variable u is already defined\
    \ in method howManyTimes(String,String)\n        int u = 0;\n            ^\n/tmp/tmp6peuokoa.java:93:\
    \ error: variable v is already defined in method howManyTimes(String,String)\n\
    \        int v = 0;\n            ^\n/tmp/tmp6peuokoa.java:94: error: variable\
    \ w is already defined in method howManyTimes(String,String)\n        int w =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:95: error: variable x is already defined\
    \ in method howManyTimes(String,String)\n        int x = 0;\n            ^\n/tmp/tmp6peuokoa.java:96:\
    \ error: variable y is already defined in method howManyTimes(String,String)\n\
    \        int y = 0;\n            ^\n/tmp/tmp6peuokoa.java:97: error: variable\
    \ z is already defined in method howManyTimes(String,String)\n        int z =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:98: error: variable A is already defined\
    \ in method howManyTimes(String,String)\n        int A = 0;\n            ^\n/tmp/tmp6peuokoa.java:99:\
    \ error: variable B is already defined in method howManyTimes(String,String)\n\
    \        int B = 0;\n            ^\n/tmp/tmp6peuokoa.java:100: error: variable\
    \ C is already defined in method howManyTimes(String,String)\n        int C =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:101: error: variable D is already defined\
    \ in method howManyTimes(String,String)\n        int D = 0;\n            ^\n/tmp/tmp6peuokoa.java:102:\
    \ error: variable E is already defined in method howManyTimes(String,String)\n\
    \        int E = 0;\n            ^\n/tmp/tmp6peuokoa.java:103: error: variable\
    \ F is already defined in method howManyTimes(String,String)\n        int F =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:104: error: variable G is already defined\
    \ in method howManyTimes(String,String)\n        int G = 0;\n            ^\n/tmp/tmp6peuokoa.java:105:\
    \ error: variable H is already defined in method howManyTimes(String,String)\n\
    \        int H = 0;\n            ^\n/tmp/tmp6peuokoa.java:106: error: variable\
    \ I is already defined in method howManyTimes(String,String)\n        int I =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:107: error: variable J is already defined\
    \ in method howManyTimes(String,String)\n        int J = 0;\n            ^\n/tmp/tmp6peuokoa.java:108:\
    \ error: variable K is already defined in method howManyTimes(String,String)\n\
    \        int K = 0;\n            ^\n/tmp/tmp6peuokoa.java:109: error: variable\
    \ L is already defined in method howManyTimes(String,String)\n        int L =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:110: error: variable M is already defined\
    \ in method howManyTimes(String,String)\n        int M = 0;\n            ^\n/tmp/tmp6peuokoa.java:111:\
    \ error: variable N is already defined in method howManyTimes(String,String)\n\
    \        int N = 0;\n            ^\n/tmp/tmp6peuokoa.java:112: error: variable\
    \ O is already defined in method howManyTimes(String,String)\n        int O =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:113: error: variable P is already defined\
    \ in method howManyTimes(String,String)\n        int P = 0;\n            ^\n/tmp/tmp6peuokoa.java:114:\
    \ error: variable Q is already defined in method howManyTimes(String,String)\n\
    \        int Q = 0;\n            ^\n/tmp/tmp6peuokoa.java:115: error: variable\
    \ R is already defined in method howManyTimes(String,String)\n        int R =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:116: error: variable S is already defined\
    \ in method howManyTimes(String,String)\n        int S = 0;\n            ^\n/tmp/tmp6peuokoa.java:117:\
    \ error: variable T is already defined in method howManyTimes(String,String)\n\
    \        int T = 0;\n            ^\n/tmp/tmp6peuokoa.java:118: error: variable\
    \ U is already defined in method howManyTimes(String,String)\n        int U =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:119: error: variable V is already defined\
    \ in method howManyTimes(String,String)\n        int V = 0;\n            ^\n/tmp/tmp6peuokoa.java:120:\
    \ error: variable W is already defined in method howManyTimes(String,String)\n\
    \        int W = 0;\n            ^\n/tmp/tmp6peuokoa.java:121: error: variable\
    \ X is already defined in method howManyTimes(String,String)\n        int X =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:122: error: variable Y is already defined\
    \ in method howManyTimes(String,String)\n        int Y = 0;\n            ^\n/tmp/tmp6peuokoa.java:123:\
    \ error: variable Z is already defined in method howManyTimes(String,String)\n\
    \        int Z = 0;\n            ^\n/tmp/tmp6peuokoa.java:124: error: variable\
    \ a is already defined in method howManyTimes(String,String)\n        int a =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:125: error: variable b is already defined\
    \ in method howManyTimes(String,String)\n        int b = 0;\n            ^\n/tmp/tmp6peuokoa.java:126:\
    \ error: variable c is already defined in method howManyTimes(String,String)\n\
    \        int c = 0;\n            ^\n/tmp/tmp6peuokoa.java:127: error: variable\
    \ d is already defined in method howManyTimes(String,String)\n        int d =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:128: error: variable e is already defined\
    \ in method howManyTimes(String,String)\n        int e = 0;\n            ^\n/tmp/tmp6peuokoa.java:129:\
    \ error: variable f is already defined in method howManyTimes(String,String)\n\
    \        int f = 0;\n            ^\n/tmp/tmp6peuokoa.java:130: error: variable\
    \ g is already defined in method howManyTimes(String,String)\n        int g =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:131: error: variable h is already defined\
    \ in method howManyTimes(String,String)\n        int h = 0;\n            ^\n/tmp/tmp6peuokoa.java:132:\
    \ error: variable i is already defined in method howManyTimes(String,String)\n\
    \        int i = 0;\n            ^\n/tmp/tmp6peuokoa.java:133: error: variable\
    \ j is already defined in method howManyTimes(String,String)\n        int j =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:134: error: variable k is already defined\
    \ in method howManyTimes(String,String)\n        int k = 0;\n            ^\n/tmp/tmp6peuokoa.java:135:\
    \ error: variable l is already defined in method howManyTimes(String,String)\n\
    \        int l = 0;\n            ^\n/tmp/tmp6peuokoa.java:136: error: variable\
    \ m is already defined in method howManyTimes(String,String)\n        int m =\
    \ 0;\n            ^\n/tmp/tmp6peuokoa.java:137: error: variable n is already defined\
    \ in method howManyTimes(String,String)\n        int n = 0;\n            ^\n/tmp/tmp6peuokoa.java:138:\
    \ error: variable o is already defined in method howManyTimes(String,String)\n\
    \        int o = 0;\n            ^\n/tmp/tmp6peuokoa.java:139: error: variable\
    \ p is already defined in method howManyTimes(String,String)\n        int p =\
    \ 0;\n            ^\n60 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2v39szk.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length() && i < substring.length()) {\n            if\
    \ (string.charAt(i) == substring.charAt(i)) {\n                count++;\n    \
    \            i++;\n            } else {\n                if (string.charAt(i)\
    \ > substring.charAt(i)) {\n                    i++;\n                } else {\n\
    \                    i++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvaq0dklz.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = string.length();\n        long subLength = substring.length();\n\
    \        while (start < end) {\n            long subStart = string.indexOf(substring,\
    \ start);\n            if (subStart < 0) {\n                count++;\n       \
    \         start = end;\n            } else {\n                count += subLength;\n\
    \                start = subStart + subLength;\n            }\n        }\n   \
    \     return count;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppi1hvp0s.java:22: error: no suitable method found for indexOf(String,long)\n\
    \            long subStart = string.indexOf(substring, start);\n             \
    \                     ^\n    method String.indexOf(int,int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int w = z; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(w) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ x = w; x < string.length(); x++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(x) == sub\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2y93d_50.java:57: error: ')' expected\n                       \
    \                                                                            \
    \                                                                 if(string.charAt(x)\
    \ == sub\n                                                                   \
    \                                                                            \
    \                                               ^\n/tmp/tmp2y93d_50.java:58: error:\
    \ illegal start of statement\n    }\n    ^\n/tmp/tmp2y93d_50.java:59: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\nprinting javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152329.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 1; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i) == substring.charAt(j)) {\n                  \
    \      count++;\n                        i += j;\n                    }\n    \
    \            }\n            }\n        }\n        return count;\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z_fccsh.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.isEmpty() || substring.isEmpty())\
    \ return 0;\n        long count = 0;\n        long start = 0;\n        long end\
    \ = 0;\n        long current = 0;\n        long previous = 0;\n        boolean\
    \ found = false;\n        do {\n            current = string.indexOf(substring,\
    \ start);\n            if (current == -1) {\n                current = string.length();\n\
    \            }\n            end = current + 1;\n            found = string.substring(start,\
    \ end).equals(substring);\n            if (found) {\n                count++;\n\
    \                start = end;\n            }\n            previous = current;\n\
    \        } while (current != -1 && !found);\n        return count;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplee9fbcq.java:25: error: no suitable method found for indexOf(String,long)\n\
    \            current = string.indexOf(substring, start);\n                   \
    \         ^\n    method String.indexOf(int,int) is not applicable\n      (argument\
    \ mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n/tmp/tmplee9fbcq.java:30: error: incompatible types: possible\
    \ lossy conversion from long to int\n            found = string.substring(start,\
    \ end).equals(substring);\n                                     ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpe899wu45.java:19)\n\
    \tat Problem.main(tmpe899wu45.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int aa = z; aa < string.length();\
    \ aa++) {\n                                                                  \
    \                                                                            \
    \              if(string.charAt(aa) == substring.charAt(18)) {\n             \
    \                                                                            \
    \                                                                       for(int\
    \ ba = aa; ba < string.length(); ba++) {\n                                   \
    \                                                                            \
    \                                                     if(\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9cl0fwyv.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp9cl0fwyv.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152330.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 1; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i) == substring.charAt(j)) {\n                  \
    \      count++;\n                    }\n                }\n            }\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7xp44kf.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptem_j9ol.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7iypqcoe.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return count;\n        }\n       \
    \ string = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return count;\n        }\n \
    \       char[] chars = string.toCharArray();\n        char[] subs = substring.toCharArray();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < chars.length && j\
    \ < subs.length) {\n            if (chars[i] == subs[j]) {\n                i++;\n\
    \                j++;\n            } else if (chars[i] == subs[j]) {\n       \
    \         i++;\n            } else if (chars[i] == subs[j]) {\n              \
    \  j++;\n            } else {\n                i++;\n                j++;\n  \
    \          }\n            count++;\n        }\n        return count;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfat0oa_d.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg5g4r7nj.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpg5g4r7nj.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152331.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n\
    \                i++;\n                j--;\n            } else if (string.charAt(i)\
    \ > substring.charAt(j)) {\n                i++;\n            } else {\n     \
    \           j--;\n            }\n        }\n        return count;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpw0zvd8sc.java:21)\n\
    \tat Problem.main(tmpw0zvd8sc.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzx6oyl0.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpckcg7poq.java:19)\n\
    \tat Problem.main(tmpckcg7poq.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmponrnhabm.java:57: error: ')' expected\n                       \
    \                                                                            \
    \                                                                 if(string.charAt(b\n\
    \                                                                            \
    \                                                                            \
    \                              ^\n/tmp/tmponrnhabm.java:58: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmponrnhabm.java:59: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n\
    printing javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152331.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3fjbh5a.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n\
    \                j--;\n                count++;\n            } else if (string.charAt(i)\
    \ > substring.charAt(j)) {\n                i++;\n            } else {\n     \
    \           j--;\n            }\n        }\n        return count;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpmpc3kq7p.java:21)\n\
    \tat Problem.main(tmpmpc3kq7p.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int aa = z; aa < string.length();\
    \ aa++) {\n                                                                  \
    \                                                                            \
    \              if(string.charAt(aa) == substring.charAt(18)) {\n             \
    \                                                                            \
    \                                                                       for(int\
    \ ba = aa; ba < string.length(); ba++) {\n                                   \
    \                                                                            \
    \                                                     \n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi16qkqch.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152331.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = string.length();\n        long substringLength = substring.length();\n\
    \        while (start < end) {\n            long subStringStart = string.indexOf(substring,\
    \ start);\n            if (subStringStart != -1) {\n                long subStringEnd\
    \ = subStringStart + substringLength;\n                if (subStringEnd > end)\
    \ {\n                    subStringEnd = end;\n                }\n            \
    \    count = count + subStringEnd - subStringStart;\n                start = subStringEnd\
    \ + 1;\n            } else {\n                start = end + 1;\n            }\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuf13eqfo.java:22: error: no suitable method found for indexOf(String,long)\n\
    \            long subStringStart = string.indexOf(substring, start);\n       \
    \                                 ^\n    method String.indexOf(int,int) is not\
    \ applicable\n      (argument mismatch; String cannot be converted to int)\n \
    \   method String.indexOf(String,int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbuxo2bc.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuamzgep1.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55esbuih.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            int index = string.indexOf(substring,\
    \ i);\n            if(index != -1) {\n                count += 1;\n          \
    \      i = index;\n            } else {\n                break;\n            }\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps909rced.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnyqmdxv0.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyy27eh0h.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3rj7gsqo.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2k4axug6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.isEmpty() || substring.isEmpty())\
    \ return 0;\n        long count = 0;\n        long start = 0;\n        long end\
    \ = 0;\n        long current = 0;\n        long last = 0;\n        boolean found\
    \ = false;\n        do {\n            current = string.indexOf(substring, start);\n\
    \            if (current == -1) {\n                current = string.length();\n\
    \            }\n            end = current + 1;\n            found = true;\n  \
    \          while (current < string.length() && found && current < end) {\n   \
    \             last = current;\n                current = string.indexOf(substring,\
    \ current + 1);\n                if (current == -1) {\n                    found\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (found) {\n                count++;\n                start = last;\n\
    \            }\n        } while (current < string.length());\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4smyawer.java:25: error: no suitable method found for indexOf(String,long)\n\
    \            current = string.indexOf(substring, start);\n                   \
    \         ^\n    method String.indexOf(int,int) is not applicable\n      (argument\
    \ mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n/tmp/tmp4smyawer.java:33: error: no suitable method found for\
    \ indexOf(String,long)\n                current = string.indexOf(substring, current\
    \ + 1);\n                                ^\n    method String.indexOf(int,int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    \    method String.indexOf(String,int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8zipoh5.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpj8zipoh5.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152333.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlyc1xaq.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int start = 0;\n\
    \        int end = string.length();\n        while (start < end) {\n         \
    \   int index = string.indexOf(substring, start);\n            if (index == -1)\
    \ {\n                break;\n            }\n            count++;\n           \
    \ start = index + substring.length();\n        }\n        return count;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc6k0v75w.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9c2jzdc6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() < substring.length())\
    \ return 0;\n        if (string.equals(substring)) return 1;\n        if (string.startsWith(substring))\
    \ return howManyTimes(string.substring(substring.length()), substring);\n    \
    \    return howManyTimes(string.substring(substring.length()), substring) + howManyTimes(string,\
    \ substring.substring(0, substring.length()));\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n\
    \tat Problem.howManyTimes(tmpu8_z35zo.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1hf173o1.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp1hf173o1.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152333.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long i = 0;\n      \
    \  while(i < string.length()) {\n            end = string.indexOf(substring, i);\n\
    \            if(end == -1) {\n                count++;\n                length\
    \ = end - start + 1;\n                start = i;\n                i = string.length();\n\
    \            } else {\n                count++;\n                length = end\
    \ - start + 1;\n                start = i;\n                i = end + 1;\n   \
    \         }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4fuz2f7h.java:23: error: no suitable method found for indexOf(String,long)\n\
    \            end = string.indexOf(substring, i);\n                        ^\n\
    \    method String.indexOf(int,int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n    method String.indexOf(String,int) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length() && i < substring.length()) {\n            if\
    \ (string.charAt(i) == substring.charAt(i)) {\n                count++;\n    \
    \            i++;\n            } else {\n                if (string.charAt(i)\
    \ == substring.charAt(substring.length() - 1)) {\n                    count++;\n\
    \                } else {\n                    i++;\n                }\n     \
    \       }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ipbrcq8.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvur52_z.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphddefqa9.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiro8jybp.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n\
    \                i++;\n                j--;\n            } else if (string.charAt(i)\
    \ > substring.charAt(j)) {\n                i++;\n            } else {\n     \
    \           j--;\n            }\n        }\n        return count;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpiy4ty3h3.java:21)\n\
    \tat Problem.main(tmpiy4ty3h3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcu0wjyym.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return count;\n        }\n       \
    \ char[] chars = string.toCharArray();\n        char[] chars2 = substring.toCharArray();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < chars.length && j\
    \ < chars2.length) {\n            if (chars[i] == chars2[j]) {\n             \
    \   i++;\n                j++;\n            } else if (chars[i] == chars2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n            count++;\n        }\n        return count;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdk5ed4ry.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp6nj4t2xc.java:19)\n\
    \tat Problem.main(tmp6nj4t2xc.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(1)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(2)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(3)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(4)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(5)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(6)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(7)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(8)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(9)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(10))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(11))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(12))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(13))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(14))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(15))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(16))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(17\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdjyv7lyd.java:70: error: ')' expected\n            else if(string.charAt(i)\
    \ == substring.charAt(17\n                                                   \
    \        ^\n/tmp/tmpdjyv7lyd.java:71: error: illegal start of statement\n    }\n\
    \    ^\n/tmp/tmpdjyv7lyd.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppnq46_08.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int aa = z; aa < string.length();\
    \ aa++) {\n                                                                  \
    \                                                                            \
    \              if(string.charAt(aa) == substring.charAt(18)) {\n             \
    \                                                                            \
    \                                                                       for(int\
    \ ba = aa; ba < string.length(); ba++) {\n                                   \
    \                                                                            \
    \                                                     \n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp79vfw7b6.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152335.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() == 0 || substring.length()\
    \ == 0) {\n            return 0;\n        }\n        long count = 0;\n       \
    \ int i = 0;\n        int j = string.length() - substring.length();\n        while\
    \ (i < j) {\n            if (string.charAt(i) == substring.charAt(0)) {\n    \
    \            i++;\n                count++;\n            } else {\n          \
    \      while (i < j && string.charAt(i) != substring.charAt(0)) {\n          \
    \          i++;\n                }\n                while (i < j && string.charAt(i)\
    \ == substring.charAt(0)) {\n                    i++;\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd18a9u2z.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnqf1awd.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length() && i < substring.length()) {\n            if\
    \ (string.charAt(i) == substring.charAt(i)) {\n                count++;\n    \
    \            i++;\n            } else {\n                if (string.charAt(i)\
    \ > substring.charAt(i)) {\n                    i++;\n                } else {\n\
    \                    i++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldr1tfv3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxn3jdp4i.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnv0qd6bm.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 1; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i) == substring.charAt(j)) {\n                  \
    \      count++;\n                    }\n                }\n            }\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdqlff82i.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptpyxqyee.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8enq18ej.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long index = 0;\n  \
    \      long index2 = 0;\n        long index3 = 0;\n        long index4 = 0;\n\
    \        long index5 = 0;\n        long index6 = 0;\n        long index7 = 0;\n\
    \        long index8 = 0;\n        long index9 = 0;\n        long index10 = 0;\n\
    \        long index11 = 0;\n        long index12 = 0;\n        long index13 =\
    \ 0;\n        long index14 = 0;\n        long index15 = 0;\n        long index16\
    \ = 0;\n        long index17 = 0;\n        long index18 = 0;\n        long index19\
    \ = 0;\n        long index20 = 0;\n        long index21 = 0;\n        long index22\
    \ = 0;\n        long index23 = 0;\n        long index24 = 0;\n        long index25\
    \ = 0;\n        long index26 = 0;\n        long index27 = 0;\n        long index28\
    \ = 0;\n        long index29 = 0;\n        long index30 = 0;\n        long index31\
    \ = 0;\n        long index32 = 0;\n        long index33 = 0;\n        long index34\
    \ = 0;\n        long index35 = 0;\n        long index36 = 0;\n        long index37\
    \ = 0;\n        long index38 = 0;\n        long index39 = 0;\n        long index40\
    \ = 0;\n        long index41 = 0;\n        long index42 = 0;\n        long index43\
    \ = 0;\n        long index44 = 0;\n        long index45 = 0;\n        long index46\
    \ = 0;\n        long index47 = 0;\n        long index48 = 0;\n        long index49\
    \ = 0;\n        long index50 = 0;\n        long index51 = 0;\n        long index52\
    \ = 0;\n        long index53 = 0;\n        long index54 = 0;\n        long index55\
    \ = 0;\n        long index56 = 0;\n        long index57 = 0;\n        long index58\
    \ = 0;\n        long index59 = 0;\n        long index60 = 0;\n        long index61\
    \ = 0;\n        long index62 = 0;\n        long index63 = 0;\n        long index64\
    \ = 0;\n        long index65 = 0;\n        long index66 = 0;\n        long index67\
    \ = 0;\n        long index68 = 0;\n        long index69 = 0;\n        long index70\
    \ = 0;\n        long index71 = 0;\n        long index72 = 0;\n        long index73\
    \ = 0;\n        long index74 = 0;\n        long index75 = 0;\n        long index76\
    \ = 0;\n        long index77 = 0;\n        long index78 = 0;\n        long index79\
    \ = 0;\n        long index80 = 0;\n        long index81 = 0;\n        long index82\
    \ = 0;\n        long index83 = 0;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr73udgky.java:105: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpqv12e4b9.java:19)\n\
    \tat Problem.main(tmpqv12e4b9.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() == 0 || substring.length()\
    \ == 0) {\n            return 0;\n        }\n        long count = 0;\n       \
    \ int start = 0;\n        int end = 0;\n        int i = 0;\n        while (i <\
    \ string.length()) {\n            while (i < string.length() && string.charAt(i)\
    \ == substring.charAt(0)) {\n                i++;\n            }\n           \
    \ if (i == string.length()) {\n                break;\n            }\n       \
    \     while (i < string.length() && string.charAt(i) != substring.charAt(0)) {\n\
    \                i++;\n            }\n            if (i == string.length()) {\n\
    \                break;\n            }\n            end = i;\n            while\
    \ (i < string.length() && string.charAt(i) == substring.charAt(1)) {\n       \
    \         i++;\n            }\n            if (i == string.length()) {\n     \
    \           break;\n            }\n            while (i < string.length() && string.charAt(i)\
    \ != substring.charAt(1)) {\n                i++;\n            }\n           \
    \ if (i == string.length()) {\n                break;\n            }\n       \
    \     start = i;\n            count++;\n        }\n        return count;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp7n65c959.java:38)\n\
    \tat Problem.main(tmp7n65c959.java:58)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.isEmpty() || substring.isEmpty())\
    \ return 0;\n        long count = 0;\n        long start = 0;\n        long end\
    \ = 0;\n        long length = 0;\n        do {\n            start = string.indexOf(substring,\
    \ start);\n            end = string.indexOf(substring, end + 1);\n           \
    \ length = (end > start) ? end - start : substring.length();\n            count\
    \ += length;\n        } while (end != -1);\n        return count;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmpx3j0ox.java:23: error: no suitable method found for indexOf(String,long)\n\
    \            start = string.indexOf(substring, start);\n                     \
    \     ^\n    method String.indexOf(int,int) is not applicable\n      (argument\
    \ mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n/tmp/tmpmpx3j0ox.java:24: error: no suitable method found for\
    \ indexOf(String,long)\n            end = string.indexOf(substring, end + 1);\n\
    \                        ^\n    method String.indexOf(int,int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return 0;\n        }\n        string\
    \ = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n     \
    \   char[] chars = string.toCharArray();\n        char[] chars2 = substring.toCharArray();\n\
    \        Arrays.sort(chars);\n        Arrays.sort(chars2);\n        int i = 0;\n\
    \        int j = 0;\n        while (i < chars.length && j < chars2.length) {\n\
    \            if (chars[i] == chars2[j]) {\n                i++;\n            \
    \    j++;\n            } else if (chars[i] < chars2[j]) {\n                i++;\n\
    \            } else {\n                j++;\n            }\n        }\n      \
    \  while (i < chars.length) {\n            count++;\n            i++;\n      \
    \  }\n        while (j < chars2.length) {\n            count++;\n            j++;\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1akcu37q.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0p9dp51.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp23_ip6ay.java:19)\n\
    \tat Problem.main(tmp23_ip6ay.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long start2 = 0;\n \
    \       long end2 = 0;\n        long length2 = 0;\n        long start3 = 0;\n\
    \        long end3 = 0;\n        long length3 = 0;\n        long start4 = 0;\n\
    \        long end4 = 0;\n        long length4 = 0;\n        long start5 = 0;\n\
    \        long end5 = 0;\n        long length5 = 0;\n        long start6 = 0;\n\
    \        long end6 = 0;\n        long length6 = 0;\n        long start7 = 0;\n\
    \        long end7 = 0;\n        long length7 = 0;\n        long start8 = 0;\n\
    \        long end8 = 0;\n        long length8 = 0;\n        long start9 = 0;\n\
    \        long end9 = 0;\n        long length9 = 0;\n        long start10 = 0;\n\
    \        long end10 = 0;\n        long length10 = 0;\n        long start11 = 0;\n\
    \        long end11 = 0;\n        long length11 = 0;\n        long start12 = 0;\n\
    \        long end12 = 0;\n        long length12 = 0;\n        long start13 = 0;\n\
    \        long end13 = 0;\n        long length13 = 0;\n        long start14 = 0;\n\
    \        long end14 = 0;\n        long length14 = 0;\n        long start15 = 0;\n\
    \        long end15 = 0;\n        long length15 = 0;\n        long start16 = 0;\n\
    \        long end16 = 0;\n        long length16 = 0;\n        long start17 = 0;\n\
    \        long end17 = 0;\n        long length17 = 0;\n        long start18 = 0;\n\
    \        long end18 = 0;\n        long length18 = 0;\n        long start19 = 0;\n\
    \        long end19 = 0;\n        long length19 = 0;\n        long start20 = 0;\n\
    \        long end20 = 0;\n        long length20 = 0;\n        long start21 = 0;\n\
    \        long end21 = 0;\n        long length21 = 0;\n        long start22 = 0;\n\
    \        long end22 = 0;\n        long length22 = 0;\n        long start23 = 0;\n\
    \        long end23 = 0;\n        long length23 = 0;\n        long start24 = 0;\n\
    \        long end24 = 0;\n        long length24 = 0;\n        long start25 = 0;\n\
    \        long end25 = 0;\n        long length25 = 0;\n        long start26 = 0;\n\
    \        long end26 = 0;\n        long length26 = 0;\n        long start27 = 0;\n\
    \        long end27 = 0;\n        long length27 = 0;\n        long start28 = 0;\n\
    \        long end28 = 0;\n        long length28 = 0;\n        long start29 = 0;\n\
    \        long end29 = 0;\n        long length29 = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdoh4fxa.java:106: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwhd5uain.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjdthgp23.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.isEmpty() || substring.isEmpty())\
    \ return 0;\n        long count = 0;\n        int i = 0;\n        int j = string.length()\
    \ - substring.length();\n        while (i < j) {\n            if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                count++;\n                i++;\n\
    \                j--;\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i++;\n            } else {\n                j--;\n      \
    \      }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpkaek1dd6.java:22)\n\
    \tat Problem.main(tmpkaek1dd6.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_vhb2c9.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4_vhb2c9.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152337.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long index = 0;\n  \
    \      long stringLength = string.length();\n        long substringLength = substring.length();\n\
    \        while (index < stringLength) {\n            end = string.indexOf(substring,\
    \ index);\n            if (end == -1) {\n                count++;\n          \
    \      index = stringLength;\n            } else {\n                count++;\n\
    \                start = end;\n                index = end + substringLength;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0crrshhv.java:25: error: no suitable method found for indexOf(String,long)\n\
    \            end = string.indexOf(substring, index);\n                       \
    \ ^\n    method String.indexOf(int,int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n    method String.indexOf(String,int) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = 0;\n        while (i < string.length() && j < substring.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    i++;\n                j++;\n                count++;\n            } else\
    \ if (string.charAt(i) > substring.charAt(j)) {\n                i++;\n      \
    \      } else {\n                j++;\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpasezlav2.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() == 0 || substring.length()\
    \ == 0) {\n            return 0;\n        }\n        long count = 0;\n       \
    \ int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count++;\n                i++;\n                j++;\n            } else\
    \ if (string.charAt(i) > substring.charAt(j)) {\n                i++;\n      \
    \      } else {\n                j++;\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm825s0p1.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp2tb5b6ia.java:19)\n\
    \tat Problem.main(tmp2tb5b6ia.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe1mzs0y0.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int aa = z; aa < string.length();\
    \ aa++) {\n                                                                  \
    \                                                                            \
    \              if(string.charAt(aa) == substring.charAt(18)) {\n             \
    \                                                                            \
    \                                                                       for(int\
    \ ba = aa; ba < string.length(); ba++) {\n                                   \
    \                                                                            \
    \                                                     if(\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyq09f4fw.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyq09f4fw.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152338.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            int index = string.indexOf(substring,\
    \ i);\n            if(index != -1) {\n                count++;\n             \
    \   i = index + substring.length();\n            } else {\n                break;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5xh9mt3.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfio6z2gd.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp98x89hiz.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return 0;\n        }\n        string\
    \ = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n     \
    \   char[] chars = string.toCharArray();\n        char[] chars2 = substring.toCharArray();\n\
    \        int i = 0;\n        int j = 0;\n        int k = 0;\n        while (i\
    \ < chars.length && j < chars2.length) {\n            if (chars[i] == chars2[j])\
    \ {\n                i++;\n                j++;\n            } else if (chars[i]\
    \ == chars2[j]) {\n                i++;\n                j++;\n            } else\
    \ if (chars[i] == chars2[j]) {\n                i++;\n                j++;\n \
    \           } else if (chars[i] == chars2[j]) {\n                i++;\n      \
    \          j++;\n            } else if (chars[i] == chars2[j]) {\n           \
    \     i++;\n                j++;\n            } else if (chars[i] == chars2[j])\
    \ {\n                i++;\n                j++;\n            } else if (chars[i]\
    \ == chars2[j]) {\n                i++;\n                j++;\n            } else\
    \ if (chars[i] == chars2[j]) {\n                i++;\n                j++;\n \
    \           } else if (chars[i] == chars2[j]) {\n                i++;\n      \
    \          j++;\n            } else if (chars[i] == chars2[j]) {\n           \
    \     i++;\n                j++;\n            } else if (chars[i] == chars2[j])\
    \ {\n                i++;\n                j++;\n            } else if (chars[i]\
    \ == chars2[j]) {\n                i++;\n                j++;\n            } else\
    \ if (chars[i] == chars2[j]) {\n                i++;\n                j++;\n \
    \           } else if (chars[i] == chars2[j]) {\n                i++;\n      \
    \          j++;\n            } else if (chars[i] == chars2[j]) {\n           \
    \     i++;\n                j++;\n            } else if (chars[i] == chars2[j])\
    \ {\n                i++;\n                j++;\n            } else if (chars[i]\
    \ == chars2[j]) {\n                i++;\n                j++;\n            } else\
    \ if (chars[i] == chars2[j]) {\n                i++;\n                j++;\n \
    \           } else if (chars[i] == chars2[j]) {\n                i++;\n      \
    \          j++;\n            } else if (chars[i] == chars2[j]) {\n           \
    \     i++;\n                j++;\n            } else if (chars[i] == chars2[j])\
    \ {\n                i++;\n                j++;\n            } else if (chars[i]\
    \ == chars2[j]) {\n                i++;\n                j++;\n            } else\
    \ if (chars[i] == chars2[j]) {\n                i++;\n                j++;\n \
    \           } else if (chars[i] == chars2[j]) {\n                i++;\n      \
    \          j++;\n            } else if (chars[i] == chars2[j]) {\n           \
    \     i++;\n                \n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_v7ecr1m.java:108: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7xkm7qtl.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return 0;\n        }\n        string\
    \ = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n     \
    \   int start = 0;\n        int end = 0;\n        int index = string.indexOf(substring,\
    \ start);\n        while (index != -1) {\n            end = index + substring.length();\n\
    \            count++;\n            index = string.indexOf(substring, end + 1);\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxj3eiimt.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz16x7jv.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi6_b4lrl.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n\
    \                j--;\n                count++;\n            } else {\n      \
    \          if (string.charAt(i) > substring.charAt(j)) {\n                   \
    \ i++;\n                } else {\n                    j--;\n                }\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmppk1ptx7r.java:21)\n\
    \tat Problem.main(tmppk1ptx7r.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int start = 0;\n\
    \        int end = string.length() - substring.length();\n        while (start\
    \ < end) {\n            int index = string.indexOf(substring, start);\n      \
    \      if (index == -1) {\n                break;\n            }\n           \
    \ count += 1;\n            start = index + substring.length();\n        }\n  \
    \      return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0skpsf29.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return count;\n        }\n \
    \       char[] chars = string.toCharArray();\n        char[] chars2 = substring.toCharArray();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < chars.length && j\
    \ < chars2.length) {\n            if (chars[i] == chars2[j]) {\n             \
    \   count++;\n                i++;\n                j++;\n            } else if\
    \ (chars[i] == chars2[j]) {\n                count++;\n                i++;\n\
    \            } else if (chars[i] == chars2[j]) {\n                count++;\n \
    \               j++;\n            } else {\n                i++;\n           \
    \     j++;\n            }\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vch7vem.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string == null || substring == null)\
    \ {\n            throw new IllegalArgumentException(\"String or substring cannot\
    \ be null.\");\n        }\n        long count = 0;\n        int start = 0;\n \
    \       int end = 0;\n        boolean found = false;\n        while (!found &&\
    \ start < string.length()) {\n            end = string.indexOf(substring, start);\n\
    \            if (end == -1) {\n                found = true;\n            } else\
    \ {\n                count += end - start;\n                start = end + 1;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0l994gq.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n\
    \                i += 1;\n                j -= 1;\n            } else {\n    \
    \            i += 1;\n            }\n        }\n        return count;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp_cbqadvl.java:21)\n\
    \tat Problem.main(tmp_cbqadvl.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpia3_a0wy.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebcmgxu8.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int start = 0;\n\
    \        int end = string.length() - substring.length();\n        while (start\
    \ < end) {\n            int index = string.indexOf(substring, start);\n      \
    \      if (index != -1) {\n                count += 1;\n                start\
    \ = index + substring.length();\n            } else {\n                start =\
    \ end;\n            }\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc00xz3mf.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.isEmpty() || substring.isEmpty())\
    \ return 0;\n        long count = 0;\n        long start = 0;\n        long end\
    \ = 0;\n        boolean found = false;\n        do {\n            start = string.indexOf(substring,\
    \ start);\n            if (start == -1) break;\n            end = start + substring.length();\n\
    \            found = true;\n            count++;\n        } while (start != -1);\n\
    \        if (!found) return 0;\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd6gzedp5.java:23: error: no suitable method found for indexOf(String,long)\n\
    \            start = string.indexOf(substring, start);\n                     \
    \     ^\n    method String.indexOf(int,int) is not applicable\n      (argument\
    \ mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 0; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i) == substring.charAt(j)) {\n                  \
    \      count++;\n                    }\n                }\n            }\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyioww28.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpqew7gc22.java:19)\n\
    \tat Problem.main(tmpqew7gc22.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7iy3dy7c.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n\
    \                i++;\n                j--;\n            } else {\n          \
    \      if (string.charAt(i) > substring.charAt(j)) {\n                    i++;\n\
    \                } else {\n                    j--;\n                }\n     \
    \       }\n        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp6brx2ogn.java:21)\n\
    \tat Problem.main(tmp6brx2ogn.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long i = 0;\n      \
    \  long j = 0;\n        while(i < string.length()) {\n            end = string.indexOf(substring,\
    \ i);\n            if(end == -1) {\n                count++;\n               \
    \ i = string.length();\n            } else {\n                length = end - start\
    \ + 1;\n                count += length / substring.length();\n              \
    \  start = end;\n                i = end + 1;\n            }\n        }\n    \
    \    return count;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxzigj9g.java:24: error: no suitable method found for indexOf(String,long)\n\
    \            end = string.indexOf(substring, i);\n                        ^\n\
    \    method String.indexOf(int,int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n    method String.indexOf(String,int) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int start = 0;\n\
    \        int end = string.length() - substring.length();\n        while (start\
    \ < end) {\n            int mid = (start + end) / 2;\n            if (string.substring(mid,\
    \ mid).equals(substring)) {\n                count++;\n                start =\
    \ mid + 1;\n            } else {\n                end = mid;\n            }\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7kqa8z5h.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpi30961sp.java:19)\n\
    \tat Problem.main(tmpi30961sp.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = string.length() - substring.length();\n        while (i < j) {\n\
    \            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n\
    \                j--;\n                count++;\n            }\n            else\
    \ if (string.charAt(i) > substring.charAt(j)) {\n                i++;\n      \
    \      }\n            else {\n                j--;\n            }\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp8gxjs7xf.java:21)\n\
    \tat Problem.main(tmp8gxjs7xf.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpriza7255.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpriza7255.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152341.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long start2 = 0;\n \
    \       long end2 = 0;\n        long length2 = 0;\n        long start3 = 0;\n\
    \        long end3 = 0;\n        long length3 = 0;\n        long start4 = 0;\n\
    \        long end4 = 0;\n        long length4 = 0;\n        long start5 = 0;\n\
    \        long end5 = 0;\n        long length5 = 0;\n        long start6 = 0;\n\
    \        long end6 = 0;\n        long length6 = 0;\n        long start7 = 0;\n\
    \        long end7 = 0;\n        long length7 = 0;\n        long start8 = 0;\n\
    \        long end8 = 0;\n        long length8 = 0;\n        long start9 = 0;\n\
    \        long end9 = 0;\n        long length9 = 0;\n        long start10 = 0;\n\
    \        long end10 = 0;\n        long length10 = 0;\n        long start11 = 0;\n\
    \        long end11 = 0;\n        long length11 = 0;\n        long start12 = 0;\n\
    \        long end12 = 0;\n        long length12 = 0;\n        long start13 = 0;\n\
    \        long end13 = 0;\n        long length13 = 0;\n        long start14 = 0;\n\
    \        long end14 = 0;\n        long length14 = 0;\n        long start15 = 0;\n\
    \        long end15 = 0;\n        long length15 = 0;\n        long start16 = 0;\n\
    \        long end16 = 0;\n        long length16 = 0;\n        long start17 = 0;\n\
    \        long end17 = 0;\n        long length17 = 0;\n        long start18 = 0;\n\
    \        long end18 = 0;\n        long length18 = 0;\n        long start19 = 0;\n\
    \        long end19 = 0;\n        long length19 = 0;\n        long start20 = 0;\n\
    \        long end20 = 0;\n        long length20 = 0;\n        long start21 = 0;\n\
    \        long end21 = 0;\n        long length21 = 0;\n        long start22 = 0;\n\
    \        long end22 = 0;\n        long length22 = 0;\n        long start23 = 0;\n\
    \        long end23 = 0;\n        long length23 = 0;\n        long start24 = 0;\n\
    \        long end24 = 0;\n        long length24 = 0;\n        long start25 = 0;\n\
    \        long end25 = 0;\n        long length25 = 0;\n        long start26 = 0;\n\
    \        long end26 = 0;\n        long length26 = 0;\n        long start27 = 0;\n\
    \        long end27 = 0;\n        long length27 = 0;\n        long start28 = 0;\n\
    \        long end28 = 0;\n        long length28 = 0;\n        long start29 = 0;\n\
    \        long end29 = 0;\n        long length29 = 0;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxa3nba2t.java:106: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp121pire6.java:57: error: ')' expected\n                       \
    \                                                                            \
    \                                                                 if(string.charAt(b\n\
    \                                                                            \
    \                                                                            \
    \                              ^\n/tmp/tmp121pire6.java:58: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmp121pire6.java:59: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n\
    printing javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152341.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length()) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(1)) {\n                i++;\n\
    \                count++;\n            }\n            else if (string.charAt(i)\
    \ == substring.charAt(2)) {\n                i++;\n                count++;\n\
    \            }\n            else if (string.charAt(i) == substring.charAt(3))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(4)) {\n                i++;\n\
    \                count++;\n            }\n            else if (string.charAt(i)\
    \ == substring.charAt(5)) {\n                i++;\n                count++;\n\
    \            }\n            else if (string.charAt(i) == substring.charAt(6))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(7)) {\n                i++;\n\
    \                count++;\n            }\n            else if (string.charAt(i)\
    \ == substring.charAt(8)) {\n                i++;\n                count++;\n\
    \            }\n            else if (string.charAt(i) == substring.charAt(9))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(10)) {\n                i++;\n\
    \                count++;\n            }\n            else if (string.charAt(i)\
    \ == substring.charAt(11)) {\n                i++;\n                count++;\n\
    \            }\n            else if (string.charAt(i) == substring.charAt(12))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(13)) {\n                i++;\n\
    \                count++;\n            }\n            else if (string.charAt(i)\
    \ == substring.charAt(14)) {\n                i++;\n                count++;\n\
    \            }\n            else if (string.charAt(i) == substring.charAt(15))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(16)) {\n                i++;\n\
    \                count++;\n            }\n            else if (string.charAt(i)\
    \ == substring.charAt(17)) {\n                i++;\n                count++;\n\
    \            }\n            else if (string.charAt(i) == substring.charAt(18))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(19)) {\n                i++;\n\
    \                count++;\n            }\n            else if (string.charAt(i)\
    \ == substring.charAt(20)) {\n                i++;\n                count++;\n\
    \            }\n            else if (string.charAt(i) == substring.charAt(21))\
    \ {\n                i++;\n                count++;\n            }\n         \
    \   else if (string.charAt(i) == substring.charAt(22)) {\n                i++;\n\
    \                count\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcjyfafbp.java:110: error: not a statement\n                count\n\
    \                ^\n/tmp/tmpcjyfafbp.java:110: error: ';' expected\n         \
    \       count\n                     ^\n/tmp/tmpcjyfafbp.java:112: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8uv3omwe.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return count;\n        }\n       \
    \ char[] stringArray = string.toCharArray();\n        char[] substringArray =\
    \ substring.toCharArray();\n        int stringLength = stringArray.length;\n \
    \       int substringLength = substringArray.length;\n        for (int i = 0;\
    \ i < stringLength - substringLength + 1; i++) {\n            boolean found =\
    \ true;\n            for (int j = 0; j < substringLength; j++) {\n           \
    \     if (stringArray[i + j] != substringArray[j]) {\n                    found\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (found) {\n                count++;\n            }\n        }\n \
    \       return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpr_gbtvhs.java:19)\n\
    \tat Problem.main(tmpr_gbtvhs.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string == null || substring == null)\
    \ {\n            return 0;\n        }\n        long count = 0;\n        int start\
    \ = 0;\n        int end = 0;\n        int index = string.indexOf(substring, start);\n\
    \        while (index != -1) {\n            end = index + substring.length();\n\
    \            count += string.substring(start, end).length();\n            start\
    \ = end + 1;\n            index = string.indexOf(substring, start);\n        }\n\
    \        return count;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwtz_fe7g.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptcdg49li.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(1)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(2)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(3)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(4)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(5)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(6)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(7)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(8)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(9)) {\n\
    \                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(10))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(11))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(12))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(13))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(14))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(15))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(16))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(17\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvur8tgj1.java:70: error: ')' expected\n            else if(string.charAt(i)\
    \ == substring.charAt(17\n                                                   \
    \        ^\n/tmp/tmpvur8tgj1.java:71: error: illegal start of statement\n    }\n\
    \    ^\n/tmp/tmpvur8tgj1.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5pkr2ll.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj5kr_06_.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = string.length();\n        long substringLength = substring.length();\n\
    \        while (start < end) {\n            long index = string.indexOf(substring,\
    \ start);\n            if (index == -1) {\n                break;\n          \
    \  }\n            start = index + substringLength;\n            count++;\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpffyamucw.java:22: error: no suitable method found for indexOf(String,long)\n\
    \            long index = string.indexOf(substring, start);\n                \
    \               ^\n    method String.indexOf(int,int) is not applicable\n    \
    \  (argument mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long length2 = 0;\n\
    \        long length3 = 0;\n        long length4 = 0;\n        long length5 =\
    \ 0;\n        long length6 = 0;\n        long length7 = 0;\n        long length8\
    \ = 0;\n        long length9 = 0;\n        long length10 = 0;\n        long length11\
    \ = 0;\n        long length12 = 0;\n        long length13 = 0;\n        long length14\
    \ = 0;\n        long length15 = 0;\n        long length16 = 0;\n        long length17\
    \ = 0;\n        long length18 = 0;\n        long length19 = 0;\n        long length20\
    \ = 0;\n        long length21 = 0;\n        long length22 = 0;\n        long length23\
    \ = 0;\n        long length24 = 0;\n        long length25 = 0;\n        long length26\
    \ = 0;\n        long length27 = 0;\n        long length28 = 0;\n        long length29\
    \ = 0;\n        long length30 = 0;\n        long length31 = 0;\n        long length32\
    \ = 0;\n        long length33 = 0;\n        long length34 = 0;\n        long length35\
    \ = 0;\n        long length36 = 0;\n        long length37 = 0;\n        long length38\
    \ = 0;\n        long length39 = 0;\n        long length40 = 0;\n        long length41\
    \ = 0;\n        long length42 = 0;\n        long length43 = 0;\n        long length44\
    \ = 0;\n        long length45 = 0;\n        long length46 = 0;\n        long length47\
    \ = 0;\n        long length48 = 0;\n        long length49 = 0;\n        long length50\
    \ = 0;\n        long length51 = 0;\n        long length52 = 0;\n        long length53\
    \ = 0;\n        long length54 = 0;\n        long length55 = 0;\n        long length56\
    \ = 0;\n        long length57 = 0;\n        long length58 = 0;\n        long length59\
    \ = 0;\n        long length60 = 0;\n        long length61 = 0;\n        long length62\
    \ = 0;\n        long length63 = 0;\n        long length64 = 0;\n        long length65\
    \ = 0;\n        long length66 = 0;\n        long length67 = 0;\n        long length68\
    \ = 0;\n        long length69 = 0;\n        long length70 = 0;\n        long length71\
    \ = 0;\n        long length72 = 0;\n        long length73 = 0;\n        long length74\
    \ = 0;\n        long length75 = 0;\n        long length76 = 0;\n        long length77\
    \ = 0;\n        long length78 = 0;\n        long length79 = 0;\n        long length80\
    \ = 0;\n        long length81 = 0;\n        long length82 = 0;\n        long length83\
    \ = 0;\n        long length84 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3od3yvqm.java:104: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = 0;\n        while (i < string.length() && j < substring.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    i++;\n                j++;\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n            count++;\n        }\n        return count;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjsbvc2wh.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count += howManyTimes(string.substring(i + 1), substring);\n\
    \            }\n            else if(string.charAt(i) != substring.charAt(0)) {\n\
    \                count += howManyTimes(string.substring(i), substring);\n    \
    \        }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\tat Problem.howManyTimes(tmp1qetdus1.java:23)\n\
    \tat Problem.howManyTimes(tmp1qetdus1.java:23)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6jddk97c.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp6jddk97c.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152342.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int aa = z; aa < string.length();\
    \ aa++) {\n                                                                  \
    \                                                                            \
    \              if(string.charAt(aa) == substring.charAt(18)) {\n             \
    \                                                                            \
    \                                                                       for(int\
    \ ba = aa; ba < string.length(); ba++) {\n                                   \
    \                                                                            \
    \                                                     \n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppvlzkygi.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152342.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        boolean found = false;\n\
    \        boolean found2 = false;\n        boolean found3 = false;\n        boolean\
    \ found4 = false;\n        boolean found5 = false;\n        boolean found6 = false;\n\
    \        boolean found7 = false;\n        boolean found8 = false;\n        boolean\
    \ found9 = false;\n        boolean found10 = false;\n        boolean found11 =\
    \ false;\n        boolean found12 = false;\n        boolean found13 = false;\n\
    \        boolean found14 = false;\n        boolean found15 = false;\n        boolean\
    \ found16 = false;\n        boolean found17 = false;\n        boolean found18\
    \ = false;\n        boolean found19 = false;\n        boolean found20 = false;\n\
    \        boolean found21 = false;\n        boolean found22 = false;\n        boolean\
    \ found23 = false;\n        boolean found24 = false;\n        boolean found25\
    \ = false;\n        boolean found26 = false;\n        boolean found27 = false;\n\
    \        boolean found28 = false;\n        boolean found29 = false;\n        boolean\
    \ found30 = false;\n        boolean found31 = false;\n        boolean found32\
    \ = false;\n        boolean found33 = false;\n        boolean found34 = false;\n\
    \        boolean found35 = false;\n        boolean found36 = false;\n        boolean\
    \ found37 = false;\n        boolean found38 = false;\n        boolean found39\
    \ = false;\n        boolean found40 = false;\n        boolean found41 = false;\n\
    \        boolean found42 = false;\n        boolean found43 = false;\n        boolean\
    \ found44 = false;\n        boolean found45 = false;\n        boolean found46\
    \ = false;\n        boolean found47 = false;\n        boolean found48 = false;\n\
    \        boolean found49 = false;\n        boolean found50 = false;\n        boolean\
    \ found51 = false;\n        boolean found52 = false;\n        boolean found53\
    \ = false;\n        boolean found54 = false;\n        boolean found55 = false;\n\
    \        boolean found56 = false;\n        boolean found57 = false;\n        boolean\
    \ found58 = false;\n        boolean found59 = false;\n        boolean found60\
    \ = false;\n        boolean found61 = false;\n        boolean found62 = false;\n\
    \        boolean found63 = false;\n        boolean found64 = false;\n        boolean\
    \ found65 = false;\n        boolean found66 = false;\n        boolean found67\
    \ = false;\n        boolean found68 = false;\n        boolean found69 = false;\n\
    \        boolean found70 = false;\n        boolean found71 = false;\n        boolean\
    \ found72 = false;\n        boolean found73 = false;\n        boolean found74\
    \ = false;\n        boolean found75 = false;\n        boolean found76 = false;\n\
    \        boolean found77 = false;\n        boolean found78 = false;\n        boolean\
    \ found79 = false;\n        boolean found\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmrg_d2u6.java:100: error: ';' expected\n        boolean found\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       int j = 0;\n        while (i < string.length() && j < substring.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    i++;\n                j++;\n            } else if (string.charAt(i) > substring.charAt(j))\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n            count++;\n        }\n        return count;\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxf4pkz8.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfm8xuxzt.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiusey4iw.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp301b3t29.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2o3v80g6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return 0;\n        }\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return count;\n        }\n \
    \       char[] chars = string.toCharArray();\n        char[] substringChars =\
    \ substring.toCharArray();\n        Arrays.sort(substringChars);\n        Arrays.sort(chars);\n\
    \        int i = 0;\n        int j = 0;\n        while (i < chars.length && j\
    \ < substringChars.length) {\n            if (chars[i] == substringChars[j]) {\n\
    \                i++;\n                j++;\n                count++;\n      \
    \      } else if (chars[i] > substringChars[j]) {\n                i++;\n    \
    \        } else {\n                j++;\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgp6i83tr.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi74x_jfb.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpi74x_jfb.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152344.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length()) {\n            int j = string.indexOf(substring,\
    \ i);\n            if (j == -1) {\n                i = string.length();\n    \
    \        } else {\n                i += j + substring.length();\n            \
    \    count++;\n            }\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqm0l4mib.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            int index = string.indexOf(substring,\
    \ i);\n            if(index != -1) {\n                count += 1;\n          \
    \      i = index + substring.length();\n            }\n        }\n        return\
    \ count;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc0ev56el.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb10gihkq.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpb10gihkq.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152344.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return count;\n        }\n       \
    \ string = string.toLowerCase();\n        substring = substring.toLowerCase();\n\
    \        char[] charArray = string.toCharArray();\n        char[] charArray2 =\
    \ substring.toCharArray();\n        Arrays.sort(charArray);\n        Arrays.sort(charArray2);\n\
    \        int i = 0;\n        int j = 0;\n        while (i < charArray.length &&\
    \ j < charArray2.length) {\n            if (charArray[i] == charArray2[j]) {\n\
    \                i++;\n                j++;\n            } else if (charArray[i]\
    \ < charArray2[j]) {\n                i++;\n            } else {\n           \
    \     j++;\n            }\n            count++;\n        }\n        return count;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9st8y51.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        int i = 0;\n \
    \       while (i < string.length() && i < substring.length()) {\n            if\
    \ (string.charAt(i) == substring.charAt(i)) {\n                i++;\n        \
    \        count++;\n            } else {\n                i = 0;\n            }\n\
    \        }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq29saldu.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ul9w9yp.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return 0;\n        }\n        string\
    \ = string.trim();\n        substring = substring.trim();\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n     \
    \   int start = 0;\n        int end = string.length() - substring.length();\n\
    \        while (start < string.length()) {\n            if (string.substring(start,\
    \ start + substring.length()).equals(substring)) {\n                count++;\n\
    \            }\n            start++;\n        }\n        return count;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp316orc6h.java:29)\n\
    \tat Problem.main(tmp316orc6h.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.length() == 0 || substring.length()\
    \ == 0) {\n            return 0;\n        }\n        long count = 0;\n       \
    \ long start = 0;\n        long end = 0;\n        long length = 0;\n        long\
    \ index = 0;\n        boolean found = false;\n        while (index < string.length())\
    \ {\n            end = string.indexOf(substring, index);\n            if (end\
    \ == -1) {\n                break;\n            }\n            length = end -\
    \ start + 1;\n            if (length >= substring.length()) {\n              \
    \  found = true;\n                start = end;\n                index = end +\
    \ 1;\n            } else {\n                index++;\n            }\n        \
    \    count++;\n        }\n        if (!found) {\n            return 0;\n     \
    \   }\n        return count;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqqnez_pd.java:27: error: no suitable method found for indexOf(String,long)\n\
    \            end = string.indexOf(substring, index);\n                       \
    \ ^\n    method String.indexOf(int,int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n    method String.indexOf(String,int) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp157rll9b.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpudy1y302.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count++;\n                for(int j = 1; j < substring.length();\
    \ j++) {\n                    if(string.charAt(i + j) == substring.charAt(j))\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 9\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp97h3c75c.java:22)\n\
    \tat Problem.main(tmp97h3c75c.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = 1; j < substring.length(); j++) {\n         \
    \           if(string.charAt(i) == substring.charAt(j)) {\n                  \
    \      count++;\n                    }\n                }\n            }\n   \
    \     }\n        return count;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2knkreia.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi6fqy1oi.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        if (string.isEmpty() || substring.isEmpty())\
    \ return 0;\n        long count = 0;\n        int start = 0;\n        int end\
    \ = string.length() - substring.length();\n        while (start < end) {\n   \
    \         int middle = start + (end - start) / 2;\n            if (string.regionMatches(middle,\
    \ substring, 0, substring.length())) {\n                count++;\n           \
    \     start = middle + 1;\n            } else {\n                end = middle;\n\
    \            }\n        }\n        return count;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxl7jecnx.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long substringLength\
    \ = 0;\n        long stringLength = 0;\n        long substringStart = 0;\n   \
    \     long substringEnd = 0;\n        long stringStart = 0;\n        long stringEnd\
    \ = 0;\n        long stringStart2 = 0;\n        long stringEnd2 = 0;\n       \
    \ long stringStart3 = 0;\n        long stringEnd3 = 0;\n        long stringStart4\
    \ = 0;\n        long stringEnd4 = 0;\n        long stringStart5 = 0;\n       \
    \ long stringEnd5 = 0;\n        long stringStart6 = 0;\n        long stringEnd6\
    \ = 0;\n        long stringStart7 = 0;\n        long stringEnd7 = 0;\n       \
    \ long stringStart8 = 0;\n        long stringEnd8 = 0;\n        long stringStart9\
    \ = 0;\n        long stringEnd9 = 0;\n        long stringStart10 = 0;\n      \
    \  long stringEnd10 = 0;\n        long stringStart11 = 0;\n        long stringEnd11\
    \ = 0;\n        long stringStart12 = 0;\n        long stringEnd12 = 0;\n     \
    \   long stringStart13 = 0;\n        long stringEnd13 = 0;\n        long stringStart14\
    \ = 0;\n        long stringEnd14 = 0;\n        long stringStart15 = 0;\n     \
    \   long stringEnd15 = 0;\n        long stringStart16 = 0;\n        long stringEnd16\
    \ = 0;\n        long stringStart17 = 0;\n        long stringEnd17 = 0;\n     \
    \   long stringStart18 = 0;\n        long stringEnd18 = 0;\n        long stringStart19\
    \ = 0;\n        long stringEnd19 = 0;\n        long stringStart20 = 0;\n     \
    \   long stringEnd20 = 0;\n        long stringStart21 = 0;\n        long stringEnd21\
    \ = 0;\n        long stringStart22 = 0;\n        long stringEnd22 = 0;\n     \
    \   long stringStart23 = 0;\n        long stringEnd23 = 0;\n        long stringStart24\
    \ = 0;\n        long stringEnd24 = 0;\n        long stringStart25 = 0;\n     \
    \   long stringEnd25 = 0;\n        long stringStart26 = 0;\n        long stringEnd26\
    \ = 0;\n        long stringStart27 = 0;\n        long stringEnd27 = 0;\n     \
    \   long stringStart28 = 0;\n        long stringEnd28 = 0;\n        long stringStart29\
    \ = 0;\n        long stringEnd29 = 0;\n        long stringStart30 = 0;\n     \
    \   long stringEnd30 = 0;\n        long stringStart31 = 0;\n        long stringEnd31\
    \ = 0;\n        long stringStart32 = 0;\n        long stringEnd32 = 0;\n     \
    \   long stringStart33 = 0;\n        long stringEnd33 = 0;\n        long stringStart34\
    \ = 0;\n        long stringEnd34 = 0;\n        long string\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3mebfl5q.java:93: error: ';' expected\n        long string\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        if (string ==\
    \ null || substring == null) {\n            return count;\n        }\n       \
    \ char[] charArray = string.toCharArray();\n        char[] charArray2 = substring.toCharArray();\n\
    \        Arrays.sort(charArray);\n        Arrays.sort(charArray2);\n        int\
    \ i = 0;\n        int j = 0;\n        while (i < charArray.length && j < charArray2.length)\
    \ {\n            if (charArray[i] == charArray2[j]) {\n                i++;\n\
    \                j++;\n            } else if (charArray[i] > charArray2[j]) {\n\
    \                i++;\n            } else {\n                j++;\n          \
    \  }\n            count++;\n        }\n        return count;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplje50gt7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long length = 0;\n        long index = 0;\n  \
    \      long length2 = 0;\n        long index2 = 0;\n        long length3 = 0;\n\
    \        long index3 = 0;\n        long length4 = 0;\n        long index4 = 0;\n\
    \        long length5 = 0;\n        long index5 = 0;\n        long length6 = 0;\n\
    \        long index6 = 0;\n        long length7 = 0;\n        long index7 = 0;\n\
    \        long length8 = 0;\n        long index8 = 0;\n        long length9 = 0;\n\
    \        long index9 = 0;\n        long length10 = 0;\n        long index10 =\
    \ 0;\n        long length11 = 0;\n        long index11 = 0;\n        long length12\
    \ = 0;\n        long index12 = 0;\n        long length13 = 0;\n        long index13\
    \ = 0;\n        long length14 = 0;\n        long index14 = 0;\n        long length15\
    \ = 0;\n        long index15 = 0;\n        long length16 = 0;\n        long index16\
    \ = 0;\n        long length17 = 0;\n        long index17 = 0;\n        long length18\
    \ = 0;\n        long index18 = 0;\n        long length19 = 0;\n        long index19\
    \ = 0;\n        long length20 = 0;\n        long index20 = 0;\n        long length21\
    \ = 0;\n        long index21 = 0;\n        long length22 = 0;\n        long index22\
    \ = 0;\n        long length23 = 0;\n        long index23 = 0;\n        long length24\
    \ = 0;\n        long index24 = 0;\n        long length25 = 0;\n        long index25\
    \ = 0;\n        long length26 = 0;\n        long index26 = 0;\n        long length27\
    \ = 0;\n        long index27 = 0;\n        long length28 = 0;\n        long index28\
    \ = 0;\n        long length29 = 0;\n        long index29 = 0;\n        long length30\
    \ = 0;\n        long index30 = 0;\n        long length31 = 0;\n        long index31\
    \ = 0;\n        long length32 = 0;\n        long index32 = 0;\n        long length33\
    \ = 0;\n        long index33 = 0;\n        long length34 = 0;\n        long index34\
    \ = 0;\n        long length35 = 0;\n        long index35 = 0;\n        long length36\
    \ = 0;\n        long index36 = 0;\n        long length37 = 0;\n        long index37\
    \ = 0;\n        long length38 = 0;\n        long index38 = 0;\n        long length39\
    \ = 0;\n        long index39 = 0;\n        long length40 = 0;\n        long index40\
    \ = 0;\n        long length41 = 0;\n        long index41 = 0;\n        long length42\
    \ = 0;\n        long index42 = 0;\n        long length43\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph6o2ujuu.java:104: error: ';' expected\n        long length43\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(1)) {\n                count++;\n            }\n       \
    \     else if(string.charAt(i) == substring.charAt(2)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(3)) {\n\
    \                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(4)) {\n                count++;\n            }\n       \
    \     else if(string.charAt(i) == substring.charAt(5)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(6)) {\n\
    \                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(7)) {\n                count++;\n            }\n       \
    \     else if(string.charAt(i) == substring.charAt(8)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(9)) {\n\
    \                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(10)) {\n                count++;\n            }\n      \
    \      else if(string.charAt(i) == substring.charAt(11)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(12))\
    \ {\n                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(13)) {\n                count++;\n            }\n      \
    \      else if(string.charAt(i) == substring.charAt(14)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(15))\
    \ {\n                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(16)) {\n                count++;\n            }\n      \
    \      else if(string.charAt(i) == substring.charAt(17)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(18))\
    \ {\n                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(19)) {\n                count++;\n            }\n      \
    \      else if(string.charAt(i) == substring.charAt(20)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(21))\
    \ {\n                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(22)) {\n                count++;\n            }\n      \
    \      else if(string.charAt(i) == substring.charAt(23)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(24))\
    \ {\n                count++;\n            }\n            else if(string.charAt(i)\
    \ == substring.charAt(25)) {\n                count++;\n            }\n      \
    \      else if(string.charAt(i) == substring.charAt(26)) {\n                count++;\n\
    \            }\n            else if(string.charAt(i) == substring.charAt(27))\
    \ {\n                count++;\n            }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps7crli80.java:104: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            for(int j = 0; j < substring.length();\
    \ j++) {\n                if(string.charAt(i) == substring.charAt(j)) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphy5tvzne.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        long count = 0;\n        for(int i = 0;\
    \ i < string.length(); i++) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                for(int j = i; j < string.length(); j++) {\n            \
    \        if(string.charAt(j) == substring.charAt(1)) {\n                     \
    \   for(int k = j; k < string.length(); k++) {\n                            if(string.charAt(k)\
    \ == substring.charAt(2)) {\n                                for(int l = k; l\
    \ < string.length(); l++) {\n                                    if(string.charAt(l)\
    \ == substring.charAt(3)) {\n                                        for(int m\
    \ = l; m < string.length(); m++) {\n                                         \
    \   if(string.charAt(m) == substring.charAt(4)) {\n                          \
    \                      for(int n = m; n < string.length(); n++) {\n          \
    \                                          if(string.charAt(n) == substring.charAt(5))\
    \ {\n                                                        for(int o = n; o\
    \ < string.length(); o++) {\n                                                \
    \            if(string.charAt(o) == substring.charAt(6)) {\n                 \
    \                                               for(int p = o; p < string.length();\
    \ p++) {\n                                                                   \
    \ if(string.charAt(p) == substring.charAt(7)) {\n                            \
    \                                            for(int q = p; q < string.length();\
    \ q++) {\n                                                                   \
    \         if(string.charAt(q) == substring.charAt(8)) {\n                    \
    \                                                            for(int r = q; r\
    \ < string.length(); r++) {\n                                                \
    \                                    if(string.charAt(r) == substring.charAt(9))\
    \ {\n                                                                        \
    \                for(int s = r; s < string.length(); s++) {\n                \
    \                                                                            if(string.charAt(s)\
    \ == substring.charAt(10)) {\n                                               \
    \                                                 for(int t = s; t < string.length();\
    \ t++) {\n                                                                   \
    \                                 if(string.charAt(t) == substring.charAt(11))\
    \ {\n                                                                        \
    \                                for(int u = t; u < string.length(); u++) {\n\
    \                                                                            \
    \                                if(string.charAt(u) == substring.charAt(12))\
    \ {\n                                                                        \
    \                                        for(int v = u; v < string.length(); v++)\
    \ {\n                                                                        \
    \                                            if(string.charAt(v) == substring.charAt(13))\
    \ {\n                                                                        \
    \                                                for(int w = v; w < string.length();\
    \ w++) {\n                                                                   \
    \                                                         if(string.charAt(w)\
    \ == substring.charAt(14)) {\n                                               \
    \                                                                            \
    \     for(int x = w; x < string.length(); x++) {\n                           \
    \                                                                            \
    \                             if(string.charAt(x) == substring.charAt(15)) {\n\
    \                                                                            \
    \                                                            for(int y = x; y\
    \ < string.length(); y++) {\n                                                \
    \                                                                            \
    \                if(string.charAt(y) == substring.charAt(16)) {\n            \
    \                                                                            \
    \                                                        for(int z = y; z < string.length();\
    \ z++) {\n                                                                   \
    \                                                                            \
    \     if(string.charAt(z) == substring.charAt(17)) {\n                       \
    \                                                                            \
    \                                                     for(int a = z; a < string.length();\
    \ a++) {\n                                                                   \
    \                                                                            \
    \             if(string.charAt(a) == substring.charAt(18)) {\n               \
    \                                                                            \
    \                                                                     for(int\
    \ b = a; b < string.length(); b++) {\n                                       \
    \                                                                            \
    \                                                 if(string.charAt(b) == \n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnnqbgya8.java:58: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpnnqbgya8.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_152345.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> how_many_times('',\
    \ 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>>\
    \ how_many_times('aaaa', 'aa')\n    // 3\n    public static long howManyTimes(String\
    \ string, String substring) {\n        return string.split(substring).length -\
    \ 1;\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8bwlvwht.java:22)\n"
  exit_code: 1
  status: Exception
