name: HumanEval_130_tri
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2fjwziir.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp2fjwziir.java:31:\
    \ error: incompatible types: int cannot be converted to Long\n            result.add(3);\n\
    \                       ^\n/tmp/tmp2fjwziir.java:35: error: bad operand types\
    \ for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp2fjwziir.java:37: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4));\n                                 \
    \ ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        ArrayList<Long> fourth = new ArrayList<>();\n\
    \        ArrayList<Long> fifth = new ArrayList<>();\n        ArrayList<Long> sixth\
    \ = new ArrayList<>();\n        ArrayList<Long> seventh = new ArrayList<>();\n\
    \        ArrayList<Long> eighth = new ArrayList<>();\n        ArrayList<Long>\
    \ ninth = new ArrayList<>();\n        ArrayList<Long> tenth = new ArrayList<>();\n\
    \        ArrayList<Long> eleventh = new ArrayList<>();\n        ArrayList<Long>\
    \ twelfth = new ArrayList<>();\n        ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fourteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ fifteenth = new ArrayList<>();\n        ArrayList<Long> sixteenth = new ArrayList<>();\n\
    \        ArrayList<Long> seventeenth = new ArrayList<>();\n        ArrayList<Long>\
    \ eighteenth = new ArrayList<>();\n        ArrayList<Long> nineteenth = new ArrayList<>();\n\
    \        ArrayList<Long> twentieth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyfirst = new ArrayList<>();\n        ArrayList<Long> twentysecond = new\
    \ ArrayList<>();\n        ArrayList<Long> twentythird = new ArrayList<>();\n \
    \       ArrayList<Long> twentyfourth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyfifth = new ArrayList<>();\n        ArrayList<Long> twentysixth = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyseventh = new ArrayList<>();\n\
    \        ArrayList<Long> twentyeighth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyninth = new ArrayList<>();\n        ArrayList<Long> thirtieth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtysecond = new ArrayList<>();\n        ArrayList<Long> thirtythird = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtysixth = new ArrayList<>();\n        ArrayList<Long> thirtyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyninth = new ArrayList<>();\n        ArrayList<Long>\
    \ fortieth = new ArrayList<>();\n        ArrayList<Long> fortyfirst = new ArrayList<>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0f0one7n.java:76: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 1;\n        long d = 1;\n        long temp;\n        long temp2;\n\
    \        long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_107zbw.java:114: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  tri(n - 1, result);\n            tri(n - 2, result);\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n        } else {\n            tri(n - 1, result);\n   \
    \         tri(n - 2, result);\n            tri(n - 3, result);\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9i092m7q.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp9i092m7q.java:31:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 1, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp9i092m7q.java:32:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 2, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp9i092m7q.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp9i092m7q.java:35: error: method tri in\
    \ class Problem cannot be applied to given types;\n            tri(n - 1, result);\n\
    \            ^\n  required: long\n  found:    long,ArrayList<Long>\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmp9i092m7q.java:36:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 2, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp9i092m7q.java:37:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 3, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp9i092m7q.java:38:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpezgvca10.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpezgvca10.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpezgvca10.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppf583lmt.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmppf583lmt.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4vruqq_k.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdeejdl37.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp__c2taqm.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(1);\n\
    \        third.add(1);\n        long tri1 = third.get(0);\n        long tri2 =\
    \ first.get(0);\n        long tri3 = second.get(0) + third.get(0);\n        third.add(tri3);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(tri1);\n        third.add(tri1);\n\
    \        second.add(tri2);\n        first.add(\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5u7nlzxk.java:105: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz_g3vdcf.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmpz_g3vdcf.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmpz_g3vdcf.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpz_g3vdcf.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpz_g3vdcf.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpz_g3vdcf.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> a = tri(n - 1);\n\
    \        ArrayList<Long> b = tri(n - 2);\n        ArrayList<Long> c = tri(n -\
    \ 3);\n        a.addAll(b);\n        a.addAll(c);\n        result.add(a.get(0));\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9nqv86gq.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n      \
    \  return result;\n\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqcreisa7.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmpqcreisa7.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpqcreisa7.java:34:\
    \ error: bad operand types for binary operator '+'\n        result.add(tri(n -\
    \ 1) + tri(n - 2) + tri(n - 1));\n                              ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpct85cphq.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpct85cphq.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnaqungqu.java:73: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (n / 3L);\n        long tri2\
    \ = tri1 + tri1;\n        long tri3 = tri2 + tri2;\n        long tri4 = tri3 +\
    \ tri3;\n        result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n\
    \        result.add(tri4);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_ret6o3.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnt5w82z.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmppnt5w82z.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n        } else {\n\
    \            result.add(tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n     \
    \       result.add(tri(n / 2 + 1) + tri(n / 2 + 2) + tri(n / 2 + 3));\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbh397b3e.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpbh397b3e.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n                                 \
    \ ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpbh397b3e.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n                                 \
    \ ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpbh397b3e.java:34:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2 + 1) + tri(n / 2 + 2) + tri(n / 2 + 3));\n                             \
    \         ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1);\n            long b = tri(n - 2);\n            result.add(a);\n\
    \            result.add(b);\n            result.add(a+b);\n            return\
    \ result;\n        }\n        long a = tri(n - 1);\n        long b = tri(n - 2);\n\
    \        long c = tri(n - 3);\n        result.add(a);\n        result.add(b);\n\
    \        result.add(c);\n        result.add(a+b+c);\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwgbp8_dz.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1);\n                   \
    \     ^\n/tmp/tmpwgbp8_dz.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2);\n            \
    \            ^\n/tmp/tmpwgbp8_dz.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        long a = tri(n - 1);\n                \
    \    ^\n/tmp/tmpwgbp8_dz.java:43: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long b = tri(n - 2);\n                    ^\n\
    /tmp/tmpwgbp8_dz.java:44: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to long\n        long c = tri(n - 3);\n                    ^\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa3y2amum.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgwkbkq6y.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpgwkbkq6y.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpgwkbkq6y.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjlw2ejke.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkif21tks.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(1);\n\
    \        third.add(1);\n        for (int i = 2; i <= n; i++) {\n            third.add(first.get(0)\
    \ + second.get(0) + third.get(0));\n            second.add(first.get(0));\n  \
    \          first.add(third.get(0));\n        }\n        result.addAll(first);\n\
    \        result.addAll(second);\n        result.addAll(third);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqbat7yq4.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpqbat7yq4.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmpqbat7yq4.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(1);\n                   ^\n\
    /tmp/tmpqbat7yq4.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(1);\n                  ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        }\n        else {\n         \
    \   result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvw124lzy.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpvw124lzy.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpvw124lzy.java:34: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \        } else {\n            long a = tri(n - 1);\n            long b = tri(n\
    \ - 2);\n            long c = tri(n + 1);\n            result.add(a);\n      \
    \      result.add(b);\n            result.add(c);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwqetjvfx.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmpwqetjvfx.java:29:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long a = tri(n - 1);\n                        ^\n/tmp/tmpwqetjvfx.java:30:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long b = tri(n - 2);\n                        ^\n/tmp/tmpwqetjvfx.java:31:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long c = tri(n + 1);\n                        ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3fnacmwe.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp3fnacmwe.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3l7hqgi.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpl3l7hqgi.java:31:\
    \ error: incompatible types: int cannot be converted to Long\n            result.add(3);\n\
    \                       ^\n/tmp/tmpl3l7hqgi.java:35: error: bad operand types\
    \ for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpl3l7hqgi.java:37: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8o8ggyhb.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp8o8ggyhb.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp8o8ggyhb.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n                            \
    \      ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5adn0nxc.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmp5adn0nxc.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmp5adn0nxc.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp5adn0nxc.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp5adn0nxc.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> a = tri(n - 1);\n\
    \        ArrayList<Long> b = tri(n - 2);\n        ArrayList<Long> c = tri(n +\
    \ 1);\n        ArrayList<Long> result = new ArrayList<>();\n        for (Long\
    \ i : a) {\n            result.add(i);\n        }\n        for (Long i : b) {\n\
    \            result.add(i);\n        }\n        for (Long i : c) {\n         \
    \   result.add(i);\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7bmyevw.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpe7bmyevw.java:33:\
    \ error: variable result is already defined in method tri(long)\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n                        ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_gk85so0.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmp_gk85so0.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmp_gk85so0.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_gk85so0.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_gk85so0.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp9juhlhk.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmpp9juhlhk.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmpp9juhlhk.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpp9juhlhk.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpp9juhlhk.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpp9juhlhk.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1);\n    \
    \    long tri2 = tri(n - 2);\n        long tri3 = tri(n - 3);\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89_s3fpw.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmp89_s3fpw.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmp89_s3fpw.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3);\n                    \
    \   ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphom07e68.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmphom07e68.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpatt7iarb.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmpatt7iarb.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmpatt7iarb.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpatt7iarb.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpatt7iarb.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ty2jcuz.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp_ty2jcuz.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp_ty2jcuz.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9b2uc28t.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxm7h7uw7.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpxm7h7uw7.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7efa3wi.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpb7efa3wi.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpymp2je41.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpymp2je41.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpymp2je41.java:34:\
    \ error: bad operand types for binary operator '+'\n        result.add(tri(n -\
    \ 1) + tri(n - 2));\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpric_jyfg.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpric_jyfg.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpric_jyfg.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1);\n    \
    \    long tri2 = tri(n - 2);\n        long tri3 = tri(n + 1);\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjlfnmh18.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmpjlfnmh18.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmpjlfnmh18.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n + 1);\n                    \
    \   ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \        } else {\n            long tri1 = tri(n - 1);\n            long tri2\
    \ = tri(n - 2);\n            long tri3 = tri(n + 1);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ejlidef.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmp6ejlidef.java:29:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri1 = tri(n - 1);\n                           ^\n/tmp/tmp6ejlidef.java:30:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri2 = tri(n - 2);\n                           ^\n/tmp/tmp6ejlidef.java:31:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri3 = tri(n + 1);\n                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \        } else {\n            long tri1 = tri(n - 1);\n            long tri2\
    \ = tri(n - 2);\n            long tri3 = tri(n + 1);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kq048ke.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmp_kq048ke.java:29:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri1 = tri(n - 1);\n                           ^\n/tmp/tmp_kq048ke.java:30:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri2 = tri(n - 2);\n                           ^\n/tmp/tmp_kq048ke.java:31:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri3 = tri(n + 1);\n                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1);\n            long b = tri(n - 2);\n            long c\
    \ = tri(n + 1);\n            long sum = a;\n            for (int i = 0; i < c.length;\
    \ i++) {\n                sum = sum + b[i] + c[i];\n            }\n          \
    \  result.add(sum);\n        }\n        else {\n            long a = tri(n - 1);\n\
    \            long b = tri(n - 2);\n            long c = tri(n + 1);\n        \
    \    long sum = a;\n            for (int i = 0; i < c.length; i++) {\n       \
    \         sum = sum + b[i] + c[i];\n            }\n            result.add(sum);\n\
    \            sum = tri(n - 1) + tri(n - 2) + tri(n + 1);\n            result.add(sum);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuyznsuwr.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1);\n                   \
    \     ^\n/tmp/tmpuyznsuwr.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2);\n            \
    \            ^\n/tmp/tmpuyznsuwr.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long c = tri(n + 1);\n            \
    \            ^\n/tmp/tmpuyznsuwr.java:39: error: long cannot be dereferenced\n\
    \            for (int i = 0; i < c.length; i++) {\n                          \
    \       ^\n/tmp/tmpuyznsuwr.java:40: error: array required, but long found\n \
    \               sum = sum + b[i] + c[i];\n                             ^\n/tmp/tmpuyznsuwr.java:40:\
    \ error: array required, but long found\n                sum = sum + b[i] + c[i];\n\
    \                                    ^\n/tmp/tmpuyznsuwr.java:45: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n            long a = tri(n\
    \ - 1);\n                        ^\n/tmp/tmpuyznsuwr.java:46: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n            long b = tri(n\
    \ - 2);\n                        ^\n/tmp/tmpuyznsuwr.java:47: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n            long c = tri(n\
    \ + 1);\n                        ^\n/tmp/tmpuyznsuwr.java:49: error: long cannot\
    \ be dereferenced\n            for (int i = 0; i < c.length; i++) {\n        \
    \                         ^\n/tmp/tmpuyznsuwr.java:50: error: array required,\
    \ but long found\n                sum = sum + b[i] + c[i];\n                 \
    \            ^\n/tmp/tmpuyznsuwr.java:50: error: array required, but long found\n\
    \                sum = sum + b[i] + c[i];\n                                  \
    \  ^\n/tmp/tmpuyznsuwr.java:53: error: bad operand types for binary operator '+'\n\
    \            sum = tri(n - 1) + tri(n - 2) + tri(n + 1);\n                   \
    \          ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    13 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpego_v4xx.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpego_v4xx.java:38: error: bad operand types for binary\
    \ operator '+'\n        result.add(tri(n - 1) + tri(n - 2));\n               \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> tri1 = tri(n - 1);\n            ArrayList<Long> tri2 = tri(n\
    \ - 2);\n            ArrayList<Long> tri3 = tri(n - 3);\n            tri1.addAll(tri2);\n\
    \            tri1.addAll(tri3);\n            result.addAll(tri1);\n        } else\
    \ {\n            ArrayList<Long> tri1 = tri(n - 1);\n            ArrayList<Long>\
    \ tri2 = tri(n - 2);\n            ArrayList<Long> tri3 = tri(n - 3);\n       \
    \     tri2.addAll(tri1);\n            tri2.addAll(tri3);\n            result.addAll(tri2);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n\tat Problem.tri(tmp33uxqq93.java:42)\n\
    \tat Problem.tri(tmp33uxqq93.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpntkyu4xm.java:31: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpntkyu4xm.java:33: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n/tmp/tmpntkyu4xm.java:34: error: bad operand types for\
    \ binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp372nljz5.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp372nljz5.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> left = tri(n - 1);\n            ArrayList<Long> right = tri(n\
    \ - 2);\n            for (long i : left) {\n                result.add(i);\n \
    \           }\n            for (long j : right) {\n                result.add(j);\n\
    \            }\n            result.add(1L);\n        } else {\n            ArrayList<Long>\
    \ left = tri(n - 1);\n            ArrayList<Long> right = tri(n - 2);\n      \
    \      for (long i : left) {\n                result.add(i);\n            }\n\
    \            for (long j : right) {\n                result.add(j);\n        \
    \    }\n            result.add(1L);\n            result.add(1L);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpps93nd4j.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(2);\n\
    \        third.add(3);\n        if (n % 2 == 0) {\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        else {\n            third.add(tri(n\
    \ - 1) + tri(n - 2));\n        }\n        result.addAll(first);\n        result.addAll(second);\n\
    \        result.addAll(third);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpib9gtuqj.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpib9gtuqj.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmpib9gtuqj.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(2);\n                   ^\n\
    /tmp/tmpib9gtuqj.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(3);\n                  ^\n/tmp/tmpib9gtuqj.java:37:\
    \ error: bad operand types for binary operator '+'\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                 ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpib9gtuqj.java:40:\
    \ error: bad operand types for binary operator '+'\n            third.add(tri(n\
    \ - 1) + tri(n - 2));\n                                 ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = tri(n - 1);\n            long tri2 = tri(n - 2);\n            result.add(tri1\
    \ + tri2);\n        } else {\n            long tri1 = tri(n - 1);\n          \
    \  long tri2 = tri(n - 2);\n            result.add(tri1 + tri2 + tri1);\n    \
    \    }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplpy8p_cr.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmplpy8p_cr.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmplpy8p_cr.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri1 = tri(n - 1);\n         \
    \                  ^\n/tmp/tmplpy8p_cr.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri = 1;\n        long tri2 = 1;\n\
    \        long tri3 = 1;\n        long tri4 = 1;\n        long tri5 = tri3;\n \
    \       long tri6 = tri4;\n        long tri7 = tri5;\n        long tri8 = tri6;\n\
    \        long tri9 = tri7;\n        long tri10 = tri8;\n        long tri11 = tri9;\n\
    \        long tri12 = tri10;\n        long tri13 = tri11;\n        long tri14\
    \ = tri12;\n        long tri15 = tri13;\n        long tri16 = tri14;\n       \
    \ long tri17 = tri15;\n        long tri18 = tri16;\n        long tri19 = tri17;\n\
    \        long tri20 = tri18;\n        long tri21 = tri19;\n        long tri22\
    \ = tri20;\n        long tri23 = tri21;\n        long tri24 = tri22;\n       \
    \ long tri25 = tri23;\n        long tri26 = tri24;\n        long tri27 = tri25;\n\
    \        long tri28 = tri26;\n        long tri29 = tri27;\n        long tri30\
    \ = tri28;\n        long tri31 = tri29;\n        long tri32 = tri30;\n       \
    \ long tri33 = tri31;\n        long tri34 = tri32;\n        long tri35 = tri33;\n\
    \        long tri36 = tri34;\n        long tri37 = tri35;\n        long tri38\
    \ = tri36;\n        long tri39 = tri37;\n        long tri40 = tri38;\n       \
    \ long tri41 = tri39;\n        long tri42 = tri40;\n        long tri43 = tri41;\n\
    \        long tri44 = tri42;\n        long tri45 = tri43;\n        long tri46\
    \ = tri44;\n        long tri47 = tri45;\n        long tri48 = tri46;\n       \
    \ long tri49 = tri47;\n        long tri50 = tri48;\n        long tri51 = tri49;\n\
    \        long tri52 = tri50;\n        long tri53 = tri51;\n        long tri54\
    \ = tri52;\n        long tri55 = tri53;\n        long tri56 = tri54;\n       \
    \ long tri57 = tri55;\n        long tri58 = tri56;\n        long tri59 = tri57;\n\
    \        long tri60 = tri58;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpet6rr5pr.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1L);\n            long b = tri(n - 2L);\n            long\
    \ c = tri(n + 1L);\n            result.add(a);\n            result.add(b);\n \
    \           result.add(c);\n            return result;\n        }\n        long\
    \ a = tri(n - 1L);\n        long b = tri(n - 2L);\n        long c = tri(n + 1L);\n\
    \        result.add(a);\n        result.add(b);\n        result.add(c);\n    \
    \    result.add(a + b + c);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9u55eifk.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1L);\n                  \
    \      ^\n/tmp/tmp9u55eifk.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2L);\n           \
    \             ^\n/tmp/tmp9u55eifk.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long c = tri(n + 1L);\n           \
    \             ^\n/tmp/tmp9u55eifk.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        long a = tri(n - 1L);\n               \
    \     ^\n/tmp/tmp9u55eifk.java:44: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        long b = tri(n - 2L);\n               \
    \     ^\n/tmp/tmp9u55eifk.java:45: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        long c = tri(n + 1L);\n               \
    \     ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(1);\n\
    \        third.add(1);\n        if (n % 2 == 0) {\n            third.add(1);\n\
    \        }\n        for (int i = 2; i <= n; i++) {\n            third.add(first.get(0)\
    \ + second.get(0) + third.get(0));\n            second.add(first.get(0) + second.get(0)\
    \ + third.get(0));\n            first.add(first.get(0) + second.get(0) + third.get(0));\n\
    \        }\n        result.addAll(first);\n        result.addAll(third);\n   \
    \     result.addAll(second);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7je81mf5.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp7je81mf5.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmp7je81mf5.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(1);\n                   ^\n\
    /tmp/tmp7je81mf5.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(1);\n                  ^\n/tmp/tmp7je81mf5.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n            third.add(1);\n\
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(1);\n\
    \        third.add(1);\n        long tri1 = first.get(0);\n        long tri2 =\
    \ second.get(0) + third.get(0) + first.get(1);\n        long tri3 = third.get(0)\
    \ + second.get(0) + third.get(1) + first.get(1);\n        long tri4 = third.get(0)\
    \ + third.get(1) + first.get(1);\n        long tri5 = third.get(0) + third.get(1)\
    \ + second.get(0) + first.get(1);\n        long tri6 = third.get(0) + third.get(1)\
    \ + second.get(0) + third.get(1) + first.get(1);\n        long tri7 = third.get(0)\
    \ + third.get(1) + second.get(0) + third.get(1) + second.get(0) + first.get(1);\n\
    \        long tri8 = third.get(0) + third.get(1) + second.get(0) + third.get(1)\
    \ + second.get(0) + third.get(1) + first.get(1);\n        long tri9 = third.get(0)\
    \ + third.get(1) + second.get(0) + third.get(1) + second.get(0) + third.get(1)\
    \ + second.get(0) + first.get(1);\n        long tri10 = third.get(0) + third.get(1)\
    \ + second.get(0) + third.get(1) + second.get(0) + third.get(1) + second.get(0)\
    \ + third.get(1) + first.get(1);\n        long tri11 = third.get(0) + third.get(1)\
    \ + second.get(0) + third.get(1) + second.get(0) + third.get(1) + second.get(0)\
    \ + third.get(1) + third.get(0) + first.get(1);\n        long tri12 = third.get(0)\
    \ + third.get(1) + second.get(0) + third.get(1) + second.get(0) + third.get(1)\
    \ + second.get(0) + third.get(1) + third.get(0) + second.get(0) + first.get(1);\n\
    \        long tri13 = third.get(0) + third.get(1) + second.get(0) + third.get(1)\
    \ + second.get(0) + third.get(1) + second.get(0) + third.get(1) + third.get(0)\
    \ + second.get(0) + third.get(1) + first.get(1);\n        long tri14 = third.get(0)\
    \ + third.get(1) + second.get(0) + third.get(1) + second.get(0) + third.get(1)\
    \ + second.get(0) + third.get(1) + third.get(0) + second.get(0) + third.get(1)\
    \ + second.get(0) + first.get(1);\n        long tri\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjd5bpde9.java:50: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb2ut7o8v.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpb2ut7o8v.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpb2ut7o8v.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5w7v4lr2.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp5w7v4lr2.java:38: error: bad operand types for binary\
    \ operator '+'\n        result.add(tri(n - 1) + tri(n - 2));\n               \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> first = new ArrayList<>();\n            ArrayList<Long> second\
    \ = new ArrayList<>();\n            first.add(1);\n            second.add(1);\n\
    \            second.add(3);\n            second.add(3);\n            second.add(8);\n\
    \            ArrayList<Long> third = new ArrayList<>();\n            third.add(first);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n            third.add(second);\n\
    \            third.add(second);\n            third.add(second);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnenz25e6.java:104: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n        } else {\n\
    \            result.add(tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n     \
    \       result.add(tri(n / 2 + 1) + tri(n / 2 + 2) + tri(n / 2 + 3));\n      \
    \  }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptv113j26.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmptv113j26.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n                                 \
    \ ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmptv113j26.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n                                 \
    \ ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmptv113j26.java:34:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2 + 1) + tri(n / 2 + 2) + tri(n / 2 + 3));\n                             \
    \         ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> left = tri(n - 1);\n            ArrayList<Long> right = tri(n\
    \ - 2);\n            ArrayList<Long> result = new ArrayList<>();\n           \
    \ for (long i = 0; i < left.size(); i++) {\n                result.add(left[i]\
    \ + right[i]);\n            }\n            return result;\n        } else {\n\
    \            ArrayList<Long> left = tri(n - 1);\n            ArrayList<Long> right\
    \ = tri(n - 2);\n            ArrayList<Long> result = new ArrayList<>();\n   \
    \         for (long i = 0; i < left.size(); i++) {\n                result.add(left[i]\
    \ + right[i]);\n            }\n            return result;\n        }\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxekoqha.java:37: error: variable result is already defined in\
    \ method tri(long)\n            ArrayList<Long> result = new ArrayList<>();\n\
    \                            ^\n/tmp/tmpdxekoqha.java:39: error: incompatible\
    \ types: possible lossy conversion from long to int\n                result.add(left[i]\
    \ + right[i]);\n                                ^\n/tmp/tmpdxekoqha.java:39: error:\
    \ array required, but ArrayList<Long> found\n                result.add(left[i]\
    \ + right[i]);\n                               ^\n/tmp/tmpdxekoqha.java:39: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     result.add(left[i] + right[i]);\n                                      \
    \     ^\n/tmp/tmpdxekoqha.java:39: error: array required, but ArrayList<Long>\
    \ found\n                result.add(left[i] + right[i]);\n                   \
    \                       ^\n/tmp/tmpdxekoqha.java:45: error: variable result is\
    \ already defined in method tri(long)\n            ArrayList<Long> result = new\
    \ ArrayList<>();\n                            ^\n/tmp/tmpdxekoqha.java:47: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     result.add(left[i] + right[i]);\n                                ^\n/tmp/tmpdxekoqha.java:47:\
    \ error: array required, but ArrayList<Long> found\n                result.add(left[i]\
    \ + right[i]);\n                               ^\n/tmp/tmpdxekoqha.java:47: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     result.add(left[i] + right[i]);\n                                      \
    \     ^\n/tmp/tmpdxekoqha.java:47: error: array required, but ArrayList<Long>\
    \ found\n                result.add(left[i] + right[i]);\n                   \
    \                       ^\n10 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> tri1 = tri(n - 1);\n            ArrayList<Long> tri2 = tri(n\
    \ - 2);\n            ArrayList<Long> tri3 = tri(n - 3);\n            result.addAll(tri1);\n\
    \            result.addAll(tri2);\n            result.addAll(tri3);\n        \
    \    return result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1);\n \
    \       ArrayList<Long> tri2 = tri(n - 2);\n        result.addAll(tri1);\n   \
    \     result.addAll(tri2);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n\tat Problem.tri(tmpysft4hh4.java:35)\n\
    \tat Problem.tri(tmpysft4hh4.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwt2p4bt_.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqdzc1ylc.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpqdzc1ylc.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpqdzc1ylc.java:34:\
    \ error: bad operand types for binary operator '+'\n        result.add(tri(n -\
    \ 1) + tri(n - 2));\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n\tat Problem.tri(tmpr9mc_al4.java:34)\n\
    \tat Problem.tri(tmpr9mc_al4.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n\
    \            return result;\n        }\n        ArrayList<Long> left = tri(n -\
    \ 1);\n        ArrayList<Long> right = tri(n - 2);\n        ArrayList<Long> middle\
    \ = new ArrayList<>();\n        middle.add(left.get(left.size() - 1) + right.get(right.size()\
    \ - 1));\n        middle.add(left.get(left.size() - 2) + right.get(right.size()\
    \ - 2));\n        result.add(middle.get(middle.size() - 1));\n        result.add(middle.get(middle.size()\
    \ - 2));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmphbxb47a_.java:44)\n\tat Problem.main(tmphbxb47a_.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwvb5o7fa.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmpwvb5o7fa.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmpwvb5o7fa.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpwvb5o7fa.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpwvb5o7fa.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpwvb5o7fa.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = tri(n - 1);\n        long tri2\
    \ = tri(n - 2);\n        long tri3 = tri(n - 3);\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rc4xrvi.java:26: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmp2rc4xrvi.java:27: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmp2rc4xrvi.java:28: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3);\n                    \
    \   ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl099bolb.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpl099bolb.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n > 0) {\n            ArrayList<Long> left = new ArrayList<>();\n         \
    \   left.add(0L);\n            left.add(1L);\n            ArrayList<Long> right\
    \ = new ArrayList<>();\n            right.add(1L);\n            right.add(2L);\n\
    \            ArrayList<Long> result = new ArrayList<>();\n            result.add(0L);\n\
    \            result.add(1L);\n            while (left.size() < n) {\n        \
    \        result.add(left.get(left.size() - 1) + right.get(right.size() - 1));\n\
    \                left.add(right.get(right.size() - 1));\n                right.add(left.get(left.size()\
    \ - 1));\n            }\n            return result;\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3cemk4g.java:38: error: variable result is already defined in\
    \ method tri(long)\n            ArrayList<Long> result = new ArrayList<>();\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7f6nxusg.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1dyiyzyr.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp1dyiyzyr.java:38: error: bad operand types for binary\
    \ operator '+'\n        result.add(tri(n - 1) + tri(n - 2));\n               \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpts5755es.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpts5755es.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(3);\n\
    \                  ^\n/tmp/tmpts5755es.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(1);\n                   ^\n\
    /tmp/tmpts5755es.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(2);\n                  ^\n/tmp/tmpts5755es.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpts5755es.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpts5755es.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n78 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8xvj_33r.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 3;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 3;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4olmh2m7.java:126: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 1;\n        long d = 1;\n        long temp;\n        long temp2;\n\
    \        long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ik2wed1.java:114: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpllac61g9.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpllac61g9.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 1;\n        long d = 1;\n        long sum = 0;\n        long temp;\n\
    \        if (n <= 1) {\n            result.add(1);\n            return result;\n\
    \        }\n        while (n > 0) {\n            temp = a + b + c + d;\n     \
    \       a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \            sum += temp;\n            n -= 1;\n        }\n        result.add(sum);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8_ggz5yy.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpso7xxiax.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpso7xxiax.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpso7xxiax.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvgk1n0x4.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpvgk1n0x4.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpanlqmly7.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpanlqmly7.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(2);\n\
    \        third.add(3);\n        third.add(4);\n        third.add(5);\n       \
    \ third.add(6);\n        third.add(7);\n        third.add(8);\n        third.add(9);\n\
    \        third.add(10);\n        third.add(11);\n        third.add(12);\n    \
    \    third.add(13);\n        third.add(14);\n        third.add(15);\n        third.add(16);\n\
    \        third.add(17);\n        third.add(18);\n        third.add(19);\n    \
    \    third.add(20);\n        third.add(21);\n        third.add(22);\n        third.add(23);\n\
    \        third.add(24);\n        third.add(25);\n        third.add(26);\n    \
    \    third.add(27);\n        third.add(28);\n        third.add(29);\n        third.add(30);\n\
    \        third.add(31);\n        third.add(32);\n        third.add(33);\n    \
    \    third.add(34);\n        third.add(35);\n        third.add(36);\n        third.add(37);\n\
    \        third.add(38);\n        third.add(39);\n        third.add(40);\n    \
    \    third.add(41);\n        third.add(42);\n        third.add(43);\n        third.add(44);\n\
    \        third.add(45);\n        third.add(46);\n        third.add(47);\n    \
    \    third.add(48);\n        third.add(49);\n        third.add(50);\n        third.add(51);\n\
    \        third.add(52);\n        third.add(53);\n        third.add(54);\n    \
    \    third.add(55);\n        third.add(56);\n        third.add(57);\n        third.add(58);\n\
    \        third.add(59);\n        third.add(60);\n        third.add(61);\n    \
    \    third.add(62);\n        third.add(63);\n        third.add(64);\n        third.add(65);\n\
    \        third.add(66);\n        third.add(67);\n        third.add(68);\n    \
    \    third.add(69);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90sb4yhp.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp90sb4yhp.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(2);\n                   ^\n\
    /tmp/tmp90sb4yhp.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(3);\n                  ^\n/tmp/tmp90sb4yhp.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(4);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(5);\n                  ^\n/tmp/tmp90sb4yhp.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(6);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(7);\n                  ^\n/tmp/tmp90sb4yhp.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(8);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(9);\n                  ^\n/tmp/tmp90sb4yhp.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(10);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(11);\n                  ^\n/tmp/tmp90sb4yhp.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(12);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(13);\n                  ^\n/tmp/tmp90sb4yhp.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(14);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(15);\n                  ^\n/tmp/tmp90sb4yhp.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(16);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(17);\n                  ^\n/tmp/tmp90sb4yhp.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(18);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(19);\n                  ^\n/tmp/tmp90sb4yhp.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(20);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(21);\n                  ^\n/tmp/tmp90sb4yhp.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(22);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(23);\n                  ^\n/tmp/tmp90sb4yhp.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(24);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(25);\n                  ^\n/tmp/tmp90sb4yhp.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(26);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(27);\n                  ^\n/tmp/tmp90sb4yhp.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(28);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(29);\n                  ^\n/tmp/tmp90sb4yhp.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(30);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(31);\n                  ^\n/tmp/tmp90sb4yhp.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(32);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(33);\n                  ^\n/tmp/tmp90sb4yhp.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(34);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(35);\n                  ^\n/tmp/tmp90sb4yhp.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(36);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(37);\n                  ^\n/tmp/tmp90sb4yhp.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(38);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(39);\n                  ^\n/tmp/tmp90sb4yhp.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(40);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(41);\n                  ^\n/tmp/tmp90sb4yhp.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(42);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(43);\n                  ^\n/tmp/tmp90sb4yhp.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(44);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(45);\n                  ^\n/tmp/tmp90sb4yhp.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(46);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(47);\n                  ^\n/tmp/tmp90sb4yhp.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(48);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(49);\n                  ^\n/tmp/tmp90sb4yhp.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(50);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(51);\n                  ^\n/tmp/tmp90sb4yhp.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(52);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(53);\n                  ^\n/tmp/tmp90sb4yhp.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(54);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(55);\n                  ^\n/tmp/tmp90sb4yhp.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(56);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(57);\n                  ^\n/tmp/tmp90sb4yhp.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(58);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(59);\n                  ^\n/tmp/tmp90sb4yhp.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(60);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(61);\n                  ^\n/tmp/tmp90sb4yhp.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(62);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(63);\n                  ^\n/tmp/tmp90sb4yhp.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(64);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(65);\n                  ^\n/tmp/tmp90sb4yhp.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(66);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(67);\n                  ^\n/tmp/tmp90sb4yhp.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(68);\n\
    \                  ^\n/tmp/tmp90sb4yhp.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(69);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n70 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij0jza8a.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(1L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(2L);\n            result.add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyafd346r.java:41: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpyafd346r.java:43: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfie7ho96.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpfie7ho96.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpfie7ho96.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1);\n            long b = tri(n - 2);\n            long c\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n            result.add(a);\n      \
    \      result.add(b);\n            result.add(c);\n        } else {\n        \
    \    long a = tri(n - 1);\n            long b = tri(n - 2);\n            long\
    \ c = tri(n - 1) + tri(n - 2) + tri(n + 1);\n            result.add(a);\n    \
    \        result.add(b);\n            result.add(c);\n            result.add(tri(n\
    \ + 2));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphel2lp85.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmphel2lp85.java:31:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long a = tri(n - 1);\n                        ^\n/tmp/tmphel2lp85.java:32:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long b = tri(n - 2);\n                        ^\n/tmp/tmphel2lp85.java:33:\
    \ error: bad operand types for binary operator '+'\n            long c = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                                ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmphel2lp85.java:38:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long a = tri(n - 1);\n                        ^\n/tmp/tmphel2lp85.java:39:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long b = tri(n - 2);\n                        ^\n/tmp/tmphel2lp85.java:40:\
    \ error: bad operand types for binary operator '+'\n            long c = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                                ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmphel2lp85.java:44:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \         result.add(tri(n + 2));\n                          ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(2);\n\
    \        third.add(3);\n        ArrayList<Long> fourth = new ArrayList<>();\n\
    \        fourth.add(4);\n        ArrayList<Long> fifth = new ArrayList<>();\n\
    \        fifth.add(5);\n        ArrayList<Long> sixth = new ArrayList<>();\n \
    \       sixth.add(6);\n        ArrayList<Long> seventh = new ArrayList<>();\n\
    \        seventh.add(7);\n        ArrayList<Long> eighth = new ArrayList<>();\n\
    \        eighth.add(8);\n        ArrayList<Long> ninth = new ArrayList<>();\n\
    \        ninth.add(9);\n        ArrayList<Long> tenth = new ArrayList<>();\n \
    \       tenth.add(10);\n        ArrayList<Long> eleventh = new ArrayList<>();\n\
    \        eleventh.add(11);\n        ArrayList<Long> twelfth = new ArrayList<>();\n\
    \        twelfth.add(12);\n        ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \        thirteenth.add(13);\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        fourteenth.add(14);\n        ArrayList<Long> fifteenth = new ArrayList<>();\n\
    \        fifteenth.add(15);\n        ArrayList<Long> sixteenth = new ArrayList<>();\n\
    \        sixteenth.add(16);\n        ArrayList<Long> seventeenth = new ArrayList<>();\n\
    \        seventeenth.add(17);\n        ArrayList<Long> eighteenth = new ArrayList<>();\n\
    \        eighteenth.add(18);\n        ArrayList<Long> nineteenth = new ArrayList<>();\n\
    \        nineteenth.add(19);\n        ArrayList<Long> twentieth = new ArrayList<>();\n\
    \        twentieth.add(20);\n        ArrayList<Long> twentyfirst = new ArrayList<>();\n\
    \        twentyfirst.add(21);\n        ArrayList<Long> twentysecond = new ArrayList<>();\n\
    \        twentysecond.add(22);\n        ArrayList<Long> twentythird = new ArrayList<>();\n\
    \        twentythird.add(23);\n        ArrayList<Long> twentyfourth = new ArrayList<>();\n\
    \        twentyfourth.add(24);\n        ArrayList<Long> twentyfifth = new ArrayList<>();\n\
    \        twentyfifth.add(25);\n        ArrayList<Long> twentysixth = new ArrayList<>();\n\
    \        twentysixth.add(26);\n        ArrayList<Long> twenty\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp__93bbvz.java:82: error: ';' expected\n        ArrayList<Long>\
    \ twenty\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjw9jdxs9.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpjw9jdxs9.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(3);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(1);\n                   ^\n\
    /tmp/tmpjw9jdxs9.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(2);\n                  ^\n/tmp/tmpjw9jdxs9.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpjw9jdxs9.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpjw9jdxs9.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n78 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(0L);\n            result.add(1L);\n\
    \            result.add(2L);\n            return result;\n        }\n        ArrayList<Long>\
    \ left = tri(n - 1);\n        ArrayList<Long> right = tri(n - 2);\n        ArrayList<Long>\
    \ sum = left.stream().map(x -> x + right.get(x)).collect(Collectors.toList());\n\
    \        result.add(sum.get(0));\n        result.add(sum.get(1));\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgigtalfp.java:43: error: incompatible types: Long cannot be converted\
    \ to int\n        ArrayList<Long> sum = left.stream().map(x -> x + right.get(x)).collect(Collectors.toList());\n\
    \                                                                   ^\n/tmp/tmpgigtalfp.java:43:\
    \ error: incompatible types: inference variable R has incompatible bounds\n  \
    \      ArrayList<Long> sum = left.stream().map(x -> x + right.get(x)).collect(Collectors.toList());\n\
    \                                                                            \
    \  ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 3;\n        long d = 4;\n        long e = 5;\n        long f = 1;\n\
    \        long g = 2;\n        long h = 3;\n        long i = 1;\n        long j\
    \ = 2;\n        long k = 3;\n        long l = 1;\n        long m = 2;\n      \
    \  long n = 1;\n        long o = 3;\n        long p = 1;\n        long q = 2;\n\
    \        long r = 1;\n        long s = 3;\n        long t = 1;\n        long u\
    \ = 2;\n        long v = 3;\n        long w = 1;\n        long x = 2;\n      \
    \  long y = 1;\n        long z = 3;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 3;\n        long d = 4;\n        long e = 5;\n        long f\
    \ = 1;\n        long g = 2;\n        long h = 3;\n        long i = 1;\n      \
    \  long j = 2;\n        long k = 3;\n        long l = 1;\n        long m = 2;\n\
    \        long n = 1;\n        long o = 3;\n        long p = 1;\n        long q\
    \ = 2;\n        long r = 1;\n        long s = 3;\n        long t = 1;\n      \
    \  long u = 2;\n        long v = 3;\n        long w = 1;\n        long x = 2;\n\
    \        long y = 1;\n        long z = 3;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 3;\n        long d = 4;\n        long e = 5;\n      \
    \  long f = 1;\n        long g = 2;\n        long h = 3;\n        long i = 1;\n\
    \        long j = 2;\n        long k = 3;\n        long l = 1;\n        long m\
    \ = 2;\n        long n = 1;\n        long o = 3;\n        long p = 1;\n      \
    \  long q = 2;\n        long r = 1;\n        long s = 3;\n        long t = 1;\n\
    \        long u = 2;\n        long v = 3;\n        long w = 1;\n        long x\
    \ = 2;\n        long y = 1;\n        long z = 3;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 3;\n        long d = 4;\n        long e = 5;\n\
    \        long f = 1;\n        long g = 2;\n        long h = 3;\n        long i\
    \ = 1;\n        long j = 2;\n        long k = 3;\n        long l = 1;\n      \
    \  long m = 2;\n        long n = 1;\n        long o = 3;\n        long p = 1;\n\
    \        long q = 2;\n        long r = 1;\n        long s = 3;\n        long t\
    \ = 1;\n        long u = 2;\n        long v = 3;\n        long w\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bo87k8q.java:126: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        long a = 1;\n        long b =\
    \ 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n        long\
    \ temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n    \
    \    long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa_lx6gug.java:115: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1);\n            long b = tri(n - 2);\n            long c\
    \ = tri(n + 1);\n            for (long i : a) {\n                result.add(i);\n\
    \            }\n            for (long j : b) {\n                result.add(j);\n\
    \            }\n            for (long k : c) {\n                result.add(k);\n\
    \            }\n        } else {\n            long a = tri(n - 1);\n         \
    \   long b = tri(n - 2);\n            long c = tri(n + 1);\n            for (long\
    \ i : a) {\n                result.add(i);\n            }\n            for (long\
    \ j : b) {\n                result.add(j);\n            }\n            for (long\
    \ k : c) {\n                result.add(k);\n            }\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa3apdows.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1);\n                   \
    \     ^\n/tmp/tmpa3apdows.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2);\n            \
    \            ^\n/tmp/tmpa3apdows.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long c = tri(n + 1);\n            \
    \            ^\n/tmp/tmpa3apdows.java:38: error: for-each not applicable to expression\
    \ type\n            for (long i : a) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    long\n/tmp/tmpa3apdows.java:41: error:\
    \ for-each not applicable to expression type\n            for (long j : b) {\n\
    \                          ^\n  required: array or java.lang.Iterable\n  found:\
    \    long\n/tmp/tmpa3apdows.java:44: error: for-each not applicable to expression\
    \ type\n            for (long k : c) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    long\n/tmp/tmpa3apdows.java:48: error:\
    \ incompatible types: ArrayList<Long> cannot be converted to long\n          \
    \  long a = tri(n - 1);\n                        ^\n/tmp/tmpa3apdows.java:49:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long b = tri(n - 2);\n                        ^\n/tmp/tmpa3apdows.java:50:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long c = tri(n + 1);\n                        ^\n/tmp/tmpa3apdows.java:51:\
    \ error: for-each not applicable to expression type\n            for (long i :\
    \ a) {\n                          ^\n  required: array or java.lang.Iterable\n\
    \  found:    long\n/tmp/tmpa3apdows.java:54: error: for-each not applicable to\
    \ expression type\n            for (long j : b) {\n                          ^\n\
    \  required: array or java.lang.Iterable\n  found:    long\n/tmp/tmpa3apdows.java:57:\
    \ error: for-each not applicable to expression type\n            for (long k :\
    \ c) {\n                          ^\n  required: array or java.lang.Iterable\n\
    \  found:    long\n12 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n / 2) + tri(n / 2) + tri(n / 2));\n        } else {\n     \
    \       result.add(tri(n / 2) + tri(n / 2) + tri(n / 2) + tri(n / 2));\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_x6681ns.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp_x6681ns.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2) + tri(n / 2) + tri(n / 2));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp_x6681ns.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2) + tri(n / 2) + tri(n / 2) + tri(n / 2));\n                            \
    \      ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4l7fl4r3.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmp4l7fl4r3.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmp4l7fl4r3.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp4l7fl4r3.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp4l7fl4r3.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp4l7fl4r3.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (n / 3L);\n        long tri2\
    \ = (tri1 + tri1);\n        long tri3 = (tri2 + tri2);\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkbb2s5p9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2zo7_fx0.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp2zo7_fx0.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp2zo7_fx0.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        if (n % 2 == 0) {\n            third.add(1);\n\
    \        }\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx26iztr2.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpx26iztr2.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(3);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(1);\n                   ^\n\
    /tmp/tmpx26iztr2.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(2);\n                  ^\n/tmp/tmpx26iztr2.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n            third.add(1);\n\
    \                      ^\n/tmp/tmpx26iztr2.java:39: error: incompatible types:\
    \ int cannot be converted to Long\n        third.add(1);\n                  ^\n\
    /tmp/tmpx26iztr2.java:40: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:41:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:42: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:44: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:46: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:47:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:48: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:50: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:51:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:52: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:53:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:54: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:55:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:56: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:57:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:58: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:59:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:60: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:61:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:62: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:63:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:64: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:65:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:66: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:67:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:68: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:69:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:70: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:71:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:72: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:73:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:74: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:75:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:76: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:77:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:78: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:79:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:80: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:81:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:82: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:83:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:84: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:85:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:86: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:87:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:88: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:89:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:90: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:91:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:92: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:93:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:94: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:95:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:96: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:97:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:98: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:99:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:100: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:101:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:102: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:103:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:104: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:105:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:106: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:107:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:108: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpx26iztr2.java:109:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpx26iztr2.java:110: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu61izqkt.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpu61izqkt.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpu61izqkt.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0r9cre44.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri = 1;\n        long tri2 = 1;\n\
    \        long tri3 = 1;\n        long tri4 = 1;\n        long tri5 = 1;\n    \
    \    long tri6 = 1;\n        long tri7 = 1;\n        long tri8 = 1;\n        long\
    \ tri9 = 1;\n        long tri10 = 1;\n        long tri11 = 1;\n        long tri12\
    \ = 1;\n        long tri13 = 1;\n        long tri14 = 1;\n        long tri15 =\
    \ 1;\n        long tri16 = 1;\n        long tri17 = 1;\n        long tri18 = 1;\n\
    \        long tri19 = 1;\n        long tri20 = 1;\n        long tri21 = 1;\n \
    \       long tri22 = 1;\n        long tri23 = 1;\n        long tri24 = 1;\n  \
    \      long tri25 = 1;\n        long tri26 = 1;\n        long tri27 = 1;\n   \
    \     long tri28 = 1;\n        long tri29 = 1;\n        long tri30 = 1;\n    \
    \    long tri31 = 1;\n        long tri32 = 1;\n        long tri33 = 1;\n     \
    \   long tri34 = 1;\n        long tri35 = 1;\n        long tri36 = 1;\n      \
    \  long tri37 = 1;\n        long tri38 = 1;\n        long tri39 = 1;\n       \
    \ long tri40 = 1;\n        long tri41 = 1;\n        long tri42 = 1;\n        long\
    \ tri43 = 1;\n        long tri44 = 1;\n        long tri45 = 1;\n        long tri46\
    \ = 1;\n        long tri47 = 1;\n        long tri48 = 1;\n        long tri49 =\
    \ 1;\n        long tri50 = 1;\n        long tri51 = 1;\n        long tri52 = 1;\n\
    \        long tri53 = 1;\n        long tri54 = 1;\n        long tri55 = 1;\n \
    \       long tri56 = 1;\n        long tri57 = 1;\n        long tri58 = 1;\n  \
    \      long tri59 = 1;\n        long tri60 = 1;\n        long tri61 = 1;\n   \
    \     long tri62 = 1;\n        long tri63 = 1;\n        long tri64 = 1;\n    \
    \    long tri65 = 1;\n        long tri66 = 1;\n        long tri67 = 1;\n     \
    \   long tri68 = 1;\n        long tri69 = 1;\n        long tri70 = 1;\n      \
    \  long tri71 = 1;\n        long tri72 = 1;\n        long tri73 = 1;\n       \
    \ long tri74 = 1;\n        long tri75 = 1;\n        long tri76 = 1;\n        long\
    \ tri77 = 1;\n        long tri78 = 1;\n        long tri79 = 1;\n        long tri80\
    \ = 1;\n        long tri81 = 1;\n        long tri82 = 1;\n        long tri83 =\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf7uuifgb.java:109: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprudj00hu.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3flmoxk3.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp3flmoxk3.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp3flmoxk3.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 1;\n        long d = 1;\n        long sum = 0;\n        long temp;\n\
    \        for(int i = 1; i <= n; i++) {\n            temp = a + b + c + d;\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = temp;\n\
    \            result.add(temp);\n        }\n        return result;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_oazn8mu.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n\tat Problem.tri(tmpazd_4cdf.java:34)\n\
    \tat Problem.tri(tmpazd_4cdf.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcxf1at_r.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpcxf1at_r.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp0px_ial.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpp0px_ial.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(2);\n\
    \        third.add(3);\n        if (n % 2 == 0) {\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        result.addAll(first);\n\
    \        result.addAll(second);\n        result.addAll(third);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kuzss7t.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp_kuzss7t.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmp_kuzss7t.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(2);\n                   ^\n\
    /tmp/tmp_kuzss7t.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(3);\n                  ^\n/tmp/tmp_kuzss7t.java:37:\
    \ error: bad operand types for binary operator '+'\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                 ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1hljssyv.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdu5wy4f9.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpdu5wy4f9.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpdu5wy4f9.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(2);\n\
    \        third.add(3);\n        if (n % 2 == 0) {\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        result.addAll(first);\n\
    \        result.addAll(second);\n        result.addAll(third);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplhoijf07.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmplhoijf07.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmplhoijf07.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(2);\n                   ^\n\
    /tmp/tmplhoijf07.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(3);\n                  ^\n/tmp/tmplhoijf07.java:37:\
    \ error: bad operand types for binary operator '+'\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                 ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6spt70qf.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmp6spt70qf.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp6spt70qf.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> left = tri(n - 1);\n            ArrayList<Long> right = tri(n\
    \ - 2);\n            left.addAll(right);\n            result.addAll(left);\n \
    \       } else {\n            ArrayList<Long> left = tri(n - 1);\n           \
    \ ArrayList<Long> right = tri(n - 2);\n            left.addAll(right);\n     \
    \       left.add(1L);\n            result.addAll(left);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcfnx5dxb.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdb1ccebl.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(0L);\n            result.add(1L);\n\
    \            result.add(2L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            ArrayList<Long> left = tri(n - 1);\n           \
    \ ArrayList<Long> right = tri(n - 2);\n            left.addAll(right);\n     \
    \       result.addAll(left);\n        } else {\n            ArrayList<Long> left\
    \ = tri(n - 1);\n            ArrayList<Long> right = tri(n - 3);\n           \
    \ left.addAll(right);\n            result.addAll(left);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsocdzbc.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpge60ycky.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpge60ycky.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmyni7a25.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpmyni7a25.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2mv2nzo7.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (3 * n) / 2;\n        long\
    \ tri2 = tri1 + tri1;\n        long tri3 = tri2 + tri2;\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsqucq2wa.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1L);\n            long b = tri(n - 2L);\n            result.add(a);\n\
    \            result.add(b);\n            result.add(a + b);\n        } else {\n\
    \            long a = tri(n - 1L);\n            long b = tri(n - 3L);\n      \
    \      result.add(a);\n            result.add(b);\n            result.add(a +\
    \ b);\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmg31e7v9.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1L);\n                  \
    \      ^\n/tmp/tmpmg31e7v9.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2L);\n           \
    \             ^\n/tmp/tmpmg31e7v9.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long a = tri(n - 1L);\n           \
    \             ^\n/tmp/tmpmg31e7v9.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 3L);\n           \
    \             ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(1);\n\
    \        third.add(1);\n        if (n % 2 == 0) {\n            third.add(1);\n\
    \        }\n        for (int i = 2; i <= n; i++) {\n            third.add(first.get(0)\
    \ + second.get(0) + third.get(0));\n            second.add(first.get(0) + second.get(0)\
    \ + third.get(0));\n            first.add(third.get(0));\n        }\n        result.addAll(first);\n\
    \        result.addAll(second);\n        result.addAll(third);\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpee48nam5.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpee48nam5.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmpee48nam5.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(1);\n                   ^\n\
    /tmp/tmpee48nam5.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(1);\n                  ^\n/tmp/tmpee48nam5.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n            third.add(1);\n\
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptdylafi8.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 3;\n        long sum = 0;\n        long temp;\n        for(int i\
    \ = 1; i <= n; i++) {\n            sum = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = sum;\n            result.add(sum);\n        }\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_nb0009.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps0exz5us.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmps0exz5us.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmps0exz5us.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n               \
    \                   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz65a5g5q.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpz65a5g5q.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpz65a5g5q.java:34:\
    \ error: bad operand types for binary operator '+'\n        result.add(tri(n -\
    \ 1) + tri(n - 2));\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            result.add(1L);\n     \
    \       return result;\n        }\n        if (n == 2) {\n            result.add(0L);\n\
    \            result.add(1L);\n            result.add(2L);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3);\n            result.add(tri1);\n           \
    \ long tri2 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n            result.add(tri2);\n\
    \            return result;\n        } else {\n            long tri1 = tri(n -\
    \ 1) + tri(n - 2) + tri(n - 3);\n            result.add(tri1);\n            long\
    \ tri2 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n            result.add(tri2);\n\
    \            long tri3 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n            result.add(tri3);\n\
    \            return result;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfz_3o6x_.java:43: error: bad operand types for binary operator\
    \ '+'\n            long tri1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n       \
    \                            ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpfz_3o6x_.java:45: error: bad operand types for binary\
    \ operator '+'\n            long tri2 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \                                   ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n/tmp/tmpfz_3o6x_.java:49: error: bad operand types for\
    \ binary operator '+'\n            long tri1 = tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3);\n                                   ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpfz_3o6x_.java:51: error: bad operand\
    \ types for binary operator '+'\n            long tri2 = tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3);\n                                   ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpfz_3o6x_.java:53: error: bad operand\
    \ types for binary operator '+'\n            long tri3 = tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3);\n                                   ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkob7cukl.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2lijqc0p.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp2lijqc0p.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 1;\n        long d = 1;\n        long temp;\n        long tri =\
    \ 0;\n        long tri_sum = 0;\n        long tri_sum_temp = 0;\n        long\
    \ tri_sum_temp2 = 0;\n        long tri_sum_temp3 = 0;\n        long tri_sum_temp4\
    \ = 0;\n        long tri_sum_temp5 = 0;\n        long tri_sum_temp6 = 0;\n   \
    \     long tri_sum_temp7 = 0;\n        long tri_sum_temp8 = 0;\n        long tri_sum_temp9\
    \ = 0;\n        long tri_sum_temp10 = 0;\n        long tri_sum_temp11 = 0;\n \
    \       long tri_sum_temp12 = 0;\n        long tri_sum_temp13 = 0;\n        long\
    \ tri_sum_temp14 = 0;\n        long tri_sum_temp15 = 0;\n        long tri_sum_temp16\
    \ = 0;\n        long tri_sum_temp17 = 0;\n        long tri_sum_temp18 = 0;\n \
    \       long tri_sum_temp19 = 0;\n        long tri_sum_temp20 = 0;\n        long\
    \ tri_sum_temp21 = 0;\n        long tri_sum_temp22 = 0;\n        long tri_sum_temp23\
    \ = 0;\n        long tri_sum_temp24 = 0;\n        long tri_sum_temp25 = 0;\n \
    \       long tri_sum_temp26 = 0;\n        long tri_sum_temp27 = 0;\n        long\
    \ tri_sum_temp28 = 0;\n        long tri_sum_temp29 = 0;\n        long tri_sum_temp30\
    \ = 0;\n        long tri_sum_temp31 = 0;\n        long tri_sum_temp32 = 0;\n \
    \       long tri_sum_temp33 = 0;\n        long tri_sum_temp34 = 0;\n        long\
    \ tri_sum_temp35 = 0;\n        long tri_sum_temp36 = 0;\n        long tri_sum_temp37\
    \ = 0;\n        long tri_sum_temp38 = 0;\n        long tri_sum_temp39 = 0;\n \
    \       long tri_sum_temp40 = 0;\n        long tri_sum_temp41 = 0;\n        long\
    \ tri_sum_temp42 = 0;\n        long tri_sum_temp43 = 0;\n        long tri_sum_temp44\
    \ = 0;\n        long tri_sum_temp45 = 0;\n        long tri_sum_temp46 = 0;\n \
    \       long tri_sum_temp47 = 0;\n        long tri_sum_temp48 = 0;\n        long\
    \ tri_sum_temp49 = 0;\n        long tri_sum_temp50 = 0;\n        long tri_sum_temp51\
    \ = 0;\n        long tri_sum_temp52 = 0;\n        long tri\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp32d51zdk.java:85: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1L);\n            long b = tri(n - 2L);\n            result.add(a);\n\
    \            result.add(b);\n            result.add(a + b);\n        } else {\n\
    \            long a = tri(n - 1L);\n            long b = tri(n - 3L);\n      \
    \      result.add(a);\n            result.add(b);\n            result.add(a +\
    \ b);\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ahdp26h.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1L);\n                  \
    \      ^\n/tmp/tmp3ahdp26h.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2L);\n           \
    \             ^\n/tmp/tmp3ahdp26h.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long a = tri(n - 1L);\n           \
    \             ^\n/tmp/tmp3ahdp26h.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 3L);\n           \
    \             ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ptb2scg.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_zjckzyr.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp_zjckzyr.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(1L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n\
    \            return result;\n        }\n        ArrayList<Long> left = tri(n -\
    \ 1);\n        ArrayList<Long> right = tri(n - 2);\n        ArrayList<Long> middle\
    \ = new ArrayList<>();\n        middle.add(left.get(left.size() - 1) + right.get(right.size()\
    \ - 1));\n        middle.add(left.get(left.size() - 1) + right.get(right.size()\
    \ - 1) + left.get(left.size() - 2));\n        middle.add(left.get(left.size()\
    \ - 1) + right.get(right.size() - 1) + left.get(left.size() - 2) + right.get(right.size()\
    \ - 2));\n        result.addAll(left);\n        result.addAll(middle);\n     \
    \   result.addAll(right);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmptmabazrf.java:45)\n\tat Problem.main(tmptmabazrf.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpphbglwce.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpphbglwce.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpphbglwce.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbh4h3vck.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpbh4h3vck.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpms7wtqp1.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpms7wtqp1.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcwlosnp2.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpcwlosnp2.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.add(3);\n\
    \            return result;\n        }\n        ArrayList<Long> left = tri(n -\
    \ 1);\n        ArrayList<Long> right = tri(n - 2);\n        ArrayList<Long> middle\
    \ = new ArrayList<>();\n        middle.add(left.get(0) + right.get(0));\n    \
    \    middle.add(left.get(1) + right.get(1));\n        middle.add(left.get(2) +\
    \ right.get(2));\n        middle.add(left.get(3) + right.get(3));\n        result.addAll(middle);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpar5fwgl3.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpar5fwgl3.java:31:\
    \ error: incompatible types: int cannot be converted to Long\n            result.add(3);\n\
    \                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpirfzo0w_.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpirfzo0w_.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8148cxek.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp8148cxek.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (n / 3L);\n        long tri2\
    \ = (tri1 + tri1);\n        long tri3 = tri2 + tri1;\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvaub9wsb.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ihrb7t2.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp_ihrb7t2.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1);\n            long b = tri(n - 2);\n            long c\
    \ = tri(n + 1);\n            long sum = a + b + c;\n            result.add(sum);\n\
    \            return result;\n        }\n        long a = tri(n - 1);\n       \
    \ long b = tri(n - 2);\n        long c = tri(n + 1);\n        long sum = a + b\
    \ + c;\n        result.add(sum);\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpepj_6wry.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1);\n                   \
    \     ^\n/tmp/tmpepj_6wry.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2);\n            \
    \            ^\n/tmp/tmpepj_6wry.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long c = tri(n + 1);\n            \
    \            ^\n/tmp/tmpepj_6wry.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        long a = tri(n - 1);\n                \
    \    ^\n/tmp/tmpepj_6wry.java:43: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long b = tri(n - 2);\n                    ^\n\
    /tmp/tmpepj_6wry.java:44: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to long\n        long c = tri(n + 1);\n                    ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptjj_fpbr.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 3;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 3;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp61d_rl_n.java:126: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzb9bwgqe.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmpzb9bwgqe.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmpzb9bwgqe.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpzb9bwgqe.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpzb9bwgqe.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpzb9bwgqe.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3fyo13yp.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg_omsinp.java:33: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmpg_omsinp.java:34:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmpg_omsinp.java:35: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:36:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:37: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:38:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:39: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:40:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:41: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:42:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:43: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:44:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:45: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:46:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:48:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:49: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:50:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:51: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:52:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:54:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:55: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:57: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:58:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:59: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:60:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:61: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:62:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:63: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:64:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:65: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:66:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:67: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:68:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:69: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:70:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:71: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:72:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:73: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:74:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:75: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:76:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:77: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:78:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:79: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:80:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:81: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:82:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:83: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:84:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:85: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:86:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:87: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:88:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:89: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:90:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:91: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:92:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:93: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:94:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:95: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:96:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:97: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:98:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:99: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:100:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:101: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:102:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:103: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:104:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:105: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:106:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:107: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpg_omsinp.java:108:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpg_omsinp.java:109: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            long tri1 = tri(n - 1);\n       \
    \     long tri2 = tri(n - 2);\n            result.add(tri1);\n            result.add(tri1\
    \ + tri2);\n        } else {\n            long tri1 = tri(n - 1);\n          \
    \  long tri2 = tri(n - 2);\n            result.add(tri1);\n            result.add(tri1\
    \ + tri2);\n            result.add(tri1 + tri2 + tri1);\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpro3qulfr.java:36: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmpro3qulfr.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpro3qulfr.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri1 = tri(n - 1);\n         \
    \                  ^\n/tmp/tmpro3qulfr.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        ArrayList<Long> fourth = new ArrayList<>();\n\
    \        ArrayList<Long> fifth = new ArrayList<>();\n        ArrayList<Long> sixth\
    \ = new ArrayList<>();\n        ArrayList<Long> seventh = new ArrayList<>();\n\
    \        ArrayList<Long> eighth = new ArrayList<>();\n        ArrayList<Long>\
    \ ninth = new ArrayList<>();\n        ArrayList<Long> tenth = new ArrayList<>();\n\
    \        ArrayList<Long> eleventh = new ArrayList<>();\n        ArrayList<Long>\
    \ twelfth = new ArrayList<>();\n        ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fourteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ fifteenth = new ArrayList<>();\n        ArrayList<Long> sixteenth = new ArrayList<>();\n\
    \        ArrayList<Long> seventeenth = new ArrayList<>();\n        ArrayList<Long>\
    \ eighteenth = new ArrayList<>();\n        ArrayList<Long> nineteenth = new ArrayList<>();\n\
    \        ArrayList<Long> twentieth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyfirst = new ArrayList<>();\n        ArrayList<Long> twentysecond = new\
    \ ArrayList<>();\n        ArrayList<Long> twentythird = new ArrayList<>();\n \
    \       ArrayList<Long> twentyfourth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyfifth = new ArrayList<>();\n        ArrayList<Long> twentysixth = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyseventh = new ArrayList<>();\n\
    \        ArrayList<Long> twentyeighth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyninth = new ArrayList<>();\n        ArrayList<Long> thirtieth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtysecond = new ArrayList<>();\n        ArrayList<Long> thirtythird = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtysixth = new ArrayList<>();\n        ArrayList<Long> thirtyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtynin\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcwl7p9m9.java:78: error: ';' expected\n        ArrayList<Long>\
    \ thirtynin\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5cvxtsj1.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp5cvxtsj1.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8_kafbe.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        ArrayList<Long> left = tri(n -\
    \ 1);\n        ArrayList<Long> right = tri(n - 2);\n        ArrayList<Long> middle\
    \ = new ArrayList<>();\n        middle.add(0L);\n        middle.add(1L);\n   \
    \     middle.add(2L);\n        middle.add(3L);\n        middle.add(4L);\n    \
    \    middle.add(5L);\n        middle.add(6L);\n        middle.add(7L);\n     \
    \   middle.add(8L);\n        middle.add(9L);\n        middle.add(10L);\n     \
    \   middle.add(11L);\n        middle.add(12L);\n        middle.add(13L);\n   \
    \     middle.add(14L);\n        middle.add(15L);\n        middle.add(16L);\n \
    \       middle.add(17L);\n        middle.add(18L);\n        middle.add(19L);\n\
    \        middle.add(20L);\n        middle.add(21L);\n        middle.add(22L);\n\
    \        middle.add(23L);\n        middle.add(24L);\n        middle.add(25L);\n\
    \        middle.add(26L);\n        middle.add(27L);\n        middle.add(28L);\n\
    \        middle.add(29L);\n        middle.add(30L);\n        middle.add(31L);\n\
    \        middle.add(32L);\n        middle.add(33L);\n        middle.add(34L);\n\
    \        middle.add(35L);\n        middle.add(36L);\n        middle.add(37L);\n\
    \        middle.add(38L);\n        middle.add(39L);\n        middle.add(40L);\n\
    \        middle.add(41L);\n        middle.add(42L);\n        middle.add(43L);\n\
    \        middle.add(44L);\n        middle.add(45L);\n        middle.add(46L);\n\
    \        middle.add(47L);\n        middle.add(48L);\n        middle.add(49L);\n\
    \        middle.add(50L);\n        middle.add(51L);\n        middle.add(52L);\n\
    \        middle.add(53L);\n        middle.add(54L);\n        middle.add(\n   \
    \ }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpebnql6_c.java:93: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpohbxt5zd.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpohbxt5zd.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        result.addAll(tri4);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg9xmlb0h.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz4dwq2vt.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmpz4dwq2vt.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpz4dwq2vt.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n               \
    \                   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61jsbmlo.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp146q4ud6.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp146q4ud6.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp146q4ud6.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \                                ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \        } else {\n            long tri1 = tri(n - 1);\n            long tri2\
    \ = tri(n - 2);\n            long tri3 = tri(n + 1);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdivic3fh.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmpdivic3fh.java:29:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri1 = tri(n - 1);\n                           ^\n/tmp/tmpdivic3fh.java:30:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri2 = tri(n - 2);\n                           ^\n/tmp/tmpdivic3fh.java:31:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri3 = tri(n + 1);\n                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> left = new ArrayList<>();\n\
    \        ArrayList<Long> right = new ArrayList<>();\n        left.add(1);\n  \
    \      right.add(1);\n        for (int i = 2; i <= n; i++) {\n            left.add(right.get(i\
    \ - 1) + right.get(i - 2));\n            right.add(left.get(i - 1) + left.get(i\
    \ - 2));\n        }\n        result.addAll(left);\n        result.addAll(right);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg1nc4irt.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpg1nc4irt.java:32:\
    \ error: incompatible types: int cannot be converted to Long\n        left.add(1);\n\
    \                 ^\n/tmp/tmpg1nc4irt.java:33: error: incompatible types: int\
    \ cannot be converted to Long\n        right.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (long)Math.pow(3,1);\n    \
    \    long tri2 = (long)Math.pow(3,2);\n        long tri3 = (long)Math.pow(3,3);\n\
    \        long tri4 = (long)Math.pow(3,4);\n        long tri5 = (long)Math.pow(3,5);\n\
    \        long tri6 = (long)Math.pow(3,6);\n        long tri7 = (long)Math.pow(3,7);\n\
    \        long tri8 = (long)Math.pow(3,8);\n        long tri9 = (long)Math.pow(3,9);\n\
    \        long tri10 = (long)Math.pow(3,10);\n        long tri11 = (long)Math.pow(3,11);\n\
    \        long tri12 = (long)Math.pow(3,12);\n        long tri13 = (long)Math.pow(3,13);\n\
    \        long tri14 = (long)Math.pow(3,14);\n        long tri15 = (long)Math.pow(3,15);\n\
    \        long tri16 = (long)Math.pow(3,16);\n        long tri17 = (long)Math.pow(3,17);\n\
    \        long tri18 = (long)Math.pow(3,18);\n        long tri19 = (long)Math.pow(3,19);\n\
    \        long tri20 = (long)Math.pow(3,20);\n        long tri21 = (long)Math.pow(3,21);\n\
    \        long tri22 = (long)Math.pow(3,22);\n        long tri23 = (long)Math.pow(3,23);\n\
    \        long tri24 = (long)Math.pow(3,24);\n        long tri25 = (long)Math.pow(3,25);\n\
    \        long tri26 = (long)Math.pow(3,26);\n        long tri27 = (long)Math.pow(3,27);\n\
    \        long tri28 = (long)Math.pow(3,28);\n        long tri29 = (long)Math.pow(3,29);\n\
    \        long tri30 = (long)Math.pow(3,30);\n        long tri31 = (long)Math.pow(3,31);\n\
    \        long tri32 = (long)Math.pow(3,32);\n        long tri33 = (long)Math.pow(3,33);\n\
    \        long tri34 = (long)Math.pow(3,34);\n        long tri35 = (long)Math.pow(3,35);\n\
    \        long tri36 = (long)Math.pow(3,36);\n        long tri37 = (long)Math.pow(3,37);\n\
    \        long tri38 = (long)Math.pow(3,38);\n        long tri39 = (long)Math.pow(3,39);\n\
    \        long tri40 = (long)Math.pow(3,40);\n        long tri41 = (long)Math.pow(3,41);\n\
    \        long tri42 = (long)Math.pow(3,42);\n        long tri43 = (long)Math.pow(3,43);\n\
    \        long tri44\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9gwx2odp.java:69: error: ';' expected\n        long tri44\n   \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri = 1;\n        long tri2 = 1;\n\
    \        long tri3 = 1;\n        long tri4 = 1;\n        long tri5 = 1;\n    \
    \    long tri6 = 1;\n        long tri7 = 1;\n        long tri8 = 1;\n        long\
    \ tri9 = 1;\n        long tri10 = 1;\n        long tri11 = 1;\n        long tri12\
    \ = 1;\n        long tri13 = 1;\n        long tri14 = 1;\n        long tri15 =\
    \ 1;\n        long tri16 = 1;\n        long tri17 = 1;\n        long tri18 = 1;\n\
    \        long tri19 = 1;\n        long tri20 = 1;\n        long tri21 = 1;\n \
    \       long tri22 = 1;\n        long tri23 = 1;\n        long tri24 = 1;\n  \
    \      long tri25 = 1;\n        long tri26 = 1;\n        long tri27 = 1;\n   \
    \     long tri28 = 1;\n        long tri29 = 1;\n        long tri30 = 1;\n    \
    \    long tri31 = 1;\n        long tri32 = 1;\n        long tri33 = 1;\n     \
    \   long tri34 = 1;\n        long tri35 = 1;\n        long tri36 = 1;\n      \
    \  long tri37 = 1;\n        long tri38 = 1;\n        long tri39 = 1;\n       \
    \ long tri40 = 1;\n        long tri41 = 1;\n        long tri42 = 1;\n        long\
    \ tri43 = 1;\n        long tri44 = 1;\n        long tri45 = 1;\n        long tri46\
    \ = 1;\n        long tri47 = 1;\n        long tri48 = 1;\n        long tri49 =\
    \ 1;\n        long tri50 = 1;\n        long tri51 = 1;\n        long tri52 = 1;\n\
    \        long tri53 = 1;\n        long tri54 = 1;\n        long tri55 = 1;\n \
    \       long tri56 = 1;\n        long tri57 = 1;\n        long tri58 = 1;\n  \
    \      long tri59 = 1;\n        long tri60 = 1;\n        long tri61 = 1;\n   \
    \     long tri62 = 1;\n        long tri63 = 1;\n        long tri64 = 1;\n    \
    \    long tri65 = 1;\n        long tri66 = 1;\n        long tri67 = 1;\n     \
    \   long tri68 = 1;\n        long tri69 = 1;\n        long tri70 = 1;\n      \
    \  long tri71 = 1;\n        long tri72 = 1;\n        long tri73 = 1;\n       \
    \ long tri74 = 1;\n        long tri75 = 1;\n        long tri76 = 1;\n        long\
    \ tri77 = 1;\n        long tri78 = 1;\n        long tri79 = 1;\n        long tri80\
    \ = 1;\n        long tri81 = 1;\n        long tri82 = 1;\n        long tri83 =\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps5xa97g6.java:109: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzc7g6k7x.java:31: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpzc7g6k7x.java:33: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> left = tri(n - 1);\n            ArrayList<Long> right = tri(n\
    \ - 2);\n            ArrayList<Long> sum = left.stream().map(x -> x + right.get(0)).collect(Collectors.toList());\n\
    \            result.addAll(sum);\n            return result;\n        }\n    \
    \    ArrayList<Long> left = tri(n - 1);\n        ArrayList<Long> right = tri(n\
    \ - 2);\n        ArrayList<Long> sum = left.stream().map(x -> x + right.get(0)).collect(Collectors.toList());\n\
    \        result.addAll(sum);\n        result.add(sum.get(0) + sum.get(1));\n \
    \       return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ivs9ikx.java:37: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            ArrayList<Long> sum = left.stream().map(x\
    \ -> x + right.get(0)).collect(Collectors.toList());\n                       \
    \                                                           ^\n    equality constraints:\
    \ List<T#2>\n    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are\
    \ type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n/tmp/tmp2ivs9ikx.java:43: error:\
    \ incompatible types: inference variable R has incompatible bounds\n        ArrayList<Long>\
    \ sum = left.stream().map(x -> x + right.get(0)).collect(Collectors.toList());\n\
    \                                                                            \
    \  ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> left = new ArrayList<>();\n\
    \        ArrayList<Long> right = new ArrayList<>();\n        left.add(1);\n  \
    \      right.add(1);\n        long leftSum = leftSum(left);\n        long rightSum\
    \ = rightSum(right);\n        long sum = (leftSum + rightSum) / 2;\n        long\
    \ leftSum2 = leftSum(left);\n        long rightSum2 = rightSum(right);\n     \
    \   long sum2 = (leftSum2 + rightSum2) / 2;\n        long leftSum3 = leftSum(left);\n\
    \        long rightSum3 = rightSum(right);\n        long sum3 = (leftSum3 + rightSum3)\
    \ / 2;\n        long leftSum4 = leftSum(left);\n        long rightSum4 = rightSum(right);\n\
    \        long sum4 = (leftSum4 + rightSum4) / 2;\n        long leftSum5 = leftSum(left);\n\
    \        long rightSum5 = rightSum(right);\n        long sum5 = (leftSum5 + rightSum5)\
    \ / 2;\n        long leftSum6 = leftSum(left);\n        long rightSum6 = rightSum(right);\n\
    \        long sum6 = (leftSum6 + rightSum6) / 2;\n        long leftSum7 = leftSum(left);\n\
    \        long rightSum7 = rightSum(right);\n        long sum7 = (leftSum7 + rightSum7)\
    \ / 2;\n        long leftSum8 = leftSum(left);\n        long rightSum8 = rightSum(right);\n\
    \        long sum8 = (leftSum8 + rightSum8) / 2;\n        long leftSum9 = leftSum(left);\n\
    \        long rightSum9 = rightSum(right);\n        long sum9 = (leftSum9 + rightSum9)\
    \ / 2;\n        long leftSum10 = leftSum(left);\n        long rightSum10 = rightSum(right);\n\
    \        long sum10 = (leftSum10 + rightSum10) / 2;\n        long leftSum11 =\
    \ leftSum(left);\n        long rightSum11 = rightSum(right);\n        long sum11\
    \ = (leftSum11 + rightSum11) / 2;\n        long leftSum12 = leftSum(left);\n \
    \       long rightSum12 = rightSum(right);\n        long sum12 = (leftSum12 +\
    \ rightSum12) / 2;\n        long leftSum13 = leftSum(left);\n        long rightSum13\
    \ = rightSum(right);\n        \n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmf55sw7u.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpmf55sw7u.java:32:\
    \ error: incompatible types: int cannot be converted to Long\n        left.add(1);\n\
    \                 ^\n/tmp/tmpmf55sw7u.java:33: error: incompatible types: int\
    \ cannot be converted to Long\n        right.add(1);\n                  ^\n/tmp/tmpmf55sw7u.java:34:\
    \ error: cannot find symbol\n        long leftSum = leftSum(left);\n         \
    \              ^\n  symbol:   method leftSum(ArrayList<Long>)\n  location: class\
    \ Problem\n/tmp/tmpmf55sw7u.java:35: error: cannot find symbol\n        long rightSum\
    \ = rightSum(right);\n                        ^\n  symbol:   method rightSum(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmpmf55sw7u.java:37: error: cannot find symbol\n\
    \        long leftSum2 = leftSum(left);\n                        ^\n  symbol:\
    \   method leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:38:\
    \ error: cannot find symbol\n        long rightSum2 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:40: error: cannot find symbol\n       \
    \ long leftSum3 = leftSum(left);\n                        ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:41:\
    \ error: cannot find symbol\n        long rightSum3 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:43: error: cannot find symbol\n       \
    \ long leftSum4 = leftSum(left);\n                        ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:44:\
    \ error: cannot find symbol\n        long rightSum4 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:46: error: cannot find symbol\n       \
    \ long leftSum5 = leftSum(left);\n                        ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:47:\
    \ error: cannot find symbol\n        long rightSum5 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:49: error: cannot find symbol\n       \
    \ long leftSum6 = leftSum(left);\n                        ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:50:\
    \ error: cannot find symbol\n        long rightSum6 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:52: error: cannot find symbol\n       \
    \ long leftSum7 = leftSum(left);\n                        ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:53:\
    \ error: cannot find symbol\n        long rightSum7 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:55: error: cannot find symbol\n       \
    \ long leftSum8 = leftSum(left);\n                        ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:56:\
    \ error: cannot find symbol\n        long rightSum8 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:58: error: cannot find symbol\n       \
    \ long leftSum9 = leftSum(left);\n                        ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:59:\
    \ error: cannot find symbol\n        long rightSum9 = rightSum(right);\n     \
    \                    ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:61: error: cannot find symbol\n       \
    \ long leftSum10 = leftSum(left);\n                         ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:62:\
    \ error: cannot find symbol\n        long rightSum10 = rightSum(right);\n    \
    \                      ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:64: error: cannot find symbol\n       \
    \ long leftSum11 = leftSum(left);\n                         ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:65:\
    \ error: cannot find symbol\n        long rightSum11 = rightSum(right);\n    \
    \                      ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:67: error: cannot find symbol\n       \
    \ long leftSum12 = leftSum(left);\n                         ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:68:\
    \ error: cannot find symbol\n        long rightSum12 = rightSum(right);\n    \
    \                      ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpmf55sw7u.java:70: error: cannot find symbol\n       \
    \ long leftSum13 = leftSum(left);\n                         ^\n  symbol:   method\
    \ leftSum(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpmf55sw7u.java:71:\
    \ error: cannot find symbol\n        long rightSum13 = rightSum(right);\n    \
    \                      ^\n  symbol:   method rightSum(ArrayList<Long>)\n  location:\
    \ class Problem\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n29 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpocivt9v_.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long first = (long) (Math.pow(Math.sqrt(n), 3L) / Math.sqrt(5L));\n       \
    \     long second = (long) (Math.pow(Math.sqrt(n), 2L) / Math.sqrt(5L));\n   \
    \         long third = (long) (Math.pow(Math.sqrt(n), 1L) / Math.sqrt(5L));\n\
    \            result.add(first);\n            result.add(second);\n           \
    \ result.add(third);\n            return result;\n        }\n        long first\
    \ = (long) (Math.pow(Math.sqrt(n), 3L) / Math.sqrt(5L));\n        long second\
    \ = (long) (Math.pow(Math.sqrt(n), 2L) / Math.sqrt(5L));\n        long third =\
    \ (long) (Math.pow(Math.sqrt(n), 1L) / Math.sqrt(5L));\n        ArrayList<Long>\
    \ firstResult = tri(n - 1);\n        ArrayList<Long> secondResult = tri(n - 2);\n\
    \        ArrayList<Long> thirdResult = tri(n - 3);\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        result.addAll(firstResult);\n        result.addAll(secondResult);\n\
    \        result.addAll(thirdResult);\n        result.add(first);\n        result.add(second);\n\
    \        result.add(third);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9nplmyy.java:49: error: variable result is already defined in\
    \ method tri(long)\n        ArrayList<Long> result = new ArrayList<>();\n    \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        }\n       \
    \ return result;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_r5s76f.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpv_r5s76f.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3zd5ulha.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp3zd5ulha.java:38: error: bad operand types for binary\
    \ operator '+'\n        result.add(tri(n - 1) + tri(n - 2));\n               \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz_0i2j6c.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpz_0i2j6c.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw0lqh7ki.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpw0lqh7ki.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz7e4igqu.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzdufob5u.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n     \
    \   }\n        return result;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp31rb2g_g.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmp31rb2g_g.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp31rb2g_g.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n                            \
    \      ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd4_ouxmg.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpd4_ouxmg.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 1;\n    \
    \    long c = 1;\n        long d = 1;\n        long temp;\n        long tri =\
    \ 0;\n        for(int i = 1; i <= n; i++) {\n            tri += i;\n         \
    \   temp = tri;\n            tri = a + b + c + d;\n            a = b;\n      \
    \      b = c;\n            c = d;\n            d = temp;\n            result.add(tri);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyo4q863f.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpugnaj0yx.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpugnaj0yx.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpugnaj0yx.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        long first = 1;\n        long\
    \ second = 2;\n        long third = 1;\n        long fourth = 1;\n        long\
    \ fifth = 1;\n        long sixth = 1;\n        long seventh = 1;\n        long\
    \ eighth = 1;\n        long nineth = 1;\n        long tenth = 1;\n        long\
    \ eleventh = 1;\n        long twelfth = 1;\n        long thirteenth = 1;\n   \
    \     long fourteenth = 1;\n        long fifteenth = 1;\n        long sixteenth\
    \ = 1;\n        long seventeenth = 1;\n        long eighteenth = 1;\n        long\
    \ nineteenth = 1;\n        long twentieth = 1;\n        long twentyfirst = 1;\n\
    \        long twentysecond = 1;\n        long twentythird = 1;\n        long twentyfourth\
    \ = 1;\n        long twentyfifth = 1;\n        long twentysixth = 1;\n       \
    \ long twentyseventh = 1;\n        long twentyeighth = 1;\n        long twentyninth\
    \ = 1;\n        long thirtieth = 1;\n        long thirtyfirst = 1;\n        long\
    \ thirtysecond = 1;\n        long thirtythird = 1;\n        long thirtyfourth\
    \ = 1;\n        long thirtyfifth = 1;\n        long thirtysixth = 1;\n       \
    \ long thirtyseventh = 1;\n        long thirtyeighth = 1;\n        long thirtyninth\
    \ = 1;\n        long fortieth = 1;\n        long fortyfirst = 1;\n        long\
    \ fortysecond = 1;\n        long fortythird = 1;\n        long fortyfourth = 1;\n\
    \        long fortyfifth = 1;\n        long fortysixth = 1;\n        long fortyseventh\
    \ = 1;\n        long fortyeighth = 1;\n        long fortyninth = 1;\n        long\
    \ fiftieth = 1;\n        long fiftyfirst = 1;\n        long fiftysecond = 1;\n\
    \        long fiftythird = 1;\n        long fiftyfourth = 1;\n        long fiftyfifth\
    \ = 1;\n        long fiftysixth = 1;\n        long fiftyseventh = 1;\n       \
    \ long fiftyeighth = 1;\n        long fiftyninth = 1;\n        long sixtieth =\
    \ 1;\n        long sixtyfirst = 1;\n        long sixtysecond = 1;\n        long\
    \ sixtythird = 1;\n        long sixtyfour\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgfmqhzx3.java:93: error: ';' expected\n        long sixtyfour\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(1L);\n            result.add(2L);\n\
    \            return result;\n        }\n        ArrayList<Long> left = tri(n -\
    \ 1);\n        ArrayList<Long> right = tri(n - 2);\n        ArrayList<Long> middle\
    \ = new ArrayList<>();\n        middle.add(0L);\n        middle.add(1L);\n   \
    \     middle.add(2L);\n        middle.add(3L);\n        middle.add(4L);\n    \
    \    middle.add(5L);\n        middle.add(6L);\n        middle.add(7L);\n     \
    \   middle.add(8L);\n        middle.add(9L);\n        middle.add(10L);\n     \
    \   middle.add(11L);\n        middle.add(12L);\n        middle.add(13L);\n   \
    \     middle.add(14L);\n        middle.add(15L);\n        middle.add(16L);\n \
    \       middle.add(17L);\n        middle.add(18L);\n        middle.add(19L);\n\
    \        middle.add(20L);\n        middle.add(21L);\n        middle.add(22L);\n\
    \        middle.add(23L);\n        middle.add(24L);\n        middle.add(25L);\n\
    \        middle.add(26L);\n        middle.add(27L);\n        middle.add(28L);\n\
    \        middle.add(29L);\n        middle.add(30L);\n        middle.add(31L);\n\
    \        middle.add(32L);\n        middle.add(33L);\n        middle.add(34L);\n\
    \        middle.add(35L);\n        middle.add(36L);\n        middle.add(37L);\n\
    \        middle.add(38L);\n        middle.add(39L);\n        middle.add(40L);\n\
    \        middle.add(41L);\n        middle.add(42L);\n        middle.add(43L);\n\
    \        middle.add(44L);\n        middle.add(45L);\n        middle.add(46L);\n\
    \        middle.add(47L);\n        middle.add(48L);\n        middle.add(49L);\n\
    \        middle.add(50L);\n        middle.add(51L);\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp18fkd0m_.java:96: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        long a = 1;\n        long b =\
    \ 2;\n        long c = 1;\n        long d = 1;\n        long sum = 0;\n      \
    \  while (c <= n) {\n            sum = a + b + c + d;\n            long temp =\
    \ a;\n            a = b;\n            b = c;\n            c = d;\n           \
    \ d = sum;\n            result.add(temp);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz71bf4x8.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> left = new ArrayList<>();\n            left.add(0L);\n    \
    \        left.add(1L);\n            left.add(tri(n - 1));\n            left.add(tri(n\
    \ - 2));\n            result.addAll(left);\n        } else {\n            ArrayList<Long>\
    \ left = new ArrayList<>();\n            left.add(tri(n - 1));\n            left.add(tri(n\
    \ - 2));\n            left.add(tri(n - 3));\n            result.addAll(left);\n\
    \        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsx231g_1.java:38: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            left.add(tri(n - 1));\n                  \
    \      ^\n/tmp/tmpsx231g_1.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            left.add(tri(n - 2));\n           \
    \             ^\n/tmp/tmpsx231g_1.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            left.add(tri(n - 1));\n           \
    \             ^\n/tmp/tmpsx231g_1.java:44: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            left.add(tri(n - 2));\n           \
    \             ^\n/tmp/tmpsx231g_1.java:45: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            left.add(tri(n - 3));\n           \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        ArrayList<Long> tri1 = tri(n - 1);\n        ArrayList<Long> tri2\
    \ = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n - 3);\n        ArrayList<Long>\
    \ tri4 = tri(n - 4);\n        ArrayList<Long> tri5 = tri(n - 5);\n        ArrayList<Long>\
    \ tri6 = tri(n - 6);\n        ArrayList<Long> tri7 = tri(n - 7);\n        ArrayList<Long>\
    \ tri8 = tri(n - 8);\n        ArrayList<Long> tri9 = tri(n - 9);\n        ArrayList<Long>\
    \ tri10 = tri(n - 10);\n        ArrayList<Long> tri11 = tri(n - 11);\n       \
    \ ArrayList<Long> tri12 = tri(n - 12);\n        ArrayList<Long> tri13 = tri(n\
    \ - 13);\n        ArrayList<Long> tri14 = tri(n - 14);\n        ArrayList<Long>\
    \ tri15 = tri(n - 15);\n        ArrayList<Long> tri16 = tri(n - 16);\n       \
    \ ArrayList<Long> tri17 = tri(n - 17);\n        ArrayList<Long> tri18 = tri(n\
    \ - 18);\n        ArrayList<Long> tri19 = tri(n - 19);\n        ArrayList<Long>\
    \ tri20 = tri(n - 20);\n        ArrayList<Long> tri21 = tri(n - 21);\n       \
    \ ArrayList<Long> tri22 = tri(n - 22);\n        ArrayList<Long> tri23 = tri(n\
    \ - 23);\n        ArrayList<Long> tri24 = tri(n - 24);\n        ArrayList<Long>\
    \ tri25 = tri(n - 25);\n        ArrayList<Long> tri26 = tri(n - 26);\n       \
    \ ArrayList<Long> tri27 = tri(n - 27);\n        ArrayList<Long> tri28 = tri(n\
    \ - 28);\n        ArrayList<Long> tri29 = tri(n - 29);\n        ArrayList<Long>\
    \ tri30 = tri(n - 30);\n        ArrayList<Long> tri31 = tri(n - 31);\n       \
    \ ArrayList<Long> tri32 = tri(n - 32);\n        ArrayList<Long> tri33 = tri(n\
    \ - 33);\n        ArrayList<Long> tri34 = tri(n - 34);\n        ArrayList<Long>\
    \ tri35 = tri(n - 35);\n        ArrayList<Long> tri36 = tri(n - 36);\n       \
    \ ArrayList<Long> tri37 = tri(n - 37);\n        ArrayList<Long> tri38 = tri(n\
    \ - 38);\n        ArrayList<Long> \n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpanysh9_9.java:73: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpanysh9_9.java:73: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1);\n        second.add(1);\n\
    \        third.add(1);\n        if (n % 2 == 0) {\n            third.add(1);\n\
    \        }\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcvzp5a4b.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpcvzp5a4b.java:33:\
    \ error: incompatible types: int cannot be converted to Long\n        first.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:34: error: incompatible types: int\
    \ cannot be converted to Long\n        second.add(1);\n                   ^\n\
    /tmp/tmpcvzp5a4b.java:35: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n            third.add(1);\n\
    \                      ^\n/tmp/tmpcvzp5a4b.java:39: error: incompatible types:\
    \ int cannot be converted to Long\n        third.add(1);\n                  ^\n\
    /tmp/tmpcvzp5a4b.java:40: error: incompatible types: int cannot be converted to\
    \ Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:41:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:42: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:44: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:46: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:47:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:48: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:50: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:51:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:52: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:53:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:54: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:55:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:56: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:57:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:58: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:59:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:60: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:61:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:62: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:63:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:64: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:65:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:66: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:67:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:68: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:69:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:70: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:71:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:72: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:73:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:74: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:75:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:76: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:77:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:78: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:79:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:80: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:81:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:82: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:83:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:84: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:85:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:86: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:87:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:88: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:89:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:90: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:91:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:92: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:93:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:94: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:95:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:96: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:97:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:98: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:99:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:100: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:101:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:102: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:103:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:104: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:105:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:106: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:107:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:108: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpcvzp5a4b.java:109:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpcvzp5a4b.java:110: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n77 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long tri1 = (3 * n) / 2;\n        long\
    \ tri2 = (tri1 + tri1);\n        long tri3 = (tri2 + tri2);\n        long tri4\
    \ = (tri3 + tri3);\n        result.add(tri1);\n        result.add(tri2);\n   \
    \     result.add(tri3);\n        result.add(tri4);\n        return result;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp2ryhhhs.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n / 2) + tri(n / 2) + tri(n / 2));\n            return result;\n\
    \        }\n        result.add(tri(n / 2) + tri(n / 2) + tri(n / 2) + tri(n /\
    \ 2));\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgfjx22gr.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpgfjx22gr.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ / 2) + tri(n / 2) + tri(n / 2));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpgfjx22gr.java:34:\
    \ error: bad operand types for binary operator '+'\n        result.add(tri(n /\
    \ 2) + tri(n / 2) + tri(n / 2) + tri(n / 2));\n                              ^\n\
    \  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  ArrayList<Long> first = new ArrayList<>();\n            ArrayList<Long> second\
    \ = new ArrayList<>();\n            ArrayList<Long> third = new ArrayList<>();\n\
    \            first.add(0L);\n            second.add(1L);\n            third.add(2L);\n\
    \            ArrayList<Long> fourth = new ArrayList<>();\n            fourth.add(3L);\n\
    \            ArrayList<Long> fifth = new ArrayList<>();\n            fifth.add(4L);\n\
    \            ArrayList<Long> sixth = new ArrayList<>();\n            sixth.add(5L);\n\
    \            ArrayList<Long> seventh = new ArrayList<>();\n            seventh.add(6L);\n\
    \            ArrayList<Long> eighth = new ArrayList<>();\n            eighth.add(7L);\n\
    \            ArrayList<Long> ninth = new ArrayList<>();\n            ninth.add(8L);\n\
    \            ArrayList<Long> tenth = new ArrayList<>();\n            tenth.add(9L);\n\
    \            ArrayList<Long> eleventh = new ArrayList<>();\n            eleventh.add(10L);\n\
    \            ArrayList<Long> twelfth = new ArrayList<>();\n            twelfth.add(11L);\n\
    \            ArrayList<Long> thirteenth = new ArrayList<>();\n            thirteenth.add(12L);\n\
    \            ArrayList<Long> fourteenth = new ArrayList<>();\n            fourteenth.add(13L);\n\
    \            ArrayList<Long> fifteenth = new ArrayList<>();\n            fifteenth.add(14L);\n\
    \            ArrayList<Long> sixteenth = new ArrayList<>();\n            sixteenth.add(15L);\n\
    \            ArrayList<Long> seventeenth = new ArrayList<>();\n            seventeenth.add(16L);\n\
    \            ArrayList<Long> eighteenth = new ArrayList<>();\n            eighteenth.add(17L);\n\
    \            ArrayList<Long> nineteenth = new ArrayList<>();\n            nineteenth.add(18L);\n\
    \            ArrayList<Long> twentieth = new ArrayList<>();\n            twentieth.add(19L);\n\
    \            ArrayList<Long> twentyfirst = new ArrayList<>();\n            twentyfirst.add(20L);\n\
    \            ArrayList<Long> twentysecond = new ArrayList<>();\n            twentysecond.add(21L);\n\
    \            ArrayList<Long> twentythird = new ArrayList<>();\n            twentythird.add(22L);\n\
    \            ArrayList<Long> twentyfourth = new ArrayList<>();\n            \n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd3d7arhj.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 3;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 3;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq_yx6st3.java:126: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo9t3cp60.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2));\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiarex_4t.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmpiarex_4t.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpiarex_4t.java:34:\
    \ error: bad operand types for binary operator '+'\n        result.add(tri(n -\
    \ 1) + tri(n - 2));\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4g02ixbi.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp4g02ixbi.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjs44htls.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(3);\n\
    \        } else {\n            long tri1 = tri(n - 1);\n            long tri2\
    \ = tri(n - 2);\n            long tri3 = tri(n + 1);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n        }\n   \
    \     return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4x85he4x.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(3);\n                       ^\n/tmp/tmp4x85he4x.java:29:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri1 = tri(n - 1);\n                           ^\n/tmp/tmp4x85he4x.java:30:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri2 = tri(n - 2);\n                           ^\n/tmp/tmp4x85he4x.java:31:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         long tri3 = tri(n + 1);\n                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9h215kal.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp9h215kal.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuvo_ysyp.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpuvo_ysyp.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 0) {\n            result.add(0L);\n\
    \            result.add(1L);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0L);\n            return result;\n      \
    \  }\n        if (n == 2) {\n            result.add(0L);\n            result.add(1L);\n\
    \            result.add(2L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            ArrayList<Long> left = tri(n - 1);\n           \
    \ ArrayList<Long> right = tri(n - 2);\n            ArrayList<Long> result = new\
    \ ArrayList<>();\n            for (long i = 0; i < left.size(); i++) {\n     \
    \           result.add(left[i] + right[i]);\n            }\n            return\
    \ result;\n        } else {\n            ArrayList<Long> left = tri(n - 1);\n\
    \            ArrayList<Long> right = tri(n - 3);\n            ArrayList<Long>\
    \ result = new ArrayList<>();\n            for (long i = 0; i < left.size(); i++)\
    \ {\n                result.add(left[i] + right[i]);\n            }\n        \
    \    return result;\n        }\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6obrdb61.java:44: error: variable result is already defined in\
    \ method tri(long)\n            ArrayList<Long> result = new ArrayList<>();\n\
    \                            ^\n/tmp/tmp6obrdb61.java:46: error: incompatible\
    \ types: possible lossy conversion from long to int\n                result.add(left[i]\
    \ + right[i]);\n                                ^\n/tmp/tmp6obrdb61.java:46: error:\
    \ array required, but ArrayList<Long> found\n                result.add(left[i]\
    \ + right[i]);\n                               ^\n/tmp/tmp6obrdb61.java:46: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     result.add(left[i] + right[i]);\n                                      \
    \     ^\n/tmp/tmp6obrdb61.java:46: error: array required, but ArrayList<Long>\
    \ found\n                result.add(left[i] + right[i]);\n                   \
    \                       ^\n/tmp/tmp6obrdb61.java:52: error: variable result is\
    \ already defined in method tri(long)\n            ArrayList<Long> result = new\
    \ ArrayList<>();\n                            ^\n/tmp/tmp6obrdb61.java:54: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     result.add(left[i] + right[i]);\n                                ^\n/tmp/tmp6obrdb61.java:54:\
    \ error: array required, but ArrayList<Long> found\n                result.add(left[i]\
    \ + right[i]);\n                               ^\n/tmp/tmp6obrdb61.java:54: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     result.add(left[i] + right[i]);\n                                      \
    \     ^\n/tmp/tmp6obrdb61.java:54: error: array required, but ArrayList<Long>\
    \ found\n                result.add(left[i] + right[i]);\n                   \
    \                       ^\n10 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3hdr4o3f.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp3hdr4o3f.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmp3hdr4o3f.java:33:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n               \
    \                   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n    \
    \    long c = 3;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 3;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp09z9hpsq.java:126: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n <= 2) {\n            result.add(n);\n\
    \            return result;\n        }\n        long a = 1;\n        long b =\
    \ 1;\n        long c = 1;\n        long d = 1;\n        long sum = 0;\n      \
    \  for (int i = 3; i <= n; i++) {\n            sum = a + b + c + d;\n        \
    \    a = b;\n            b = c;\n            c = d;\n            d = sum;\n  \
    \          result.add(sum);\n        }\n        return result;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapqcpzh0.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (n == 1) {\n            result.add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqblfp9y.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmprqblfp9y.java:31:\
    \ error: bad operand types for binary operator '+'\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmprqblfp9y.java:33: error: bad operand\
    \ types for binary operator '+'\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) =\
    \ [1, 3, 2, 8]\n    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long a = 1;\n        long b = 1;\n    \
    \    long c = 1;\n        long d = 1;\n        long temp;\n        if (n <= 1)\
    \ {\n            result.add(1);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            temp = tri(n - 1);\n            for (long i\
    \ = 0; i < temp.size(); i++) {\n                result.add(temp.get(i));\n   \
    \         }\n            return result;\n        }\n        else {\n         \
    \   temp = tri(n - 1);\n            for (long i = 0; i < temp.size(); i++) {\n\
    \                result.add(temp.get(i));\n            }\n            result.add(tri(n\
    \ - 2));\n            return result;\n        }\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp15lacz0c.java:32: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(1);\n                       ^\n/tmp/tmp15lacz0c.java:36:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         temp = tri(n - 1);\n                      ^\n/tmp/tmp15lacz0c.java:37:\
    \ error: long cannot be dereferenced\n            for (long i = 0; i < temp.size();\
    \ i++) {\n                                     ^\n/tmp/tmp15lacz0c.java:38: error:\
    \ long cannot be dereferenced\n                result.add(temp.get(i));\n    \
    \                           ^\n/tmp/tmp15lacz0c.java:43: error: incompatible types:\
    \ ArrayList<Long> cannot be converted to long\n            temp = tri(n - 1);\n\
    \                      ^\n/tmp/tmp15lacz0c.java:44: error: long cannot be dereferenced\n\
    \            for (long i = 0; i < temp.size(); i++) {\n                      \
    \               ^\n/tmp/tmp15lacz0c.java:45: error: long cannot be dereferenced\n\
    \                result.add(temp.get(i));\n                               ^\n\
    /tmp/tmp15lacz0c.java:47: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to Long\n            result.add(tri(n - 2));\n                   \
    \       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n8 errors\n"
  exit_code: 1
  status: SyntaxError
