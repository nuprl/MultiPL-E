name: HumanEval_99_closest_integer
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long difference2 =\
    \ Long.MAX_VALUE;\n        long difference3 = Long.MAX_VALUE;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long difference5 = Long.MAX_VALUE;\n        long\
    \ difference6 = Long.MAX_VALUE;\n        long difference7 = Long.MAX_VALUE;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long difference9 = Long.MAX_VALUE;\n\
    \        long difference10 = Long.MAX_VALUE;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long difference12 = Long.MAX_VALUE;\n        long difference13 = Long.MAX_VALUE;\n\
    \        long difference14 = Long.MAX_VALUE;\n        long difference15 = Long.MAX_VALUE;\n\
    \        long difference16 = Long.MAX_VALUE;\n        long difference17 = Long.MAX_VALUE;\n\
    \        long difference18 = Long.MAX_VALUE;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long difference20 = Long.MAX_VALUE;\n        long difference21 = Long.MAX_VALUE;\n\
    \        long difference22 = Long.MAX_VALUE;\n        long difference23 = Long.MAX_VALUE;\n\
    \        long difference24 = Long.MAX_VALUE;\n        long difference25 = Long.MAX_VALUE;\n\
    \        long difference26 = Long.MAX_VALUE;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long difference28 = Long.MAX_VALUE;\n        long difference29 = Long.MAX_VALUE;\n\
    \        long difference30 = Long.MAX_VALUE;\n        long difference31 = Long.MAX_VALUE;\n\
    \        long difference32 = Long.MAX_VALUE;\n        long difference33 = Long.MAX_VALUE;\n\
    \        long difference34 = Long.MAX_VALUE;\n        long difference35 = Long.MAX_VALUE;\n\
    \        long difference36 = Long.MAX_VALUE;\n        long difference37 = Long.MAX_VALUE;\n\
    \        long difference38 = Long.MAX_VALUE;\n        long difference39 = Long.MAX_VALUE;\n\
    \        long difference40 = Long.MAX_VALUE;\n        long difference41 = Long.MAX_VALUE;\n\
    \        long difference42 = Long.MAX_VALUE;\n        long difference43 = Long.MAX_VALUE;\n\
    \        long difference44 = Long.MAX_VALUE;\n        long difference45 = Long.MAX_VALUE;\n\
    \        long difference46 = Long.MAX_VALUE;\n        long difference47 = Long.MAX_VALUE;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvve127bw.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpvve127bw.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff;\n     \
    \   long diffAbs;\n        long diffAbs2;\n        long diffAbs3;\n        long\
    \ diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n        long diffAbs7;\n\
    \        long diffAbs8;\n        long diffAbs9;\n        long diffAbs10;\n   \
    \     long diffAbs11;\n        long diffAbs12;\n        long diffAbs13;\n    \
    \    long diffAbs14;\n        long diffAbs15;\n        long diffAbs16;\n     \
    \   long diffAbs17;\n        long diffAbs18;\n        long diffAbs19;\n      \
    \  long diffAbs20;\n        long diffAbs21;\n        long diffAbs22;\n       \
    \ long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n        long\
    \ diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n        long diffAbs29;\n\
    \        long diffAbs30;\n        long diffAbs31;\n        long diffAbs32;\n \
    \       long diffAbs33;\n        long diffAbs34;\n        long diffAbs35;\n  \
    \      long diffAbs36;\n        long diffAbs37;\n        long diffAbs38;\n   \
    \     long diffAbs39;\n        long diffAbs40;\n        long diffAbs41;\n    \
    \    long diffAbs42;\n        long diffAbs43;\n        long diffAbs44;\n     \
    \   long diffAbs45;\n        long diffAbs46;\n        long diffAbs47;\n      \
    \  long diffAbs48;\n        long diffAbs49;\n        long diffAbs50;\n       \
    \ long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n        long\
    \ diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n        long diffAbs57;\n\
    \        long diffAbs58;\n        long diffAbs59;\n        long diffAbs60;\n \
    \       long diffAbs61;\n        long diffAbs62;\n        long diffAbs63;\n  \
    \      long diffAbs64;\n        long diff\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpem5vvhs4.java:90: error: ';' expected\n        long diff\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        long closest = 0;\n        long diff = 0;\n        long temp\
    \ = 0;\n        long diff2 = 0;\n        long temp2 = 0;\n        long diff3 =\
    \ 0;\n        long temp3 = 0;\n        long diff4 = 0;\n        long temp4 = 0;\n\
    \        long diff5 = 0;\n        long temp5 = 0;\n        long diff6 = 0;\n \
    \       long temp6 = 0;\n        long diff7 = 0;\n        long temp7 = 0;\n  \
    \      long diff8 = 0;\n        long temp8 = 0;\n        long diff9 = 0;\n   \
    \     long temp9 = 0;\n        long diff10 = 0;\n        long temp10 = 0;\n  \
    \      long diff11 = 0;\n        long temp11 = 0;\n        long diff12 = 0;\n\
    \        long temp12 = 0;\n        long diff13 = 0;\n        long temp13 = 0;\n\
    \        long diff14 = 0;\n        long temp14 = 0;\n        long diff15 = 0;\n\
    \        long temp15 = 0;\n        long diff16 = 0;\n        long temp16 = 0;\n\
    \        long diff17 = 0;\n        long temp17 = 0;\n        long diff18 = 0;\n\
    \        long temp18 = 0;\n        long diff19 = 0;\n        long temp19 = 0;\n\
    \        long diff20 = 0;\n        long temp20 = 0;\n        long diff21 = 0;\n\
    \        long temp21 = 0;\n        long diff22 = 0;\n        long temp22 = 0;\n\
    \        long diff23 = 0;\n        long temp23 = 0;\n        long diff24 = 0;\n\
    \        long temp24 = 0;\n        long diff25 = 0;\n        long temp25 = 0;\n\
    \        long diff26 = 0;\n        long temp26 = 0;\n        long diff27 = 0;\n\
    \        long temp27 = 0;\n        long diff28 = 0;\n        long temp28 = 0;\n\
    \        long diff29 = 0;\n        long temp29 = 0;\n        long diff30 = 0;\n\
    \        long temp30 = 0;\n        long diff31 = 0;\n        long temp31 = 0;\n\
    \        long diff32 = 0;\n        long temp32 = 0;\n        long diff33 = 0;\n\
    \        long temp33 = 0;\n        long diff34 = 0;\n        long temp34 = 0;\n\
    \        long diff35 = 0;\n        long temp35 = 0;\n        long diff36 = 0;\n\
    \        long temp36 = 0;\n        long diff37 = 0;\n        long temp37 = 0;\n\
    \        long diff38 = 0;\n        long temp38 = 0;\n        long diff39 = 0;\n\
    \        long temp39 = 0;\n        long diff40 = 0;\n        long temp40 = 0;\n\
    \        long diff41 = 0;\n        long temp41 = 0;\n        long diff42 = 0;\n\
    \        long temp42 = 0;\n        long diff43 = 0;\n        long \n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij3isgm9.java:110: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpij3isgm9.java:110: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5fg_6p7.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpi5fg_6p7.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference = Long.MAX_VALUE;\n        long difference2 = Long.MAX_VALUE;\n\
    \        long difference3 = Long.MAX_VALUE;\n        long difference4 = Long.MAX_VALUE;\n\
    \        long difference5 = Long.MAX_VALUE;\n        long difference6 = Long.MAX_VALUE;\n\
    \        long difference7 = Long.MAX_VALUE;\n        long difference8 = Long.MAX_VALUE;\n\
    \        long difference9 = Long.MAX_VALUE;\n        long difference10 = Long.MAX_VALUE;\n\
    \        long difference11 = Long.MAX_VALUE;\n        long difference12 = Long.MAX_VALUE;\n\
    \        long difference13 = Long.MAX_VALUE;\n        long difference14 = Long.MAX_VALUE;\n\
    \        long difference15 = Long.MAX_VALUE;\n        long difference16 = Long.MAX_VALUE;\n\
    \        long difference17 = Long.MAX_VALUE;\n        long difference18 = Long.MAX_VALUE;\n\
    \        long difference19 = Long.MAX_VALUE;\n        long difference20 = Long.MAX_VALUE;\n\
    \        long difference21 = Long.MAX_VALUE;\n        long difference22 = Long.MAX_VALUE;\n\
    \        long difference23 = Long.MAX_VALUE;\n        long difference24 = Long.MAX_VALUE;\n\
    \        long difference25 = Long.MAX_VALUE;\n        long difference26 = Long.MAX_VALUE;\n\
    \        long difference27 = Long.MAX_VALUE;\n        long difference28 = Long.MAX_VALUE;\n\
    \        long difference29 = Long.MAX_VALUE;\n        long difference30 = Long.MAX_VALUE;\n\
    \        long difference31 = Long.MAX_VALUE;\n        long difference32 = Long.MAX_VALUE;\n\
    \        long difference33 = Long.MAX_VALUE;\n        long difference34 = Long.MAX_VALUE;\n\
    \        long difference35 = Long.MAX_VALUE;\n        long difference36 = Long.MAX_VALUE;\n\
    \        long difference37 = Long.MAX_VALUE;\n        long difference38 = Long.MAX_VALUE;\n\
    \        long difference39 = Long.MAX_VALUE;\n        long difference40 = Long.MAX_VALUE;\n\
    \        long difference41 = Long.MAX_VALUE;\n        long difference42 = Long.MAX_VALUE;\n\
    \        long difference43 = Long.MAX_VALUE;\n        long difference44 = Long.MAX_VALUE;\n\
    \        long difference45 = Long.MAX_VALUE;\n        long difference46 = Long.MAX_VALUE;\n\
    \        long difference47 = Long.MAX_VALUE;\n        long \n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4bcmgdgf.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp4bcmgdgf.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d1, d2;\n        double diff;\n        double diff2;\n       \
    \ double diff3;\n        double diff4;\n        double diff5;\n        double\
    \ diff6;\n        double diff7;\n        double diff8;\n        double diff9;\n\
    \        double diff10;\n        double diff11;\n        double diff12;\n    \
    \    double diff13;\n        double diff14;\n        double diff15;\n        double\
    \ diff16;\n        double diff17;\n        double diff18;\n        double diff19;\n\
    \        double diff20;\n        double diff21;\n        double diff22;\n    \
    \    double diff23;\n        double diff24;\n        double diff25;\n        double\
    \ diff26;\n        double diff27;\n        double diff28;\n        double diff29;\n\
    \        double diff30;\n        double diff31;\n        double diff32;\n    \
    \    double diff33;\n        double diff34;\n        double diff35;\n        double\
    \ diff36;\n        double diff37;\n        double diff38;\n        double diff39;\n\
    \        double diff40;\n        double diff41;\n        double diff42;\n    \
    \    double diff43;\n        double diff44;\n        double diff45;\n        double\
    \ diff46;\n        double diff47;\n        double diff48;\n        double diff49;\n\
    \        double diff50;\n        double diff51;\n        double diff52;\n    \
    \    double diff53;\n        double diff54;\n        double diff55;\n        double\
    \ diff56;\n        double diff57;\n        double diff58;\n        double diff59;\n\
    \        double diff60;\n        double diff61;\n        double diff62;\n    \
    \    double diff63;\n        double diff64;\n        double diff65;\n        double\
    \ diff66;\n        double diff67;\n        double diff68;\n        double diff69;\n\
    \        double diff70;\n        double diff71;\n        double diff72;\n    \
    \    double diff73;\n        double diff74;\n        double diff75;\n        double\
    \ diff76;\n        double diff77;\n        double diff78;\n        double diff79;\n\
    \        double diff80;\n        double diff81;\n        double diff82;\n    \
    \    double diff83;\n        double diff84;\n        double diff85;\n        double\
    \ diff86;\n        double diff87\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq3hvb6l7.java:111: error: ';' expected\n        double diff87\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gx1n1dx.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp4gx1n1dx.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long temp = 0;\n        long temp2\
    \ = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 =\
    \ 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n\
    \        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n\
    \        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84 = 0;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89ncur3j.java:109: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long differencePrevious;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20ev7tbe.java:30: error: variable differencePrevious is already\
    \ defined in method closestInteger(String)\n        long differencePrevious =\
    \ 0;\n             ^\n/tmp/tmp20ev7tbe.java:31: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:32: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:33: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:34: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:35: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:36: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:37: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:38: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:39: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:40: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:41: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:42: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:43: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:44: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:45: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:46: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:47: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:48: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:49: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:50: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:51: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:52: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:53: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:54: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:55: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:56: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:57: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:58: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:59: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:60: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:61: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:62: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:63: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:64: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:65: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:66: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:67: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:68: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:69: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:70: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:71: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:72: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:73: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:74: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:75: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:76: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:77: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:78: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:79: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:80: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:81: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:82: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:83: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:84: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:85: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:86: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:87: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:88: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:89: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:90: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:91: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:92: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:93: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:94: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:95: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:96: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:97: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:98: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmp20ev7tbe.java:99: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n70 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxgl4g88y.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpxgl4g88y.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long difference2 =\
    \ Long.MAX_VALUE;\n        long difference3 = Long.MAX_VALUE;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long difference5 = Long.MAX_VALUE;\n        long\
    \ difference6 = Long.MAX_VALUE;\n        long difference7 = Long.MAX_VALUE;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long difference9 = Long.MAX_VALUE;\n\
    \        long difference10 = Long.MAX_VALUE;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long difference12 = Long.MAX_VALUE;\n        long difference13 = Long.MAX_VALUE;\n\
    \        long difference14 = Long.MAX_VALUE;\n        long difference15 = Long.MAX_VALUE;\n\
    \        long difference16 = Long.MAX_VALUE;\n        long difference17 = Long.MAX_VALUE;\n\
    \        long difference18 = Long.MAX_VALUE;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long difference20 = Long.MAX_VALUE;\n        long difference21 = Long.MAX_VALUE;\n\
    \        long difference22 = Long.MAX_VALUE;\n        long difference23 = Long.MAX_VALUE;\n\
    \        long difference24 = Long.MAX_VALUE;\n        long difference25 = Long.MAX_VALUE;\n\
    \        long difference26 = Long.MAX_VALUE;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long difference28 = Long.MAX_VALUE;\n        long difference29 = Long.MAX_VALUE;\n\
    \        long difference30 = Long.MAX_VALUE;\n        long difference31 = Long.MAX_VALUE;\n\
    \        long difference32 = Long.MAX_VALUE;\n        long difference33 = Long.MAX_VALUE;\n\
    \        long difference34 = Long.MAX_VALUE;\n        long difference35 = Long.MAX_VALUE;\n\
    \        long difference36 = Long.MAX_VALUE;\n        long difference37 = Long.MAX_VALUE;\n\
    \        long difference38 = Long.MAX_VALUE;\n        long difference39 = Long.MAX_VALUE;\n\
    \        long difference40 = Long.MAX_VALUE;\n        long difference41 = Long.MAX_VALUE;\n\
    \        long difference42 = Long.MAX_VALUE;\n        long difference43 = Long.MAX_VALUE;\n\
    \        long difference44 = Long.MAX_VALUE;\n        long difference45 = Long.MAX_VALUE;\n\
    \        long difference46 = Long.MAX_VALUE;\n        long difference47 = Long.MAX_VALUE;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3lljff5.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpk3lljff5.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long currentDifference;\n        long previousDifference;\n\
    \        long currentClosest;\n        long previousClosest;\n        long currentClosestDifference;\n\
    \        long previousClosestDifference;\n        long currentClosestClosest;\n\
    \        long previousClosestClosest;\n        long currentClosestClosestDifference;\n\
    \        long previousClosestClosestDifference;\n        long currentClosestClosestClosest;\n\
    \        long previousClosestClosestClosest;\n        long currentClosestClosestClosestDifference;\n\
    \        long previousClosestClosestClosestDifference;\n        long currentClosestClosestClosestClosest;\n\
    \        long previousClosestClosestClosestClosest;\n        long currentClosestClosestClosestClosestDifference;\n\
    \        long previousClosestClosestClosestClosestDifference;\n        long currentClosestClosestClosestClosestClosest;\n\
    \        long previousClosestClosestClosestClosestClosest;\n        long currentClosestClosestClosestClosestClosestDifference;\n\
    \        long previousClosestClosestClosestClosestClosestDifference;\n       \
    \ long currentClosestClosestClosestClosestClosestClosest;\n        long previousClosestClosestClosestClosestClosestClosest;\n\
    \        long currentClosestClosestClosestClosestClosestClosestDifference;\n \
    \       long previousClosestClosestClosestClosestClosestClosestDifference;\n \
    \       long currentClosestClosestClosestClosestClosestClosestClosest;\n     \
    \   long previousClosestClosestClosestClosestClosestClosestClosest;\n        long\
    \ currentClosestClosestClosestClosestClosestClosestDifference;\n        long previousClosestClosestClosestClosestClosestClosestDifference;\n\
    \        long currentClosestClosestClosestClosestClosestClosestClosestDifference;\n\
    \        long previousClosestClosestClosestClosestClosestClosestDifference;\n\
    \        long currentClosestClosestClosestClosestClosestClosestClosestDifference;\n\
    \        long previousClosestClosestClosestClosestClosestDifference;\n       \
    \ long currentClosestClosestClosestClosestDifference;\n        long previousClosestClosestClosestDifference;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpasb3wcy0.java:55: error: variable currentClosestClosestClosestClosestClosestClosestDifference\
    \ is already defined in method closestInteger(String)\n        long currentClosestClosestClosestClosestClosestClosestDifference;\n\
    \             ^\n/tmp/tmpasb3wcy0.java:56: error: variable previousClosestClosestClosestClosestClosestClosestDifference\
    \ is already defined in method closestInteger(String)\n        long previousClosestClosestClosestClosestClosestClosestDifference;\n\
    \             ^\n/tmp/tmpasb3wcy0.java:58: error: variable previousClosestClosestClosestClosestClosestClosestDifference\
    \ is already defined in method closestInteger(String)\n        long previousClosestClosestClosestClosestClosestClosestDifference;\n\
    \             ^\n/tmp/tmpasb3wcy0.java:59: error: variable currentClosestClosestClosestClosestClosestClosestClosestDifference\
    \ is already defined in method closestInteger(String)\n        long currentClosestClosestClosestClosestClosestClosestClosestDifference;\n\
    \             ^\n/tmp/tmpasb3wcy0.java:60: error: variable previousClosestClosestClosestClosestClosestDifference\
    \ is already defined in method closestInteger(String)\n        long previousClosestClosestClosestClosestClosestDifference;\n\
    \             ^\n/tmp/tmpasb3wcy0.java:61: error: variable currentClosestClosestClosestClosestDifference\
    \ is already defined in method closestInteger(String)\n        long currentClosestClosestClosestClosestDifference;\n\
    \             ^\n/tmp/tmpasb3wcy0.java:62: error: variable previousClosestClosestClosestDifference\
    \ is already defined in method closestInteger(String)\n        long previousClosestClosestClosestDifference;\n\
    \             ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference;\n        long difference2;\n        long difference3;\n\
    \        long difference4;\n        long difference5;\n        long difference6;\n\
    \        long difference7;\n        long difference8;\n        long difference9;\n\
    \        long difference10;\n        long difference11;\n        long difference12;\n\
    \        long difference13;\n        long difference14;\n        long difference15;\n\
    \        long difference16;\n        long difference17;\n        long difference18;\n\
    \        long difference19;\n        long difference20;\n        long difference21;\n\
    \        long difference22;\n        long difference23;\n        long difference24;\n\
    \        long difference25;\n        long difference26;\n        long difference27;\n\
    \        long difference28;\n        long difference29;\n        long difference30;\n\
    \        long difference31;\n        long difference32;\n        long difference33;\n\
    \        long difference34;\n        long difference35;\n        long difference36;\n\
    \        long difference37;\n        long difference38;\n        long difference39;\n\
    \        long difference40;\n        long difference41;\n        long difference42;\n\
    \        long difference43;\n        long difference44;\n        long difference45;\n\
    \        long difference46;\n        long difference47;\n        long difference48;\n\
    \        long difference49;\n        long difference50;\n        long difference51;\n\
    \        long difference52;\n        long difference53;\n        long difference54;\n\
    \        long difference55;\n        long difference56;\n        long difference57;\n\
    \        long difference58;\n        long difference59;\n        long difference60;\n\
    \        long difference61;\n        long difference62;\n        long difference63;\n\
    \        long difference64;\n        long difference65;\n        long difference66;\n\
    \        long difference67;\n        long difference68;\n        long difference69;\n\
    \        long difference70;\n        long difference71;\n        long difference72;\n\
    \        long difference73;\n        long difference74;\n        long difference75;\n\
    \        long difference76;\n        long difference77;\n        long difference78;\n\
    \        long difference79;\n        long difference80;\n        long difference81;\n\
    \        long difference82;\n        long difference83;\n        long difference84;\n\
    \        long difference85;\n        long difference86;\n        long difference87;\n\
    \        long difference88;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpam6bg8jn.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk5zybpni.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpk5zybpni.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = 0;\n        long diff;\n        long diffAbs;\n\
    \        long absDiff;\n        long absDiffAbs;\n        long absDiffAbs2;\n\
    \        long absDiffAbs3;\n        long absDiffAbs4;\n        long absDiffAbs5;\n\
    \        long absDiffAbs6;\n        long absDiffAbs7;\n        long absDiffAbs8;\n\
    \        long absDiffAbs9;\n        long absDiffAbs10;\n        long absDiffAbs11;\n\
    \        long absDiffAbs12;\n        long absDiffAbs13;\n        long absDiffAbs14;\n\
    \        long absDiffAbs15;\n        long absDiffAbs16;\n        long absDiffAbs17;\n\
    \        long absDiffAbs18;\n        long absDiffAbs19;\n        long absDiffAbs20;\n\
    \        long absDiffAbs21;\n        long absDiffAbs22;\n        long absDiffAbs23;\n\
    \        long absDiffAbs24;\n        long absDiffAbs25;\n        long absDiffAbs26;\n\
    \        long absDiffAbs27;\n        long absDiffAbs28;\n        long absDiffAbs29;\n\
    \        long absDiffAbs30;\n        long absDiffAbs31;\n        long absDiffAbs32;\n\
    \        long absDiffAbs33;\n        long absDiffAbs34;\n        long absDiffAbs35;\n\
    \        long absDiffAbs36;\n        long absDiffAbs37;\n        long absDiffAbs38;\n\
    \        long absDiffAbs39;\n        long absDiffAbs40;\n        long absDiffAbs41;\n\
    \        long absDiffAbs42;\n        long absDiffAbs43;\n        long absDiffAbs44;\n\
    \        long absDiffAbs45;\n        long absDiffAbs46;\n        long absDiffAbs47;\n\
    \        long absDiffAbs48;\n        long absDiffAbs49;\n        long absDiffAbs50;\n\
    \        long absDiffAbs51;\n        long absDiffAbs52;\n        long absDiffAbs53;\n\
    \        long absDiffAbs54;\n        long absDiffAbs55;\n        long absDiffAbs56;\n\
    \        long abs\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbn4du4hf.java:84: error: ';' expected\n        long abs\n     \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        double\
    \ closestDouble4 = Math.abs(closestDouble3 - d);\n        double closestDouble5\
    \ = Math.abs(closestDouble4 - d);\n        double closestDouble6 = Math.abs(closestDouble5\
    \ - d);\n        double closestDouble7 = Math.abs(closestDouble6 - d);\n     \
    \   double closestDouble8 = Math.abs(closestDouble7 - d);\n        double closestDouble9\
    \ = Math.abs(closestDouble8 - d);\n        double closestDouble10 = Math.abs(closestDouble9\
    \ - d);\n        double closestDouble11 = Math.abs(closestDouble10 - d);\n   \
    \     double closestDouble12 = Math.abs(closestDouble11 - d);\n        double\
    \ closestDouble13 = Math.abs(closestDouble12 - d);\n        double closestDouble14\
    \ = Math.abs(closestDouble13 - d);\n        double closestDouble15 = Math.abs(closestDouble14\
    \ - d);\n        double closestDouble16 = Math.abs(closestDouble15 - d);\n   \
    \     double closestDouble17 = Math.abs(closestDouble16 - d);\n        double\
    \ closestDouble18 = Math.abs(closestDouble17 - d);\n        double closestDouble19\
    \ = Math.abs(closestDouble18 - d);\n        double closestDouble20 = Math.abs(closestDouble19\
    \ - d);\n        double closestDouble21 = Math.abs(closestDouble20 - d);\n   \
    \     double closestDouble22 = Math.abs(closestDouble21 - d);\n        double\
    \ closestDouble23 = Math.abs(closestDouble22 - d);\n        double closestDouble24\
    \ = Math.abs(closestDouble23 - d);\n        double closestDouble25 = Math.abs(closestDouble24\
    \ - d);\n        double closestDouble26 = Math.abs(closestDouble25 - d);\n   \
    \     double closestDouble27 = Math.abs(closestDouble26 - d);\n        double\
    \ closestDouble28 = Math.abs(closestDouble27 - d);\n        double closestDouble29\
    \ = Math.abs(closestDouble28 - d);\n        double closestDouble30 = Math.abs(closestDouble29\
    \ - d);\n        double closestDouble31 = Math.abs(closestDouble30 - d);\n   \
    \     double closestDouble32 = Math.abs(closestDouble31 - d);\n        double\
    \ closestDouble33 = Math.abs(closestDouble32 - d);\n        double closestDouble34\
    \ = Math.abs(closestDouble33 - d);\n        double closestDouble35 = Math.abs(closestDouble34\
    \ - d);\n        double closestDouble36 = Math.abs(closestDouble35 - d);\n   \
    \     double closestDouble37 = Math.abs(closestDouble36 - d);\n        double\
    \ closestDouble38 = Math.abs(closestDouble37 - d);\n        double closestDouble39\
    \ = Math.abs(closestDouble38 - d);\n        double closestDouble40\n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphf9_jnug.java:64: error: ';' expected\n        double closestDouble40\n\
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ difference2 = 0;\n        long current2 = 0;\n        long difference3 = 0;\n\
    \        long current3 = 0;\n        long difference4 = 0;\n        long current4\
    \ = 0;\n        long difference5 = 0;\n        long current5 = 0;\n        long\
    \ difference6 = 0;\n        long current6 = 0;\n        long difference7 = 0;\n\
    \        long current7 = 0;\n        long difference8 = 0;\n        long current8\
    \ = 0;\n        long difference9 = 0;\n        long current9 = 0;\n        long\
    \ difference10 = 0;\n        long current10 = 0;\n        long difference11 =\
    \ 0;\n        long current11 = 0;\n        long difference12 = 0;\n        long\
    \ current12 = 0;\n        long difference13 = 0;\n        long current13 = 0;\n\
    \        long difference14 = 0;\n        long current14 = 0;\n        long difference15\
    \ = 0;\n        long current15 = 0;\n        long difference16 = 0;\n        long\
    \ current16 = 0;\n        long difference17 = 0;\n        long current17 = 0;\n\
    \        long difference18 = 0;\n        long current18 = 0;\n        long difference19\
    \ = 0;\n        long current19 = 0;\n        long difference20 = 0;\n        long\
    \ current20 = 0;\n        long difference21 = 0;\n        long current21 = 0;\n\
    \        long difference22 = 0;\n        long current22 = 0;\n        long difference23\
    \ = 0;\n        long current23 = 0;\n        long difference24 = 0;\n        long\
    \ current24 = 0;\n        long difference25 = 0;\n        long current25 = 0;\n\
    \        long difference26 = 0;\n        long current26 = 0;\n        long difference27\
    \ = 0;\n        long current27 = 0;\n        long difference28 = 0;\n        long\
    \ current28 = 0;\n        long difference29 = 0;\n        long current29 = 0;\n\
    \        long difference30 = 0;\n        long current30 = 0;\n        long difference31\
    \ = 0;\n        long current31 = 0;\n        long difference32 = 0;\n        long\
    \ current32 = 0;\n        long difference33 = 0;\n        long current33 = 0;\n\
    \        long difference34 = 0;\n        long current34 = 0;\n        long difference35\
    \ = 0;\n        long current35 = 0;\n        long difference36 = 0;\n        long\
    \ current36 = 0;\n        long difference37 = 0;\n        long current37 = 0;\n\
    \        long difference38 = 0;\n        long current38 = 0;\n        long difference39\
    \ = 0;\n        long current39 = 0;\n        long difference40 = 0;\n        long\
    \ current40 = 0;\n        long difference41 = 0;\n        long current41 = 0;\n\
    \        long difference42 = 0;\n        long current42 = 0;\n        long difference43\
    \ = 0;\n        long current43 = 0;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbr0b0oac.java:111: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff = 0;\n \
    \       long diffAbs = 0;\n        long absDiff = 0;\n        long absDiffAbs\
    \ = 0;\n        long absDiffAbsMinus1 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus1\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus2 = Long.MAX_VALUE;\n \
    \       long absDiffAbsMinus1Minus3 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus4\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus5 = Long.MAX_VALUE;\n \
    \       long absDiffAbsMinus1Minus6 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus7\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus8 = Long.MAX_VALUE;\n \
    \       long absDiffAbsMinus1Minus9 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus10\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus11 = Long.MAX_VALUE;\n\
    \        long absDiffAbsMinus1Minus12 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus13\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus14 = Long.MAX_VALUE;\n\
    \        long absDiffAbsMinus1Minus15 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus16\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus17 = Long.MAX_VALUE;\n\
    \        long absDiffAbsMinus1Minus18 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus19\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus20 = Long.MAX_VALUE;\n\
    \        long absDiffAbsMinus1Minus21 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus22\
    \ = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus23 = Long.MAX_VALUE;\n\
    \        long absDiffAbsMinus1Minus24 = Long.MAX_VALUE;\n        long absDiffAbsMinus1Minus25\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk6kuzt2p.java:55: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppv2tu1mg.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmppv2tu1mg.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference = Long.MAX_VALUE;\n        long current;\n        long\
    \ previous;\n        long differencePrevious;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differencePrevious3\
    \ = 0;\n        long differencePrevious = 0;\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxjp2kxxf.java:30: error: variable differencePrevious is already\
    \ defined in method closestInteger(String)\n        long differencePrevious =\
    \ 0;\n             ^\n/tmp/tmpxjp2kxxf.java:31: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:32: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:33: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:34: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:35: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:36: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:37: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:38: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:39: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:40: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:41: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:42: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:43: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:44: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:45: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:46: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:47: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:48: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:49: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:50: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:51: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:52: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:53: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:54: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:55: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:56: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:57: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:58: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:59: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:60: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:61: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:62: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:63: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:64: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:65: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:66: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:67: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:68: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:69: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:70: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:71: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:72: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:73: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:74: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:75: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:76: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:77: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:78: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:79: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:80: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:81: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:82: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:83: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:84: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:85: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:86: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:87: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:88: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:89: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:90: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:91: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:92: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:93: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:94: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:95: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:96: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:97: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:98: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpxjp2kxxf.java:99: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n70 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ d;\n        double closestDouble2 = d;\n        double closestDouble3 = d;\n\
    \        double closestDouble4 = d;\n        double closestDouble5 = d;\n    \
    \    double closestDouble6 = d;\n        double closestDouble7 = d;\n        double\
    \ closestDouble8 = d;\n        double closestDouble9 = d;\n        double closestDouble10\
    \ = d;\n        double closestDouble11 = d;\n        double closestDouble12 =\
    \ d;\n        double closestDouble13 = d;\n        double closestDouble14 = d;\n\
    \        double closestDouble15 = d;\n        double closestDouble16 = d;\n  \
    \      double closestDouble17 = d;\n        double closestDouble18 = d;\n    \
    \    double closestDouble19 = d;\n        double closestDouble20 = d;\n      \
    \  double closestDouble21 = d;\n        double closestDouble22 = d;\n        double\
    \ closestDouble23 = d;\n        double closestDouble24 = d;\n        double closestDouble25\
    \ = d;\n        double closestDouble26 = d;\n        double closestDouble27 =\
    \ d;\n        double closestDouble28 = d;\n        double closestDouble29 = d;\n\
    \        double closestDouble30 = d;\n        double closestDouble31 = d;\n  \
    \      double closestDouble32 = d;\n        double closestDouble33 = d;\n    \
    \    double closestDouble34 = d;\n        double closestDouble35 = d;\n      \
    \  double closestDouble36 = d;\n        double closestDouble37 = d;\n        double\
    \ closestDouble38 = d;\n        double closestDouble39 = d;\n        double closestDouble40\
    \ = d;\n        double closestDouble41 = d;\n        double closestDouble42 =\
    \ d;\n        double closestDouble43 = d;\n        double closestDouble44 = d;\n\
    \        double closestDouble45 = d;\n        double closestDouble46 = d;\n  \
    \      double closestDouble47 = d;\n        double closestDouble48 = d;\n    \
    \    double closestDouble49 = d;\n        double closestDouble50 = d;\n      \
    \  double closestDouble51 = d;\n        double closestDouble52 = d;\n        double\
    \ closestDouble53 = d;\n        double closestDouble54 = d;\n        double closestDouble55\
    \ = d;\n        double closestDouble56 = d;\n        double closestDouble57 =\
    \ d;\n        double closestDouble58 = d;\n        double closestDouble59 = d;\n\
    \        double closestDouble60 = d;\n        double closestDouble61 = d;\n  \
    \      double closestDouble62 = d;\n        double closestDouble63 = d;\n    \
    \    double closestDouble64 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp80ex6qy2.java:89: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2jqhun73.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp2jqhun73.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double input;\n        double diff;\n        double diff2;\n        double\
    \ diff3;\n        double diff4;\n        double diff5;\n        double diff6;\n\
    \        double diff7;\n        double diff8;\n        double diff9;\n       \
    \ double diff10;\n        double diff11;\n        double diff12;\n        double\
    \ diff13;\n        double diff14;\n        double diff15;\n        double diff16;\n\
    \        double diff17;\n        double diff18;\n        double diff19;\n    \
    \    double diff20;\n        double diff21;\n        double diff22;\n        double\
    \ diff23;\n        double diff24;\n        double diff25;\n        double diff26;\n\
    \        double diff27;\n        double diff28;\n        double diff29;\n    \
    \    double diff30;\n        double diff31;\n        double diff32;\n        double\
    \ diff33;\n        double diff34;\n        double diff35;\n        double diff36;\n\
    \        double diff37;\n        double diff38;\n        double diff39;\n    \
    \    double diff40;\n        double diff41;\n        double diff42;\n        double\
    \ diff43;\n        double diff44;\n        double diff45;\n        double diff46;\n\
    \        double diff47;\n        double diff48;\n        double diff49;\n    \
    \    double diff50;\n        double diff51;\n        double diff52;\n        double\
    \ diff53;\n        double diff54;\n        double diff55;\n        double diff56;\n\
    \        double diff57;\n        double diff58;\n        double diff59;\n    \
    \    double diff60;\n        double diff61;\n        double diff62;\n        double\
    \ diff63;\n        double diff64;\n        double diff65;\n        double diff66;\n\
    \        double diff67;\n        double diff68;\n        double diff69;\n    \
    \    double diff70;\n        double diff71;\n        double diff72;\n        double\
    \ diff73;\n        double diff74;\n        double diff75;\n        double diff76;\n\
    \        double diff77;\n        double diff78;\n        double diff79;\n    \
    \    double diff80;\n        double diff81;\n        double diff82;\n        double\
    \ diff83;\n        double diff84;\n        double diff85;\n        double diff86;\n\
    \        double diff87;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3227aj3j.java:113: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiklzvd59.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference;\n        long difference2;\n        long difference3;\n\
    \        long difference4;\n        long difference5;\n        long difference6;\n\
    \        long difference7;\n        long difference8;\n        long difference9;\n\
    \        long difference10;\n        long difference11;\n        long difference12;\n\
    \        long difference13;\n        long difference14;\n        long difference15;\n\
    \        long difference16;\n        long difference17;\n        long difference18;\n\
    \        long difference19;\n        long difference20;\n        long difference21;\n\
    \        long difference22;\n        long difference23;\n        long difference24;\n\
    \        long difference25;\n        long difference26;\n        long difference27;\n\
    \        long difference28;\n        long difference29;\n        long difference30;\n\
    \        long difference31;\n        long difference32;\n        long difference33;\n\
    \        long difference34;\n        long difference35;\n        long difference36;\n\
    \        long difference37;\n        long difference38;\n        long difference39;\n\
    \        long difference40;\n        long difference41;\n        long difference42;\n\
    \        long difference43;\n        long difference44;\n        long difference45;\n\
    \        long difference46;\n        long difference47;\n        long difference48;\n\
    \        long difference49;\n        long difference50;\n        long difference51;\n\
    \        long difference52;\n        long difference53;\n        long difference54;\n\
    \        long difference55;\n        long difference56;\n        long difference57;\n\
    \        long difference58;\n        long difference59;\n        long difference60;\n\
    \        long difference61;\n        long difference62;\n        long difference63;\n\
    \        long difference64;\n        long difference65;\n        long difference66;\n\
    \        long difference67;\n        long difference68;\n        long difference69;\n\
    \        long difference70;\n        long difference71;\n        long difference72;\n\
    \        long difference73;\n        long difference74;\n        long difference75;\n\
    \        long difference76;\n        long difference77;\n        long difference78;\n\
    \        long difference79;\n        long difference80;\n        long difference81;\n\
    \        long difference82;\n        long difference83;\n        long difference84;\n\
    \        long difference85;\n        long difference86;\n        long difference87;\n\
    \        long difference88;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gxkjd0v.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long diff;\n        long diffAbs;\n        long\
    \ diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAbsCurrent;\n\
    \        long diffAbsPrevious;\n        long diffAbsCurrent;\n        long diffAbsPrevious;\n\
    \        long diffAbsCurrent;\n        long diffAbsPrevious;\n        long diffAb\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppllhua7g.java:88: error: ';' expected\n        long diffAb\n  \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5dh7fbk.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpq5dh7fbk.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv16cgmvy.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Double.MAX_VALUE;\n        double closestDouble2 = Double.MAX_VALUE;\n     \
    \   double closestDouble3 = Double.MAX_VALUE;\n        double closestDouble4 =\
    \ Double.MAX_VALUE;\n        double closestDouble5 = Double.MAX_VALUE;\n     \
    \   double closestDouble6 = Double.MAX_VALUE;\n        double closestDouble7 =\
    \ Double.MAX_VALUE;\n        double closestDouble8 = Double.MAX_VALUE;\n     \
    \   double closestDouble9 = Double.MAX_VALUE;\n        double closestDouble10\
    \ = Double.MAX_VALUE;\n        double closestDouble11 = Double.MAX_VALUE;\n  \
    \      double closestDouble12 = Double.MAX_VALUE;\n        double closestDouble13\
    \ = Double.MAX_VALUE;\n        double closestDouble14 = Double.MAX_VALUE;\n  \
    \      double closestDouble15 = Double.MAX_VALUE;\n        double closestDouble16\
    \ = Double.MAX_VALUE;\n        double closestDouble17 = Double.MAX_VALUE;\n  \
    \      double closestDouble18 = Double.MAX_VALUE;\n        double closestDouble19\
    \ = Double.MAX_VALUE;\n        double closestDouble20 = Double.MAX_VALUE;\n  \
    \      double closestDouble21 = Double.MAX_VALUE;\n        double closestDouble22\
    \ = Double.MAX_VALUE;\n        double closestDouble23 = Double.MAX_VALUE;\n  \
    \      double closestDouble24 = Double.MAX_VALUE;\n        double closestDouble25\
    \ = Double.MAX_VALUE;\n        double closestDouble26 = Double.MAX_VALUE;\n  \
    \      double closestDouble27 = Double.MAX_VALUE;\n        double closestDouble28\
    \ = Double.MAX_VALUE;\n        double closestDouble29 = Double.MAX_VALUE;\n  \
    \      double closestDouble30 = Double.MAX_VALUE;\n        double closestDouble31\
    \ = Double.MAX_VALUE;\n        double closestDouble32 = Double.MAX_VALUE;\n  \
    \      double closestDouble33 = Double.MAX_VALUE;\n        double closestDouble34\
    \ = Double.MAX_VALUE;\n        double closestDouble35 = Double.MAX_VALUE;\n  \
    \      double closestDouble36 = Double.MAX_VALUE;\n        double closestDouble37\
    \ = Double.MAX_VALUE;\n        double closestDouble38 = Double.MAX_VALUE;\n  \
    \      double closestDouble39 = Double.MAX_VALUE;\n        double closestDouble40\
    \ = Double.MAX_VALUE;\n        double closestDouble41 = Double.MAX_VALUE;\n  \
    \      double closestDouble42 = Double.MAX_VALUE;\n        double closestDouble43\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5mk1ngiz.java:68: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDistance = Long.MAX_VALUE;\n        double\
    \ closestDistanceDouble = Double.MAX_VALUE;\n        double closestDistanceDouble2\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble3 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble4 = Double.MAX_VALUE;\n        double closestDistanceDouble5\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble6 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble7 = Double.MAX_VALUE;\n        double closestDistanceDouble8\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble9 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble10 = Double.MAX_VALUE;\n        double closestDistanceDouble11\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble12 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble13 = Double.MAX_VALUE;\n        double closestDistanceDouble14\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble15 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble16 = Double.MAX_VALUE;\n        double closestDistanceDouble17\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble18 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble19 = Double.MAX_VALUE;\n        double closestDistanceDouble20\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble21 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble22 = Double.MAX_VALUE;\n        double closestDistanceDouble23\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble24 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble25 = Double.MAX_VALUE;\n        double closestDistanceDouble26\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble27 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble28 = Double.MAX_VALUE;\n        double closestDistanceDouble29\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble30 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble31 = Double.MAX_VALUE;\n        double closestDistanceDouble32\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble33 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble34 = Double.MAX_VALUE;\n        double closestDistanceDouble35\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble36 = Double.MAX_VALUE;\n\
    \        double closestDistanceDouble37 = Double.MAX_VALUE;\n        double closestDistanceDouble38\
    \ = Double.MAX_VALUE;\n        double closestDistanceDouble39 = Double\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphj024tf3.java:63: error: ';' expected\n        double closestDistanceDouble39\
    \ = Double\n                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long temp = 0;\n        long difference2 = 0;\n     \
    \   long current2 = 0;\n        long previous2 = 0;\n        long temp2 = 0;\n\
    \        long difference3 = 0;\n        long current3 = 0;\n        long previous3\
    \ = 0;\n        long temp3 = 0;\n        long difference4 = 0;\n        long current4\
    \ = 0;\n        long previous4 = 0;\n        long temp4 = 0;\n        long difference5\
    \ = 0;\n        long current5 = 0;\n        long previous5 = 0;\n        long\
    \ temp5 = 0;\n        long difference6 = 0;\n        long current6 = 0;\n    \
    \    long previous6 = 0;\n        long temp6 = 0;\n        long difference7 =\
    \ 0;\n        long current7 = 0;\n        long previous7 = 0;\n        long temp7\
    \ = 0;\n        long difference8 = 0;\n        long current8 = 0;\n        long\
    \ previous8 = 0;\n        long temp8 = 0;\n        long difference9 = 0;\n   \
    \     long current9 = 0;\n        long previous9 = 0;\n        long temp9 = 0;\n\
    \        long difference10 = 0;\n        long current10 = 0;\n        long previous10\
    \ = 0;\n        long temp10 = 0;\n        long difference11 = 0;\n        long\
    \ current11 = 0;\n        long previous11 = 0;\n        long temp11 = 0;\n   \
    \     long difference12 = 0;\n        long current12 = 0;\n        long previous12\
    \ = 0;\n        long temp12 = 0;\n        long difference13 = 0;\n        long\
    \ current13 = 0;\n        long previous13 = 0;\n        long temp13 = 0;\n   \
    \     long difference14 = 0;\n        long current14 = 0;\n        long previous14\
    \ = 0;\n        long temp14 = 0;\n        long difference15 = 0;\n        long\
    \ current15 = 0;\n        long previous15 = 0;\n        long temp15 = 0;\n   \
    \     long difference16 = 0;\n        long current16 = 0;\n        long previous16\
    \ = 0;\n        long temp16 = 0;\n        long difference17 = 0;\n        long\
    \ current17 = 0;\n        long previous17 = 0;\n        long temp17 = 0;\n   \
    \     long difference18 = 0;\n        long current18 = 0;\n        long previous18\
    \ = 0;\n        long temp18 = 0;\n        long difference19 = 0;\n        long\
    \ current19 = 0;\n        long previous19 = 0;\n        long temp19 = 0;\n   \
    \     long difference20 = 0;\n        long current20 = 0;\n        long previous20\
    \ = 0;\n        long temp20 = 0;\n        long difference21 = 0;\n        long\
    \ current21 = 0;\n        long previous21 = 0;\n        long temp21 = 0;\n   \
    \     long difference22 = 0;\n        long current22 = 0;\n        long previous22\
    \ = 0;\n        long temp22 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbiidqxpy.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn49oew9m.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpn49oew9m.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzw9z8agp.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpzw9z8agp.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long difference2 = 0;\n        long current2 = 0;\n \
    \       long previous2 = 0;\n        long difference3 = 0;\n        long current3\
    \ = 0;\n        long previous3 = 0;\n        long difference4 = 0;\n        long\
    \ current4 = 0;\n        long previous4 = 0;\n        long difference5 = 0;\n\
    \        long current5 = 0;\n        long previous5 = 0;\n        long difference6\
    \ = 0;\n        long current6 = 0;\n        long previous6 = 0;\n        long\
    \ difference7 = 0;\n        long current7 = 0;\n        long previous7 = 0;\n\
    \        long difference8 = 0;\n        long current8 = 0;\n        long previous8\
    \ = 0;\n        long difference9 = 0;\n        long current9 = 0;\n        long\
    \ previous9 = 0;\n        long difference10 = 0;\n        long current10 = 0;\n\
    \        long previous10 = 0;\n        long difference11 = 0;\n        long current11\
    \ = 0;\n        long previous11 = 0;\n        long difference12 = 0;\n       \
    \ long current12 = 0;\n        long previous12 = 0;\n        long difference13\
    \ = 0;\n        long current13 = 0;\n        long previous13 = 0;\n        long\
    \ difference14 = 0;\n        long current14 = 0;\n        long previous14 = 0;\n\
    \        long difference15 = 0;\n        long current15 = 0;\n        long previous15\
    \ = 0;\n        long difference16 = 0;\n        long current16 = 0;\n        long\
    \ previous16 = 0;\n        long difference17 = 0;\n        long current17 = 0;\n\
    \        long previous17 = 0;\n        long difference18 = 0;\n        long current18\
    \ = 0;\n        long previous18 = 0;\n        long difference19 = 0;\n       \
    \ long current19 = 0;\n        long previous19 = 0;\n        long difference20\
    \ = 0;\n        long current20 = 0;\n        long previous20 = 0;\n        long\
    \ difference21 = 0;\n        long current21 = 0;\n        long previous21 = 0;\n\
    \        long difference22 = 0;\n        long current22 = 0;\n        long previous22\
    \ = 0;\n        long difference23 = 0;\n        long current23 = 0;\n        long\
    \ previous23 = 0;\n        long difference24 = 0;\n        long current24 = 0;\n\
    \        long previous24 = 0;\n        long difference25 = 0;\n        long current25\
    \ = 0;\n        long previous25 = 0;\n        long difference26 = 0;\n       \
    \ long current26 = 0;\n        long previous26 = 0;\n        long difference27\
    \ = 0;\n        long current27 = 0;\n        long previous27 = 0;\n        long\
    \ difference28 = 0;\n        long current28 = 0;\n        long previous28 = 0;\n\
    \        long difference29 = 0;\n        long current29 = 0;\n        long previous29\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3c6pmk6g.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long difference2;\n        long current2;\n        long difference3;\n \
    \       long current3;\n        long difference4;\n        long current4;\n  \
    \      long difference5;\n        long current5;\n        long difference6;\n\
    \        long current6;\n        long difference7;\n        long current7;\n \
    \       long difference8;\n        long current8;\n        long difference9;\n\
    \        long current9;\n        long difference10;\n        long current10;\n\
    \        long difference11;\n        long current11;\n        long difference12;\n\
    \        long current12;\n        long difference13;\n        long current13;\n\
    \        long difference14;\n        long current14;\n        long difference15;\n\
    \        long current15;\n        long difference16;\n        long current16;\n\
    \        long difference17;\n        long current17;\n        long difference18;\n\
    \        long current18;\n        long difference19;\n        long current19;\n\
    \        long difference20;\n        long current20;\n        long difference21;\n\
    \        long current21;\n        long difference22;\n        long current22;\n\
    \        long difference23;\n        long current23;\n        long difference24;\n\
    \        long current24;\n        long difference25;\n        long current25;\n\
    \        long difference26;\n        long current26;\n        long difference27;\n\
    \        long current27;\n        long difference28;\n        long current28;\n\
    \        long difference29;\n        long current29;\n        long difference30;\n\
    \        long current30;\n        long difference31;\n        long current31;\n\
    \        long difference32;\n        long current32;\n        long difference33;\n\
    \        long current33;\n        long difference34;\n        long current34;\n\
    \        long difference35;\n        long current35;\n        long difference36;\n\
    \        long current36;\n        long difference37;\n        long current37;\n\
    \        long difference38;\n        long current38;\n        long difference39;\n\
    \        long current39;\n        long difference40;\n        long current40;\n\
    \        long difference41;\n        long current41;\n        long difference42;\n\
    \        long current42;\n        long difference43;\n        long current43;\n\
    \        long difference44;\n        long current44;\n        long difference45;\n\
    \        long current45;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4l2shdhr.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpczc0e6ge.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpczc0e6ge.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff;\n     \
    \   long diffAbs;\n        long absDiff;\n        long absDiffAbs;\n        long\
    \ absDiffAbs2;\n        long absDiffAbs3;\n        long absDiffAbs4;\n       \
    \ long absDiffAbs5;\n        long absDiffAbs6;\n        long absDiffAbs7;\n  \
    \      long absDiffAbs8;\n        long absDiffAbs9;\n        long absDiffAbs10;\n\
    \        long absDiffAbs11;\n        long absDiffAbs12;\n        long absDiffAbs13;\n\
    \        long absDiffAbs14;\n        long absDiffAbs15;\n        long absDiffAbs16;\n\
    \        long absDiffAbs17;\n        long absDiffAbs18;\n        long absDiffAbs19;\n\
    \        long absDiffAbs20;\n        long absDiffAbs21;\n        long absDiffAbs22;\n\
    \        long absDiffAbs23;\n        long absDiffAbs24;\n        long absDiffAbs25;\n\
    \        long absDiffAbs26;\n        long absDiffAbs27;\n        long absDiffAbs28;\n\
    \        long absDiffAbs29;\n        long absDiffAbs30;\n        long absDiffAbs31;\n\
    \        long absDiffAbs32;\n        long absDiffAbs33;\n        long absDiffAbs34;\n\
    \        long absDiffAbs35;\n        long absDiffAbs36;\n        long absDiffAbs37;\n\
    \        long absDiffAbs38;\n        long absDiffAbs39;\n        long absDiffAbs40;\n\
    \        long absDiffAbs41;\n        long absDiffAbs42;\n        long absDiffAbs43;\n\
    \        long absDiffAbs44;\n        long absDiffAbs45;\n        long absDiffAbs46;\n\
    \        long absDiffAbs47;\n        long absDiffAbs48;\n        long absDiffAbs49;\n\
    \        long absDiffAbs50;\n        long absDiffAbs51;\n        long absDiffAbs52;\n\
    \        long absDiffAbs53;\n        long absDiffAbs54;\n        long absDiffAbs55;\n\
    \        long absDiffAbs5\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8mgkjl4o.java:83: error: ';' expected\n        long absDiffAbs5\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdptgkl9s.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpdptgkl9s.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diffAbs;\n        long diffAbs2;\n        long\
    \ diffAbs3;\n        long diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n\
    \        long diffAbs7;\n        long diffAbs8;\n        long diffAbs9;\n    \
    \    long diffAbs10;\n        long diffAbs11;\n        long diffAbs12;\n     \
    \   long diffAbs13;\n        long diffAbs14;\n        long diffAbs15;\n      \
    \  long diffAbs16;\n        long diffAbs17;\n        long diffAbs18;\n       \
    \ long diffAbs19;\n        long diffAbs20;\n        long diffAbs21;\n        long\
    \ diffAbs22;\n        long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n\
    \        long diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n \
    \       long diffAbs29;\n        long diffAbs30;\n        long diffAbs31;\n  \
    \      long diffAbs32;\n        long diffAbs33;\n        long diffAbs34;\n   \
    \     long diffAbs35;\n        long diffAbs36;\n        long diffAbs37;\n    \
    \    long diffAbs38;\n        long diffAbs39;\n        long diffAbs40;\n     \
    \   long diffAbs41;\n        long diffAbs42;\n        long diffAbs43;\n      \
    \  long diffAbs44;\n        long diffAbs45;\n        long diffAbs46;\n       \
    \ long diffAbs47;\n        long diffAbs48;\n        long diffAbs49;\n        long\
    \ diffAbs50;\n        long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n\
    \        long diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n \
    \       long diffAbs57;\n        long diffAbs58;\n        long diffAbs59;\n  \
    \      long diffAbs60;\n        long diffAbs61;\n        long diffAbs62;\n   \
    \     long diffAbs63;\n        long diffAbs64;\n        long diffAbs65;\n    \
    \    long diffAbs66\n    }\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp83e28bso.java:90: error: ';' expected\n        long diffAbs66\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diffAbs;\n        long diffAbs2;\n        long\
    \ diffAbs3;\n        long diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n\
    \        long diffAbs7;\n        long diffAbs8;\n        long diffAbs9;\n    \
    \    long diffAbs10;\n        long diffAbs11;\n        long diffAbs12;\n     \
    \   long diffAbs13;\n        long diffAbs14;\n        long diffAbs15;\n      \
    \  long diffAbs16;\n        long diffAbs17;\n        long diffAbs18;\n       \
    \ long diffAbs19;\n        long diffAbs20;\n        long diffAbs21;\n        long\
    \ diffAbs22;\n        long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n\
    \        long diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n \
    \       long diffAbs29;\n        long diffAbs30;\n        long diffAbs31;\n  \
    \      long diffAbs32;\n        long diffAbs33;\n        long diffAbs34;\n   \
    \     long diffAbs35;\n        long diffAbs36;\n        long diffAbs37;\n    \
    \    long diffAbs38;\n        long diffAbs39;\n        long diffAbs40;\n     \
    \   long diffAbs41;\n        long diffAbs42;\n        long diffAbs43;\n      \
    \  long diffAbs44;\n        long diffAbs45;\n        long diffAbs46;\n       \
    \ long diffAbs47;\n        long diffAbs48;\n        long diffAbs49;\n        long\
    \ diffAbs50;\n        long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n\
    \        long diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n \
    \       long diffAbs57;\n        long diffAbs58;\n        long diffAbs59;\n  \
    \      long diffAbs60;\n        long diffAbs61;\n        long diffAbs62;\n   \
    \     long diffAbs63;\n        long diffAbs64;\n        long diffAbs65;\n    \
    \    long diffAbs66\n    }\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp508ahn3g.java:90: error: ';' expected\n        long diffAbs66\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long difference2 =\
    \ Long.MAX_VALUE;\n        long difference3 = Long.MAX_VALUE;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long difference5 = Long.MAX_VALUE;\n        long\
    \ difference6 = Long.MAX_VALUE;\n        long difference7 = Long.MAX_VALUE;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long difference9 = Long.MAX_VALUE;\n\
    \        long difference10 = Long.MAX_VALUE;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long difference12 = Long.MAX_VALUE;\n        long difference13 = Long.MAX_VALUE;\n\
    \        long difference14 = Long.MAX_VALUE;\n        long difference15 = Long.MAX_VALUE;\n\
    \        long difference16 = Long.MAX_VALUE;\n        long difference17 = Long.MAX_VALUE;\n\
    \        long difference18 = Long.MAX_VALUE;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long difference20 = Long.MAX_VALUE;\n        long difference21 = Long.MAX_VALUE;\n\
    \        long difference22 = Long.MAX_VALUE;\n        long difference23 = Long.MAX_VALUE;\n\
    \        long difference24 = Long.MAX_VALUE;\n        long difference25 = Long.MAX_VALUE;\n\
    \        long difference26 = Long.MAX_VALUE;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long difference28 = Long.MAX_VALUE;\n        long difference29 = Long.MAX_VALUE;\n\
    \        long difference30 = Long.MAX_VALUE;\n        long difference31 = Long.MAX_VALUE;\n\
    \        long difference32 = Long.MAX_VALUE;\n        long difference33 = Long.MAX_VALUE;\n\
    \        long difference34 = Long.MAX_VALUE;\n        long difference35 = Long.MAX_VALUE;\n\
    \        long difference36 = Long.MAX_VALUE;\n        long difference37 = Long.MAX_VALUE;\n\
    \        long difference38 = Long.MAX_VALUE;\n        long difference39 = Long.MAX_VALUE;\n\
    \        long difference40 = Long.MAX_VALUE;\n        long difference41 = Long.MAX_VALUE;\n\
    \        long difference42 = Long.MAX_VALUE;\n        long difference43 = Long.MAX_VALUE;\n\
    \        long difference44 = Long.MAX_VALUE;\n        long difference45 = Long.MAX_VALUE;\n\
    \        long difference46 = Long.MAX_VALUE;\n        long difference47 = Long.MAX_VALUE;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt7xcgxyt.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpt7xcgxyt.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = 0;\n        long diff;\n        long diffAbs;\n\
    \        long diffAbsMax;\n        long diffAbsMaxIndex;\n        long diffAbsMaxValue;\n\
    \        long diffAbsMaxValueIndex;\n        long diffAbsMaxValueValue;\n    \
    \    long diffAbsMaxValueValueIndex;\n        long diffAbsMaxValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n        long diffAbsMaxValueValueValueValue;\n\
    \        long diffAbsMaxValueValueValueIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmy0v77yb.java:36: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:37: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:38: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:39: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:40: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:41: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:42: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:43: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:44: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:45: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:46: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:47: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:48: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:49: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:50: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:51: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:52: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:53: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:54: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:55: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:56: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:57: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:58: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:59: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:60: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:61: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:62: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:63: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:64: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:65: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:66: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:67: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:68: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:69: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:70: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:71: error: variable diffAbsMaxValueValueValueValue\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueValue;\n\
    \             ^\n/tmp/tmpmy0v77yb.java:72: error: variable diffAbsMaxValueValueValueIndex\
    \ is already defined in method closestInteger(String)\n        long diffAbsMaxValueValueValueIndex;\n\
    \             ^\n37 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diffAbs;\n        long diffAbs2;\n        long\
    \ diffAbs3;\n        long diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n\
    \        long diffAbs7;\n        long diffAbs8;\n        long diffAbs9;\n    \
    \    long diffAbs10;\n        long diffAbs11;\n        long diffAbs12;\n     \
    \   long diffAbs13;\n        long diffAbs14;\n        long diffAbs15;\n      \
    \  long diffAbs16;\n        long diffAbs17;\n        long diffAbs18;\n       \
    \ long diffAbs19;\n        long diffAbs20;\n        long diffAbs21;\n        long\
    \ diffAbs22;\n        long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n\
    \        long diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n \
    \       long diffAbs29;\n        long diffAbs30;\n        long diffAbs31;\n  \
    \      long diffAbs32;\n        long diffAbs33;\n        long diffAbs34;\n   \
    \     long diffAbs35;\n        long diffAbs36;\n        long diffAbs37;\n    \
    \    long diffAbs38;\n        long diffAbs39;\n        long diffAbs40;\n     \
    \   long diffAbs41;\n        long diffAbs42;\n        long diffAbs43;\n      \
    \  long diffAbs44;\n        long diffAbs45;\n        long diffAbs46;\n       \
    \ long diffAbs47;\n        long diffAbs48;\n        long diffAbs49;\n        long\
    \ diffAbs50;\n        long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n\
    \        long diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n \
    \       long diffAbs57;\n        long diffAbs58;\n        long diffAbs59;\n  \
    \      long diffAbs60;\n        long diffAbs61;\n        long diffAbs62;\n   \
    \     long diffAbs63;\n        long diffAbs64;\n        long diffAbs65;\n    \
    \    long diffAbs66\n    }\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9hx5_25r.java:90: error: ';' expected\n        long diffAbs66\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm9qx16wj.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpm9qx16wj.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbi2opsca.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpbi2opsca.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diffAbs;\n        long diffAbs2;\n        long\
    \ diffAbs3;\n        long diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n\
    \        long diffAbs7;\n        long diffAbs8;\n        long diffAbs9;\n    \
    \    long diffAbs10;\n        long diffAbs11;\n        long diffAbs12;\n     \
    \   long diffAbs13;\n        long diffAbs14;\n        long diffAbs15;\n      \
    \  long diffAbs16;\n        long diffAbs17;\n        long diffAbs18;\n       \
    \ long diffAbs19;\n        long diffAbs20;\n        long diffAbs21;\n        long\
    \ diffAbs22;\n        long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n\
    \        long diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n \
    \       long diffAbs29;\n        long diffAbs30;\n        long diffAbs31;\n  \
    \      long diffAbs32;\n        long diffAbs33;\n        long diffAbs34;\n   \
    \     long diffAbs35;\n        long diffAbs36;\n        long diffAbs37;\n    \
    \    long diffAbs38;\n        long diffAbs39;\n        long diffAbs40;\n     \
    \   long diffAbs41;\n        long diffAbs42;\n        long diffAbs43;\n      \
    \  long diffAbs44;\n        long diffAbs45;\n        long diffAbs46;\n       \
    \ long diffAbs47;\n        long diffAbs48;\n        long diffAbs49;\n        long\
    \ diffAbs50;\n        long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n\
    \        long diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n \
    \       long diffAbs57;\n        long diffAbs58;\n        long diffAbs59;\n  \
    \      long diffAbs60;\n        long diffAbs61;\n        long diffAbs62;\n   \
    \     long diffAbs63;\n        long diffAbs64;\n        long diffAbs65;\n    \
    \    long diffAbs66\n    }\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxzgaq9gz.java:90: error: ';' expected\n        long diffAbs66\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        if (closestDouble3\
    \ > closestDouble) {\n            closestDouble = closestDouble2;\n        }\n\
    \        closest = (long) closestDouble;\n        return closest;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqqo7yg42.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuh1blvbb.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpuh1blvbb.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDifference = Long.MAX_VALUE;\n      \
    \  long difference = Long.MAX_VALUE;\n        long currentInteger = Long.parseLong(value);\n\
    \        long currentDifference = Long.MAX_VALUE;\n        long currentDifference2\
    \ = Long.MAX_VALUE;\n        long currentDifference3 = Long.MAX_VALUE;\n     \
    \   long currentDifference4 = Long.MAX_VALUE;\n        long currentDifference5\
    \ = Long.MAX_VALUE;\n        long currentDifference6 = Long.MAX_VALUE;\n     \
    \   long currentDifference7 = Long.MAX_VALUE;\n        long currentDifference8\
    \ = Long.MAX_VALUE;\n        long currentDifference9 = Long.MAX_VALUE;\n     \
    \   long currentDifference10 = Long.MAX_VALUE;\n        long currentDifference11\
    \ = Long.MAX_VALUE;\n        long currentDifference12 = Long.MAX_VALUE;\n    \
    \    long currentDifference13 = Long.MAX_VALUE;\n        long currentDifference14\
    \ = Long.MAX_VALUE;\n        long currentDifference15 = Long.MAX_VALUE;\n    \
    \    long currentDifference16 = Long.MAX_VALUE;\n        long currentDifference17\
    \ = Long.MAX_VALUE;\n        long currentDifference18 = Long.MAX_VALUE;\n    \
    \    long currentDifference19 = Long.MAX_VALUE;\n        long currentDifference20\
    \ = Long.MAX_VALUE;\n        long currentDifference21 = Long.MAX_VALUE;\n    \
    \    long currentDifference22 = Long.MAX_VALUE;\n        long currentDifference23\
    \ = Long.MAX_VALUE;\n        long currentDifference24 = Long.MAX_VALUE;\n    \
    \    long currentDifference25 = Long.MAX_VALUE;\n        long currentDifference26\
    \ = Long.MAX_VALUE;\n        long currentDifference27 = Long.MAX_VALUE;\n    \
    \    long currentDifference28 = Long.MAX_VALUE;\n        long currentDifference29\
    \ = Long.MAX_VALUE;\n        long currentDifference30 = Long.MAX_VALUE;\n    \
    \    long currentDifference31 = Long.MAX_VALUE;\n        long currentDifference32\
    \ = Long.MAX_VALUE;\n        long currentDifference33 = Long.MAX_VALUE;\n    \
    \    long currentDifference34 = Long.MAX_VALUE;\n        long currentDifference35\
    \ = Long.MAX_VALUE;\n        long currentDifference36 = Long.MAX_VALUE;\n    \
    \    long currentDifference37 = Long.MAX_VALUE;\n        long currentDifference38\
    \ = Long.MAX_VALUE;\n        long currentDifference39 = Long.MAX_VALUE;\n    \
    \    long currentDifference40 = Long.MAX_VALUE;\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjone2iaz.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7p4a_9g.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpr7p4a_9g.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        double\
    \ closestDouble4 = Math.abs(closestDouble3 - d);\n        double closestDouble5\
    \ = Math.abs(closestDouble4 - d);\n        double closestDouble6 = Math.abs(closestDouble5\
    \ - d);\n        double closestDouble7 = Math.abs(closestDouble6 - d);\n     \
    \   double closestDouble8 = Math.abs(closestDouble7 - d);\n        double closestDouble9\
    \ = Math.abs(closestDouble8 - d);\n        double closestDouble10 = Math.abs(closestDouble9\
    \ - d);\n        double closestDouble11 = Math.abs(closestDouble10 - d);\n   \
    \     double closestDouble12 = Math.abs(closestDouble11 - d);\n        double\
    \ closestDouble13 = Math.abs(closestDouble12 - d);\n        double closestDouble14\
    \ = Math.abs(closestDouble13 - d);\n        double closestDouble15 = Math.abs(closestDouble14\
    \ - d);\n        double closestDouble16 = Math.abs(closestDouble15 - d);\n   \
    \     double closestDouble17 = Math.abs(closestDouble16 - d);\n        double\
    \ closestDouble18 = Math.abs(closestDouble17 - d);\n        double closestDouble19\
    \ = Math.abs(closestDouble18 - d);\n        double closestDouble20 = Math.abs(closestDouble19\
    \ - d);\n        double closestDouble21 = Math.abs(closestDouble20 - d);\n   \
    \     double closestDouble22 = Math.abs(closestDouble21 - d);\n        double\
    \ closestDouble23 = Math.abs(closestDouble22 - d);\n        double closestDouble24\
    \ = Math.abs(closestDouble23 - d);\n        double closestDouble25 = Math.abs(closestDouble24\
    \ - d);\n        double closestDouble26 = Math.abs(closestDouble25 - d);\n   \
    \     double closestDouble27 = Math.abs(closestDouble26 - d);\n        double\
    \ closestDouble28 = Math.abs(closestDouble27 - d);\n        double closestDouble29\
    \ = Math.abs(closestDouble28 - d);\n        double closestDouble30 = Math.abs(closestDouble29\
    \ - d);\n        double closestDouble31 = Math.abs(closestDouble30 - d);\n   \
    \     double closestDouble32 = Math.abs(closestDouble31 - d);\n        double\
    \ closestDouble33 = Math.abs(closestDouble32 - d);\n        double closestDouble34\
    \ = Math.abs(closestDouble33 - d);\n        double closestDouble35 = Math.abs(closestDouble34\
    \ - d);\n        double closestDouble36 = Math.abs(closestDouble35 - d);\n   \
    \     double closestDouble37 = Math.abs(closestDouble36 - d);\n        double\
    \ closestDouble38 = Math.abs(closestDouble37 - d);\n        double closestDouble39\
    \ = Math.abs(closestDouble38 - d);\n        double closestDouble40\n    }\n  \
    \  public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphlql6owg.java:64: error: ';' expected\n        double closestDouble40\n\
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        long closest = 0;\n        long closestDiff = Long.MAX_VALUE;\n\
    \        long diff = 0;\n        long diffDiff = Long.MAX_VALUE;\n        long\
    \ diffDiff2 = Long.MAX_VALUE;\n        long diffDiff3 = Long.MAX_VALUE;\n    \
    \    long diffDiff4 = Long.MAX_VALUE;\n        long diffDiff5 = Long.MAX_VALUE;\n\
    \        long diffDiff6 = Long.MAX_VALUE;\n        long diffDiff7 = Long.MAX_VALUE;\n\
    \        long diffDiff8 = Long.MAX_VALUE;\n        long diffDiff9 = Long.MAX_VALUE;\n\
    \        long diffDiff10 = Long.MAX_VALUE;\n        long diffDiff11 = Long.MAX_VALUE;\n\
    \        long diffDiff12 = Long.MAX_VALUE;\n        long diffDiff13 = Long.MAX_VALUE;\n\
    \        long diffDiff14 = Long.MAX_VALUE;\n        long diffDiff15 = Long.MAX_VALUE;\n\
    \        long diffDiff16 = Long.MAX_VALUE;\n        long diffDiff17 = Long.MAX_VALUE;\n\
    \        long diffDiff18 = Long.MAX_VALUE;\n        long diffDiff19 = Long.MAX_VALUE;\n\
    \        long diffDiff20 = Long.MAX_VALUE;\n        long diffDiff21 = Long.MAX_VALUE;\n\
    \        long diffDiff22 = Long.MAX_VALUE;\n        long diffDiff23 = Long.MAX_VALUE;\n\
    \        long diffDiff24 = Long.MAX_VALUE;\n        long diffDiff25 = Long.MAX_VALUE;\n\
    \        long diffDiff26 = Long.MAX_VALUE;\n        long diffDiff27 = Long.MAX_VALUE;\n\
    \        long diffDiff28 = Long.MAX_VALUE;\n        long diffDiff29 = Long.MAX_VALUE;\n\
    \        long diffDiff30 = Long.MAX_VALUE;\n        long diffDiff31 = Long.MAX_VALUE;\n\
    \        long diffDiff32 = Long.MAX_VALUE;\n        long diffDiff33 = Long.MAX_VALUE;\n\
    \        long diffDiff34 = Long.MAX_VALUE;\n        long diffDiff35 = Long.MAX_VALUE;\n\
    \        long diffDiff36 = Long.MAX_VALUE;\n        long diffDiff37 = Long.MAX_VALUE;\n\
    \        long diffDiff38 = Long.MAX_VALUE;\n        long diffDiff39 = Long.MAX_VALUE;\n\
    \        long diffDiff40 = Long.MAX_VALUE;\n        long diffDiff41 = Long.MAX_VALUE;\n\
    \        long diffDiff42 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnlfjvty9.java:69: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2lr36rrv.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp2lr36rrv.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprfxys963.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = Math.round(value.charAt(0) - '0');\n        long difference = Math.abs(value.charAt(1)\
    \ - '0');\n        if (difference < closest) {\n            closest = difference;\n\
    \        }\n        return closest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpizyw61it.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6iih3uc.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDistance = Long.MAX_VALUE;\n        long\
    \ currentDistance = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDifference = Long.MAX_VALUE;\n        long currentDifference2\
    \ = Long.MAX_VALUE;\n        long currentDifference3 = Long.MAX_VALUE;\n     \
    \   long currentDifference4 = Long.MAX_VALUE;\n        long currentDifference5\
    \ = Long.MAX_VALUE;\n        long currentDifference6 = Long.MAX_VALUE;\n     \
    \   long currentDifference7 = Long.MAX_VALUE;\n        long currentDifference8\
    \ = Long.MAX_VALUE;\n        long currentDifference9 = Long.MAX_VALUE;\n     \
    \   long currentDifference10 = Long.MAX_VALUE;\n        long currentDifference11\
    \ = Long.MAX_VALUE;\n        long currentDifference12 = Long.MAX_VALUE;\n    \
    \    long currentDifference13 = Long.MAX_VALUE;\n        long currentDifference14\
    \ = Long.MAX_VALUE;\n        long currentDifference15 = Long.MAX_VALUE;\n    \
    \    long currentDifference16 = Long.MAX_VALUE;\n        long currentDifference17\
    \ = Long.MAX_VALUE;\n        long currentDifference18 = Long.MAX_VALUE;\n    \
    \    long currentDifference19 = Long.MAX_VALUE;\n        long currentDifference20\
    \ = Long.MAX_VALUE;\n        long currentDifference21 = Long.MAX_VALUE;\n    \
    \    long currentDifference22 = Long.MAX_VALUE;\n        long currentDifference23\
    \ = Long.MAX_VALUE;\n        long currentDifference24 = Long.MAX_VALUE;\n    \
    \    long currentDifference25 = Long.MAX_VALUE;\n        long currentDifference26\
    \ = Long.MAX_VALUE;\n        long currentDifference27 = Long.MAX_VALUE;\n    \
    \    long currentDifference28 = Long.MAX_VALUE;\n        long currentDifference29\
    \ = Long.MAX_VALUE;\n        long currentDifference30 = Long.MAX_VALUE;\n    \
    \    long currentDifference31 = Long.MAX_VALUE;\n        long currentDifference32\
    \ = Long.MAX_VALUE;\n        long currentDifference33 = Long.MAX_VALUE;\n    \
    \    long currentDifference34 = Long.MAX_VALUE;\n        long currentDifference35\
    \ = Long.MAX_VALUE;\n        long currentDifference36 = Long.MAX_VALUE;\n    \
    \    long currentDifference37 = Long.MAX_VALUE;\n        long currentDifference38\
    \ = Long.MAX_VALUE;\n        long currentDifference39 = Long.MAX_VALUE;\n    \
    \    long currentDifference40 = Long.MAX_VALUE;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp59n13mym.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqtgp4t1g.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpqtgp4t1g.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = Math.round(value.charAt(0) - '0');\n        long difference = Long.parseLong(value.substring(1));\n\
    \        if (difference < closest) {\n            closest = difference;\n    \
    \    }\n        return closest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0buiybfo.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcukarxr7.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpcukarxr7.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo61spacl.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7v08x0h.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpe7v08x0h.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsf8jfo9l.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpsf8jfo9l.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diffAbs;\n        long diffAbs2;\n        long\
    \ diffAbs3;\n        long diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n\
    \        long diffAbs7;\n        long diffAbs8;\n        long diffAbs9;\n    \
    \    long diffAbs10;\n        long diffAbs11;\n        long diffAbs12;\n     \
    \   long diffAbs13;\n        long diffAbs14;\n        long diffAbs15;\n      \
    \  long diffAbs16;\n        long diffAbs17;\n        long diffAbs18;\n       \
    \ long diffAbs19;\n        long diffAbs20;\n        long diffAbs21;\n        long\
    \ diffAbs22;\n        long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n\
    \        long diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n \
    \       long diffAbs29;\n        long diffAbs30;\n        long diffAbs31;\n  \
    \      long diffAbs32;\n        long diffAbs33;\n        long diffAbs34;\n   \
    \     long diffAbs35;\n        long diffAbs36;\n        long diffAbs37;\n    \
    \    long diffAbs38;\n        long diffAbs39;\n        long diffAbs40;\n     \
    \   long diffAbs41;\n        long diffAbs42;\n        long diffAbs43;\n      \
    \  long diffAbs44;\n        long diffAbs45;\n        long diffAbs46;\n       \
    \ long diffAbs47;\n        long diffAbs48;\n        long diffAbs49;\n        long\
    \ diffAbs50;\n        long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n\
    \        long diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n \
    \       long diffAbs57;\n        long diffAbs58;\n        long diffAbs59;\n  \
    \      long diffAbs60;\n        long diffAbs61;\n        long diffAbs62;\n   \
    \     long diffAbs63;\n        long diffAbs64;\n        long diffAbs65;\n    \
    \    long diffAbs66\n    }\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdrz3w929.java:90: error: ';' expected\n        long diffAbs66\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDiff = Long.MAX_VALUE;\n        long\
    \ currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDiff = Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcilutlio.java:69: error: ';' expected\n        long currentDiff\
    \ = Long\n                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3xtlqrsy.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp3xtlqrsy.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_x17z8a8.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp_x17z8a8.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0hopti2n.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp0hopti2n.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4yslhf5e.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = Math.round(value.charAt(0)) * Math.pow(10, value.length());\n        long\
    \ difference = Long.MAX_VALUE;\n        for (int i = 1; i < value.length(); i++)\
    \ {\n            long next = Math.round(value.charAt(i)) * Math.pow(10, value.length()\
    \ - i - 1);\n            difference = Math.abs(next - closest);\n            if\
    \ (difference < difference) {\n                closest = next;\n            }\n\
    \        }\n        return closest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzlr05o7.java:23: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long closest = Math.round(value.charAt(0)) * Math.pow(10,\
    \ value.length());\n                                                   ^\n/tmp/tmpfzlr05o7.java:26:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \           long next = Math.round(value.charAt(i)) * Math.pow(10, value.length()\
    \ - i - 1);\n                                                    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        if (closestDouble2 > Math.abs(closest)) {\n            closest = closestDouble;\n\
    \        } else {\n            closest = closestDouble2;\n        }\n        return\
    \ closest;\n\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr9vh5wq0.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n            closest = closestDouble;\n                \
    \      ^\n/tmp/tmpr9vh5wq0.java:30: error: incompatible types: possible lossy\
    \ conversion from double to long\n            closest = closestDouble2;\n    \
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long difference2 = 0;\n        long current2 = 0;\n \
    \       long previous2 = 0;\n        long difference3 = 0;\n        long current3\
    \ = 0;\n        long previous3 = 0;\n        long difference4 = 0;\n        long\
    \ current4 = 0;\n        long previous4 = 0;\n        long difference5 = 0;\n\
    \        long current5 = 0;\n        long previous5 = 0;\n        long difference6\
    \ = 0;\n        long current6 = 0;\n        long previous6 = 0;\n        long\
    \ difference7 = 0;\n        long current7 = 0;\n        long previous7 = 0;\n\
    \        long difference8 = 0;\n        long current8 = 0;\n        long previous8\
    \ = 0;\n        long difference9 = 0;\n        long current9 = 0;\n        long\
    \ previous9 = 0;\n        long difference10 = 0;\n        long current10 = 0;\n\
    \        long previous10 = 0;\n        long difference11 = 0;\n        long current11\
    \ = 0;\n        long previous11 = 0;\n        long difference12 = 0;\n       \
    \ long current12 = 0;\n        long previous12 = 0;\n        long difference13\
    \ = 0;\n        long current13 = 0;\n        long previous13 = 0;\n        long\
    \ difference14 = 0;\n        long current14 = 0;\n        long previous14 = 0;\n\
    \        long difference15 = 0;\n        long current15 = 0;\n        long previous15\
    \ = 0;\n        long difference16 = 0;\n        long current16 = 0;\n        long\
    \ previous16 = 0;\n        long difference17 = 0;\n        long current17 = 0;\n\
    \        long previous17 = 0;\n        long difference18 = 0;\n        long current18\
    \ = 0;\n        long previous18 = 0;\n        long difference19 = 0;\n       \
    \ long current19 = 0;\n        long previous19 = 0;\n        long difference20\
    \ = 0;\n        long current20 = 0;\n        long previous20 = 0;\n        long\
    \ difference21 = 0;\n        long current21 = 0;\n        long previous21 = 0;\n\
    \        long difference22 = 0;\n        long current22 = 0;\n        long previous22\
    \ = 0;\n        long difference23 = 0;\n        long current23 = 0;\n        long\
    \ previous23 = 0;\n        long difference24 = 0;\n        long current24 = 0;\n\
    \        long previous24 = 0;\n        long difference25 = 0;\n        long current25\
    \ = 0;\n        long previous25 = 0;\n        long difference26 = 0;\n       \
    \ long current26 = 0;\n        long previous26 = 0;\n        long difference27\
    \ = 0;\n        long current27 = 0;\n        long previous27 = 0;\n        long\
    \ difference28 = 0;\n        long current28 = 0;\n        long previous28 = 0;\n\
    \        long difference29 = 0;\n        long current29 = 0;\n        long previous29\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpddal6nab.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rg37va2.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpafg8dzl0.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpafg8dzl0.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0qzzhhz6.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp0qzzhhz6.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        long closest = 0;\n        long closestDiff = 0;\n      \
    \  long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long\
    \ diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7\
    \ = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10\
    \ = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13\
    \ = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16\
    \ = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19\
    \ = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22\
    \ = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25\
    \ = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28\
    \ = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31\
    \ = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34\
    \ = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37\
    \ = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40\
    \ = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43\
    \ = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46\
    \ = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49\
    \ = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52\
    \ = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55\
    \ = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58\
    \ = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61\
    \ = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n        long diff64\
    \ = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n        long diff67\
    \ = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n        long diff70\
    \ = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n        long diff73\
    \ = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n        long diff76\
    \ = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n        long diff79\
    \ = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n        long diff82\
    \ = 0;\n        long diff83 = 0;\n        long diff\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4f_lfpji.java:109: error: ';' expected\n        long diff\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference = Long.MAX_VALUE;\n        long difference2 = Long.MAX_VALUE;\n\
    \        long difference3 = Long.MAX_VALUE;\n        long difference4 = Long.MAX_VALUE;\n\
    \        long difference5 = Long.MAX_VALUE;\n        long difference6 = Long.MAX_VALUE;\n\
    \        long difference7 = Long.MAX_VALUE;\n        long difference8 = Long.MAX_VALUE;\n\
    \        long difference9 = Long.MAX_VALUE;\n        long difference10 = Long.MAX_VALUE;\n\
    \        long difference11 = Long.MAX_VALUE;\n        long difference12 = Long.MAX_VALUE;\n\
    \        long difference13 = Long.MAX_VALUE;\n        long difference14 = Long.MAX_VALUE;\n\
    \        long difference15 = Long.MAX_VALUE;\n        long difference16 = Long.MAX_VALUE;\n\
    \        long difference17 = Long.MAX_VALUE;\n        long difference18 = Long.MAX_VALUE;\n\
    \        long difference19 = Long.MAX_VALUE;\n        long difference20 = Long.MAX_VALUE;\n\
    \        long difference21 = Long.MAX_VALUE;\n        long difference22 = Long.MAX_VALUE;\n\
    \        long difference23 = Long.MAX_VALUE;\n        long difference24 = Long.MAX_VALUE;\n\
    \        long difference25 = Long.MAX_VALUE;\n        long difference26 = Long.MAX_VALUE;\n\
    \        long difference27 = Long.MAX_VALUE;\n        long difference28 = Long.MAX_VALUE;\n\
    \        long difference29 = Long.MAX_VALUE;\n        long difference30 = Long.MAX_VALUE;\n\
    \        long difference31 = Long.MAX_VALUE;\n        long difference32 = Long.MAX_VALUE;\n\
    \        long difference33 = Long.MAX_VALUE;\n        long difference34 = Long.MAX_VALUE;\n\
    \        long difference35 = Long.MAX_VALUE;\n        long difference36 = Long.MAX_VALUE;\n\
    \        long difference37 = Long.MAX_VALUE;\n        long difference38 = Long.MAX_VALUE;\n\
    \        long difference39 = Long.MAX_VALUE;\n        long difference40 = Long.MAX_VALUE;\n\
    \        long difference41 = Long.MAX_VALUE;\n        long difference42 = Long.MAX_VALUE;\n\
    \        long difference43 = Long.MAX_VALUE;\n        long difference44 = Long.MAX_VALUE;\n\
    \        long difference45 = Long.MAX_VALUE;\n        long difference46 = Long.MAX_VALUE;\n\
    \        long difference47 = Long.MAX_VALUE;\n        long \n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnhkj6p_c.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpnhkj6p_c.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpamkgsqxt.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpamkgsqxt.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = Math.round(value.charAt(0) - '0');\n        long difference = Math.abs(closest\
    \ - value.charAt(1));\n        if (difference < Math.abs(closest - value.charAt(2)))\
    \ {\n            closest = Math.round(value.charAt(0) - '0');\n            difference\
    \ = Math.abs(closest - value.charAt(1));\n        }\n        return closest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 2\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.closestInteger(tmpuc2c3ad_.java:25)\n\
    \tat Problem.main(tmpuc2c3ad_.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference = Long.MAX_VALUE;\n        long closestDifference = Long.MAX_VALUE;\n\
    \        long closestDifferenceToZero = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZero = Long.MAX_VALUE;\n\
    \        long closestDifferenceToZeroToZeroToZeroToZero = Long.MAX_VALUE;\n  \
    \      long closestDifferenceToZeroToZeroToZeroToZeroToZero = Long.MAX_VALUE;\n\
    \        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZero = Long.MAX_VALUE;\n\
    \        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZero = Long.MAX_VALUE;\n\
    \        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroTo\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroTo\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroTo\
    \ = Long.MAX_VALUE;\n        long closestDifferenceToZeroToZeroToZeroToZeroTo\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9_klf5o9.java:44: error: ';' expected\n        long closestDifferenceToZeroToZeroToZeroToZeroTo\n\
    \                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        if (closestDouble2 > Math.abs(closest)) {\n            closestDouble\
    \ = Math.abs(closest);\n        }\n        closest = (long) closestDouble;\n \
    \       return closest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprpmep0z_.java:27: error: variable closest might not have been initialized\n\
    \        if (closestDouble2 > Math.abs(closest)) {\n                         \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long temp;\n        long temp2;\n        long temp3;\n\
    \        long temp4;\n        long temp5;\n        long temp6;\n        long temp7;\n\
    \        long temp8;\n        long temp9;\n        long temp10;\n        long\
    \ temp11;\n        long temp12;\n        long temp13;\n        long temp14;\n\
    \        long temp15;\n        long temp16;\n        long temp17;\n        long\
    \ temp18;\n        long temp19;\n        long temp20;\n        long temp21;\n\
    \        long temp22;\n        long temp23;\n        long temp24;\n        long\
    \ temp25;\n        long temp26;\n        long temp27;\n        long temp28;\n\
    \        long temp29;\n        long temp30;\n        long temp31;\n        long\
    \ temp32;\n        long temp33;\n        long temp34;\n        long temp35;\n\
    \        long temp36;\n        long temp37;\n        long temp38;\n        long\
    \ temp39;\n        long temp40;\n        long temp41;\n        long temp42;\n\
    \        long temp43;\n        long temp44;\n        long temp45;\n        long\
    \ temp46;\n        long temp47;\n        long temp48;\n        long temp49;\n\
    \        long temp50;\n        long temp51;\n        long temp52;\n        long\
    \ temp53;\n        long temp54;\n        long temp55;\n        long temp56;\n\
    \        long temp57;\n        long temp58;\n        long temp59;\n        long\
    \ temp60;\n        long temp61;\n        long temp62;\n        long temp63;\n\
    \        long temp64;\n        long temp65;\n        long temp66;\n        long\
    \ temp67;\n        long temp68;\n        long temp69;\n        long temp70;\n\
    \        long temp71;\n        long temp72;\n        long temp73;\n        long\
    \ temp74;\n        long temp75;\n        long temp76;\n        long temp77;\n\
    \        long temp78;\n        long temp79;\n        long temp80;\n        long\
    \ temp81;\n        long temp82;\n        long temp83;\n        long temp84;\n\
    \        long temp\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw6kq7los.java:111: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1_r63mvz.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp273xuytc.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long difference2 =\
    \ Long.MAX_VALUE;\n        long difference3 = Long.MAX_VALUE;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long difference5 = Long.MAX_VALUE;\n        long\
    \ difference6 = Long.MAX_VALUE;\n        long difference7 = Long.MAX_VALUE;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long difference9 = Long.MAX_VALUE;\n\
    \        long difference10 = Long.MAX_VALUE;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long difference12 = Long.MAX_VALUE;\n        long difference13 = Long.MAX_VALUE;\n\
    \        long difference14 = Long.MAX_VALUE;\n        long difference15 = Long.MAX_VALUE;\n\
    \        long difference16 = Long.MAX_VALUE;\n        long difference17 = Long.MAX_VALUE;\n\
    \        long difference18 = Long.MAX_VALUE;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long difference20 = Long.MAX_VALUE;\n        long difference21 = Long.MAX_VALUE;\n\
    \        long difference22 = Long.MAX_VALUE;\n        long difference23 = Long.MAX_VALUE;\n\
    \        long difference24 = Long.MAX_VALUE;\n        long difference25 = Long.MAX_VALUE;\n\
    \        long difference26 = Long.MAX_VALUE;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long difference28 = Long.MAX_VALUE;\n        long difference29 = Long.MAX_VALUE;\n\
    \        long difference30 = Long.MAX_VALUE;\n        long difference31 = Long.MAX_VALUE;\n\
    \        long difference32 = Long.MAX_VALUE;\n        long difference33 = Long.MAX_VALUE;\n\
    \        long difference34 = Long.MAX_VALUE;\n        long difference35 = Long.MAX_VALUE;\n\
    \        long difference36 = Long.MAX_VALUE;\n        long difference37 = Long.MAX_VALUE;\n\
    \        long difference38 = Long.MAX_VALUE;\n        long difference39 = Long.MAX_VALUE;\n\
    \        long difference40 = Long.MAX_VALUE;\n        long difference41 = Long.MAX_VALUE;\n\
    \        long difference42 = Long.MAX_VALUE;\n        long difference43 = Long.MAX_VALUE;\n\
    \        long difference44 = Long.MAX_VALUE;\n        long difference45 = Long.MAX_VALUE;\n\
    \        long difference46 = Long.MAX_VALUE;\n        long difference47 = Long.MAX_VALUE;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6sgtkry9.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp6sgtkry9.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long difference2;\n        long current2;\n    \
    \    long previous2;\n        long difference3;\n        long current3;\n    \
    \    long previous3;\n        long difference4;\n        long current4;\n    \
    \    long previous4;\n        long difference5;\n        long current5;\n    \
    \    long previous5;\n        long difference6;\n        long current6;\n    \
    \    long previous6;\n        long difference7;\n        long current7;\n    \
    \    long previous7;\n        long difference8;\n        long current8;\n    \
    \    long previous8;\n        long difference9;\n        long current9;\n    \
    \    long previous9;\n        long difference10;\n        long current10;\n  \
    \      long previous10;\n        long difference11;\n        long current11;\n\
    \        long previous11;\n        long difference12;\n        long current12;\n\
    \        long previous12;\n        long difference13;\n        long current13;\n\
    \        long previous13;\n        long difference14;\n        long current14;\n\
    \        long previous14;\n        long difference15;\n        long current15;\n\
    \        long previous15;\n        long difference16;\n        long current16;\n\
    \        long previous16;\n        long difference17;\n        long current17;\n\
    \        long previous17;\n        long difference18;\n        long current18;\n\
    \        long previous18;\n        long difference19;\n        long current19;\n\
    \        long previous19;\n        long difference20;\n        long current20;\n\
    \        long previous20;\n        long difference21;\n        long current21;\n\
    \        long previous21;\n        long difference22;\n        long current22;\n\
    \        long previous22;\n        long difference23;\n        long current23;\n\
    \        long previous23;\n        long difference24;\n        long current24;\n\
    \        long previous24;\n        long difference25;\n        long current25;\n\
    \        long previous25;\n        long difference26;\n        long current26;\n\
    \        long previous26;\n        long difference27;\n        long current27;\n\
    \        long previous27;\n        long difference28;\n        long current28;\n\
    \        long previous28;\n        long difference29;\n        long current29;\n\
    \        long previous29;\n        long difference30;\n        long current30;\n\
    \        long previous30;\n        long difference31;\n        long current31;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzh3zv3k8.java:117: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long temp;\n        long diff;\n        long diff2;\n\
    \        long diff3;\n        long diff4;\n        long diff5;\n        long diff6;\n\
    \        long diff7;\n        long diff8;\n        long diff9;\n        long diff10;\n\
    \        long diff11;\n        long diff12;\n        long diff13;\n        long\
    \ diff14;\n        long diff15;\n        long diff16;\n        long diff17;\n\
    \        long diff18;\n        long diff19;\n        long diff20;\n        long\
    \ diff21;\n        long diff22;\n        long diff23;\n        long diff24;\n\
    \        long diff25;\n        long diff26;\n        long diff27;\n        long\
    \ diff28;\n        long diff29;\n        long diff30;\n        long diff31;\n\
    \        long diff32;\n        long diff33;\n        long diff34;\n        long\
    \ diff35;\n        long diff36;\n        long diff37;\n        long diff38;\n\
    \        long diff39;\n        long diff40;\n        long diff41;\n        long\
    \ diff42;\n        long diff43;\n        long diff44;\n        long diff45;\n\
    \        long diff46;\n        long diff47;\n        long diff48;\n        long\
    \ diff49;\n        long diff50;\n        long diff51;\n        long diff52;\n\
    \        long diff53;\n        long diff54;\n        long diff55;\n        long\
    \ diff56;\n        long diff57;\n        long diff58;\n        long diff59;\n\
    \        long diff60;\n        long diff61;\n        long diff62;\n        long\
    \ diff63;\n        long diff64;\n        long diff65;\n        long diff66;\n\
    \        long diff67;\n        long diff68;\n        long diff69;\n        long\
    \ diff70;\n        long diff71;\n        long diff72;\n        long diff73;\n\
    \        long diff74;\n        long diff75;\n        long diff76;\n        long\
    \ diff77;\n        long diff78;\n        long diff79;\n        long diff80;\n\
    \        long diff81;\n        long diff82;\n        long diff83;\n        long\
    \ diff84\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppp5wi5ax.java:111: error: ';' expected\n        long diff84\n \
    \                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphkmmm6g6.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8c2ao2d.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long temp = 0;\n        long difference2 = 0;\n     \
    \   long current2 = 0;\n        long previous2 = 0;\n        long temp2 = 0;\n\
    \        long difference3 = 0;\n        long current3 = 0;\n        long previous3\
    \ = 0;\n        long temp3 = 0;\n        long difference4 = 0;\n        long current4\
    \ = 0;\n        long previous4 = 0;\n        long temp4 = 0;\n        long difference5\
    \ = 0;\n        long current5 = 0;\n        long previous5 = 0;\n        long\
    \ temp5 = 0;\n        long difference6 = 0;\n        long current6 = 0;\n    \
    \    long previous6 = 0;\n        long temp6 = 0;\n        long difference7 =\
    \ 0;\n        long current7 = 0;\n        long previous7 = 0;\n        long temp7\
    \ = 0;\n        long difference8 = 0;\n        long current8 = 0;\n        long\
    \ previous8 = 0;\n        long temp8 = 0;\n        long difference9 = 0;\n   \
    \     long current9 = 0;\n        long previous9 = 0;\n        long temp9 = 0;\n\
    \        long difference10 = 0;\n        long current10 = 0;\n        long previous10\
    \ = 0;\n        long temp10 = 0;\n        long difference11 = 0;\n        long\
    \ current11 = 0;\n        long previous11 = 0;\n        long temp11 = 0;\n   \
    \     long difference12 = 0;\n        long current12 = 0;\n        long previous12\
    \ = 0;\n        long temp12 = 0;\n        long difference13 = 0;\n        long\
    \ current13 = 0;\n        long previous13 = 0;\n        long temp13 = 0;\n   \
    \     long difference14 = 0;\n        long current14 = 0;\n        long previous14\
    \ = 0;\n        long temp14 = 0;\n        long difference15 = 0;\n        long\
    \ current15 = 0;\n        long previous15 = 0;\n        long temp15 = 0;\n   \
    \     long difference16 = 0;\n        long current16 = 0;\n        long previous16\
    \ = 0;\n        long temp16 = 0;\n        long difference17 = 0;\n        long\
    \ current17 = 0;\n        long previous17 = 0;\n        long temp17 = 0;\n   \
    \     long difference18 = 0;\n        long current18 = 0;\n        long previous18\
    \ = 0;\n        long temp18 = 0;\n        long difference19 = 0;\n        long\
    \ current19 = 0;\n        long previous19 = 0;\n        long temp19 = 0;\n   \
    \     long difference20 = 0;\n        long current20 = 0;\n        long previous20\
    \ = 0;\n        long temp20 = 0;\n        long difference21 = 0;\n        long\
    \ current21 = 0;\n        long previous21 = 0;\n        long temp21 = 0;\n   \
    \     long difference22 = 0;\n        long current22 = 0;\n        long previous22\
    \ = 0;\n        long temp22 = 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdltkmwsu.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double input;\n        double diff;\n        double diff2;\n        double\
    \ diff3;\n        double diff4;\n        double diff5;\n        double diff6;\n\
    \        double diff7;\n        double diff8;\n        double diff9;\n       \
    \ double diff10;\n        double diff11;\n        double diff12;\n        double\
    \ diff13;\n        double diff14;\n        double diff15;\n        double diff16;\n\
    \        double diff17;\n        double diff18;\n        double diff19;\n    \
    \    double diff20;\n        double diff21;\n        double diff22;\n        double\
    \ diff23;\n        double diff24;\n        double diff25;\n        double diff26;\n\
    \        double diff27;\n        double diff28;\n        double diff29;\n    \
    \    double diff30;\n        double diff31;\n        double diff32;\n        double\
    \ diff33;\n        double diff34;\n        double diff35;\n        double diff36;\n\
    \        double diff37;\n        double diff38;\n        double diff39;\n    \
    \    double diff40;\n        double diff41;\n        double diff42;\n        double\
    \ diff43;\n        double diff44;\n        double diff45;\n        double diff46;\n\
    \        double diff47;\n        double diff48;\n        double diff49;\n    \
    \    double diff50;\n        double diff51;\n        double diff52;\n        double\
    \ diff53;\n        double diff54;\n        double diff55;\n        double diff56;\n\
    \        double diff57;\n        double diff58;\n        double diff59;\n    \
    \    double diff60;\n        double diff61;\n        double diff62;\n        double\
    \ diff63;\n        double diff64;\n        double diff65;\n        double diff66;\n\
    \        double diff67;\n        double diff68;\n        double diff69;\n    \
    \    double diff70;\n        double diff71;\n        double diff72;\n        double\
    \ diff73;\n        double diff74;\n        double diff75;\n        double diff76;\n\
    \        double diff77;\n        double diff78;\n        double diff79;\n    \
    \    double diff80;\n        double diff81;\n        double diff82;\n        double\
    \ diff83;\n        double diff84;\n        double diff85;\n        double diff86;\n\
    \        double diff87;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7fl07dva.java:113: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoucgtooq.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpoucgtooq.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = Math.round(value);\n        if (closest == value) {\n            closest =\
    \ Math.round(value);\n        }\n        return closest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1gda9cc0.java:23: error: no suitable method found for round(String)\n\
    \        long closest = Math.round(value);\n                           ^\n   \
    \ method Math.round(float) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to float)\n    method Math.round(double) is not applicable\n\
    \      (argument mismatch; String cannot be converted to double)\n/tmp/tmp1gda9cc0.java:24:\
    \ error: bad operand types for binary operator '=='\n        if (closest == value)\
    \ {\n                    ^\n  first type:  long\n  second type: String\n/tmp/tmp1gda9cc0.java:25:\
    \ error: no suitable method found for round(String)\n            closest = Math.round(value);\n\
    \                          ^\n    method Math.round(float) is not applicable\n\
    \      (argument mismatch; String cannot be converted to float)\n    method Math.round(double)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to double)\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7k8h1cj2.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDistance = Long.MAX_VALUE;\n        long\
    \ currentDistance;\n        long currentInteger;\n        long difference;\n \
    \       long differenceAbs;\n        long differenceAbs2;\n        long differenceAbs3;\n\
    \        long differenceAbs4;\n        long differenceAbs5;\n        long differenceAbs6;\n\
    \        long differenceAbs7;\n        long differenceAbs8;\n        long differenceAbs9;\n\
    \        long differenceAbs10;\n        long differenceAbs11;\n        long differenceAbs12;\n\
    \        long differenceAbs13;\n        long differenceAbs14;\n        long differenceAbs15;\n\
    \        long differenceAbs16;\n        long differenceAbs17;\n        long differenceAbs18;\n\
    \        long differenceAbs19;\n        long differenceAbs20;\n        long differenceAbs21;\n\
    \        long differenceAbs22;\n        long differenceAbs23;\n        long differenceAbs24;\n\
    \        long differenceAbs25;\n        long differenceAbs26;\n        long differenceAbs27;\n\
    \        long differenceAbs28;\n        long differenceAbs29;\n        long differenceAbs30;\n\
    \        long differenceAbs31;\n        long differenceAbs32;\n        long differenceAbs33;\n\
    \        long differenceAbs34;\n        long differenceAbs35;\n        long differenceAbs36;\n\
    \        long differenceAbs37;\n        long differenceAbs38;\n        long differenceAbs39;\n\
    \        long differenceAbs40;\n        long differenceAbs41;\n        long differenceAbs42;\n\
    \        long differenceAbs43;\n        long differenceAbs44;\n        long differenceAbs45;\n\
    \        long differenceAbs46;\n        long differenceAbs47;\n        long differenceAbs48;\n\
    \        long differenceAbs49;\n        long differenceAbs50;\n        long differenceAbs51;\n\
    \        long differenceAbs52;\n        long differenceAbs53;\n        long differenceAbs54;\n\
    \        long differenceAbs55;\n        long differenceAbs56;\n        long differenceAbs57;\n\
    \        long differenceAbs58;\n        long differenceAbs59;\n        long differenceAbs60;\n\
    \        long differenceAbs61;\n        long differenceAbs62;\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwdz91ei5.java:91: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = Long.MAX_VALUE;\n\
    \        long difference3 = Long.MIN_VALUE;\n        long difference4 = Long.MAX_VALUE;\n\
    \        long difference5 = Long.MIN_VALUE;\n        long difference6 = Long.MAX_VALUE;\n\
    \        long difference7 = Long.MIN_VALUE;\n        long difference8 = Long.MAX_VALUE;\n\
    \        long difference9 = Long.MIN_VALUE;\n        long difference10 = Long.MAX_VALUE;\n\
    \        long difference11 = Long.MIN_VALUE;\n        long difference12 = Long.MAX_VALUE;\n\
    \        long difference13 = Long.MIN_VALUE;\n        long difference14 = Long.MAX_VALUE;\n\
    \        long difference15 = Long.MIN_VALUE;\n        long difference16 = Long.MAX_VALUE;\n\
    \        long difference17 = Long.MIN_VALUE;\n        long difference18 = Long.MAX_VALUE;\n\
    \        long difference19 = Long.MIN_VALUE;\n        long difference20 = Long.MAX_VALUE;\n\
    \        long difference21 = Long.MIN_VALUE;\n        long difference22 = Long.MAX_VALUE;\n\
    \        long difference23 = Long.MIN_VALUE;\n        long difference24 = Long.MAX_VALUE;\n\
    \        long difference25 = Long.MIN_VALUE;\n        long difference26 = Long.MAX_VALUE;\n\
    \        long difference27 = Long.MIN_VALUE;\n        long difference28 = Long.MAX_VALUE;\n\
    \        long difference29 = Long.MIN_VALUE;\n        long difference30 = Long.MAX_VALUE;\n\
    \        long difference31 = Long.MIN_VALUE;\n        long difference32 = Long.MAX_VALUE;\n\
    \        long difference33 = Long.MIN_VALUE;\n        long difference34 = Long.MAX_VALUE;\n\
    \        long difference35 = Long.MIN_VALUE;\n        long difference36 = Long.MAX_VALUE;\n\
    \        long difference37 = Long.MIN_VALUE;\n        long difference38 = Long.MAX_VALUE;\n\
    \        long difference39 = Long.MIN_VALUE;\n        long difference40 = Long.MAX_VALUE;\n\
    \        long difference41 = Long.MIN_VALUE;\n        long difference42 = Long.MAX_VALUE;\n\
    \        long difference43 = Long.MIN_VALUE;\n        long difference44 = Long.MAX_VALUE;\n\
    \        long difference45 = Long.MIN_VALUE;\n        long difference46 = Long.MAX_VALUE;\n\
    \        long difference47 = Long.MIN_VALUE;\n        long difference48 = Long.\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmperg8xoac.java:71: error: <identifier> expected\n        long difference48\
    \ = Long.\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long difference2 = 0;\n        long current2 = 0;\n \
    \       long previous2 = previous;\n        long difference3 = 0;\n        long\
    \ current3 = 0;\n        long previous3 = previous;\n        long difference4\
    \ = 0;\n        long current4 = 0;\n        long previous4 = previous;\n     \
    \   long difference5 = 0;\n        long current5 = 0;\n        long previous5\
    \ = previous;\n        long difference6 = 0;\n        long current6 = 0;\n   \
    \     long previous6 = previous;\n        long difference7 = 0;\n        long\
    \ current7 = 0;\n        long previous7 = previous;\n        long difference8\
    \ = 0;\n        long current8 = 0;\n        long previous8 = previous;\n     \
    \   long difference9 = 0;\n        long current9 = 0;\n        long previous9\
    \ = previous;\n        long difference10 = 0;\n        long current10 = 0;\n \
    \       long previous10 = previous;\n        long difference11 = 0;\n        long\
    \ current11 = 0;\n        long previous11 = previous;\n        long difference12\
    \ = 0;\n        long current12 = 0;\n        long previous12 = previous;\n   \
    \     long difference13 = 0;\n        long current13 = 0;\n        long previous13\
    \ = previous;\n        long difference14 = 0;\n        long current14 = 0;\n \
    \       long previous14 = previous;\n        long difference15 = 0;\n        long\
    \ current15 = 0;\n        long previous15 = previous;\n        long difference16\
    \ = 0;\n        long current16 = 0;\n        long previous16 = previous;\n   \
    \     long difference17 = 0;\n        long current17 = 0;\n        long previous17\
    \ = previous;\n        long difference18 = 0;\n        long current18 = 0;\n \
    \       long previous18 = previous;\n        long difference19 = 0;\n        long\
    \ current19 = 0;\n        long previous19 = previous;\n        long difference20\
    \ = 0;\n        long current20 = 0;\n        long previous20 = previous;\n   \
    \     long difference21 = 0;\n        long current21 = 0;\n        long previous21\
    \ = previous;\n        long difference22 = 0;\n        long current22 = 0;\n \
    \       long previous22 = previous;\n        long difference23 = 0;\n        long\
    \ current23 = 0;\n        long previous23 = previous;\n        long difference24\
    \ = 0;\n        long current24 = 0;\n        long previous24 = previous;\n   \
    \     long difference25 = 0;\n        long current25 = 0;\n        long previous25\
    \ = previous;\n        long difference26 = 0;\n        long current26 = 0;\n \
    \       long previous26 = previous;\n        long difference27 = 0;\n        long\
    \ current27 = 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcyhu9l1t.java:104: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long differencePrevious = 0;\n        long currentPrevious\
    \ = 0;\n        long previousPrevious = 0;\n        long differencePrevious =\
    \ 0;\n        long currentPrevious = 0;\n        long previousPrevious = 0;\n\
    \        long differencePrevious = 0;\n        long currentPrevious = 0;\n   \
    \     long previousPrevious = 0;\n        long differencePrevious = 0;\n     \
    \   long currentPrevious = 0;\n        long previousPrevious = 0;\n        long\
    \ differencePrevious = 0;\n        long currentPrevious = 0;\n        long previousPrevious\
    \ = 0;\n        long differencePrevious = 0;\n        long currentPrevious = 0;\n\
    \        long previousPrevious = 0;\n        long differencePrevious = 0;\n  \
    \      long currentPrevious = 0;\n        long previousPrevious = 0;\n       \
    \ long differencePrevious = 0;\n        long currentPrevious = 0;\n        long\
    \ previousPrevious = 0;\n        long differencePrevious = 0;\n        long currentPrevious\
    \ = 0;\n        long previousPrevious = 0;\n        long differencePrevious =\
    \ 0;\n        long currentPrevious = 0;\n        long previousPrevious = 0;\n\
    \        long differencePrevious = 0;\n        long currentPrevious = 0;\n   \
    \     long previousPrevious = 0;\n        long differencePrevious = 0;\n     \
    \   long currentPrevious = 0;\n        long previousPrevious = 0;\n        long\
    \ differencePrevious = 0;\n        long currentPrevious = 0;\n        long previousPrevious\
    \ = 0;\n        long differencePrevious = 0;\n        long currentPrevious = 0;\n\
    \        long previousPrevious = 0;\n        long differencePrevious = 0;\n  \
    \      long currentPrevious = 0;\n        long previousPrevious = 0;\n       \
    \ long differencePrevious = 0;\n        long currentPrevious = 0;\n        long\
    \ previousPrevious = 0;\n        long differencePrevious = 0;\n        long currentPrevious\
    \ = 0;\n        long previousPrevious = 0;\n        long differencePrevious =\
    \ 0;\n        long currentPrevious = 0;\n        long previousPrevious = 0;\n\
    \        long differencePrevious = 0;\n        long currentPrevious = 0;\n   \
    \     long previousPrevious = 0;\n        long differencePrevious = 0;\n     \
    \   long currentPrevious = 0;\n        long previousPrevious = 0;\n        long\
    \ differencePrevious = 0;\n        long currentPrevious = 0;\n        long previousPrevious\
    \ = 0;\n        long differencePrevious = 0;\n        long currentPrevious = 0;\n\
    \        long previousPrevious = 0;\n        long differencePrevious = 0;\n  \
    \      long currentPrevious = 0;\n        long previousPrevious = 0;\n       \
    \ long differencePrevious = 0;\n        long currentPrevious = 0;\n        long\
    \ previousPrevious = 0;\n        long differencePrevious = 0;\n        long currentPrevious\
    \ = 0;\n        long previousPrevious = 0;\n        long differencePrevious =\
    \ 0;\n        long currentPrevious = 0;\n        long previousPrevious = 0;\n\
    \        long differencePrevious = 0;\n        long currentPrevious = 0;\n   \
    \     long previousPrevious = 0;\n        long differencePrevious = 0;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpklstzow1.java:30: error: variable differencePrevious is already\
    \ defined in method closestInteger(String)\n        long differencePrevious =\
    \ 0;\n             ^\n/tmp/tmpklstzow1.java:31: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:32: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:33: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:34: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:35: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:36: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:37: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:38: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:39: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:40: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:41: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:42: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:43: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:44: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:45: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:46: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:47: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:48: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:49: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:50: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:51: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:52: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:53: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:54: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:55: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:56: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:57: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:58: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:59: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:60: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:61: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:62: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:63: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:64: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:65: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:66: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:67: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:68: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:69: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:70: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:71: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:72: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:73: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:74: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:75: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:76: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:77: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:78: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:79: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:80: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:81: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:82: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:83: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:84: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:85: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:86: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:87: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:88: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:89: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:90: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:91: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:92: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:93: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:94: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:95: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:96: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:97: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:98: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:99: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:100: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:101: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:102: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:103: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:104: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:105: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:106: error: variable currentPrevious\
    \ is already defined in method closestInteger(String)\n        long currentPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:107: error: variable previousPrevious\
    \ is already defined in method closestInteger(String)\n        long previousPrevious\
    \ = 0;\n             ^\n/tmp/tmpklstzow1.java:108: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious\
    \ = 0;\n             ^\n79 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzqziws60.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpzqziws60.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps1wcu5hx.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmps1wcu5hx.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDistance = Long.MAX_VALUE;\n        long\
    \ currentDistance = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDifference = Long.MAX_VALUE;\n        long difference = Long.MAX_VALUE;\n\
    \        long differenceFromZero = Long.MAX_VALUE;\n        long differenceFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromZeroFromZeroFromZeroFromZero = Long.MAX_VALUE;\n \
    \       long differenceFromZeroFromZeroFromZeroFromZeroFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3cy7vtt.java:46: error: ';' expected\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom\n\
    \                                                                            \
    \       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDifference = Long.MAX_VALUE;\n      \
    \  long difference = Long.MAX_VALUE;\n        long currentInteger = Long.parseLong(value);\n\
    \        long currentDifference = Long.MAX_VALUE;\n        long currentClosestDifference\
    \ = Long.MAX_VALUE;\n        long currentClosestInteger = Long.MAX_VALUE;\n  \
    \      long currentClosestIntegerDifference = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbs\
    \ = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiff = Long.MAX_VALUE;\n\
    \        long currentClosestIntegerDifferenceAbsDiffAbs = Long.MAX_VALUE;\n  \
    \      long currentClosestIntegerDifferenceAbsDiffAbsDiff = Long.MAX_VALUE;\n\
    \        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbs = Long.MAX_VALUE;\n\
    \        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiff = Long.MAX_VALUE;\n\
    \        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbs = Long.MAX_VALUE;\n\
    \        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiff = Long.MAX_VALUE;\n\
    \        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiff = Long.MAX_VALUE;\n\
    \        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiffAbs =\
    \ Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = Long.MAX_VALUE;\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAb\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6bxyqmd.java:47: error: ';' expected\n        long currentClosestIntegerDifferenceAbsDiffAbsDiffAb\n\
    \                                                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        if (closestDouble < closestDouble2) {\n            closest = closestDouble;\n\
    \        } else {\n            closest = closestDouble2;\n        }\n        return\
    \ closest;\n\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz05svs76.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n            closest = closestDouble;\n                \
    \      ^\n/tmp/tmpz05svs76.java:30: error: incompatible types: possible lossy\
    \ conversion from double to long\n            closest = closestDouble2;\n    \
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpncszxxzr.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff;\n     \
    \   long diffAbs;\n        long diffAbs2;\n        long diffAbs3;\n        long\
    \ diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n        long diffAbs7;\n\
    \        long diffAbs8;\n        long diffAbs9;\n        long diffAbs10;\n   \
    \     long diffAbs11;\n        long diffAbs12;\n        long diffAbs13;\n    \
    \    long diffAbs14;\n        long diffAbs15;\n        long diffAbs16;\n     \
    \   long diffAbs17;\n        long diffAbs18;\n        long diffAbs19;\n      \
    \  long diffAbs20;\n        long diffAbs21;\n        long diffAbs22;\n       \
    \ long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n        long\
    \ diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n        long diffAbs29;\n\
    \        long diffAbs30;\n        long diffAbs31;\n        long diffAbs32;\n \
    \       long diffAbs33;\n        long diffAbs34;\n        long diffAbs35;\n  \
    \      long diffAbs36;\n        long diffAbs37;\n        long diffAbs38;\n   \
    \     long diffAbs39;\n        long diffAbs40;\n        long diffAbs41;\n    \
    \    long diffAbs42;\n        long diffAbs43;\n        long diffAbs44;\n     \
    \   long diffAbs45;\n        long diffAbs46;\n        long diffAbs47;\n      \
    \  long diffAbs48;\n        long diffAbs49;\n        long diffAbs50;\n       \
    \ long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n        long\
    \ diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n        long diffAbs57;\n\
    \        long diffAbs58;\n        long diffAbs59;\n        long diffAbs60;\n \
    \       long diffAbs61;\n        long diffAbs62;\n        long diffAbs63;\n  \
    \      long diffAbs64;\n        long diff\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3jutvcid.java:90: error: ';' expected\n        long diff\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.round(d*10);\n        double\
    \ closestDouble3 = Math.round(d*100);\n        double closestDouble4 = Math.round(d*1000);\n\
    \        double closestDouble5 = Math.round(d*10000);\n        double closestDouble6\
    \ = Math.round(d*100000);\n        double closestDouble7 = Math.round(d*1000000);\n\
    \        double closestDouble8 = Math.round(d*10000000);\n        double closestDouble9\
    \ = Math.round(d*100000000);\n        double closestDouble10 = Math.round(d*1000000000);\n\
    \        double closestDouble11 = Math.round(d*10000000000);\n        double closestDouble12\
    \ = Math.round(d*100000000000);\n        double closestDouble13 = Math.round(d*1000000000000);\n\
    \        double closestDouble14 = Math.round(d*10000000000000);\n        double\
    \ closestDouble15 = Math.round(d*100000000000000);\n        double closestDouble16\
    \ = Math.round(d*1000000000000000);\n        double closestDouble17 = Math.round(d*10000000000000000);\n\
    \        double closestDouble18 = Math.round(d*100000000000000000);\n        double\
    \ closestDouble19 = Math.round(d*1000000000000000010);\n        double closestDouble20\
    \ = Math.round(d*10000000000000000100);\n        double closestDouble21 = Math.round(d*100000000000000001000);\n\
    \        double closestDouble22 = Math.round(d*1000000000000000010000);\n    \
    \    double closestDouble23 = Math.round(d*10000000000000000100000);\n       \
    \ double closestDouble24 = Math.round(d*100000000000000001000010);\n        double\
    \ closestDouble25 = Math.round(d*1000000000000000010000100);\n        double closestDouble26\
    \ = Math.round(d*10000000000000000100001000);\n        double closestDouble27\
    \ = Math.round(d*100000000000000001000010000);\n        double closestDouble28\
    \ = Math.round(d*1000000000000000010000100000);\n        double closestDouble29\
    \ = Math.round(d*10000000000000000100001000010);\n        double closestDouble30\
    \ = Math.round(d*100000000000000001000010000100);\n        double closestDouble31\
    \ = Math.round(d*1000000000000000010000100001000);\n        double closestDouble32\
    \ = Math.round(d*10000000000000000100001000010000);\n        double closestDouble33\
    \ = Math.round(d*100000000000000001000010000100000);\n        double closestDouble34\
    \ = Math.round(d*1000000000000000010000100001000010);\n        double closestDouble35\
    \ = Math.round(d*10000000000000000100001000010000100);\n        double closestDouble36\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_quhwc9.java:35: error: integer number too large\n        double\
    \ closestDouble11 = Math.round(d*10000000000);\n                             \
    \                 ^\n/tmp/tmpi_quhwc9.java:36: error: integer number too large\n\
    \        double closestDouble12 = Math.round(d*100000000000);\n              \
    \                                ^\n/tmp/tmpi_quhwc9.java:37: error: integer number\
    \ too large\n        double closestDouble13 = Math.round(d*1000000000000);\n \
    \                                             ^\n/tmp/tmpi_quhwc9.java:38: error:\
    \ integer number too large\n        double closestDouble14 = Math.round(d*10000000000000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:39: error:\
    \ integer number too large\n        double closestDouble15 = Math.round(d*100000000000000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:40: error:\
    \ integer number too large\n        double closestDouble16 = Math.round(d*1000000000000000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:41: error:\
    \ integer number too large\n        double closestDouble17 = Math.round(d*10000000000000000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:42: error:\
    \ integer number too large\n        double closestDouble18 = Math.round(d*100000000000000000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:43: error:\
    \ integer number too large\n        double closestDouble19 = Math.round(d*1000000000000000010);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:44: error:\
    \ integer number too large\n        double closestDouble20 = Math.round(d*10000000000000000100);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:45: error:\
    \ integer number too large\n        double closestDouble21 = Math.round(d*100000000000000001000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:46: error:\
    \ integer number too large\n        double closestDouble22 = Math.round(d*1000000000000000010000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:47: error:\
    \ integer number too large\n        double closestDouble23 = Math.round(d*10000000000000000100000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:48: error:\
    \ integer number too large\n        double closestDouble24 = Math.round(d*100000000000000001000010);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:49: error:\
    \ integer number too large\n        double closestDouble25 = Math.round(d*1000000000000000010000100);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:50: error:\
    \ integer number too large\n        double closestDouble26 = Math.round(d*10000000000000000100001000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:51: error:\
    \ integer number too large\n        double closestDouble27 = Math.round(d*100000000000000001000010000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:52: error:\
    \ integer number too large\n        double closestDouble28 = Math.round(d*1000000000000000010000100000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:53: error:\
    \ integer number too large\n        double closestDouble29 = Math.round(d*10000000000000000100001000010);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:54: error:\
    \ integer number too large\n        double closestDouble30 = Math.round(d*100000000000000001000010000100);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:55: error:\
    \ integer number too large\n        double closestDouble31 = Math.round(d*1000000000000000010000100001000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:56: error:\
    \ integer number too large\n        double closestDouble32 = Math.round(d*10000000000000000100001000010000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:57: error:\
    \ integer number too large\n        double closestDouble33 = Math.round(d*100000000000000001000010000100000);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:58: error:\
    \ integer number too large\n        double closestDouble34 = Math.round(d*1000000000000000010000100001000010);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:59: error:\
    \ integer number too large\n        double closestDouble35 = Math.round(d*10000000000000000100001000010000100);\n\
    \                                              ^\n/tmp/tmpi_quhwc9.java:60: error:\
    \ ';' expected\n        double closestDouble36\n                             \
    \ ^\n26 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbf3yy3g5.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        if (closestDouble2 > Math.abs(d - closest)) {\n            closest =\
    \ closestDouble;\n        } else {\n            closest = closestDouble2;\n  \
    \      }\n        return closest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpolv1xnp4.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n            closest = closestDouble;\n                \
    \      ^\n/tmp/tmpolv1xnp4.java:30: error: incompatible types: possible lossy\
    \ conversion from double to long\n            closest = closestDouble2;\n    \
    \                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpch1_t1m8.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpch1_t1m8.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4fu1c_hv.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp4fu1c_hv.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDistance = Long.MAX_VALUE;\n        long\
    \ currentDistance = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDifference = Long.MAX_VALUE;\n        long currentDifferenceSquare\
    \ = Long.MAX_VALUE;\n        long currentDifferenceSquareRoot = Long.MAX_VALUE;\n\
    \        long currentDifferenceRoot = Long.MAX_VALUE;\n        long currentDifferenceRootSquare\
    \ = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot = Long.MAX_VALUE;\n\
    \        long currentDifferenceRootSquareRoot2 = Long.MAX_VALUE;\n        long\
    \ currentDifferenceRootSquareRoot3 = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot4\
    \ = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot5 = Long.MAX_VALUE;\n\
    \        long currentDifferenceRootSquareRoot6 = Long.MAX_VALUE;\n        long\
    \ currentDifferenceRootSquareRoot7 = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot8\
    \ = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot9 = Long.MAX_VALUE;\n\
    \        long currentDifferenceRootSquareRoot10 = Long.MAX_VALUE;\n        long\
    \ currentDifferenceRootSquareRoot11 = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot12\
    \ = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot13 = Long.MAX_VALUE;\n\
    \        long currentDifferenceRootSquareRoot14 = Long.MAX_VALUE;\n        long\
    \ currentDifferenceRootSquareRoot15 = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot16\
    \ = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot17 = Long.MAX_VALUE;\n\
    \        long currentDifferenceRootSquareRoot18 = Long.MAX_VALUE;\n        long\
    \ currentDifferenceRootSquareRoot19 = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot20\
    \ = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot21 = Long.MAX_VALUE;\n\
    \        long currentDifferenceRootSquareRoot22 = Long.MAX_VALUE;\n        long\
    \ currentDifferenceRootSquareRoot23 = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot24\
    \ = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot25 = Long.MAX_VALUE;\n\
    \        long currentDifferenceRootSquareRoot26 = Long.MAX_VALUE;\n        long\
    \ currentDifferenceRootSquareRoot27 = Long.MAX_VALUE;\n        long currentDifferenceRootSquareRoot28\
    \ = Long.MAX_VALUE;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwhiszm8n.java:60: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdlp0_vln.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpdlp0_vln.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptgq_vp7u.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmptgq_vp7u.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu44oy8fd.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpu44oy8fd.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        double\
    \ closestDouble4 = Math.abs(closestDouble3 - d);\n        double closestDouble5\
    \ = Math.abs(closestDouble4 - d);\n        double closestDouble6 = Math.abs(closestDouble5\
    \ - d);\n        double closestDouble7 = Math.abs(closestDouble6 - d);\n     \
    \   double closestDouble8 = Math.abs(closestDouble7 - d);\n        double closestDouble9\
    \ = Math.abs(closestDouble8 - d);\n        double closestDouble10 = Math.abs(closestDouble9\
    \ - d);\n        double closestDouble11 = Math.abs(closestDouble10 - d);\n   \
    \     double closestDouble12 = Math.abs(closestDouble11 - d);\n        double\
    \ closestDouble13 = Math.abs(closestDouble12 - d);\n        double closestDouble14\
    \ = Math.abs(closestDouble13 - d);\n        double closestDouble15 = Math.abs(closestDouble14\
    \ - d);\n        double closestDouble16 = Math.abs(closestDouble15 - d);\n   \
    \     double closestDouble17 = Math.abs(closestDouble16 - d);\n        double\
    \ closestDouble18 = Math.abs(closestDouble17 - d);\n        double closestDouble19\
    \ = Math.abs(closestDouble18 - d);\n        double closestDouble20 = Math.abs(closestDouble19\
    \ - d);\n        double closestDouble21 = Math.abs(closestDouble20 - d);\n   \
    \     double closestDouble22 = Math.abs(closestDouble21 - d);\n        double\
    \ closestDouble23 = Math.abs(closestDouble22 - d);\n        double closestDouble24\
    \ = Math.abs(closestDouble23 - d);\n        double closestDouble25 = Math.abs(closestDouble24\
    \ - d);\n        double closestDouble26 = Math.abs(closestDouble25 - d);\n   \
    \     double closestDouble27 = Math.abs(closestDouble26 - d);\n        double\
    \ closestDouble28 = Math.abs(closestDouble27 - d);\n        double closestDouble29\
    \ = Math.abs(closestDouble28 - d);\n        double closestDouble30 = Math.abs(closestDouble29\
    \ - d);\n        double closestDouble31 = Math.abs(closestDouble30 - d);\n   \
    \     double closestDouble32 = Math.abs(closestDouble31 - d);\n        double\
    \ closestDouble33 = Math.abs(closestDouble32 - d);\n        double closestDouble34\
    \ = Math.abs(closestDouble33 - d);\n        double closestDouble35 = Math.abs(closestDouble34\
    \ - d);\n        double closestDouble36 = Math.abs(closestDouble35 - d);\n   \
    \     double closestDouble37 = Math.abs(closestDouble36 - d);\n        double\
    \ closestDouble38 = Math.abs(closestDouble37 - d);\n        double closestDouble39\
    \ = Math.abs(closestDouble38 - d);\n        double closestDouble\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwif_2tki.java:64: error: ';' expected\n        double closestDouble\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference;\n        long difference2;\n        long difference3;\n\
    \        long difference4;\n        long difference5;\n        long difference6;\n\
    \        long difference7;\n        long difference8;\n        long difference9;\n\
    \        long difference10;\n        long difference11;\n        long difference12;\n\
    \        long difference13;\n        long difference14;\n        long difference15;\n\
    \        long difference16;\n        long difference17;\n        long difference18;\n\
    \        long difference19;\n        long difference20;\n        long difference21;\n\
    \        long difference22;\n        long difference23;\n        long difference24;\n\
    \        long difference25;\n        long difference26;\n        long difference27;\n\
    \        long difference28;\n        long difference29;\n        long difference30;\n\
    \        long difference31;\n        long difference32;\n        long difference33;\n\
    \        long difference34;\n        long difference35;\n        long difference36;\n\
    \        long difference37;\n        long difference38;\n        long difference39;\n\
    \        long difference40;\n        long difference41;\n        long difference42;\n\
    \        long difference43;\n        long difference44;\n        long difference45;\n\
    \        long difference46;\n        long difference47;\n        long difference48;\n\
    \        long difference49;\n        long difference50;\n        long difference51;\n\
    \        long difference52;\n        long difference53;\n        long difference54;\n\
    \        long difference55;\n        long difference56;\n        long difference57;\n\
    \        long difference58;\n        long difference59;\n        long difference60;\n\
    \        long difference61;\n        long difference62;\n        long difference63;\n\
    \        long difference64;\n        long difference65;\n        long difference66;\n\
    \        long difference67;\n        long difference68;\n        long difference69;\n\
    \        long difference70;\n        long difference71;\n        long difference72;\n\
    \        long difference73;\n        long difference74;\n        long difference75;\n\
    \        long difference76;\n        long difference77;\n        long difference78;\n\
    \        long difference79;\n        long difference80;\n        long difference81;\n\
    \        long difference82;\n        long difference83;\n        long difference84;\n\
    \        long difference85;\n        long difference86;\n        long difference87;\n\
    \        long difference88;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5tcgdkh0.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long difference2 = Long.MAX_VALUE;\n        long current2;\n        long\
    \ difference3 = Long.MAX_VALUE;\n        long current3;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long current4;\n        long difference5 = Long.MAX_VALUE;\n\
    \        long current5;\n        long difference6 = Long.MAX_VALUE;\n        long\
    \ current6;\n        long difference7 = Long.MAX_VALUE;\n        long current7;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long current8;\n        long\
    \ difference9 = Long.MAX_VALUE;\n        long current9;\n        long difference10\
    \ = Long.MAX_VALUE;\n        long current10;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long current11;\n        long difference12 = Long.MAX_VALUE;\n      \
    \  long current12;\n        long difference13 = Long.MAX_VALUE;\n        long\
    \ current13;\n        long difference14 = Long.MAX_VALUE;\n        long current14;\n\
    \        long difference15 = Long.MAX_VALUE;\n        long current15;\n      \
    \  long difference16 = Long.MAX_VALUE;\n        long current16;\n        long\
    \ difference17 = Long.MAX_VALUE;\n        long current17;\n        long difference18\
    \ = Long.MAX_VALUE;\n        long current18;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long current19;\n        long difference20 = Long.MAX_VALUE;\n      \
    \  long current20;\n        long difference21 = Long.MAX_VALUE;\n        long\
    \ current21;\n        long difference22 = Long.MAX_VALUE;\n        long current22;\n\
    \        long difference23 = Long.MAX_VALUE;\n        long current23;\n      \
    \  long difference24 = Long.MAX_VALUE;\n        long current24;\n        long\
    \ difference25 = Long.MAX_VALUE;\n        long current25;\n        long difference26\
    \ = Long.MAX_VALUE;\n        long current26;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long current27;\n        long difference28 = Long.MAX_VALUE;\n      \
    \  long current28;\n        long difference29 = Long.MAX_VALUE;\n        long\
    \ current29;\n        long difference30 = Long.MAX_VALUE;\n        long current30;\n\
    \        long difference31 = Long.MAX_VALUE;\n        long current31;\n      \
    \  long difference32 = Long.MAX_VALUE\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_znwsmqi.java:86: error: ';' expected\n        long difference32\
    \ = Long.MAX_VALUE\n                                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double number = Double.parseDouble(value);\n        double difference\
    \ = Math.abs(number - Math.floor(number));\n        if (difference < 0.5) {\n\
    \            closest = Math.floor(number);\n        } else {\n            closest\
    \ = Math.ceil(number);\n        }\n        return closest;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03o43wf3.java:27: error: incompatible types: possible lossy conversion\
    \ from double to long\n            closest = Math.floor(number);\n           \
    \                     ^\n/tmp/tmp03o43wf3.java:29: error: incompatible types:\
    \ possible lossy conversion from double to long\n            closest = Math.ceil(number);\n\
    \                               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7s9zfwas.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp7s9zfwas.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsi6uu8qn.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double number = Double.parseDouble(value);\n        double difference\
    \ = Math.abs(number - Math.floor(number));\n        double difference2 = Math.abs(number\
    \ - Math.ceil(number));\n        if (difference < difference2) {\n           \
    \ closest = number;\n        } else {\n            closest = Math.ceil(number);\n\
    \        }\n        return closest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqb4t50rq.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n            closest = number;\n                      ^\n\
    /tmp/tmpqb4t50rq.java:30: error: incompatible types: possible lossy conversion\
    \ from double to long\n            closest = Math.ceil(number);\n            \
    \                   ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long diff;\n        long diff2;\n        long diff3;\n\
    \        long diff4;\n        long diff5;\n        long diff6;\n        long diff7;\n\
    \        long diff8;\n        long diff9;\n        long diff10;\n        long\
    \ diff11;\n        long diff12;\n        long diff13;\n        long diff14;\n\
    \        long diff15;\n        long diff16;\n        long diff17;\n        long\
    \ diff18;\n        long diff19;\n        long diff20;\n        long diff21;\n\
    \        long diff22;\n        long diff23;\n        long diff24;\n        long\
    \ diff25;\n        long diff26;\n        long diff27;\n        long diff28;\n\
    \        long diff29;\n        long diff30;\n        long diff31;\n        long\
    \ diff32;\n        long diff33;\n        long diff34;\n        long diff35;\n\
    \        long diff36;\n        long diff37;\n        long diff38;\n        long\
    \ diff39;\n        long diff40;\n        long diff41;\n        long diff42;\n\
    \        long diff43;\n        long diff44;\n        long diff45;\n        long\
    \ diff46;\n        long diff47;\n        long diff48;\n        long diff49;\n\
    \        long diff50;\n        long diff51;\n        long diff52;\n        long\
    \ diff53;\n        long diff54;\n        long diff55;\n        long diff56;\n\
    \        long diff57;\n        long diff58;\n        long diff59;\n        long\
    \ diff60;\n        long diff61;\n        long diff62;\n        long diff63;\n\
    \        long diff64;\n        long diff65;\n        long diff66;\n        long\
    \ diff67;\n        long diff68;\n        long diff69;\n        long diff70;\n\
    \        long diff71;\n        long diff72;\n        long diff73;\n        long\
    \ diff74;\n        long diff75;\n        long diff76;\n        long diff77;\n\
    \        long diff78;\n        long diff79;\n        long diff80;\n        long\
    \ diff81;\n        long diff82;\n        long diff83;\n        long diff84;\n\
    \        long diff\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4y_u45ts.java:111: error: ';' expected\n        long diff\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long difference2 = 0;\n        long current2 = 0;\n \
    \       long previous2 = 0;\n        long difference3 = 0;\n        long current3\
    \ = 0;\n        long previous3 = 0;\n        long difference4 = 0;\n        long\
    \ current4 = 0;\n        long previous4 = 0;\n        long difference5 = 0;\n\
    \        long current5 = 0;\n        long previous5 = 0;\n        long difference6\
    \ = 0;\n        long current6 = 0;\n        long previous6 = 0;\n        long\
    \ difference7 = 0;\n        long current7 = 0;\n        long previous7 = 0;\n\
    \        long difference8 = 0;\n        long current8 = 0;\n        long previous8\
    \ = 0;\n        long difference9 = 0;\n        long current9 = 0;\n        long\
    \ previous9 = 0;\n        long difference10 = 0;\n        long current10 = 0;\n\
    \        long previous10 = 0;\n        long difference11 = 0;\n        long current11\
    \ = 0;\n        long previous11 = 0;\n        long difference12 = 0;\n       \
    \ long current12 = 0;\n        long previous12 = 0;\n        long difference13\
    \ = 0;\n        long current13 = 0;\n        long previous13 = 0;\n        long\
    \ difference14 = 0;\n        long current14 = 0;\n        long previous14 = 0;\n\
    \        long difference15 = 0;\n        long current15 = 0;\n        long previous15\
    \ = 0;\n        long difference16 = 0;\n        long current16 = 0;\n        long\
    \ previous16 = 0;\n        long difference17 = 0;\n        long current17 = 0;\n\
    \        long previous17 = 0;\n        long difference18 = 0;\n        long current18\
    \ = 0;\n        long previous18 = 0;\n        long difference19 = 0;\n       \
    \ long current19 = 0;\n        long previous19 = 0;\n        long difference20\
    \ = 0;\n        long current20 = 0;\n        long previous20 = 0;\n        long\
    \ difference21 = 0;\n        long current21 = 0;\n        long previous21 = 0;\n\
    \        long difference22 = 0;\n        long current22 = 0;\n        long previous22\
    \ = 0;\n        long difference23 = 0;\n        long current23 = 0;\n        long\
    \ previous23 = 0;\n        long difference24 = 0;\n        long current24 = 0;\n\
    \        long previous24 = 0;\n        long difference25 = 0;\n        long current25\
    \ = 0;\n        long previous25 = 0;\n        long difference26 = 0;\n       \
    \ long current26 = 0;\n        long previous26 = 0;\n        long difference27\
    \ = 0;\n        long current27 = 0;\n        long previous27 = 0;\n        long\
    \ difference28 = 0;\n        long current28 = 0;\n        long previous28 = 0;\n\
    \        long difference29 = 0;\n        long current29 = 0;\n        long previous29\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmglwkalm.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnkr6rz31.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpnkr6rz31.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long difference2 =\
    \ Long.MAX_VALUE;\n        long difference3 = Long.MAX_VALUE;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long difference5 = Long.MAX_VALUE;\n        long\
    \ difference6 = Long.MAX_VALUE;\n        long difference7 = Long.MAX_VALUE;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long difference9 = Long.MAX_VALUE;\n\
    \        long difference10 = Long.MAX_VALUE;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long difference12 = Long.MAX_VALUE;\n        long difference13 = Long.MAX_VALUE;\n\
    \        long difference14 = Long.MAX_VALUE;\n        long difference15 = Long.MAX_VALUE;\n\
    \        long difference16 = Long.MAX_VALUE;\n        long difference17 = Long.MAX_VALUE;\n\
    \        long difference18 = Long.MAX_VALUE;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long difference20 = Long.MAX_VALUE;\n        long difference21 = Long.MAX_VALUE;\n\
    \        long difference22 = Long.MAX_VALUE;\n        long difference23 = Long.MAX_VALUE;\n\
    \        long difference24 = Long.MAX_VALUE;\n        long difference25 = Long.MAX_VALUE;\n\
    \        long difference26 = Long.MAX_VALUE;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long difference28 = Long.MAX_VALUE;\n        long difference29 = Long.MAX_VALUE;\n\
    \        long difference30 = Long.MAX_VALUE;\n        long difference31 = Long.MAX_VALUE;\n\
    \        long difference32 = Long.MAX_VALUE;\n        long difference33 = Long.MAX_VALUE;\n\
    \        long difference34 = Long.MAX_VALUE;\n        long difference35 = Long.MAX_VALUE;\n\
    \        long difference36 = Long.MAX_VALUE;\n        long difference37 = Long.MAX_VALUE;\n\
    \        long difference38 = Long.MAX_VALUE;\n        long difference39 = Long.MAX_VALUE;\n\
    \        long difference40 = Long.MAX_VALUE;\n        long difference41 = Long.MAX_VALUE;\n\
    \        long difference42 = Long.MAX_VALUE;\n        long difference43 = Long.MAX_VALUE;\n\
    \        long difference44 = Long.MAX_VALUE;\n        long difference45 = Long.MAX_VALUE;\n\
    \        long difference46 = Long.MAX_VALUE;\n        long difference47 = Long.MAX_VALUE;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxf6zrsf.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmppxf6zrsf.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff;\n     \
    \   long diffAbs;\n        long absDiff;\n        long absDiffAbs;\n        long\
    \ absDiffAbs2;\n        long absDiffAbs3;\n        long absDiffAbs4;\n       \
    \ long absDiffAbs5;\n        long absDiffAbs6;\n        long absDiffAbs7;\n  \
    \      long absDiffAbs8;\n        long absDiffAbs9;\n        long absDiffAbs10;\n\
    \        long absDiffAbs11;\n        long absDiffAbs12;\n        long absDiffAbs13;\n\
    \        long absDiffAbs14;\n        long absDiffAbs15;\n        long absDiffAbs16;\n\
    \        long absDiffAbs17;\n        long absDiffAbs18;\n        long absDiffAbs19;\n\
    \        long absDiffAbs20;\n        long absDiffAbs21;\n        long absDiffAbs22;\n\
    \        long absDiffAbs23;\n        long absDiffAbs24;\n        long absDiffAbs25;\n\
    \        long absDiffAbs26;\n        long absDiffAbs27;\n        long absDiffAbs28;\n\
    \        long absDiffAbs29;\n        long absDiffAbs30;\n        long absDiffAbs31;\n\
    \        long absDiffAbs32;\n        long absDiffAbs33;\n        long absDiffAbs34;\n\
    \        long absDiffAbs35;\n        long absDiffAbs36;\n        long absDiffAbs37;\n\
    \        long absDiffAbs38;\n        long absDiffAbs39;\n        long absDiffAbs40;\n\
    \        long absDiffAbs41;\n        long absDiffAbs42;\n        long absDiffAbs43;\n\
    \        long absDiffAbs44;\n        long absDiffAbs45;\n        long absDiffAbs46;\n\
    \        long absDiffAbs47;\n        long absDiffAbs48;\n        long absDiffAbs49;\n\
    \        long absDiffAbs50;\n        long absDiffAbs51;\n        long absDiffAbs52;\n\
    \        long absDiffAbs53;\n        long absDiffAbs54;\n        long absDiffAbs55;\n\
    \        long absDiffAbs5\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcsnsjqdm.java:83: error: ';' expected\n        long absDiffAbs5\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long temp = 0;\n        long temp2\
    \ = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 =\
    \ 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n\
    \        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n\
    \        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84 = 0;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmxyyub07.java:109: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long difference;\n        long difference2;\n        long difference3;\n\
    \        long difference4;\n        long difference5;\n        long difference6;\n\
    \        long difference7;\n        long difference8;\n        long difference9;\n\
    \        long difference10;\n        long difference11;\n        long difference12;\n\
    \        long difference13;\n        long difference14;\n        long difference15;\n\
    \        long difference16;\n        long difference17;\n        long difference18;\n\
    \        long difference19;\n        long difference20;\n        long difference21;\n\
    \        long difference22;\n        long difference23;\n        long difference24;\n\
    \        long difference25;\n        long difference26;\n        long difference27;\n\
    \        long difference28;\n        long difference29;\n        long difference30;\n\
    \        long difference31;\n        long difference32;\n        long difference33;\n\
    \        long difference34;\n        long difference35;\n        long difference36;\n\
    \        long difference37;\n        long difference38;\n        long difference39;\n\
    \        long difference40;\n        long difference41;\n        long difference42;\n\
    \        long difference43;\n        long difference44;\n        long difference45;\n\
    \        long difference46;\n        long difference47;\n        long difference48;\n\
    \        long difference49;\n        long difference50;\n        long difference51;\n\
    \        long difference52;\n        long difference53;\n        long difference54;\n\
    \        long difference55;\n        long difference56;\n        long difference57;\n\
    \        long difference58;\n        long difference59;\n        long difference60;\n\
    \        long difference61;\n        long difference62;\n        long difference63;\n\
    \        long difference64;\n        long difference65;\n        long difference66;\n\
    \        long difference67;\n        long difference68;\n        long difference69;\n\
    \        long difference70;\n        long difference71;\n        long difference72;\n\
    \        long difference73;\n        long difference74;\n        long difference75;\n\
    \        long difference76;\n        long difference77;\n        long difference78;\n\
    \        long difference79;\n        long difference80;\n        long difference81;\n\
    \        long difference82;\n        long difference83;\n        long difference84;\n\
    \        long difference85;\n        long difference86;\n        long difference87;\n\
    \        long difference88;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxrmqmx3l.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long temp = 0;\n        long temp2\
    \ = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 =\
    \ 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n\
    \        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n\
    \        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n\
    \        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n\
    \        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84 = 0;\n        long temp\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeq_6lnuk.java:109: error: ';' expected\n        long temp\n   \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0dhiy828.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp0dhiy828.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        long closest = 0;\n        long closestDiff = Long.MAX_VALUE;\n\
    \        long currentDiff = Long.MAX_VALUE;\n        long current;\n        long\
    \ diff;\n        long diffAbs;\n        long absDiff;\n        long absDiffAbs;\n\
    \        long absDiffAbs2;\n        long absDiffAbs3;\n        long absDiffAbs4;\n\
    \        long absDiffAbs5;\n        long absDiffAbs6;\n        long absDiffAbs7;\n\
    \        long absDiffAbs8;\n        long absDiffAbs9;\n        long absDiffAbs10;\n\
    \        long absDiffAbs11;\n        long absDiffAbs12;\n        long absDiffAbs13;\n\
    \        long absDiffAbs14;\n        long absDiffAbs15;\n        long absDiffAbs16;\n\
    \        long absDiffAbs17;\n        long absDiffAbs18;\n        long absDiffAbs19;\n\
    \        long absDiffAbs20;\n        long absDiffAbs21;\n        long absDiffAbs22;\n\
    \        long absDiffAbs23;\n        long absDiffAbs24;\n        long absDiffAbs25;\n\
    \        long absDiffAbs26;\n        long absDiffAbs27;\n        long absDiffAbs28;\n\
    \        long absDiffAbs29;\n        long absDiffAbs30;\n        long absDiffAbs31;\n\
    \        long absDiffAbs32;\n        long absDiffAbs33;\n        long absDiffAbs34;\n\
    \        long absDiffAbs35;\n        long absDiffAbs36;\n        long absDiffAbs37;\n\
    \        long absDiffAbs38;\n        long absDiffAbs39;\n        long absDiffAbs40;\n\
    \        long absDiffAbs41;\n        long absDiffAbs42;\n        long absDiffAbs43;\n\
    \        long absDiffAbs44;\n        long absDiffAbs45;\n        long absDiffAbs46;\n\
    \        long absDiffAbs47;\n        long absDiffAbs48;\n        long absDiffAbs49;\n\
    \        long absDiffAbs50;\n        long absDiffAbs51;\n        long absDiffAbs52;\n\
    \        long absDiffAbs53;\n        long absDiff\n    }\n    public static void\
    \ main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpacndad66.java:84: error: ';' expected\n        long absDiff\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpygert30l.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpygert30l.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpival6294.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpival6294.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long differencePrevious = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differencePrevious2\
    \ = 0;\n        long difference\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxgd66hu.java:97: error: ';' expected\n        long difference\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long closestDiff = 0;\n        long\
    \ closestDiff2 = 0;\n        long closestDiff3 = 0;\n        long closestDiff4\
    \ = 0;\n        long closestDiff5 = 0;\n        long closestDiff6 = 0;\n     \
    \   long closestDiff7 = 0;\n        long closestDiff8 = 0;\n        long closestDiff9\
    \ = 0;\n        long closestDiff10 = 0;\n        long closestDiff11 = 0;\n   \
    \     long closestDiff12 = 0;\n        long closestDiff13 = 0;\n        long closestDiff14\
    \ = 0;\n        long closestDiff15 = 0;\n        long closestDiff16 = 0;\n   \
    \     long closestDiff17 = 0;\n        long closestDiff18 = 0;\n        long closestDiff19\
    \ = 0;\n        long closestDiff20 = 0;\n        long closestDiff21 = 0;\n   \
    \     long closestDiff22 = 0;\n        long closestDiff23 = 0;\n        long closestDiff24\
    \ = 0;\n        long closestDiff25 = 0;\n        long closestDiff26 = 0;\n   \
    \     long closestDiff27 = 0;\n        long closestDiff28 = 0;\n        long closestDiff29\
    \ = 0;\n        long closestDiff30 = 0;\n        long closestDiff31 = 0;\n   \
    \     long closestDiff32 = 0;\n        long closestDiff33 = 0;\n        long closestDiff34\
    \ = 0;\n        long closestDiff35 = 0;\n        long closestDiff36 = 0;\n   \
    \     long closestDiff37 = 0;\n        long closestDiff38 = 0;\n        long closestDiff39\
    \ = 0;\n        long closestDiff40 = 0;\n        long closestDiff41 = 0;\n   \
    \     long closestDiff42 = 0;\n        long closestDiff43 = 0;\n        long closestDiff44\
    \ = 0;\n        long closestDiff45 = 0;\n        long closestDiff46 = 0;\n   \
    \     long closestDiff47 = 0;\n        long closestDiff48 = 0;\n        long closestDiff49\
    \ = 0;\n        long closestDiff50 = 0;\n        long closestDiff51 = 0;\n   \
    \     long closestDiff52 = 0;\n        long closestDiff53 = 0;\n        long closestDiff54\
    \ = 0;\n        long closestDiff55 = 0;\n        long closestDiff56 = 0;\n   \
    \     long closestDiff57 = 0;\n        long closestDiff58 = 0;\n        long closestDiff59\
    \ = 0;\n        long closestDiff60 = 0;\n        long closestDiff61 = 0;\n   \
    \     long closestDiff62 = 0;\n        long closestDiff63 = 0;\n        long closestDiff64\
    \ = 0;\n        long closestDiff65 = 0;\n        long closestDiff66 = 0;\n   \
    \     long closestDiff67 = 0;\n        long closestDiff68 = 0;\n        long closestDiff69\
    \ = 0;\n        long closestDiff70 = 0;\n        long closestDiff71 = 0;\n   \
    \     long closestDiff72 = 0;\n        long closest\n    }\n    public static\
    \ void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp16rlyp0f.java:97: error: ';' expected\n        long closest\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvcenmol_.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpvcenmol_.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        if (closestDouble == d) {\n            closest = (long)\
    \ closestDouble;\n        } else {\n            closest = (long) Math.ceil(closestDouble);\n\
    \        }\n        return closest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphqv6g23z.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps1s4_s0s.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmps1s4_s0s.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long difference2;\n        long current2;\n    \
    \    long previous2;\n        long difference3;\n        long current3;\n    \
    \    long previous3;\n        long difference4;\n        long current4;\n    \
    \    long previous4;\n        long difference5;\n        long current5;\n    \
    \    long previous5;\n        long difference6;\n        long current6;\n    \
    \    long previous6;\n        long difference7;\n        long current7;\n    \
    \    long previous7;\n        long difference8;\n        long current8;\n    \
    \    long previous8;\n        long difference9;\n        long current9;\n    \
    \    long previous9;\n        long difference10;\n        long current10;\n  \
    \      long previous10;\n        long difference11;\n        long current11;\n\
    \        long previous11;\n        long difference12;\n        long current12;\n\
    \        long previous12;\n        long difference13;\n        long current13;\n\
    \        long previous13;\n        long difference14;\n        long current14;\n\
    \        long previous14;\n        long difference15;\n        long current15;\n\
    \        long previous15;\n        long difference16;\n        long current16;\n\
    \        long previous16;\n        long difference17;\n        long current17;\n\
    \        long previous17;\n        long difference18;\n        long current18;\n\
    \        long previous18;\n        long difference19;\n        long current19;\n\
    \        long previous19;\n        long difference20;\n        long current20;\n\
    \        long previous20;\n        long difference21;\n        long current21;\n\
    \        long previous21;\n        long difference22;\n        long current22;\n\
    \        long previous22;\n        long difference23;\n        long current23;\n\
    \        long previous23;\n        long difference24;\n        long current24;\n\
    \        long previous24;\n        long difference25;\n        long current25;\n\
    \        long previous25;\n        long difference26;\n        long current26;\n\
    \        long previous26;\n        long difference27;\n        long current27;\n\
    \        long previous27;\n        long difference28;\n        long current28;\n\
    \        long previous28;\n        long difference29;\n        long current29;\n\
    \        long previous29;\n        long difference30;\n        long current30;\n\
    \        long previous30;\n        long difference31;\n        long current31;\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42t6nq18.java:117: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ d;\n        double closestDouble2 = d;\n        double closestDouble3 = d;\n\
    \        double closestDouble4 = d;\n        double closestDouble5 = d;\n    \
    \    double closestDouble6 = d;\n        double closestDouble7 = d;\n        double\
    \ closestDouble8 = d;\n        double closestDouble9 = d;\n        double closestDouble10\
    \ = d;\n        double closestDouble11 = d;\n        double closestDouble12 =\
    \ d;\n        double closestDouble13 = d;\n        double closestDouble14 = d;\n\
    \        double closestDouble15 = d;\n        double closestDouble16 = d;\n  \
    \      double closestDouble17 = d;\n        double closestDouble18 = d;\n    \
    \    double closestDouble19 = d;\n        double closestDouble20 = d;\n      \
    \  double closestDouble21 = d;\n        double closestDouble22 = d;\n        double\
    \ closestDouble23 = d;\n        double closestDouble24 = d;\n        double closestDouble25\
    \ = d;\n        double closestDouble26 = d;\n        double closestDouble27 =\
    \ d;\n        double closestDouble28 = d;\n        double closestDouble29 = d;\n\
    \        double closestDouble30 = d;\n        double closestDouble31 = d;\n  \
    \      double closestDouble32 = d;\n        double closestDouble33 = d;\n    \
    \    double closestDouble34 = d;\n        double closestDouble35 = d;\n      \
    \  double closestDouble36 = d;\n        double closestDouble37 = d;\n        double\
    \ closestDouble38 = d;\n        double closestDouble39 = d;\n        double closestDouble40\
    \ = d;\n        double closestDouble41 = d;\n        double closestDouble42 =\
    \ d;\n        double closestDouble43 = d;\n        double closestDouble44 = d;\n\
    \        double closestDouble45 = d;\n        double closestDouble46 = d;\n  \
    \      double closestDouble47 = d;\n        double closestDouble48 = d;\n    \
    \    double closestDouble49 = d;\n        double closestDouble50 = d;\n      \
    \  double closestDouble51 = d;\n        double closestDouble52 = d;\n        double\
    \ closestDouble53 = d;\n        double closestDouble54 = d;\n        double closestDouble55\
    \ = d;\n        double closestDouble56 = d;\n        double closestDouble57 =\
    \ d;\n        double closestDouble58 = d;\n        double closestDouble59 = d;\n\
    \        double closestDouble60 = d;\n        double closestDouble61 = d;\n  \
    \      double closestDouble62 = d;\n        double closestDouble63 = d;\n    \
    \    double closestDouble64 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpawb9jrnz.java:89: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmo7f274r.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ d;\n        double closestDouble2 = d;\n        double closestDouble3 = d;\n\
    \        double closestDouble4 = d;\n        double closestDouble5 = d;\n    \
    \    double closestDouble6 = d;\n        double closestDouble7 = d;\n        double\
    \ closestDouble8 = d;\n        double closestDouble9 = d;\n        double closestDouble10\
    \ = d;\n        double closestDouble11 = d;\n        double closestDouble12 =\
    \ d;\n        double closestDouble13 = d;\n        double closestDouble14 = d;\n\
    \        double closestDouble15 = d;\n        double closestDouble16 = d;\n  \
    \      double closestDouble17 = d;\n        double closestDouble18 = d;\n    \
    \    double closestDouble19 = d;\n        double closestDouble20 = d;\n      \
    \  double closestDouble21 = d;\n        double closestDouble22 = d;\n        double\
    \ closestDouble23 = d;\n        double closestDouble24 = d;\n        double closestDouble25\
    \ = d;\n        double closestDouble26 = d;\n        double closestDouble27 =\
    \ d;\n        double closestDouble28 = d;\n        double closestDouble29 = d;\n\
    \        double closestDouble30 = d;\n        double closestDouble31 = d;\n  \
    \      double closestDouble32 = d;\n        double closestDouble33 = d;\n    \
    \    double closestDouble34 = d;\n        double closestDouble35 = d;\n      \
    \  double closestDouble36 = d;\n        double closestDouble37 = d;\n        double\
    \ closestDouble38 = d;\n        double closestDouble39 = d;\n        double closestDouble40\
    \ = d;\n        double closestDouble41 = d;\n        double closestDouble42 =\
    \ d;\n        double closestDouble43 = d;\n        double closestDouble44 = d;\n\
    \        double closestDouble45 = d;\n        double closestDouble46 = d;\n  \
    \      double closestDouble47 = d;\n        double closestDouble48 = d;\n    \
    \    double closestDouble49 = d;\n        double closestDouble50 = d;\n      \
    \  double closestDouble51 = d;\n        double closestDouble52 = d;\n        double\
    \ closestDouble53 = d;\n        double closestDouble54 = d;\n        double closestDouble55\
    \ = d;\n        double closestDouble56 = d;\n        double closestDouble57 =\
    \ d;\n        double closestDouble58 = d;\n        double closestDouble59 = d;\n\
    \        double closestDouble60 = d;\n        double closestDouble61 = d;\n  \
    \      double closestDouble62 = d;\n        double closestDouble63 = d;\n    \
    \    double closestDouble64 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn_lh5vj8.java:89: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5il955a.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpe5il955a.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long closestDistance = Long.MAX_VALUE;\n        long\
    \ currentDistance = Long.MAX_VALUE;\n        long currentInteger = Long.MAX_VALUE;\n\
    \        long currentDifference = Long.MAX_VALUE;\n        long difference = Long.MAX_VALUE;\n\
    \        long differenceFromZero = Long.MAX_VALUE;\n        long differenceFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromZeroFromZeroFromZeroFromZero = Long.MAX_VALUE;\n \
    \       long differenceFromZeroFromZeroFromZeroFromZeroFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa9hrcovm.java:46: error: ';' expected\n        long differenceFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFromZeroFrom\n\
    \                                                                            \
    \       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long difference = Long.MAX_VALUE;\n        long currentInteger\
    \ = Long.parseLong(value);\n        long differenceFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromTwoIntegers = Long.MAX_VALUE;\n        long differenceFromOneInteger\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromOneIntegerFromTwoIntegers = Long.MAX_VALUE;\n    \
    \    long differenceFromOneIntegerFromOneInteger = Long.MAX_VALUE;\n        long\
    \ differenceFromOneIntegerFromOneIntegerFromZero = Long.MAX_VALUE;\n        long\
    \ differenceFromOneIntegerFromOneIntegerFromTwoIntegers = Long.MAX_VALUE;\n  \
    \      long differenceFromOneIntegerFromOneIntegerFromOneInteger = Long.MAX_VALUE;\n\
    \        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromZero = Long.MAX_VALUE;\n\
    \        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromTwoIntegers\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneInteger\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromTwoIntegers\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneInteger\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromTwoIntegers\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromTwoIntegers\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromZero\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromTwoIntegers\
    \ = Long.MAX_VALUE;\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOne\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvtl_fcw8.java:47: error: ';' expected\n        long differenceFromOneIntegerFromOneIntegerFromOneIntegerFromOneIntegerFromOne\n\
    \                                                                            \
    \          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff = 0;\n \
    \       long diffAbs = 0;\n        long absDiff = 0;\n        long absDiffAbs\
    \ = 0;\n        long absDiffAbsMinusOne = 0;\n        long absDiffAbsMinusTwo\
    \ = 0;\n        long absDiffAbsMinusThree = 0;\n        long absDiffAbsMinusFour\
    \ = 0;\n        long absDiffAbsMinusFive = 0;\n        long absDiffAbsMinusSix\
    \ = 0;\n        long absDiffAbsMinusSeven = 0;\n        long absDiffAbsMinusEight\
    \ = 0;\n        long absDiffAbsMinusNine = 0;\n        long absDiffAbsMinusTen\
    \ = 0;\n        long absDiffAbsMinusEleven = 0;\n        long absDiffAbsMinusTwelve\
    \ = 0;\n        long absDiffAbsMinusThirteen = 0;\n        long absDiffAbsMinusFourteen\
    \ = 0;\n        long absDiffAbsMinusFifteen = 0;\n        long absDiffAbsMinusSixteen\
    \ = 0;\n        long absDiffAbsMinusSeventeen = 0;\n        long absDiffAbsMinusEighteen\
    \ = 0;\n        long absDiffAbsMinusNineteen = 0;\n        long absDiffAbsMinusTwenty\
    \ = 0;\n        long absDiffAbsMinusTwentyOne = 0;\n        long absDiffAbsMinusTwentyTwo\
    \ = 0;\n        long absDiffAbsMinusTwentyThree = 0;\n        long absDiffAbsMinusTwentyFour\
    \ = 0;\n        long absDiffAbsMinusTwentyFive = 0;\n        long absDiffAbsMinusTwentySix\
    \ = 0;\n        long absDiffAbsMinusTwentySeven = 0;\n        long absDiffAbsMinusTwentyEight\
    \ = 0;\n        long absDiffAbsMinusTwentyNine = 0;\n        long absDiffAbsMinusTwentyTen\
    \ = 0;\n        long absDiffAbsMinusTwentyEleven = 0;\n        long absDiffAbsMinusTwentyTwelve\
    \ = 0;\n        long absDiffAbsMinusTwentyThirteen = 0;\n        long absDiffAbsMinusTwentyFourteen\
    \ = 0;\n        long absDiffAbsMinusTwentyFifteen = 0;\n        long absDiffAbsMinus\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu55mcest.java:64: error: ';' expected\n        long absDiffAbsMinus\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3w_pjqr.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkan7k231.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkxle3uze.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpkxle3uze.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = Math.round(value.charAt(0)) * Math.pow(10, value.length() - 1);\n        long\
    \ difference = Math.abs(closest - Long.parseLong(value));\n        if (difference\
    \ < closest) {\n            closest = difference;\n        }\n        return closest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr28vwyxe.java:23: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long closest = Math.round(value.charAt(0)) * Math.pow(10,\
    \ value.length() - 1);\n                                                   ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        double\
    \ closestDouble4 = Math.abs(closestDouble3 - d);\n        double closestDouble5\
    \ = Math.abs(closestDouble4 - d);\n        double closestDouble6 = Math.abs(closestDouble5\
    \ - d);\n        double closestDouble7 = Math.abs(closestDouble6 - d);\n     \
    \   double closestDouble8 = Math.abs(closestDouble7 - d);\n        double closestDouble9\
    \ = Math.abs(closestDouble8 - d);\n        double closestDouble10 = Math.abs(closestDouble9\
    \ - d);\n        double closestDouble11 = Math.abs(closestDouble10 - d);\n   \
    \     double closestDouble12 = Math.abs(closestDouble11 - d);\n        double\
    \ closestDouble13 = Math.abs(closestDouble12 - d);\n        double closestDouble14\
    \ = Math.abs(closestDouble13 - d);\n        double closestDouble15 = Math.abs(closestDouble14\
    \ - d);\n        double closestDouble16 = Math.abs(closestDouble15 - d);\n   \
    \     double closestDouble17 = Math.abs(closestDouble16 - d);\n        double\
    \ closestDouble18 = Math.abs(closestDouble17 - d);\n        double closestDouble19\
    \ = Math.abs(closestDouble18 - d);\n        double closestDouble20 = Math.abs(closestDouble19\
    \ - d);\n        double closestDouble21 = Math.abs(closestDouble20 - d);\n   \
    \     double closestDouble22 = Math.abs(closestDouble21 - d);\n        double\
    \ closestDouble23 = Math.abs(closestDouble22 - d);\n        double closestDouble24\
    \ = Math.abs(closestDouble23 - d);\n        double closestDouble25 = Math.abs(closestDouble24\
    \ - d);\n        double closestDouble26 = Math.abs(closestDouble25 - d);\n   \
    \     double closestDouble27 = Math.abs(closestDouble26 - d);\n        double\
    \ closestDouble28 = Math.abs(closestDouble27 - d);\n        double closestDouble29\
    \ = Math.abs(closestDouble28 - d);\n        double closestDouble30 = Math.abs(closestDouble29\
    \ - d);\n        double closestDouble31 = Math.abs(closestDouble30 - d);\n   \
    \     double closestDouble32 = Math.abs(closestDouble31 - d);\n        double\
    \ closestDouble33 = Math.abs(closestDouble32 - d);\n        double closestDouble34\
    \ = Math.abs(closestDouble33 - d);\n        double closestDouble35 = Math.abs(closestDouble34\
    \ - d);\n        double closestDouble36 = Math.abs(closestDouble35 - d);\n   \
    \     double closestDouble37 = Math.abs(closestDouble36 - d);\n        double\
    \ closestDouble38 = Math.abs(closestDouble37 - d);\n        double closestDouble39\
    \ = Math.abs(closestDouble38 - d);\n        double closestDouble\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8tugoin.java:64: error: ';' expected\n        double closestDouble\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa12mh9uh.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpa12mh9uh.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff;\n     \
    \   long diffAbs;\n        long absDiff;\n        long absDiffAbs;\n        long\
    \ absDiffAbs2;\n        long absDiffAbs3;\n        long absDiffAbs4;\n       \
    \ long absDiffAbs5;\n        long absDiffAbs6;\n        long absDiffAbs7;\n  \
    \      long absDiffAbs8;\n        long absDiffAbs9;\n        long absDiffAbs10;\n\
    \        long absDiffAbs11;\n        long absDiffAbs12;\n        long absDiffAbs13;\n\
    \        long absDiffAbs14;\n        long absDiffAbs15;\n        long absDiffAbs16;\n\
    \        long absDiffAbs17;\n        long absDiffAbs18;\n        long absDiffAbs19;\n\
    \        long absDiffAbs20;\n        long absDiffAbs21;\n        long absDiffAbs22;\n\
    \        long absDiffAbs23;\n        long absDiffAbs24;\n        long absDiffAbs25;\n\
    \        long absDiffAbs26;\n        long absDiffAbs27;\n        long absDiffAbs28;\n\
    \        long absDiffAbs29;\n        long absDiffAbs30;\n        long absDiffAbs31;\n\
    \        long absDiffAbs32;\n        long absDiffAbs33;\n        long absDiffAbs34;\n\
    \        long absDiffAbs35;\n        long absDiffAbs36;\n        long absDiffAbs37;\n\
    \        long absDiffAbs38;\n        long absDiffAbs39;\n        long absDiffAbs40;\n\
    \        long absDiffAbs41;\n        long absDiffAbs42;\n        long absDiffAbs43;\n\
    \        long absDiffAbs44;\n        long absDiffAbs45;\n        long absDiffAbs46;\n\
    \        long absDiffAbs47;\n        long absDiffAbs48;\n        long absDiffAbs49;\n\
    \        long absDiffAbs50;\n        long absDiffAbs51;\n        long absDiffAbs52;\n\
    \        long absDiffAbs53;\n        long absDiffAbs54;\n        long absDiffAbs55;\n\
    \        long absDiffAbs5\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp34ws9_q1.java:83: error: ';' expected\n        long absDiffAbs5\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcspztxgl.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpcspztxgl.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeikbndih.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpeikbndih.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl4btkuvw.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long closestDiff = Long.MAX_VALUE;\n        long diff;\n     \
    \   long diffAbs;\n        long diffAbs2;\n        long diffAbs3;\n        long\
    \ diffAbs4;\n        long diffAbs5;\n        long diffAbs6;\n        long diffAbs7;\n\
    \        long diffAbs8;\n        long diffAbs9;\n        long diffAbs10;\n   \
    \     long diffAbs11;\n        long diffAbs12;\n        long diffAbs13;\n    \
    \    long diffAbs14;\n        long diffAbs15;\n        long diffAbs16;\n     \
    \   long diffAbs17;\n        long diffAbs18;\n        long diffAbs19;\n      \
    \  long diffAbs20;\n        long diffAbs21;\n        long diffAbs22;\n       \
    \ long diffAbs23;\n        long diffAbs24;\n        long diffAbs25;\n        long\
    \ diffAbs26;\n        long diffAbs27;\n        long diffAbs28;\n        long diffAbs29;\n\
    \        long diffAbs30;\n        long diffAbs31;\n        long diffAbs32;\n \
    \       long diffAbs33;\n        long diffAbs34;\n        long diffAbs35;\n  \
    \      long diffAbs36;\n        long diffAbs37;\n        long diffAbs38;\n   \
    \     long diffAbs39;\n        long diffAbs40;\n        long diffAbs41;\n    \
    \    long diffAbs42;\n        long diffAbs43;\n        long diffAbs44;\n     \
    \   long diffAbs45;\n        long diffAbs46;\n        long diffAbs47;\n      \
    \  long diffAbs48;\n        long diffAbs49;\n        long diffAbs50;\n       \
    \ long diffAbs51;\n        long diffAbs52;\n        long diffAbs53;\n        long\
    \ diffAbs54;\n        long diffAbs55;\n        long diffAbs56;\n        long diffAbs57;\n\
    \        long diffAbs58;\n        long diffAbs59;\n        long diffAbs60;\n \
    \       long diffAbs61;\n        long diffAbs62;\n        long diffAbs63;\n  \
    \      long diffAbs64;\n        long diff\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpomd8u0z9.java:90: error: ';' expected\n        long diff\n    \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp125f7rmn.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp125f7rmn.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ difference2 = 0;\n        long current2 = 0;\n        long difference3 = 0;\n\
    \        long current3 = 0;\n        long difference4 = 0;\n        long current4\
    \ = 0;\n        long difference5 = 0;\n        long current5 = 0;\n        long\
    \ difference6 = 0;\n        long current6 = 0;\n        long difference7 = 0;\n\
    \        long current7 = 0;\n        long difference8 = 0;\n        long current8\
    \ = 0;\n        long difference9 = 0;\n        long current9 = 0;\n        long\
    \ difference10 = 0;\n        long current10 = 0;\n        long difference11 =\
    \ 0;\n        long current11 = 0;\n        long difference12 = 0;\n        long\
    \ current12 = 0;\n        long difference13 = 0;\n        long current13 = 0;\n\
    \        long difference14 = 0;\n        long current14 = 0;\n        long difference15\
    \ = 0;\n        long current15 = 0;\n        long difference16 = 0;\n        long\
    \ current16 = 0;\n        long difference17 = 0;\n        long current17 = 0;\n\
    \        long difference18 = 0;\n        long current18 = 0;\n        long difference19\
    \ = 0;\n        long current19 = 0;\n        long difference20 = 0;\n        long\
    \ current20 = 0;\n        long difference21 = 0;\n        long current21 = 0;\n\
    \        long difference22 = 0;\n        long current22 = 0;\n        long difference23\
    \ = 0;\n        long current23 = 0;\n        long difference24 = 0;\n        long\
    \ current24 = 0;\n        long difference25 = 0;\n        long current25 = 0;\n\
    \        long difference26 = 0;\n        long current26 = 0;\n        long difference27\
    \ = 0;\n        long current27 = 0;\n        long difference28 = 0;\n        long\
    \ current28 = 0;\n        long difference29 = 0;\n        long current29 = 0;\n\
    \        long difference30 = 0;\n        long current30 = 0;\n        long difference31\
    \ = 0;\n        long current31 = 0;\n        long difference32 = 0;\n        long\
    \ current32 = 0;\n        long difference33 = 0;\n        long current33 = 0;\n\
    \        long difference34 = 0;\n        long current34 = 0;\n        long difference35\
    \ = 0;\n        long current35 = 0;\n        long difference36 = 0;\n        long\
    \ current36 = 0;\n        long difference37 = 0;\n        long current37 = 0;\n\
    \        long difference38 = 0;\n        long current38 = 0;\n        long difference39\
    \ = 0;\n        long current39 = 0;\n        long difference40 = 0;\n        long\
    \ current40 = 0;\n        long difference41 = 0;\n        long current41 = 0;\n\
    \        long difference42 = 0;\n        long current42 = 0;\n        long difference43\
    \ = 0;\n        long current43 = 0;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2mpklss.java:111: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo03m1g6n.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long difference2 =\
    \ Long.MAX_VALUE;\n        long difference3 = Long.MAX_VALUE;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long difference5 = Long.MAX_VALUE;\n        long\
    \ difference6 = Long.MAX_VALUE;\n        long difference7 = Long.MAX_VALUE;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long difference9 = Long.MAX_VALUE;\n\
    \        long difference10 = Long.MAX_VALUE;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long difference12 = Long.MAX_VALUE;\n        long difference13 = Long.MAX_VALUE;\n\
    \        long difference14 = Long.MAX_VALUE;\n        long difference15 = Long.MAX_VALUE;\n\
    \        long difference16 = Long.MAX_VALUE;\n        long difference17 = Long.MAX_VALUE;\n\
    \        long difference18 = Long.MAX_VALUE;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long difference20 = Long.MAX_VALUE;\n        long difference21 = Long.MAX_VALUE;\n\
    \        long difference22 = Long.MAX_VALUE;\n        long difference23 = Long.MAX_VALUE;\n\
    \        long difference24 = Long.MAX_VALUE;\n        long difference25 = Long.MAX_VALUE;\n\
    \        long difference26 = Long.MAX_VALUE;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long difference28 = Long.MAX_VALUE;\n        long difference29 = Long.MAX_VALUE;\n\
    \        long difference30 = Long.MAX_VALUE;\n        long difference31 = Long.MAX_VALUE;\n\
    \        long difference32 = Long.MAX_VALUE;\n        long difference33 = Long.MAX_VALUE;\n\
    \        long difference34 = Long.MAX_VALUE;\n        long difference35 = Long.MAX_VALUE;\n\
    \        long difference36 = Long.MAX_VALUE;\n        long difference37 = Long.MAX_VALUE;\n\
    \        long difference38 = Long.MAX_VALUE;\n        long difference39 = Long.MAX_VALUE;\n\
    \        long difference40 = Long.MAX_VALUE;\n        long difference41 = Long.MAX_VALUE;\n\
    \        long difference42 = Long.MAX_VALUE;\n        long difference43 = Long.MAX_VALUE;\n\
    \        long difference44 = Long.MAX_VALUE;\n        long difference45 = Long.MAX_VALUE;\n\
    \        long difference46 = Long.MAX_VALUE;\n        long difference47 = Long.MAX_VALUE;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa_2y9ej7.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpa_2y9ej7.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = Long.MAX_VALUE;\n\
    \        long difference3 = Long.MAX_VALUE;\n        long difference4 = Long.MAX_VALUE;\n\
    \        long difference5 = Long.MAX_VALUE;\n        long difference6 = Long.MAX_VALUE;\n\
    \        long difference7 = Long.MAX_VALUE;\n        long difference8 = Long.MAX_VALUE;\n\
    \        long difference9 = Long.MAX_VALUE;\n        long difference10 = Long.MAX_VALUE;\n\
    \        long difference11 = Long.MAX_VALUE;\n        long difference12 = Long.MAX_VALUE;\n\
    \        long difference13 = Long.MAX_VALUE;\n        long difference14 = Long.MAX_VALUE;\n\
    \        long difference15 = Long.MAX_VALUE;\n        long difference16 = Long.MAX_VALUE;\n\
    \        long difference17 = Long.MAX_VALUE;\n        long difference18 = Long.MAX_VALUE;\n\
    \        long difference19 = Long.MAX_VALUE;\n        long difference20 = Long.MAX_VALUE;\n\
    \        long difference21 = Long.MAX_VALUE;\n        long difference22 = Long.MAX_VALUE;\n\
    \        long difference23 = Long.MAX_VALUE;\n        long difference24 = Long.MAX_VALUE;\n\
    \        long difference25 = Long.MAX_VALUE;\n        long difference26 = Long.MAX_VALUE;\n\
    \        long difference27 = Long.MAX_VALUE;\n        long difference28 = Long.MAX_VALUE;\n\
    \        long difference29 = Long.MAX_VALUE;\n        long difference30 = Long.MAX_VALUE;\n\
    \        long difference31 = Long.MAX_VALUE;\n        long difference32 = Long.MAX_VALUE;\n\
    \        long difference33 = Long.MAX_VALUE;\n        long difference34 = Long.MAX_VALUE;\n\
    \        long difference35 = Long.MAX_VALUE;\n        long difference36 = Long.MAX_VALUE;\n\
    \        long difference37 = Long.MAX_VALUE;\n        long difference38 = Long.MAX_VALUE;\n\
    \        long difference39 = Long.MAX_VALUE;\n        long difference40 = Long.MAX_VALUE;\n\
    \        long difference41 = Long.MAX_VALUE;\n        long difference42 = Long.MAX_VALUE;\n\
    \        long difference43 = Long.MAX_VALUE;\n        long difference44 = Long.MAX_VALUE;\n\
    \        long difference45 = Long.MAX_VALUE;\n        long difference46 = Long.MAX_VALUE;\n\
    \        long difference47 = Long.MAX_VALUE;\n        long difference48 = Long.\n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7iczf8re.java:71: error: <identifier> expected\n        long difference48\
    \ = Long.\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggb2ds9j.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        double\
    \ closestDouble4 = Math.abs(closestDouble3 - d);\n        double closestDouble5\
    \ = Math.abs(closestDouble4 - d);\n        double closestDouble6 = Math.abs(closestDouble5\
    \ - d);\n        double closestDouble7 = Math.abs(closestDouble6 - d);\n     \
    \   double closestDouble8 = Math.abs(closestDouble7 - d);\n        double closestDouble9\
    \ = Math.abs(closestDouble8 - d);\n        double closestDouble10 = Math.abs(closestDouble9\
    \ - d);\n        double closestDouble11 = Math.abs(closestDouble10 - d);\n   \
    \     double closestDouble12 = Math.abs(closestDouble11 - d);\n        double\
    \ closestDouble13 = Math.abs(closestDouble12 - d);\n        double closestDouble14\
    \ = Math.abs(closestDouble13 - d);\n        double closestDouble15 = Math.abs(closestDouble14\
    \ - d);\n        double closestDouble16 = Math.abs(closestDouble15 - d);\n   \
    \     double closestDouble17 = Math.abs(closestDouble16 - d);\n        double\
    \ closestDouble18 = Math.abs(closestDouble17 - d);\n        double closestDouble19\
    \ = Math.abs(closestDouble18 - d);\n        double closestDouble20 = Math.abs(closestDouble19\
    \ - d);\n        double closestDouble21 = Math.abs(closestDouble20 - d);\n   \
    \     double closestDouble22 = Math.abs(closestDouble21 - d);\n        double\
    \ closestDouble23 = Math.abs(closestDouble22 - d);\n        double closestDouble24\
    \ = Math.abs(closestDouble23 - d);\n        double closestDouble25 = Math.abs(closestDouble24\
    \ - d);\n        double closestDouble26 = Math.abs(closestDouble25 - d);\n   \
    \     double closestDouble27 = Math.abs(closestDouble26 - d);\n        double\
    \ closestDouble28 = Math.abs(closestDouble27 - d);\n        double closestDouble29\
    \ = Math.abs(closestDouble28 - d);\n        double closestDouble30 = Math.abs(closestDouble29\
    \ - d);\n        double closestDouble31 = Math.abs(closestDouble30 - d);\n   \
    \     double closestDouble32 = Math.abs(closestDouble31 - d);\n        double\
    \ closestDouble33 = Math.abs(closestDouble32 - d);\n        double closestDouble34\
    \ = Math.abs(closestDouble33 - d);\n        double closestDouble35 = Math.abs(closestDouble34\
    \ - d);\n        double closestDouble36 = Math.abs(closestDouble35 - d);\n   \
    \     double closestDouble37 = Math.abs(closestDouble36 - d);\n        double\
    \ closestDouble38 = Math.abs(closestDouble37 - d);\n        double closestDouble39\
    \ = Math.abs(closestDouble38 - d);\n        double closestDouble\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_896k_r.java:64: error: ';' expected\n        double closestDouble\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpai49iq49.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpai49iq49.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long differencePrevious = 0;\n        long differenceCurrent\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n        long differencePrevious3 = 0;\n        long differenceCurrent3\
    \ = 0;\n        long differencePrevious2 = 0;\n        long differenceCurrent2\
    \ = 0;\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvsbnyf79.java:33: error: variable differencePrevious2 is already\
    \ defined in method closestInteger(String)\n        long differencePrevious2 =\
    \ 0;\n             ^\n/tmp/tmpvsbnyf79.java:34: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:35: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:36: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:37: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:38: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:39: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:40: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:41: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:42: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:43: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:44: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:45: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:46: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:47: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:48: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:49: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:50: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:51: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:52: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:53: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:54: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:55: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:56: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:57: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:58: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:59: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:60: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:61: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:62: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:63: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:64: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:65: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:66: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:67: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:68: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:69: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:70: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:71: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:72: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:73: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:74: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:75: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:76: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:77: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:78: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:79: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:80: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:81: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:82: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:83: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:84: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:85: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:86: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:87: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:88: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:89: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:90: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:91: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:92: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:93: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:94: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:95: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:96: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:97: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:98: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:99: error: variable differencePrevious3\
    \ is already defined in method closestInteger(String)\n        long differencePrevious3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:100: error: variable differenceCurrent3\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent3\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:101: error: variable differencePrevious2\
    \ is already defined in method closestInteger(String)\n        long differencePrevious2\
    \ = 0;\n             ^\n/tmp/tmpvsbnyf79.java:102: error: variable differenceCurrent2\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent2\
    \ = 0;\n             ^\n70 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        long closest = 0;\n        long difference = 0;\n       \
    \ long difference2 = 0;\n        long difference3 = 0;\n        long difference4\
    \ = 0;\n        long difference5 = 0;\n        long difference6 = 0;\n       \
    \ long difference7 = 0;\n        long difference8 = 0;\n        long difference9\
    \ = 0;\n        long difference10 = 0;\n        long difference11 = 0;\n     \
    \   long difference12 = 0;\n        long difference13 = 0;\n        long difference14\
    \ = 0;\n        long difference15 = 0;\n        long difference16 = 0;\n     \
    \   long difference17 = 0;\n        long difference18 = 0;\n        long difference19\
    \ = 0;\n        long difference20 = 0;\n        long difference21 = 0;\n     \
    \   long difference22 = 0;\n        long difference23 = 0;\n        long difference24\
    \ = 0;\n        long difference25 = 0;\n        long difference26 = 0;\n     \
    \   long difference27 = 0;\n        long difference28 = 0;\n        long difference29\
    \ = 0;\n        long difference30 = 0;\n        long difference31 = 0;\n     \
    \   long difference32 = 0;\n        long difference33 = 0;\n        long difference34\
    \ = 0;\n        long difference35 = 0;\n        long difference36 = 0;\n     \
    \   long difference37 = 0;\n        long difference38 = 0;\n        long difference39\
    \ = 0;\n        long difference40 = 0;\n        long difference41 = 0;\n     \
    \   long difference42 = 0;\n        long difference43 = 0;\n        long difference44\
    \ = 0;\n        long difference45 = 0;\n        long difference46 = 0;\n     \
    \   long difference47 = 0;\n        long difference48 = 0;\n        long difference49\
    \ = 0;\n        long difference50 = 0;\n        long difference51 = 0;\n     \
    \   long difference52 = 0;\n        long difference53 = 0;\n        long difference54\
    \ = 0;\n        long difference55 = 0;\n        long difference56 = 0;\n     \
    \   long difference57 = 0;\n        long difference58 = 0;\n        long difference59\
    \ = 0;\n        long difference60 = 0;\n        long difference61 = 0;\n     \
    \   long difference62 = 0;\n        long difference63 = 0;\n        long difference64\
    \ = 0;\n        long difference65 = 0;\n        long difference66 = 0;\n     \
    \   long difference67 = 0;\n        long difference68 = 0;\n        long difference69\
    \ = 0;\n        long difference70 = 0;\n        long difference71 = 0;\n     \
    \   long difference72 = 0;\n        long difference73 = 0;\n        long difference74\
    \ = 0;\n        long difference75 = 0;\n        long difference76 = 0;\n     \
    \   long difference77 = 0;\n        long difference78 = 0;\n        long difference79\
    \ = 0;\n        long difference80 = 0;\n        long difference81 = 0;\n     \
    \   long difference82 = 0;\n        long difference83 = 0;\n        long difference84\
    \ = 0;\n        long difference\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmped8woomh.java:109: error: ';' expected\n        long difference\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1li2damp.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp1li2damp.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Your\
    \ code here\n        long closest = 0;\n        long difference = 0;\n       \
    \ long difference2 = Long.MAX_VALUE;\n        long difference3 = Long.MIN_VALUE;\n\
    \        long difference4 = 0;\n        long difference5 = 0;\n        long difference6\
    \ = 0;\n        long difference7 = 0;\n        long difference8 = 0;\n       \
    \ long difference9 = 0;\n        long difference10 = 0;\n        long difference11\
    \ = 0;\n        long difference12 = 0;\n        long difference13 = 0;\n     \
    \   long difference14 = 0;\n        long difference15 = 0;\n        long difference16\
    \ = 0;\n        long difference17 = 0;\n        long difference18 = 0;\n     \
    \   long difference19 = 0;\n        long difference20 = 0;\n        long difference21\
    \ = 0;\n        long difference22 = 0;\n        long difference23 = 0;\n     \
    \   long difference24 = 0;\n        long difference25 = 0;\n        long difference26\
    \ = 0;\n        long difference27 = 0;\n        long difference28 = 0;\n     \
    \   long difference29 = 0;\n        long difference30 = 0;\n        long difference31\
    \ = 0;\n        long difference32 = 0;\n        long difference33 = 0;\n     \
    \   long difference34 = 0;\n        long difference35 = 0;\n        long difference36\
    \ = 0;\n        long difference37 = 0;\n        long difference38 = 0;\n     \
    \   long difference39 = 0;\n        long difference40 = 0;\n        long difference41\
    \ = 0;\n        long difference42 = 0;\n        long difference43 = 0;\n     \
    \   long difference44 = 0;\n        long difference45 = 0;\n        long difference46\
    \ = 0;\n        long difference47 = 0;\n        long difference48 = 0;\n     \
    \   long difference49 = 0;\n        long difference50 = 0;\n        long difference51\
    \ = 0;\n        long difference52 = 0;\n        long difference53 = 0;\n     \
    \   long difference54 = 0;\n        long difference55 = 0;\n        long difference56\
    \ = 0;\n        long difference57 = 0;\n        long difference58 = 0;\n     \
    \   long difference59 = 0;\n        long difference60 = 0;\n        long difference61\
    \ = 0;\n        long difference62 = 0;\n        long difference63 = 0;\n     \
    \   long difference64 = 0;\n        long difference65 = 0;\n        long difference66\
    \ = 0;\n        long difference67 = 0;\n        long difference68 = 0;\n     \
    \   long difference69 = 0;\n        long difference70 = 0;\n        long difference71\
    \ = 0;\n        long difference72 = 0;\n        long difference73 = 0;\n     \
    \   long difference74 = 0;\n        long difference75 = 0;\n        long difference76\
    \ = 0;\n        long difference77 = 0;\n        long difference78 = 0;\n     \
    \   long difference79 = 0;\n        long difference80 = 0;\n        long difference81\
    \ = 0;\n        long difference82 = 0;\n        long difference83 = 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8v4zo4mk.java:108: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long current = 0;\n        long\
    \ previous = 0;\n        long difference2 = 0;\n        long current2 = 0;\n \
    \       long previous2 = 0;\n        long difference3 = 0;\n        long current3\
    \ = 0;\n        long previous3 = 0;\n        long difference4 = 0;\n        long\
    \ current4 = 0;\n        long previous4 = 0;\n        long difference5 = 0;\n\
    \        long current5 = 0;\n        long previous5 = 0;\n        long difference6\
    \ = 0;\n        long current6 = 0;\n        long previous6 = 0;\n        long\
    \ difference7 = 0;\n        long current7 = 0;\n        long previous7 = 0;\n\
    \        long difference8 = 0;\n        long current8 = 0;\n        long previous8\
    \ = 0;\n        long difference9 = 0;\n        long current9 = 0;\n        long\
    \ previous9 = 0;\n        long difference10 = 0;\n        long current10 = 0;\n\
    \        long previous10 = 0;\n        long difference11 = 0;\n        long current11\
    \ = 0;\n        long previous11 = 0;\n        long difference12 = 0;\n       \
    \ long current12 = 0;\n        long previous12 = 0;\n        long difference13\
    \ = 0;\n        long current13 = 0;\n        long previous13 = 0;\n        long\
    \ difference14 = 0;\n        long current14 = 0;\n        long previous14 = 0;\n\
    \        long difference15 = 0;\n        long current15 = 0;\n        long previous15\
    \ = 0;\n        long difference16 = 0;\n        long current16 = 0;\n        long\
    \ previous16 = 0;\n        long difference17 = 0;\n        long current17 = 0;\n\
    \        long previous17 = 0;\n        long difference18 = 0;\n        long current18\
    \ = 0;\n        long previous18 = 0;\n        long difference19 = 0;\n       \
    \ long current19 = 0;\n        long previous19 = 0;\n        long difference20\
    \ = 0;\n        long current20 = 0;\n        long previous20 = 0;\n        long\
    \ difference21 = 0;\n        long current21 = 0;\n        long previous21 = 0;\n\
    \        long difference22 = 0;\n        long current22 = 0;\n        long previous22\
    \ = 0;\n        long difference23 = 0;\n        long current23 = 0;\n        long\
    \ previous23 = 0;\n        long difference24 = 0;\n        long current24 = 0;\n\
    \        long previous24 = 0;\n        long difference25 = 0;\n        long current25\
    \ = 0;\n        long previous25 = 0;\n        long difference26 = 0;\n       \
    \ long current26 = 0;\n        long previous26 = 0;\n        long difference27\
    \ = 0;\n        long current27 = 0;\n        long previous27 = 0;\n        long\
    \ difference28 = 0;\n        long current28 = 0;\n        long previous28 = 0;\n\
    \        long difference29 = 0;\n        long current29 = 0;\n        long previous29\
    \ = 0;\n\n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5ft6bk2.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diffAbs;\n        long diffAbsMax;\n       \
    \ long diffAbsMaxIndex;\n        long diffAbsMaxValue;\n        long diffAbsMaxValueIndex;\n\
    \        long diffAbsMaxValueValue;\n        long diffAbsMaxValueValueIndex;\n\
    \        long diffAbsMaxValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbsMaxValueValueValueValue;\n        long diffAbsMaxValueValueValueIndex;\n\
    \        long diffAbs\n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1x63yl4j.java:72: error: ';' expected\n        long diffAbs\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6t5v322h.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp6t5v322h.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        double\
    \ closestDouble4 = Math.abs(closestDouble3 - d);\n        double closestDouble5\
    \ = Math.abs(closestDouble4 - d);\n        double closestDouble6 = Math.abs(closestDouble5\
    \ - d);\n        double closestDouble7 = Math.abs(closestDouble6 - d);\n     \
    \   double closestDouble8 = Math.abs(closestDouble7 - d);\n        double closestDouble9\
    \ = Math.abs(closestDouble8 - d);\n        double closestDouble10 = Math.abs(closestDouble9\
    \ - d);\n        double closestDouble11 = Math.abs(closestDouble10 - d);\n   \
    \     double closestDouble12 = Math.abs(closestDouble11 - d);\n        double\
    \ closestDouble13 = Math.abs(closestDouble12 - d);\n        double closestDouble14\
    \ = Math.abs(closestDouble13 - d);\n        double closestDouble15 = Math.abs(closestDouble14\
    \ - d);\n        double closestDouble16 = Math.abs(closestDouble15 - d);\n   \
    \     double closestDouble17 = Math.abs(closestDouble16 - d);\n        double\
    \ closestDouble18 = Math.abs(closestDouble17 - d);\n        double closestDouble19\
    \ = Math.abs(closestDouble18 - d);\n        double closestDouble20 = Math.abs(closestDouble19\
    \ - d);\n        double closestDouble21 = Math.abs(closestDouble20 - d);\n   \
    \     double closestDouble22 = Math.abs(closestDouble21 - d);\n        double\
    \ closestDouble23 = Math.abs(closestDouble22 - d);\n        double closestDouble24\
    \ = Math.abs(closestDouble23 - d);\n        double closestDouble25 = Math.abs(closestDouble24\
    \ - d);\n        double closestDouble26 = Math.abs(closestDouble25 - d);\n   \
    \     double closestDouble27 = Math.abs(closestDouble26 - d);\n        double\
    \ closestDouble28 = Math.abs(closestDouble27 - d);\n        double closestDouble29\
    \ = Math.abs(closestDouble28 - d);\n        double closestDouble30 = Math.abs(closestDouble29\
    \ - d);\n        double closestDouble31 = Math.abs(closestDouble30 - d);\n   \
    \     double closestDouble32 = Math.abs(closestDouble31 - d);\n        double\
    \ closestDouble33 = Math.abs(closestDouble32 - d);\n        double closestDouble34\
    \ = Math.abs(closestDouble33 - d);\n        double closestDouble35 = Math.abs(closestDouble34\
    \ - d);\n        double closestDouble36 = Math.abs(closestDouble35 - d);\n   \
    \     double closestDouble37 = Math.abs(closestDouble36 - d);\n        double\
    \ closestDouble38 = Math.abs(closestDouble37 - d);\n        double closestDouble39\
    \ = Math.abs(closestDouble38 - d);\n        double closestDouble\n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr89fyd37.java:64: error: ';' expected\n        double closestDouble\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = Math.round(value.charAt(0)) * Math.pow(10, value.length());\n        long\
    \ difference = closest - Integer.parseInt(value);\n        if (difference < 0)\
    \ {\n            difference = -difference;\n        }\n        return difference;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphabbdqp9.java:23: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long closest = Math.round(value.charAt(0)) * Math.pow(10,\
    \ value.length());\n                                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd552xz0o.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        // Write\
    \ your code here\n        long closest = 0;\n        long difference = 0;\n  \
    \      long difference2 = 0;\n        long difference3 = 0;\n        long difference4\
    \ = 0;\n        long difference5 = 0;\n        long difference6 = 0;\n       \
    \ long difference7 = 0;\n        long difference8 = 0;\n        long difference9\
    \ = 0;\n        long difference10 = 0;\n        long difference11 = 0;\n     \
    \   long difference12 = 0;\n        long difference13 = 0;\n        long difference14\
    \ = 0;\n        long difference15 = 0;\n        long difference16 = 0;\n     \
    \   long difference17 = 0;\n        long difference18 = 0;\n        long difference19\
    \ = 0;\n        long difference20 = 0;\n        long difference21 = 0;\n     \
    \   long difference22 = 0;\n        long difference23 = 0;\n        long difference24\
    \ = 0;\n        long difference25 = 0;\n        long difference26 = 0;\n     \
    \   long difference27 = 0;\n        long difference28 = 0;\n        long difference29\
    \ = 0;\n        long difference30 = 0;\n        long difference31 = 0;\n     \
    \   long difference32 = 0;\n        long difference33 = 0;\n        long difference34\
    \ = 0;\n        long difference35 = 0;\n        long difference36 = 0;\n     \
    \   long difference37 = 0;\n        long difference38 = 0;\n        long difference39\
    \ = 0;\n        long difference40 = 0;\n        long difference41 = 0;\n     \
    \   long difference42 = 0;\n        long difference43 = 0;\n        long difference44\
    \ = 0;\n        long difference45 = 0;\n        long difference46 = 0;\n     \
    \   long difference47 = 0;\n        long difference48 = 0;\n        long difference49\
    \ = 0;\n        long difference50 = 0;\n        long difference51 = 0;\n     \
    \   long difference52 = 0;\n        long difference53 = 0;\n        long difference54\
    \ = 0;\n        long difference55 = 0;\n        long difference56 = 0;\n     \
    \   long difference57 = 0;\n        long difference58 = 0;\n        long difference59\
    \ = 0;\n        long difference60 = 0;\n        long difference61 = 0;\n     \
    \   long difference62 = 0;\n        long difference63 = 0;\n        long difference64\
    \ = 0;\n        long difference65 = 0;\n        long difference66 = 0;\n     \
    \   long difference67 = 0;\n        long difference68 = 0;\n        long difference69\
    \ = 0;\n        long difference70 = 0;\n        long difference71 = 0;\n     \
    \   long difference72 = 0;\n        long difference73 = 0;\n        long difference74\
    \ = 0;\n        long difference75 = 0;\n        long difference76 = 0;\n     \
    \   long difference77 = 0;\n        long difference78 = 0;\n        long difference79\
    \ = 0;\n        long difference80 = 0;\n        long difference81 = 0;\n     \
    \   long difference82 = 0;\n        long difference83 = 0;\n        long difference84\
    \ = 0;\n        long difference\n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_o9dxehu.java:109: error: ';' expected\n        long difference\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl87h64pa.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4lxfple.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmph4lxfple.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps5a62h64.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmps5a62h64.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ d;\n        double closestDouble2 = d;\n        double closestDouble3 = d;\n\
    \        double closestDouble4 = d;\n        double closestDouble5 = d;\n    \
    \    double closestDouble6 = d;\n        double closestDouble7 = d;\n        double\
    \ closestDouble8 = d;\n        double closestDouble9 = d;\n        double closestDouble10\
    \ = d;\n        double closestDouble11 = d;\n        double closestDouble12 =\
    \ d;\n        double closestDouble13 = d;\n        double closestDouble14 = d;\n\
    \        double closestDouble15 = d;\n        double closestDouble16 = d;\n  \
    \      double closestDouble17 = d;\n        double closestDouble18 = d;\n    \
    \    double closestDouble19 = d;\n        double closestDouble20 = d;\n      \
    \  double closestDouble21 = d;\n        double closestDouble22 = d;\n        double\
    \ closestDouble23 = d;\n        double closestDouble24 = d;\n        double closestDouble25\
    \ = d;\n        double closestDouble26 = d;\n        double closestDouble27 =\
    \ d;\n        double closestDouble28 = d;\n        double closestDouble29 = d;\n\
    \        double closestDouble30 = d;\n        double closestDouble31 = d;\n  \
    \      double closestDouble32 = d;\n        double closestDouble33 = d;\n    \
    \    double closestDouble34 = d;\n        double closestDouble35 = d;\n      \
    \  double closestDouble36 = d;\n        double closestDouble37 = d;\n        double\
    \ closestDouble38 = d;\n        double closestDouble39 = d;\n        double closestDouble40\
    \ = d;\n        double closestDouble41 = d;\n        double closestDouble42 =\
    \ d;\n        double closestDouble43 = d;\n        double closestDouble44 = d;\n\
    \        double closestDouble45 = d;\n        double closestDouble46 = d;\n  \
    \      double closestDouble47 = d;\n        double closestDouble48 = d;\n    \
    \    double closestDouble49 = d;\n        double closestDouble50 = d;\n      \
    \  double closestDouble51 = d;\n        double closestDouble52 = d;\n        double\
    \ closestDouble53 = d;\n        double closestDouble54 = d;\n        double closestDouble55\
    \ = d;\n        double closestDouble56 = d;\n        double closestDouble57 =\
    \ d;\n        double closestDouble58 = d;\n        double closestDouble59 = d;\n\
    \        double closestDouble60 = d;\n        double closestDouble61 = d;\n  \
    \      double closestDouble62 = d;\n        double closestDouble63 = d;\n    \
    \    double closestDouble64 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbw_8he39.java:89: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj3yfv6ph.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1fvcs88a.java:29: error: variable differencePrevious is already\
    \ defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:30: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:31: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:32: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:33: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:34: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:35: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:36: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:37: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:38: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:39: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:40: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:41: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:42: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:43: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:44: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:45: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:46: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:47: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:48: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:49: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:50: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:51: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:52: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:53: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:54: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:55: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:56: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:57: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:58: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:59: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:60: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:61: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:62: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:63: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:64: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:65: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:66: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:67: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:68: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:69: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:70: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:71: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:72: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:73: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:74: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:75: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:76: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:77: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:78: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:79: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:80: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:81: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:82: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:83: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:84: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:85: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:86: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:87: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:88: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:89: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:90: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:91: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:92: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:93: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:94: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:95: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:96: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:97: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:98: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:99: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:100: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:101: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:102: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:103: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:104: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:105: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:106: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmp1fvcs88a.java:107: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n79 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6as1twpu.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp6as1twpu.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpce2wv3i6.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpce2wv3i6.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long difference2 =\
    \ Long.MAX_VALUE;\n        long difference3 = Long.MAX_VALUE;\n        long difference4\
    \ = Long.MAX_VALUE;\n        long difference5 = Long.MAX_VALUE;\n        long\
    \ difference6 = Long.MAX_VALUE;\n        long difference7 = Long.MAX_VALUE;\n\
    \        long difference8 = Long.MAX_VALUE;\n        long difference9 = Long.MAX_VALUE;\n\
    \        long difference10 = Long.MAX_VALUE;\n        long difference11 = Long.MAX_VALUE;\n\
    \        long difference12 = Long.MAX_VALUE;\n        long difference13 = Long.MAX_VALUE;\n\
    \        long difference14 = Long.MAX_VALUE;\n        long difference15 = Long.MAX_VALUE;\n\
    \        long difference16 = Long.MAX_VALUE;\n        long difference17 = Long.MAX_VALUE;\n\
    \        long difference18 = Long.MAX_VALUE;\n        long difference19 = Long.MAX_VALUE;\n\
    \        long difference20 = Long.MAX_VALUE;\n        long difference21 = Long.MAX_VALUE;\n\
    \        long difference22 = Long.MAX_VALUE;\n        long difference23 = Long.MAX_VALUE;\n\
    \        long difference24 = Long.MAX_VALUE;\n        long difference25 = Long.MAX_VALUE;\n\
    \        long difference26 = Long.MAX_VALUE;\n        long difference27 = Long.MAX_VALUE;\n\
    \        long difference28 = Long.MAX_VALUE;\n        long difference29 = Long.MAX_VALUE;\n\
    \        long difference30 = Long.MAX_VALUE;\n        long difference31 = Long.MAX_VALUE;\n\
    \        long difference32 = Long.MAX_VALUE;\n        long difference33 = Long.MAX_VALUE;\n\
    \        long difference34 = Long.MAX_VALUE;\n        long difference35 = Long.MAX_VALUE;\n\
    \        long difference36 = Long.MAX_VALUE;\n        long difference37 = Long.MAX_VALUE;\n\
    \        long difference38 = Long.MAX_VALUE;\n        long difference39 = Long.MAX_VALUE;\n\
    \        long difference40 = Long.MAX_VALUE;\n        long difference41 = Long.MAX_VALUE;\n\
    \        long difference42 = Long.MAX_VALUE;\n        long difference43 = Long.MAX_VALUE;\n\
    \        long difference44 = Long.MAX_VALUE;\n        long difference45 = Long.MAX_VALUE;\n\
    \        long difference46 = Long.MAX_VALUE;\n        long difference47 = Long.MAX_VALUE;\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpub9s23hr.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpub9s23hr.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89vf67_f.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp89vf67_f.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double input;\n        double diff;\n        double diff2;\n        double\
    \ diff3;\n        double diff4;\n        double diff5;\n        double diff6;\n\
    \        double diff7;\n        double diff8;\n        double diff9;\n       \
    \ double diff10;\n        double diff11;\n        double diff12;\n        double\
    \ diff13;\n        double diff14;\n        double diff15;\n        double diff16;\n\
    \        double diff17;\n        double diff18;\n        double diff19;\n    \
    \    double diff20;\n        double diff21;\n        double diff22;\n        double\
    \ diff23;\n        double diff24;\n        double diff25;\n        double diff26;\n\
    \        double diff27;\n        double diff28;\n        double diff29;\n    \
    \    double diff30;\n        double diff31;\n        double diff32;\n        double\
    \ diff33;\n        double diff34;\n        double diff35;\n        double diff36;\n\
    \        double diff37;\n        double diff38;\n        double diff39;\n    \
    \    double diff40;\n        double diff41;\n        double diff42;\n        double\
    \ diff43;\n        double diff44;\n        double diff45;\n        double diff46;\n\
    \        double diff47;\n        double diff48;\n        double diff49;\n    \
    \    double diff50;\n        double diff51;\n        double diff52;\n        double\
    \ diff53;\n        double diff54;\n        double diff55;\n        double diff56;\n\
    \        double diff57;\n        double diff58;\n        double diff59;\n    \
    \    double diff60;\n        double diff61;\n        double diff62;\n        double\
    \ diff63;\n        double diff64;\n        double diff65;\n        double diff66;\n\
    \        double diff67;\n        double diff68;\n        double diff69;\n    \
    \    double diff70;\n        double diff71;\n        double diff72;\n        double\
    \ diff73;\n        double diff74;\n        double diff75;\n        double diff76;\n\
    \        double diff77;\n        double diff78;\n        double diff79;\n    \
    \    double diff80;\n        double diff81;\n        double diff82;\n        double\
    \ diff83;\n        double diff84;\n        double diff85;\n        double diff86;\n\
    \        double diff87;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4jtq071.java:113: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = Long.MAX_VALUE;\n        long current;\n   \
    \     long previous;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        long differenceCurrent;\n\
    \        long differencePrevious;\n        long differenceCurrent;\n        long\
    \ differencePrevious;\n        long differenceCurrent;\n        long differencePrevious;\n\
    \        long differenceCurrent;\n        long differencePrevious;\n        long\
    \ differenceCurrent;\n        long differencePrevious;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplcs2qyxk.java:29: error: variable differencePrevious is already\
    \ defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:30: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:31: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:32: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:33: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:34: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:35: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:36: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:37: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:38: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:39: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:40: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:41: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:42: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:43: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:44: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:45: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:46: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:47: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:48: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:49: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:50: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:51: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:52: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:53: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:54: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:55: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:56: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:57: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:58: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:59: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:60: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:61: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:62: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:63: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:64: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:65: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:66: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:67: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:68: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:69: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:70: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:71: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:72: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:73: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:74: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:75: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:76: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:77: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:78: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:79: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:80: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:81: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:82: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:83: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:84: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:85: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:86: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:87: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:88: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:89: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:90: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:91: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:92: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:93: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:94: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:95: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:96: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:97: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:98: error: variable differenceCurrent is\
    \ already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:99: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:100: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:101: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:102: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:103: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:104: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:105: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:106: error: variable differenceCurrent\
    \ is already defined in method closestInteger(String)\n        long differenceCurrent;\n\
    \             ^\n/tmp/tmplcs2qyxk.java:107: error: variable differencePrevious\
    \ is already defined in method closestInteger(String)\n        long differencePrevious;\n\
    \             ^\n79 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdpu3pv0z.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpdpu3pv0z.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmputc0k2le.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmputc0k2le.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf302kuqu.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpf302kuqu.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closestInteger\
    \ = Long.MAX_VALUE;\n        long difference = Long.MAX_VALUE;\n        long currentInteger\
    \ = Long.parseLong(value);\n        long previousInteger = Long.parseLong(value);\n\
    \        long currentDifference = Long.MAX_VALUE;\n        long previousDifference\
    \ = Long.MAX_VALUE;\n        long currentDifferenceSquare = Long.MAX_VALUE;\n\
    \        long previousDifferenceSquare = Long.MAX_VALUE;\n        long currentDifferenceSquareDiff\
    \ = Long.MAX_VALUE;\n        long previousDifferenceSquareDiff = Long.MAX_VALUE;\n\
    \        long currentDifferenceSquareDiffSquare = Long.MAX_VALUE;\n        long\
    \ previousDifferenceSquareDiffSquare = Long.MAX_VALUE;\n        long currentDifferenceSquareDiffSquareDiff\
    \ = Long.MAX_VALUE;\n        long previousDifferenceSquareDiffSquareDiff = Long.MAX_VALUE;\n\
    \        long currentDifferenceSquareDiffSquareDiffSquare = Long.MAX_VALUE;\n\
    \        long previousDifferenceSquareDiffSquareDiffSquare = Long.MAX_VALUE;\n\
    \        long currentDifferenceSquareDiffSquareDiffSquareDiff = Long.MAX_VALUE;\n\
    \        long previousDifferenceSquareDiffSquareDiffSquareDiff = Long.MAX_VALUE;\n\
    \        long currentDifferenceSquareDiffSquareDiffSquareDiffSquare = Long.MAX_VALUE;\n\
    \        long previousDifferenceSquareDiffSquareDiffSquareDiffSquare = Long.MAX_VALUE;\n\
    \        long currentDifferenceSquareDiffSquareDiffSquareDiffSquareDiff = Long.MAX_VALUE;\n\
    \        long previousDifferenceSquareDiffSquareDiffSquareDiffSquareDiff = Long.MAX_VALUE;\n\
    \        long currentDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = Long.MAX_VALUE;\n        long previousDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = Long.MAX_VALUE;\n        long currentDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = Long.MAX_VALUE;\n        long previousDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = Long.MAX_VALUE;\n        long currentDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = Long.MAX_VALUE;\n        long previousDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = Long.MAX_VALUE;\n        long currentDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = Long.MAX_VALUE;\n        long previousDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = Long.MAX_VALUE;\n        long currentDifferenceSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = Long.MAX_VALUE;\n        long previous\n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpud8x3jr2.java:54: error: ';' expected\n        long previous\n\
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpztmcpt1l.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpztmcpt1l.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpow6ax1vp.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmpow6ax1vp.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        long diff;\n        long diff2;\n        long diff3;\n        long diff4;\n\
    \        long diff5;\n        long diff6;\n        long diff7;\n        long diff8;\n\
    \        long diff9;\n        long diff10;\n        long diff11;\n        long\
    \ diff12;\n        long diff13;\n        long diff14;\n        long diff15;\n\
    \        long diff16;\n        long diff17;\n        long diff18;\n        long\
    \ diff19;\n        long diff20;\n        long diff21;\n        long diff22;\n\
    \        long diff23;\n        long diff24;\n        long diff25;\n        long\
    \ diff26;\n        long diff27;\n        long diff28;\n        long diff29;\n\
    \        long diff30;\n        long diff31;\n        long diff32;\n        long\
    \ diff33;\n        long diff34;\n        long diff35;\n        long diff36;\n\
    \        long diff37;\n        long diff38;\n        long diff39;\n        long\
    \ diff40;\n        long diff41;\n        long diff42;\n        long diff43;\n\
    \        long diff44;\n        long diff45;\n        long diff46;\n        long\
    \ diff47;\n        long diff48;\n        long diff49;\n        long diff50;\n\
    \        long diff51;\n        long diff52;\n        long diff53;\n        long\
    \ diff54;\n        long diff55;\n        long diff56;\n        long diff57;\n\
    \        long diff58;\n        long diff59;\n        long diff60;\n        long\
    \ diff61;\n        long diff62;\n        long diff63;\n        long diff64;\n\
    \        long diff65;\n        long diff66;\n        long diff67;\n        long\
    \ diff68;\n        long diff69;\n        long diff70;\n        long diff71;\n\
    \        long diff72;\n        long diff73;\n        long diff74;\n        long\
    \ diff75;\n        long diff76;\n        long diff77;\n        long diff78;\n\
    \        long diff79;\n        long diff80;\n        long diff81;\n        long\
    \ diff82;\n        long diff83;\n        long diff84;\n        long diff85;\n\
    \        long diff86;\n        long diff87;\n        long diff88;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5s_x9wv9.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Math.round(d);\n        double closestDouble2 = Math.abs(closestDouble - d);\n\
    \        double closestDouble3 = Math.abs(closestDouble2 - d);\n        if (closestDouble3\
    \ > closestDouble) {\n            closestDouble = closestDouble3;\n        }\n\
    \        closest = (long) closestDouble;\n        return closest;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphenbqy90.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long difference = 0;\n        long difference2 = 0;\n        long\
    \ difference3 = 0;\n        long difference4 = 0;\n        long difference5 =\
    \ 0;\n        long difference6 = 0;\n        long difference7 = 0;\n        long\
    \ difference8 = 0;\n        long difference9 = 0;\n        long difference10 =\
    \ 0;\n        long difference11 = 0;\n        long difference12 = 0;\n       \
    \ long difference13 = 0;\n        long difference14 = 0;\n        long difference15\
    \ = 0;\n        long difference16 = 0;\n        long difference17 = 0;\n     \
    \   long difference18 = 0;\n        long difference19 = 0;\n        long difference20\
    \ = 0;\n        long difference21 = 0;\n        long difference22 = 0;\n     \
    \   long difference23 = 0;\n        long difference24 = 0;\n        long difference25\
    \ = 0;\n        long difference26 = 0;\n        long difference27 = 0;\n     \
    \   long difference28 = 0;\n        long difference29 = 0;\n        long difference30\
    \ = 0;\n        long difference31 = 0;\n        long difference32 = 0;\n     \
    \   long difference33 = 0;\n        long difference34 = 0;\n        long difference35\
    \ = 0;\n        long difference36 = 0;\n        long difference37 = 0;\n     \
    \   long difference38 = 0;\n        long difference39 = 0;\n        long difference40\
    \ = 0;\n        long difference41 = 0;\n        long difference42 = 0;\n     \
    \   long difference43 = 0;\n        long difference44 = 0;\n        long difference45\
    \ = 0;\n        long difference46 = 0;\n        long difference47 = 0;\n     \
    \   long difference48 = 0;\n        long difference49 = 0;\n        long difference50\
    \ = 0;\n        long difference51 = 0;\n        long difference52 = 0;\n     \
    \   long difference53 = 0;\n        long difference54 = 0;\n        long difference55\
    \ = 0;\n        long difference56 = 0;\n        long difference57 = 0;\n     \
    \   long difference58 = 0;\n        long difference59 = 0;\n        long difference60\
    \ = 0;\n        long difference61 = 0;\n        long difference62 = 0;\n     \
    \   long difference63 = 0;\n        long difference64 = 0;\n        long difference65\
    \ = 0;\n        long difference66 = 0;\n        long difference67 = 0;\n     \
    \   long difference68 = 0;\n        long difference69 = 0;\n        long difference70\
    \ = 0;\n        long difference71 = 0;\n        long difference72 = 0;\n     \
    \   long difference73 = 0;\n        long difference74 = 0;\n        long difference75\
    \ = 0;\n        long difference76 = 0;\n        long difference77 = 0;\n     \
    \   long difference78 = 0;\n        long difference79 = 0;\n        long difference80\
    \ = 0;\n        long difference81 = 0;\n        long difference82 = 0;\n     \
    \   long difference83 = 0;\n        long difference84 = 0;\n        long difference85\
    \ = 0;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnep3gpo.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmppnep3gpo.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest\
    \ = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 =\
    \ 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n\
    \        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n \
    \       long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n\
    \        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n\
    \        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n\
    \        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n\
    \        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n\
    \        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n\
    \        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n\
    \        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n\
    \        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n\
    \        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n\
    \        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n\
    \        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n\
    \        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n\
    \        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n\
    \        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n\
    \        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n\
    \        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n\
    \        long diff61 = 0;\n        long diff62 = 0;\n        long diff63 = 0;\n\
    \        long diff64 = 0;\n        long diff65 = 0;\n        long diff66 = 0;\n\
    \        long diff67 = 0;\n        long diff68 = 0;\n        long diff69 = 0;\n\
    \        long diff70 = 0;\n        long diff71 = 0;\n        long diff72 = 0;\n\
    \        long diff73 = 0;\n        long diff74 = 0;\n        long diff75 = 0;\n\
    \        long diff76 = 0;\n        long diff77 = 0;\n        long diff78 = 0;\n\
    \        long diff79 = 0;\n        long diff80 = 0;\n        long diff81 = 0;\n\
    \        long diff82 = 0;\n        long diff83 = 0;\n        long diff84 = 0;\n\
    \        long diff85 = 0;\n        long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9wvuelhq.java:109: error: not a statement\n        long \n    \
    \    ^\n/tmp/tmp9wvuelhq.java:109: error: ';' expected\n        long \n      \
    \      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double d = Double.parseDouble(value);\n        double closestDouble =\
    \ Double.parseDouble(closestInteger(value));\n        double difference = Math.abs(closestDouble\
    \ - d);\n        if (difference < Math.abs(closest - d)) {\n            closest\
    \ = closestDouble;\n        } else {\n            closest = d;\n        }\n  \
    \      return closest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzyonl808.java:25: error: incompatible types: long cannot be converted\
    \ to String\n        double closestDouble = Double.parseDouble(closestInteger(value));\n\
    \                                                                ^\n/tmp/tmpzyonl808.java:28:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \           closest = closestDouble;\n                      ^\n/tmp/tmpzyonl808.java:30:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \           closest = d;\n                      ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n \
    \   // 15\n    // Note:\n    // Rounding away from zero means that if the given\
    \ number is equidistant\n    // from two integers, the one you should return is\
    \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    public static long closestInteger(String value) {\n        long closest;\n\
    \        double doubleValue = Double.parseDouble(value);\n        double doubleClosest\
    \ = Math.abs(doubleValue - closest);\n        double doubleDifference = Math.abs(doubleValue\
    \ - closest);\n        double doubleDifferenceSquared = doubleDifference*doubleDifference;\n\
    \        double doubleDifferenceCube = Math.pow(doubleDifferenceSquared, 3);\n\
    \        double doubleDifferenceCubeRoot = Math.pow(doubleDifferenceCube, 1/3);\n\
    \        double doubleDifferenceCubeRootSquared = Math.pow(doubleDifferenceCubeRoot,\
    \ 2);\n        double doubleDifferenceCubeRootCubed = Math.pow(doubleDifferenceCubeRoot,\
    \ 3);\n        double doubleDifferenceCubeRootCubedSquared = Math.pow(doubleDifferenceCubeRootCubed,\
    \ 2);\n        double doubleDifferenceCubeRootCubedCubed = Math.pow(doubleDifferenceCubeRootCubed,\
    \ 3);\n        double doubleDifferenceCubeRootCubedCubedSquared = Math.pow(doubleDifferenceCubeRootCubedCubed,\
    \ 2);\n        double doubleDifferenceCubeRootCubedCubedCubed = Math.pow(doubleDifferenceCubeRootCubedCubed,\
    \ 3);\n        double doubleDifferenceCubeRootCubedCubedCubedSquared = Math.pow(doubleDifferenceCubeRootCubedCubedCubed,\
    \ 2);\n        double doubleDifferenceCubeRootCubedCubedCubedCubed = Math.pow(doubleDifferenceCubeRootCubedCubedCubed,\
    \ 3);\n        double doubleDifferenceCubeRootCubedCubedCubedCubedSquared = Math.pow(doubleDifferenceCubeRootCubedCubedCubedCubed,\
    \ 2);\n        double doubleDifferenceCubeRootCubedCubedCubedCubedCubed = Math.pow(doubleDifferenceCubeRootCubedCubedCubedCubed,\
    \ 3);\n        double doubleDifferenceCubeRootCubedCubedCubedCubedCubedSquared\
    \ = Math.pow(doubleDifferenceCubeRootCubedCubedCubedCubedCubed, 2);\n        double\
    \ doubleDifferenceCubeRootCubedCubedCubedCubedCubedCubed = Math.pow(doubleDifferenceCubeRootCubedCubedCubedCubedCubed,\
    \ 3);\n        double doubleDifferenceCubeRootCubedCubedCubedCubedCubedCubedSquared\
    \ = Math.pow(doubleDifferenceCubeRootCubedCubedCubedCubedCubed, 2);\n        \n\
    \    }\n    public static void main(String[] args) {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1a4l3skh.java:44: error: missing return statement\n    }\n    ^\n\
    /tmp/tmp1a4l3skh.java:25: error: variable closest might not have been initialized\n\
    \        double doubleClosest = Math.abs(doubleValue - closest);\n           \
    \                                           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
