name: HumanEval_111_histogram
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0b18mn09.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsy6pv0uo.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqsvk0jz.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmprqsvk0jz.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            String letter = word.substring(0, 1);\n            Long\
    \ count = map.get(letter);\n            if (count == null) {\n               \
    \ map.put(letter, 1L);\n            } else {\n                map.put(letter,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphkla0fyu.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw0mk4ib8.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpw0mk4ib8.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqdxlp18d.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsl_umd2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  long\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String letter = word.substring(0, 1);\n            Long count\
    \ = map.get(letter);\n            if (count == null) {\n                map.put(letter,\
    \ 1L);\n            } else {\n                map.put(letter, count + 1L);\n \
    \           }\n        }\n        return map;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlirzst_.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbiyydu6p.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbi61geh.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long value = map.get(key);\n\
    \            if (value == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, value + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrabify7.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.containsKey(word) ? map.get(word) + 1 : 1;\n\
    \            map.put(word, count);\n        }\n        return map;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbexxusg_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpawwo2jr4.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<String, Long>();\n        String[] words = test.split(\" \");\n    \
    \    for (String word : words) {\n            String letter = word.substring(0,\
    \ 1);\n            Long count = histogram.get(letter);\n            if (count\
    \ == null) {\n                histogram.put(letter, 1L);\n            } else {\n\
    \                histogram.put(letter, histogram.get(letter) + 1);\n         \
    \   }\n        }\n        return histogram;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr15nirer.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkej94tmc.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmi7aw538.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                count = 1L;\n            } else {\n               \
    \ count++;\n            }\n            map.put(word, count);\n        }\n    \
    \    return map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsafrrza8.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1L, Long::sum);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0o7g_1f1.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnnrkdtw.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmputreg3_6.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj95mp_q.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2dwzrb1y.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokfdhe0e.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2upyuuw.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9t1n5wck.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String letter = word.substring(0, 1);\n            Long count\
    \ = map.get(letter);\n            if (count == null) {\n                map.put(letter,\
    \ 1L);\n            } else {\n                map.put(letter, count + 1L);\n \
    \           }\n        }\n        return map;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztejpeq6.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.merge(word, 1, (oldValue, newValue) ->\
    \ oldValue + newValue);\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf7hrhbzh.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.merge(word, 1, (oldValue, newValue) -> oldValue\
    \ + newValue);\n                                  ^\n/tmp/tmpf7hrhbzh.java:22:\
    \ error: bad operand types for binary operator '+'\n            histogram.merge(word,\
    \ 1, (oldValue, newValue) -> oldValue + newValue);\n                         \
    \                                             ^\n  first type:  V\n  second type:\
    \ V\n  where V is a type-variable:\n    V extends Object declared in class HashMap\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.containsKey(word) ? map.get(word) : 0;\n   \
    \         map.put(word, count + 1);\n        }\n        return map;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_xjnqi_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmjftlvrd.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(word, histogram.getOrDefault(word, 0) + 1);\n\
    \                                                             ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxhf2vyw.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.containsKey(key)\
    \ ? map.get(key) : 0;\n            map.put(key, count + 1);\n        }\n     \
    \   return map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo6ae5fot.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long value = map.get(key);\n\
    \            if (value == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, value + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrcz5ffn.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsb8rev_h.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpsb8rev_h.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String letter = word.substring(0, 1);\n            Long count\
    \ = map.get(letter);\n            if (count == null) {\n                map.put(letter,\
    \ 1L);\n            } else {\n                map.put(letter, count + 1L);\n \
    \           }\n        }\n        return map;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0zlyhqf.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpym3d4wsd.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj15p174q.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpj15p174q.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsiieovkz.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbdb128fv.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String letter = word.substring(0, 1);\n            Long count\
    \ = map.get(letter);\n            if (count == null) {\n                map.put(letter,\
    \ 1L);\n            } else {\n                map.put(letter, count + 1L);\n \
    \           }\n        }\n        return map;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp97gcqa2n.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1sa0pxr9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt0tqaooc.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<String, Long>();\n        String[] letters = test.split(\" \");\n  \
    \      for (String letter : letters) {\n            histogram.put(letter, histogram.getOrDefault(letter,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdqujvynq.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(letter, histogram.getOrDefault(letter, 0)\
    \ + 1);\n                                                                 ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String letter = word.substring(0, 1);\n            Long count\
    \ = map.get(letter);\n            if (count == null) {\n                map.put(letter,\
    \ 1L);\n            } else {\n                map.put(letter, count + 1L);\n \
    \           }\n        }\n        return map;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d27wpfn.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdmtrzath.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qb7yr_h.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                count = 1L;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhf_qrjx.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.containsKey(word) ? map.get(word) : 0;\n   \
    \         map.put(word, count + 1);\n        }\n        return map;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp0nlyfs_.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmhxpyknb.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6flcwbj.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptdqrv8k9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            String letter = word.substring(0, 1);\n            Long\
    \ count = map.get(letter);\n            if (count == null) {\n               \
    \ map.put(letter, 1L);\n            } else {\n                map.put(letter,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbc0_al0d.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            word = word.toLowerCase();\n            Long count\
    \ = histogram.get(word);\n            if (count == null) {\n                histogram.put(word,\
    \ 1L);\n            } else {\n                histogram.put(word, histogram.get(word)\
    \ + 1);\n            }\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2qn_j26z.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpka2lqewk.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkm1cho3n.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == 0) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmp2zhlnpmg.java:22)\n\tat Problem.main(tmp2zhlnpmg.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0ipnice.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_qwj6x8.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n  \
    \      return map;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa0pw1x6e.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.put(word, map.getOrDefault(word, 0) + 1);\n       \
    \                                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92qzyii1.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_2d8emn.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjpz9fngs.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptk14jrj1.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz0sg20ga.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgy6vh_6m.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfmhdb3bp.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp66wbhygz.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            long count = map.get(word);\n            if (count ==\
    \ 0) {\n                map.put(word, 1);\n            } else {\n            \
    \    map.put(word, count + 1);\n            }\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyypa6c1b.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n                map.put(word, 1);\n                              ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1L, Long::sum);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7y5mh1q.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0h9jj72.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuq81q6w6.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxi62b37.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw4ltdlzo.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprjdd_u_z.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1srfeuz2.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppi5l0__a.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  long\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxvuu0473.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd9hw0h2c.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiv7q0wy0.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgefi6gf5.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpgefi6gf5.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplb0n7hgm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            histogram.put(letter, histogram.getOrDefault(letter,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdt06ztyz.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(letter, histogram.getOrDefault(letter, 0)\
    \ + 1);\n                                                                 ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe68nsyl1.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolpb5mcl.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmfd67lv.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgi2ri1it.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoenin3ac.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1L, Long::sum);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzmdbculw.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8iiffwt.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpijo1ztu9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3wedq4l.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  long\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9a4lmqd.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.merge(word, 1L, Long::sum);\n       \
    \ }\n        return histogram;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcd9v_x1c.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rqbo7_9.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6gjqh3pl.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxkj2yuoy.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String letter = word.substring(0, 1);\n       \
    \     Long count = histogram.get(letter);\n            if (count == null) {\n\
    \                histogram.put(letter, 1L);\n            } else {\n          \
    \      histogram.put(letter, histogram.get(letter) + 1);\n            }\n    \
    \    }\n        return histogram;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yr4fd08.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptp9xedc2.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb01w8bzh.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5wrfmp_x.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ixut8hj.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            if (map.containsKey(key))\
    \ {\n                map.put(key, map.get(key) + 1);\n            } else {\n \
    \               map.put(key, 1L);\n            }\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx9hqegdn.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzndkgr71.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_06acsgd.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmp_06acsgd.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsj0pgn3a.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qgnbpes.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3n451kr7.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76zugplu.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long value = map.get(key);\n\
    \            if (value == null) {\n                value = 1L;\n            }\n\
    \            map.put(key, value + 1L);\n        }\n        return map;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0aw6_mm.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zdn2v_o.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0nyah3_.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6hsor2nb.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2j_qb0x.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1fxu09rk.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  long\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzyzkdd1n.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long value = map.get(key);\n\
    \            if (value == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, value + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj2xih_bq.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0v8jwb9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcnmhhyn6.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp0mlvbwu.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpp0mlvbwu.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.merge(word, 1L, Long::sum);\n       \
    \ }\n        return histogram;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3n7w0xbu.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp174lhq6a.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzm33_anu.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxm1mjtsx.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(word, histogram.getOrDefault(word, 0) + 1);\n\
    \                                                             ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu2m83yjm.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpu2m83yjm.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2wmvspy9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfhm69kg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxudkpadk.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprc4hkq9u.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgy2cjr2h.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv6ypizcr.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprfybkp3r.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                count = 1L;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vyn8sd2.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__c58j1y.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5efsz56.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1L, Long::sum);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdi5ilxai.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3z757ao.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1L, Long::sum);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_mbi2g5.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String letter = word.substring(0, 1);\n       \
    \     Long count = histogram.get(letter);\n            if (count == null) {\n\
    \                histogram.put(letter, 1L);\n            } else {\n          \
    \      histogram.put(letter, count + 1L);\n            }\n        }\n        return\
    \ histogram;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfaydep96.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmgwg3v75.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpji3vjj84.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.containsKey(word) ? map.get(word) + 1 : 1;\n\
    \            map.put(word, count);\n        }\n        return map;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpymk3u0oj.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            histogram.put(letter, histogram.getOrDefault(letter,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp02d6se7e.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(letter, histogram.getOrDefault(letter, 0)\
    \ + 1);\n                                                                 ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppa21sh6m.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  long\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjx5pkigv.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjstqz48t.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            long count = histogram.getOrDefault(word, 0L);\n\
    \            histogram.put(word, count + 1);\n        }\n        return histogram;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0as18eub.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptgiv06si.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.containsKey(word) ? map.get(word) + 1 : 1;\n\
    \            map.put(word, count);\n        }\n        return map;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkwhr2j5f.java:30)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String letter = word.substring(0, 1);\n       \
    \     Long count = histogram.get(letter);\n            if (count == null) {\n\
    \                histogram.put(letter, 1L);\n            } else {\n          \
    \      histogram.put(letter, count + 1L);\n            }\n        }\n        return\
    \ histogram;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqzrn5ezl.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb0347y11.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9upqg1nx.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppn4rrw0s.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String key = word.toLowerCase();\n            if\
    \ (histogram.containsKey(key)) {\n                histogram.put(key, histogram.get(key)\
    \ + 1);\n            } else {\n                histogram.put(key, 1L);\n     \
    \       }\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_fslunm.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6l1g1gqu.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3gttxy_q.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            histogram.put(letter, histogram.getOrDefault(letter,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_lqs49if.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(letter, histogram.getOrDefault(letter, 0)\
    \ + 1);\n                                                                 ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg2tevw46.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \                            ^\n/tmp/tmpg2tevw46.java:22: error: bad operand types\
    \ for binary operator '+'\n            map.merge(word, 1, (oldValue, newValue)\
    \ -> oldValue + newValue);\n                                                 \
    \               ^\n  first type:  V\n  second type: V\n  where V is a type-variable:\n\
    \    V extends Object declared in class HashMap\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ybw5p84.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  long\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                count = 1L;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmsv645ig.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.put(word, histogram.getOrDefault(word,\
    \ 0L) + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54vra4z0.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String letter = word.substring(0, 1);\n       \
    \     Long count = histogram.get(letter);\n            if (count == null) {\n\
    \                histogram.put(letter, 1L);\n            } else {\n          \
    \      histogram.put(letter, count + 1L);\n            }\n        }\n        return\
    \ histogram;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5h9wfjg.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvj98ger_.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx7o2gozy.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String letter = word.substring(0, 1);\n            Long count\
    \ = map.get(letter);\n            if (count == null) {\n                map.put(letter,\
    \ 1L);\n            } else {\n                map.put(letter, count + 1L);\n \
    \           }\n        }\n        return map;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfypj8bc.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1L, Long::sum);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy3cl5hza.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgticg9zg.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == 0) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmpewd83u25.java:22)\n\tat Problem.main(tmpewd83u25.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpredv60vz.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Long count = map.get(key);\n\
    \            if (count == null) {\n                map.put(key, 1L);\n       \
    \     } else {\n                map.put(key, count + 1L);\n            }\n   \
    \     }\n        return map;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lqd2dhq.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String letter = word.substring(0, 1);\n       \
    \     Long count = histogram.get(letter);\n            if (count == null) {\n\
    \                histogram.put(letter, 1L);\n            } else {\n          \
    \      histogram.put(letter, histogram.get(letter) + 1);\n            }\n    \
    \    }\n        return histogram;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55akg4cs.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            word = word.toLowerCase();\n            Long count\
    \ = histogram.get(word);\n            if (count == null) {\n                histogram.put(word,\
    \ 1L);\n            } else {\n                histogram.put(word, histogram.get(word)\
    \ + 1);\n            }\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7c7ydryu.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == 0) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaafkby7p.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n                map.put(word, 1);\n                              ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbp93gsr7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrkgy_su.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == 0) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmpkma5sats.java:22)\n\tat Problem.main(tmpkma5sats.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String letter = word.substring(0, 1);\n       \
    \     long count = histogram.getOrDefault(letter, 0L);\n            histogram.put(letter,\
    \ count + 1);\n        }\n        return histogram;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkpfjz24i.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.merge(word, 1, (oldValue, newValue) ->\
    \ oldValue + newValue);\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp72eslxl8.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.merge(word, 1, (oldValue, newValue) -> oldValue\
    \ + newValue);\n                                  ^\n/tmp/tmp72eslxl8.java:22:\
    \ error: bad operand types for binary operator '+'\n            histogram.merge(word,\
    \ 1, (oldValue, newValue) -> oldValue + newValue);\n                         \
    \                                             ^\n  first type:  V\n  second type:\
    \ V\n  where V is a type-variable:\n    V extends Object declared in class HashMap\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<String,\
    \ Long>();\n        String[] words = test.split(\" \");\n        for (String word\
    \ : words) {\n            Long count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1L);\n            } else {\n        \
    \        map.put(word, count + 1L);\n            }\n        }\n        return\
    \ map;\n\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzgpsz6zc.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxrxeefy4.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7k1zr0w1.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp53svcs3p.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpooufdzmy.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            histogram.put(letter, histogram.getOrDefault(letter,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp204z97r4.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(letter, histogram.getOrDefault(letter, 0)\
    \ + 1);\n                                                                 ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbczhh298.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == 0) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmpdbwkzf1k.java:22)\n\tat Problem.main(tmpdbwkzf1k.java:33)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.merge(word, 1, (oldValue, newValue) ->\
    \ oldValue + newValue);\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm4rq3zjc.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.merge(word, 1, (oldValue, newValue) -> oldValue\
    \ + newValue);\n                                  ^\n/tmp/tmpm4rq3zjc.java:22:\
    \ error: bad operand types for binary operator '+'\n            histogram.merge(word,\
    \ 1, (oldValue, newValue) -> oldValue + newValue);\n                         \
    \                                             ^\n  first type:  V\n  second type:\
    \ V\n  where V is a type-variable:\n    V extends Object declared in class HashMap\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> result = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String letter = word.substring(0, 1);\n            Long count\
    \ = result.get(letter);\n            if (count == null) {\n                result.put(letter,\
    \ 1L);\n            } else {\n                result.put(letter, count + 1L);\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwms21h5d.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            word = word.toLowerCase();\n            Long count\
    \ = histogram.get(word);\n            if (count == null) {\n                histogram.put(word,\
    \ 1L);\n            } else {\n                histogram.put(word, histogram.get(word)\
    \ + 1);\n            }\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp88wxr4bc.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5o2vm85p.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1L, Long::sum);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmi0928td.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.merge(word, 1, (oldValue, newValue) ->\
    \ oldValue + newValue);\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiop34qqu.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.merge(word, 1, (oldValue, newValue) -> oldValue\
    \ + newValue);\n                                  ^\n/tmp/tmpiop34qqu.java:22:\
    \ error: bad operand types for binary operator '+'\n            histogram.merge(word,\
    \ 1, (oldValue, newValue) -> oldValue + newValue);\n                         \
    \                                             ^\n  first type:  V\n  second type:\
    \ V\n  where V is a type-variable:\n    V extends Object declared in class HashMap\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            histogram.put(letter, histogram.getOrDefault(letter,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpksuexu8o.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(letter, histogram.getOrDefault(letter, 0)\
    \ + 1);\n                                                                 ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp16otijbn.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            histogram.merge(word, 1, (oldValue, newValue) ->\
    \ oldValue + newValue);\n        }\n        return histogram;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9skuad39.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.merge(word, 1, (oldValue, newValue) -> oldValue\
    \ + newValue);\n                                  ^\n/tmp/tmp9skuad39.java:22:\
    \ error: bad operand types for binary operator '+'\n            histogram.merge(word,\
    \ 1, (oldValue, newValue) -> oldValue + newValue);\n                         \
    \                                             ^\n  first type:  V\n  second type:\
    \ V\n  where V is a type-variable:\n    V extends Object declared in class HashMap\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"\
    d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2rhmbo7.java:29)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz02mtvlg.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> histogram = new\
    \ HashMap<>();\n        String[] letters = test.split(\" \");\n        for (String\
    \ letter : letters) {\n            histogram.put(letter, histogram.getOrDefault(letter,\
    \ 0) + 1);\n        }\n        return histogram;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\"\
    )).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l, \"b\", 1l, \"\
    c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    b b b b a\")).equals((new HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String, Long>(Map.of(\"a\"\
    , 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps1r5hd0c.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            histogram.put(letter, histogram.getOrDefault(letter, 0)\
    \ + 1);\n                                                                 ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmgjcwdov.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            long count = map.get(word);\n            if (count == 0) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0zcr1bur.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n                map.put(word, 1);\n                              ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1L);\n            } else {\n                map.put(word,\
    \ count + 1L);\n            }\n        }\n        return map;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    \")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8mxtojf9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,\
    \ Long> histogram(String test) {\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Long count = map.get(word);\n            if (count == null) {\n\
    \                count = 1L;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        return map;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String, Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,\
    \ Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n \
    \   assert(histogram((\"r t g\")).equals((new HashMap<String, Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new\
    \ HashMap<String, Long>(Map.of(\"b\", 4l)))));\n    assert(histogram((\"r t g\"\
    )).equals((new HashMap<String, Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
    \    assert(histogram((\"\")).equals((new HashMap<String, Long>())));\n    assert(histogram((\"\
    a\")).equals((new HashMap<String, Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpw8gosy.java:35)\n"
  exit_code: 1
  status: Exception
