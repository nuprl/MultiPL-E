name: HumanEval_148_bf
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(planet2)) {\n            return result;\n \
    \       }\n        Pair<String, > planet1Orbit = new Pair<String, >();\n     \
    \   Pair<String, > planet2Orbit = new Pair<String, >();\n        planet1Orbit\
    \ = orbit(planet1);\n        planet2Orbit = orbit(planet2);\n        List<String>\
    \ planet1OrbitList = planet1Orbit.first;\n        List<String> planet2OrbitList\
    \ = planet2Orbit.first;\n        List<String> planet1OrbitListSorted = new ArrayList<String>(planet1OrbitList);\n\
    \        Collections.sort(planet1OrbitListSorted);\n        List<String> planet2OrbitListSorted\
    \ = new ArrayList<String>(planet2OrbitList);\n        Collections.sort(planet2OrbitListSorted);\n\
    \        boolean flag = false;\n        boolean flag2 = false;\n        for (int\
    \ i = 0; i < planet1OrbitListSorted.size(); i++) {\n            if (planet1OrbitListSorted.get(i).equals(planet2OrbitListSorted.get(i)))\
    \ {\n                flag = true;\n            }\n        }\n        for (int\
    \ i = 0; i < planet2OrbitListSorted.size(); i++) {\n            if (planet2OrbitListSorted.get(i).equals(planet1OrbitListSorted.get(i)))\
    \ {\n                flag2 = true;\n            }\n        }\n        if (flag\
    \ && flag2) {\n            return result;\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphqylxmlx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmphqylxmlx.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmphqylxmlx.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmphqylxmlx.java:27:\
    \ error: illegal start of type\n        Pair<String, > planet1Orbit = new Pair<String,\
    \ >();\n                     ^\n/tmp/tmphqylxmlx.java:27: error: illegal start\
    \ of type\n        Pair<String, > planet1Orbit = new Pair<String, >();\n     \
    \                                                  ^\n/tmp/tmphqylxmlx.java:28:\
    \ error: illegal start of type\n        Pair<String, > planet2Orbit = new Pair<String,\
    \ >();\n                     ^\n/tmp/tmphqylxmlx.java:28: error: illegal start\
    \ of type\n        Pair<String, > planet2Orbit = new Pair<String, >();\n     \
    \                                                  ^\n/tmp/tmphqylxmlx.java:60:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmphqylxmlx.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmphqylxmlx.java:60: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmphqylxmlx.java:60: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmphqylxmlx.java:61:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmphqylxmlx.java:61: "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >(\"\
    \", \"\");\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1_d0id5g.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp1_d0id5g.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >(\"\", \"\");\n                     ^\n/tmp/tmp1_d0id5g.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >(\"\", \"\");\n                                               ^\n/tmp/tmp1_d0id5g.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet\n                                                              ^\n/tmp/tmp1_d0id5g.java:55:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp1_d0id5g.java:55: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp1_d0id5g.java:55: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp1_d0id5g.java:55: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp1_d0id5g.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp1_d0id5g.java:60: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp1_d0id5g.java:60:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp1_d0id5g.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp1_d0id5g.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp1_d0id5g.java:61: error: ')' expected\n  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmqifwngf.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpmqifwngf.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpmqifwngf.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpmqifwngf.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpmqifwngf.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpmqifwngf.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpmqifwngf.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpmqifwngf.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpmqifwngf.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpmqifwngf.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpmqifwngf.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpmqifwngf.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpmqifwngf.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpmqifwngf.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3sd3839b.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3sd3839b.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp3sd3839b.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp3sd3839b.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp3sd3839b.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp3sd3839b.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp3sd3839b.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp3sd3839b.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp3sd3839b.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp3sd3839b.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp3sd3839b.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp3sd3839b.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double angle = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase()));\n\
    \        double distance1 = Math.abs(planet1.length() - planet2.length());\n \
    \       double angle1 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase()));\n\
    \        double distance2 = Math.abs(planet2.length() - planet1.length());\n \
    \       double angle2 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase()));\n\
    \        double distance3 = Math.abs(planet1.length() - planet2.length());\n \
    \       double angle3 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase()));\n\
    \        double distance4 = Math.abs(planet2.length() - planet1.length());\n \
    \       double angle4 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase()));\n\
    \        double distance5 = Math.abs(planet1.length() - planet2.length());\n \
    \       double angle5 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase()));\n\
    \        double distance6 = Math.abs(planet2.length() - planet1.length());\n \
    \       double angle6 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase()));\n\
    \        double distance7 = Math.abs(planet1.length() - planet2.length());\n \
    \       double angle7 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase()));\n\
    \        double distance8 = Math.abs(planet2.length() - planet1.length());\n \
    \       double angle8 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase()));\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n \
    \           result.first = \"Saturn\";\n            result.second = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Venus\";\n            result.second = \"\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\"))\
    \ {\n            result.first = \"\";\n            result.second = \"Earth\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Earth\";\n            result.second = \"Mars\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\"))\
    \ {\n            result.first = \"Earth\";\n            result.second = \"Jupiter\"\
    ;\n        } else if (planet1.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphk1gp66j.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmphk1gp66j.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmphk1gp66j.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmphk1gp66j.java:57:\
    \ error: <identifier> expected\n        } else if (planet1.\n                \
    \           ^\n/tmp/tmphk1gp66j.java:59: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmphk1gp66j.java:59:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmphk1gp66j.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmphk1gp66j.java:59:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmphk1gp66j.java:59: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmphk1gp66j.java:64: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmphk1gp66j.java:64: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmphk1gp66j.java:64: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmphk1gp66j.java:64:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmphk1gp66j.java:65: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7y23lvk6.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp7y23lvk6.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp7y23lvk6.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp7y23lvk6.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmp7y23lvk6.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp7y23lvk6.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp7y23lvk6.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp7y23lvk6.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp7y23lvk6.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp7y23lvk6.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmp7y23lvk6.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp7y23lvk6.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp7y23lvk6.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp7y23lvk6.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprn114csp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmprn114csp.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmprn114csp.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmprn114csp.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmprn114csp.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmprn114csp.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmprn114csp.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmprn114csp.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmprn114csp.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmprn114csp.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmprn114csp.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmprn114csp.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmprn114csp.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmprn114csp.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppyqoi023.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmppyqoi023.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmppyqoi023.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmppyqoi023.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmppyqoi023.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmppyqoi023.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmppyqoi023.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmppyqoi023.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmppyqoi023.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmppyqoi023.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmppyqoi023.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmppyqoi023.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmppyqoi023.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmppyqoi023.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n\
    \        double distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n\
    \        double distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        double distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance26 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance27\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph1t6cx88.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmph1t6cx88.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmph1t6cx88.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmph1t6cx88.java:51:\
    \ error: ';' expected\n        double distance27\n                         ^\n\
    /tmp/tmph1t6cx88.java:58: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmph1t6cx88.java:58: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmph1t6cx88.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmph1t6cx88.java:58:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmph1t6cx88.java:59: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmph1t6cx88.java:59: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmph1t6cx88.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmph1t6cx88.java:59:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        List<String> planets = new ArrayList<>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        if (planet1.equalsIgnoreCase(planet2)) {\n            return new Pair<String,\
    \ >(planet1, planet2);\n        }\n        if (planet1.equalsIgnoreCase(\"Mercury\"\
    ) && planet2.equalsIgnoreCase(\"Earth\")) {\n            planets.add(\"Earth\"\
    );\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n\
    \            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n            return new Pair<String, >(planet1,\
    \ planet2);\n        }\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            planets.add(\"Mercury\");\n            planets.add(\"\
    Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Jupiter\"\
    );\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n            return new Pair<String, >(planet1,\
    \ planet2);\n        }\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            planets.add(\"Mercury\");\n            planets.add(\"\
    Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Mars\"\
    );\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n            return new Pair<String, >(planet1,\
    \ planet2);\n        }\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            planets.add(\"Mercury\");\n            planets.add(\"\
    Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Mars\"\
    );\n            planets.add(\"Jupiter\");\n            planets.add(\"\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"),\
    \ (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjc35hbp1.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpjc35hbp1.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpjc35hbp1.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpjc35hbp1.java:34:\
    \ error: illegal start of type\n            return new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpjc35hbp1.java:43:\
    \ error: illegal start of type\n            return new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpjc35hbp1.java:53:\
    \ error: illegal start of type\n            return new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpjc35hbp1.java:63:\
    \ error: illegal start of type\n            return new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpjc35hbp1.java:71:\
    \ error: unclosed string literal\n            planets.add(\"\n               \
    \         ^\n/tmp/tmpjc35hbp1.java:71: error: ';' expected\n            planets.add(\"\
    \n                         ^\n/tmp/tmpjc35hbp1.java:73: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpjc35hbp1.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpjc35hbp1.java:73: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpjc35hbp1.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpjc35hbp1.java:73: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpjc35hbp1.java:78: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpjc35hbp1."
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n \
    \       double distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n\
    \        double distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        double distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance26 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance27\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2oyzsdre.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp2oyzsdre.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp2oyzsdre.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp2oyzsdre.java:51:\
    \ error: ';' expected\n        double distance27\n                         ^\n\
    /tmp/tmp2oyzsdre.java:58: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp2oyzsdre.java:58: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp2oyzsdre.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp2oyzsdre.java:58:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp2oyzsdre.java:59: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp2oyzsdre.java:59: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp2oyzsdre.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp2oyzsdre.java:59:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow((planet1.length() - planet2.length()),\
    \ 2) + Math.pow((planet1.charAt(0) - planet2.charAt(0)), 2));\n        if (planet1.equals(planet2))\
    \ {\n            result.first(planet1);\n            return result;\n        }\n\
    \        if (planet1.length() > planet2.length()) {\n            result.first(planet2);\n\
    \            return result;\n        }\n        if (planet1.length() < planet2.length())\
    \ {\n            result.first(planet1);\n            return result;\n        }\n\
    \        double angle = Math.acos((planet1.charAt(0) - planet2.charAt(0)) / (planet1.length()\
    \ - planet2.length()));\n        double angle2 = Math.acos((planet1.charAt(0)\
    \ - planet2.charAt(0)) / (planet1.length() - planet2.length()));\n        double\
    \ angle3 = Math.acos((planet1.charAt(0) - planet2.charAt(0)) / (planet1.length()\
    \ - planet2.length()));\n        double angle4 = Math.acos((planet1.charAt(0)\
    \ - planet2.charAt(0)) / (planet1.length() - planet2.length()));\n        double\
    \ angle5 = Math.acos((planet1.charAt(0) - planet2.charAt(0)) / (planet1.length()\
    \ - planet2.length()));\n        double angle6 = Math.acos((planet1.charAt(0)\
    \ - planet2.charAt(0)) / (planet1.length() - planet2.length()));\n        double\
    \ angle7 = Math.acos((planet1.charAt(0) - planet2.charAt(0)) / (planet1.length()\
    \ - planet2.length()));\n        double angle8 = Math.acos((planet1.charAt(0)\
    \ - planet2.charAt(0)) / (planet1.length() - planet2.length()));\n        double\
    \ angle9 = Math.acos((planet1.charAt(0) - planet2.charAt(0)) / (planet1.length()\
    \ - planet2.length()));\n        double angle10 = Math.acos((planet1.charAt(0)\
    \ - planet2.charAt(0)) / (planet1.length() - planet2.length()));\n        double\
    \ angle11 = Math.acos((planet1.charAt(0) - planet2.charAt(0)) / (planet1.length()\
    \ - planet2.length()));\n        double angle12 = Math.acos((planet1.charAt(0)\
    \ - planet2.charAt(0)) / (planet1.length() - planet2.length()));\n        double\
    \ angle13 = Math.acos((planet1.charAt(0) - planet2.charAt(0)) / (planet1.\n  \
    \  }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp33sy3kgq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp33sy3kgq.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp33sy3kgq.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp33sy3kgq.java:49:\
    \ error: <identifier> expected\n        double angle13 = Math.acos((planet1.charAt(0)\
    \ - planet2.charAt(0)) / (planet1.\n                                         \
    \                                             ^\n/tmp/tmp33sy3kgq.java:50: error:\
    \ ')' expected\n    }\n     ^\n/tmp/tmp33sy3kgq.java:51: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmp33sy3kgq.java:51:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp33sy3kgq.java:51: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp33sy3kgq.java:51:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp33sy3kgq.java:56: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp33sy3kgq.java:56:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp33sy3kgq.java:56: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp33sy3kgq.java:56:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp33sy3kgq.java:57: error: ')' expected\n    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance1 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance2 = Math.abs(planet2.length() - planet1.length());\n    \
    \    double distance3 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance4 = Math.abs(planet2.length() - planet1.length());\n      \
    \  double distance5 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance6 = Math.abs(planet2.length() - planet1.length());\n        double\
    \ distance7 = Math.abs(planet1.length() - planet2.length());\n        double distance8\
    \ = Math.abs(planet2.length() - planet1.length());\n        double distance9 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance10 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance11 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance12 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance13 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance14 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance15 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance16 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance17 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance18 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance19 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance20 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance21 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance22 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance23 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance24 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance25 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance26 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance27 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance28 =\
    \ Math.abs(planet2.length() - planet1.length());\n        double distance29 =\
    \ Math.abs(planet1.length() - planet2.length());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6m32s8_o.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6m32s8_o.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp6m32s8_o.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp6m32s8_o.java:60:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp6m32s8_o.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp6m32s8_o.java:60: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp6m32s8_o.java:60: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp6m32s8_o.java:61:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp6m32s8_o.java:61: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp6m32s8_o.java:61: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp6m32s8_o.java:61: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp6m32s8_o.java:62:\
    \ error: ')' expected\n    assert(bf("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Uranus\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\")) {\n            result = new Pair<String, >(planet1, planet2);\n    \
    \    } else if (planet1.equals(\"Earth\") && planet2.equals(\"Venus\")) {\n  \
    \          result = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Mars\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Mars\")) {\n            result = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Earth\") && planet2.equals(\"Jupiter\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Saturn\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Saturn\")) {\n            result = new Pair<String, >(planet1, planet2);\n   \
    \     } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Earth\") && planet2.equals(\"Uranus\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Neptune\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqekdh_ak.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqekdh_ak.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >(\"\", \"\");\n                     ^\n/tmp/tmpqekdh_ak.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n                                                 ^\n/tmp/tmpqekdh_ak.java:25:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:27:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:29:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:31:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:33:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:35:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:37:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:39:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:41:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:43:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpqekdh_ak.java:45:\
    \ error: illegal start"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqm27vfqe.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqm27vfqe.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpqm27vfqe.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpqm27vfqe.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpqm27vfqe.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpqm27vfqe.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpqm27vfqe.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpqm27vfqe.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpqm27vfqe.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpqm27vfqe.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpqm27vfqe.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpqm27vfqe.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Neptune\"))\
    \ {\n            result.first = \"Earth\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Mars\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Earth\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Mars\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Jupiter\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Mars\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Mars\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv7s8pghz.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpv7s8pghz.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpv7s8pghz.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpv7s8pghz.java:61:\
    \ error: <identifier> expected\n        } else if (planet1.\n                \
    \           ^\n/tmp/tmpv7s8pghz.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpv7s8pghz.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpv7s8pghz.java:63: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpv7s8pghz.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpv7s8pghz.java:63: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpv7s8pghz.java:68: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpv7s8pghz.java:68: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpv7s8pghz.java:68: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpv7s8pghz.java:68:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpv7s8pghz.java:69: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance2 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance3 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance4 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance5 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance6 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance7 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance8 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance9 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance10 = Math.sqrt(Math.pow(planet1.length(), 2) +\
    \ Math.pow(planet2.length(), 2));\n        double distance11 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance12 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance13 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance14 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance15 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance16 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance17 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance18 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance19 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance20 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance22 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6p9lvkhi.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6p9lvkhi.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp6p9lvkhi.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp6p9lvkhi.java:45:\
    \ error: ')' expected\n        double distance22 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n                                                       \
    \                            ^\n/tmp/tmp6p9lvkhi.java:46: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmp6p9lvkhi.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp6p9lvkhi.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp6p9lvkhi.java:47: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp6p9lvkhi.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp6p9lvkhi.java:52: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp6p9lvkhi.java:52:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp6p9lvkhi.java:52: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp6p9lvkhi.java:52:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp6p9lvkhi.java:53: error: ')' expected\n    assert"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplqk5hxxn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmplqk5hxxn.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmplqk5hxxn.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmplqk5hxxn.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmplqk5hxxn.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmplqk5hxxn.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmplqk5hxxn.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmplqk5hxxn.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmplqk5hxxn.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmplqk5hxxn.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmplqk5hxxn.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmplqk5hxxn.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx3hsd80f.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpx3hsd80f.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpx3hsd80f.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpx3hsd80f.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpx3hsd80f.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpx3hsd80f.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpx3hsd80f.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpx3hsd80f.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpx3hsd80f.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpx3hsd80f.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpx3hsd80f.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpx3hsd80f.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 1) {\n            return result;\n        }\n        double\
    \ distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        double\
    \ distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n        double\
    \ distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n        double\
    \ distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n        double\
    \ distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n        double\
    \ distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n        double\
    \ distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n        double\
    \ distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n        double\
    \ distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n        double\
    \ distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n        double\
    \ distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n        double\
    \ distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n        double\
    \ distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n        double\
    \ distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n        double\
    \ distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n        double\
    \ distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n        double\
    \ distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n        double\
    \ distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n        double\
    \ distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n        double\
    \ distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n        double\
    \ distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n        double\
    \ distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n        double\
    \ distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n        double\
    \ distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n        double\
    \ distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n        double\
    \ distance26 = Math.abs(planet1.charAt(25) - plan\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3bmqhv1.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmps3bmqhv1.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmps3bmqhv1.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmps3bmqhv1.java:53:\
    \ error: ')' expected\n        double distance26 = Math.abs(planet1.charAt(25)\
    \ - plan\n                                                              ^\n/tmp/tmps3bmqhv1.java:55:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmps3bmqhv1.java:55: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmps3bmqhv1.java:55: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmps3bmqhv1.java:55: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmps3bmqhv1.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmps3bmqhv1.java:60: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmps3bmqhv1.java:60:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmps3bmqhv1.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmps3bmqhv1.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmps3bmqhv1.java:61: error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42tx9b7k.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp42tx9b7k.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp42tx9b7k.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp42tx9b7k.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp42tx9b7k.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp42tx9b7k.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp42tx9b7k.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp42tx9b7k.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp42tx9b7k.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp42tx9b7k.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp42tx9b7k.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp42tx9b7k.java:133:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        \n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            result.first = \"Saturn\";\n            result.second\
    \ = \"Uranus\";\n        } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            result.first = \"Venus\";\n            result.second\
    \ = \"\";\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            result.first = \"Venus\";\n            result.second\
    \ = \"Earth\";\n        } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Venus\")) {\n            result.first = \"\";\n            result.second = \"\
    Mercury\";\n        } else if (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            result.first = \"Jupiter\";\n            result.second\
    \ = \"Saturn\";\n        } else if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            result.first = \"Uranus\";\n            result.second\
    \ = \"Neptune\";\n        } else if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            result.first = \"Neptune\";\n            result.second\
    \ = \"Mercury\";\n        } else if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Earth\";\n        } else if (planet1.equalsIgnoreCase(\"Neptune\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Mars\";\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            result.first = \"Jupiter\";\n            result.second\
    \ = \"Saturn\";\n        } else if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            result.first = \"Uranus\";\n            result.second\
    \ = \"Neptune\";\n        } else if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            result.first = \"Ne\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp88e801em.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp88e801em.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp88e801em.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp88e801em.java:61:\
    \ error: unclosed string literal\n            result.first = \"Ne\n          \
    \                 ^\n/tmp/tmp88e801em.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp88e801em.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp88e801em.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp88e801em.java:63: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp88e801em.java:63: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp88e801em.java:68: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp88e801em.java:68: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp88e801em.java:68: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp88e801em.java:68:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp88e801em.java:69: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<S"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Umbriel\");\n        planets.add(\"Cassiopeia\");\n        planets.add(\"Pisces\"\
    );\n        planets.add(\"Iris\");\n        planets.add(\"Tatooine\");\n     \
    \   planets.add(\"Muncie\");\n        planets.add(\"Gemini\");\n        planets.add(\"\
    Cancer\");\n        planets.add(\"Libra\");\n        planets.add(\"Virgo\");\n\
    \        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n\
    \        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n\
    \        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n\
    \        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n\
    \        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n\
    \        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n\
    \        planets.add(\"Libra\");\n        planets.add(\"Libra\");\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"),\
    \ (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp998399o3.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp998399o3.java:85: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp998399o3.java:85: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp998399o3.java:85: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp998399o3.java:85:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp998399o3.java:86: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp998399o3.java:86: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp998399o3.java:86: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp998399o3.java:86:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp998399o3.java:87: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmp998399o3.java:87:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance < 1) {\n            return pair;\n        }\n        double\
    \ distance2 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        if (distance2\
    \ < 1) {\n            return pair;\n        }\n        double distance3 = Math.abs(planet1.charAt(1)\
    \ - planet2.charAt(1));\n        if (distance3 < 1) {\n            return pair;\n\
    \        }\n        double distance4 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        if (distance4 < 1) {\n            return pair;\n        }\n        double\
    \ distance5 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n        if (distance5\
    \ < 1) {\n            return pair;\n        }\n        double distance6 = Math.abs(planet1.charAt(4)\
    \ - planet2.charAt(4));\n        if (distance6 < 1) {\n            return pair;\n\
    \        }\n        double distance7 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        if (distance7 < 1) {\n            return pair;\n        }\n        double\
    \ distance8 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n        if (distance8\
    \ < 1) {\n            return pair;\n        }\n        double distance9 = Math.abs(planet1.charAt(7)\
    \ - planet2.charAt(7));\n        if (distance9 < 1) {\n            return pair;\n\
    \        }\n        double distance10 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        if (distance10 < 1) {\n            return pair;\n        }\n        double\
    \ distance11 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n        if (distance11\
    \ < 1) {\n            return pair;\n        }\n        double distance12 = Math.abs(planet1.charAt(10)\
    \ - planet2.charAt(10));\n        if (distance12 < 1) {\n            return pair;\n\
    \        }\n        double distance13 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        if (distance13 < 1) {\n            return pair;\n        }\n        double\
    \ distance14 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n        if\
    \ (distance14 < 1) {\n            return pair;\n        }\n        double distance15\
    \ = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n        if (distance15\
    \ < 1) {\n            return pair;\n        }\n        double distance16 = Math.abs(planet1.charAt(14)\
    \ - planet2.charAt(14));\n        if (distance16 < 1) {\n            return pair;\n\
    \        }\n        double distance17 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        if (distance17\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzw1i4drl.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzw1i4drl.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpzw1i4drl.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpzw1i4drl.java:89:\
    \ error: ')' expected\n        if (distance17\n                      ^\n/tmp/tmpzw1i4drl.java:90:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpzw1i4drl.java:96: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpzw1i4drl.java:96:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpzw1i4drl.java:96: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpzw1i4drl.java:96:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpzw1i4drl.java:97: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpzw1i4drl.java:97: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpzw1i4drl.java:97: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpzw1i4drl.java:97:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<>();\n  \
    \      double distance = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance2 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n   \
    \     double distance3 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n  \
    \      double distance4 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n \
    \       double distance5 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance6 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance7 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance8 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance9 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance10 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance11 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance12 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance13 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance14 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance15 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance16 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance17 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance18 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance19 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance20 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance21 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance22 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance23 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance24 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance25 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance26 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance27 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance28\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo476vile.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpo476vile.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<>();\n                     ^\n/tmp/tmpo476vile.java:51: error:\
    \ ';' expected\n        double distance28\n                         ^\n/tmp/tmpo476vile.java:58:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpo476vile.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpo476vile.java:58: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpo476vile.java:58: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpo476vile.java:59:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpo476vile.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpo476vile.java:59: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpo476vile.java:59: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpo476vile.java:60:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph6bf37c2.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmph6bf37c2.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmph6bf37c2.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmph6bf37c2.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmph6bf37c2.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmph6bf37c2.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmph6bf37c2.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmph6bf37c2.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmph6bf37c2.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmph6bf37c2.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmph6bf37c2.java:283:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmph6bf37c2.java:283"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Mercury\";\n            result.second = \"\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\"\
    )) {\n            result.first = \"Mercury\";\n            result.second = \"\
    Earth\";\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Venus\";\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Mars\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Mars\";\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Jupiter\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Jupiter\";\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Saturn\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Saturn\";\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Uranus\";\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result.first = \"Mercury\";\n            result.second\
    \ = \"Neptune\";\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Earth\")) {\n            result.first = \"Venus\";\n            result.second\
    \ = \"\";\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n            result.second = \"Mercury\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Venus\";\n            result.second = \"Mars\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\"))\
    \ {\n            result.first = \"Venus\";\n            result.second = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\"))\
    \ {\n            result.first = \"Venus\";\n            result.second = \"Saturn\"\
    ;\n        } else if (\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp58_m9_bm.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp58_m9_bm.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp58_m9_bm.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp58_m9_bm.java:68:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp58_m9_bm.java:69:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp58_m9_bm.java:69: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp58_m9_bm.java:69: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp58_m9_bm.java:69: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp58_m9_bm.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp58_m9_bm.java:74: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp58_m9_bm.java:74:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp58_m9_bm.java:74: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp58_m9_bm.java:74:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp58_m9_bm.java:75: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp653tbgq8.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp653tbgq8.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp653tbgq8.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp653tbgq8.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp653tbgq8.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp653tbgq8.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp653tbgq8.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp653tbgq8.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp653tbgq8.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp653tbgq8.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp653tbgq8.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp653tbgq8.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double angle = Math.acos(planet1.length() / distance);\n     \
    \   double angle2 = Math.acos(planet2.length() / distance);\n        double angle3\
    \ = Math.acos(planet1.length() / distance);\n        double angle4 = Math.acos(planet2.length()\
    \ / distance);\n        double angle5 = Math.acos(planet1.length() / distance);\n\
    \        double angle6 = Math.acos(planet2.length() / distance);\n        double\
    \ angle7 = Math.acos(planet1.length() / distance);\n        double angle8 = Math.acos(planet2.length()\
    \ / distance);\n        double angle9 = Math.acos(planet1.length() / distance);\n\
    \        double angle10 = Math.acos(planet2.length() / distance);\n        double\
    \ angle11 = Math.acos(planet1.length() / distance);\n        double angle12 =\
    \ Math.acos(planet2.length() / distance);\n        double angle13 = Math.acos(planet1.length()\
    \ / distance);\n        double angle14 = Math.acos(planet2.length() / distance);\n\
    \        double angle15 = Math.acos(planet1.length() / distance);\n        double\
    \ angle16 = Math.acos(planet2.length() / distance);\n        double angle17 =\
    \ Math.acos(planet1.length() / distance);\n        double angle18 = Math.acos(planet2.length()\
    \ / distance);\n        double angle19 = Math.acos(planet1.length() / distance);\n\
    \        double angle20 = Math.acos(planet2.length() / distance);\n        double\
    \ angle21 = Math.acos(planet1.length() / distance);\n        double angle22 =\
    \ Math.acos(planet2.length() / distance);\n        double angle23 = Math.acos(planet1.length()\
    \ / distance);\n        double angle24 = Math.acos(planet2.length() / distance);\n\
    \        double angle25 = Math.acos(planet1.length() / distance);\n        double\
    \ angle26 = Math.acos(planet2.length() / distance);\n        double angle27 =\
    \ Math.acos(planet1.length() / distance);\n        double angle28 = Math.acos(planet2.length()\
    \ / distance);\n        double angle29 = Math.acos(planet1.length() / distance);\n\
    \        double angle30 = Math.acos(planet2.length() / distance);\n        double\
    \ angle31 = Math.acos(planet1.length() / distance);\n        double angle32 =\
    \ Math.acos(planet2.length() / \n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe4x4u0is.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpe4x4u0is.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpe4x4u0is.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpe4x4u0is.java:57:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmpe4x4u0is.java:57:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpe4x4u0is.java:58: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpe4x4u0is.java:58: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpe4x4u0is.java:58: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpe4x4u0is.java:58: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpe4x4u0is.java:63:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpe4x4u0is.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpe4x4u0is.java:63: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpe4x4u0is.java:63: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpe4x4u0is.java:64:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpe4x4u0is"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        List<String> planets = new ArrayList<>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        Collections.sort(planets);\n        double\
    \ distance = Math.abs(planet1.length() - planet2.length());\n        double distance2\
    \ = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        double distance3\
    \ = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n        double distance4\
    \ = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n        double distance5\
    \ = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n        double distance6\
    \ = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n        double distance7\
    \ = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n        double distance8\
    \ = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n        double distance9\
    \ = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n        double distance10\
    \ = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n        double distance11\
    \ = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n        double distance12\
    \ = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n        double distance13\
    \ = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n        double distance14\
    \ = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n        double distance15\
    \ = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n        double distance16\
    \ = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n        double distance17\
    \ = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n        double distance18\
    \ = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n        double distance19\
    \ = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n        double distance20\
    \ = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n        double distance21\
    \ = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n        double distance22\
    \ = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n        double distance23\
    \ = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n        double distance24\
    \ = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n        double distance25\
    \ = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n        double distance26\
    \ = Math.abs(planet1.\n    }\n    public static void main(String[] args) {\n \
    \   assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx0bil1s8.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpx0bil1s8.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpx0bil1s8.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpx0bil1s8.java:53:\
    \ error: <identifier> expected\n        double distance26 = Math.abs(planet1.\n\
    \                                             ^\n/tmp/tmpx0bil1s8.java:54: error:\
    \ ';' expected\n    }\n     ^\n/tmp/tmpx0bil1s8.java:55: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n           ^\n\
    /tmp/tmpx0bil1s8.java:55: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpx0bil1s8.java:55: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpx0bil1s8.java:55: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpx0bil1s8.java:60:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpx0bil1s8.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpx0bil1s8.java:60: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpx0bil1s8.java:60: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpx0bil1s8.java:61:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>)))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 2) {\n            return result;\n        }\n        double\
    \ distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        double\
    \ distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n        double\
    \ distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n        double\
    \ distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n        double\
    \ distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n        double\
    \ distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n        double\
    \ distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n        double\
    \ distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n        if (distance1\
    \ < distance2) {\n            if (distance1 < distance3) {\n                if\
    \ (distance1 < distance4) {\n                    if (distance1 < distance5) {\n\
    \                        if (distance1 < distance6) {\n                      \
    \      if (distance1 < distance7) {\n                                if (distance1\
    \ < distance8) {\n                                    if (distance2 < distance3)\
    \ {\n                                        if (distance2 < distance4) {\n  \
    \                                          if (distance2 < distance5) {\n    \
    \                                            if (distance2 < distance6) {\n  \
    \                                                  if (distance2 < distance7)\
    \ {\n                                                        if (distance2 < distance8)\
    \ {\n                                                            if (distance3\
    \ < distance4) {\n                                                           \
    \     if (distance3 < distance5) {\n                                         \
    \                           if (distance3 < distance6) {\n                   \
    \                                                     if (distance3 < distance7)\
    \ {\n                                                                        \
    \    if (distance3 < distance8) {\n                                          \
    \                                      if (distance4 < distance5) {\n        \
    \                                                                            if\
    \ (distance4 < distance6) {\n                                                \
    \                                        if (distance4 < distance7) {\n      \
    \                                                                            \
    \          if (distance4 < distance8) {\n                                    \
    \                                                            if (distance5 < distance6)\
    \ {\n                                                                        \
    \                            if (distance5 < distance7) {\n                  \
    \                                                                            \
    \          if (distance5 < distance8) {\n                                    \
    \                                                                        if (distance6\
    \ < distance7) {\n                                                           \
    \                                                     if (distance6 < distance8)\
    \ {\n                                                                        \
    \                                            if (distance7 < distance8) {\n  \
    \                                                                            \
    \                                          if (distance8 < distance8) {\n    \
    \                                                                            \
    \                                            result.first(planet1);\n        \
    \                                                                            \
    \                                        result.second(planet2);\n           \
    \                                                                            \
    \                                     return result;\n                       \
    \                                                                            \
    \                     }\n                                                    \
    \                                                                }\n         \
    \                                                                            \
    \                           }\n                                              \
    \                                                              }\n           \
    \                                                                            \
    \                 }\n                                                        \
    \                                            }\n                             \
    \                                                                   }\n      \
    \                                                                            \
    \          }\n                                                               \
    \                         }\n                                                \
    \                                    }\n                                     \
    \                                           }\n                              \
    \                                              }\n                           \
    \                                             }\n                            \
    \                                        }\n                                 \
    \                               }\n                                          \
    \                  }\n                                                       \
    \ }\n                                                    }\n                 \
    \                               }\n                                          \
    \  }\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprj5ajrpg.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmprj5ajrpg.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmprj5ajrpg.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmprj5ajrpg.java:90:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmprj5ajrpg.java:90: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmprj5ajrpg.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmprj5ajrpg.java:90: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmprj5ajrpg.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmprj5ajrpg.java:95: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmprj5ajrpg.java:95:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmprj5ajrpg.java:95: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmprj5ajrpg.java:95:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmprj5ajrpg.java:96: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmprj5ajrpg.java:96: error: ill"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        double distance;\n        \n        double sunDistance\
    \ = Math.hypot(sun.position.x, sun.position.y);\n        \n        double distance1\
    \ = Math.hypot(planet1.position.x, planet1.position.y);\n        double distance2\
    \ = Math.hypot(planet2.position.x, planet2.position.y);\n        \n        double\
    \ angle = Math.atan2(planet1.position.y, planet1.position.x);\n        double\
    \ angle2 = Math.atan2(planet2.position.y, planet2.position.x);\n        \n   \
    \     double angleDiff = angle - angle2;\n        \n        double angleDiffAbs\
    \ = Math.abs(angleDiff);\n        \n        if (angleDiffAbs < Math.PI / 2) {\n\
    \            distance = Math.sqrt(Math.pow(distance1, 2) + Math.pow(distance2,\
    \ 2));\n            \n            double angleDiff2 = angleDiff - Math.PI / 2;\n\
    \            \n            double angleDiff2Abs = Math.abs(angleDiff2);\n    \
    \        \n            if (angleDiff2Abs < Math.PI / 2) {\n                distance\
    \ = Math.sqrt(Math.pow(distance1, 2) + Math.pow(distance2, 2));\n            \
    \    \n                double angleDiff3 = angleDiff2 - Math.PI / 2;\n       \
    \         \n                double angleDiff3Abs = Math.abs(angleDiff3);\n   \
    \             \n                if (angleDiff3Abs < Math.PI / 2) {\n         \
    \           distance = Math.sqrt(Math.pow(distance1, 2) + Math.pow(distance2,\
    \ 2));\n                    \n                    double angleDiff4 = angleDiff3\
    \ - Math.PI / 2;\n                    \n                    double angleDiff4Abs\
    \ = Math.abs(angleDiff4);\n                    \n                    if (angleDiff4Abs\
    \ < Math.PI / 2) {\n                        distance = Math.sqrt(Math.pow(distance1,\
    \ 2) + Math.pow(distance2, 2));\n                        \n                  \
    \      double angleDiff5 = angleDiff4 - Math.PI / 2;\n                       \
    \ \n                        double angleDiff5Abs = Math.abs(angleDiff5);\n   \
    \                     \n                        if (angleDiff5Abs < Math.PI /\
    \ 2) {\n                            distance = Math.sqrt(Math.pow(distance1, 2)\
    \ + Math.pow(distance2, 2));\n                            \n                 \
    \           double angleDiff6 = angleDiff5 - Math.PI / 2;\n                  \
    \          \n                            double angleDiff6Abs = Math.abs(angleDiff6);\n\
    \                            \n                            if (angleDiff6Abs <\
    \ Math.PI / 2) {\n                                distance = Math.sqrt(Math.pow(distance1,\
    \ 2) + Math.pow(distance2, 2));\n                                \n          \
    \                      double angleDiff7 = angleDiff6 - Math.PI / 2;\n       \
    \                         \n                                double angleDiff7Abs\
    \ = Math.abs(angleDiff7);\n                                \n                \
    \                if (angleDiff7Abs < Math.PI / \n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dxrph92.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp_dxrph92.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp_dxrph92.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp_dxrph92.java:82:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp_dxrph92.java:83:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp_dxrph92.java:83: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp_dxrph92.java:83: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp_dxrph92.java:83: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp_dxrph92.java:83:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp_dxrph92.java:88: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp_dxrph92.java:88:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp_dxrph92.java:88: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp_dxrph92.java:88:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp_dxrph92.java:89: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n   \
    \         pair = Pair.of(\"Venus\");\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Mercury\")) {\n            pair = Pair.of(\"Earth\");\n\
    \        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Venus\")) {\n\
    \            pair = Pair.of(\"Mars\");\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Earth\")) {\n            pair = Pair.of(\"Jupiter\");\n\
    \        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n\
    \            pair = Pair.of(\"Saturn\");\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Jupiter\")) {\n            pair = Pair.of(\"Uranus\"\
    );\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Saturn\"\
    )) {\n            pair = Pair.of(\"Neptune\");\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Uranus\")) {\n            pair = Pair.of(\"Mercury\"\
    );\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            pair = Pair.of(\"Venus\");\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mercury\")) {\n            pair = Pair.of(\"Earth\"\
    );\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Venus\"))\
    \ {\n            pair = Pair.of(\"Mars\");\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Earth\")) {\n            pair = Pair.of(\"Jupiter\"\
    );\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\"\
    )) {\n            pair = Pair.of(\"Saturn\");\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Jupiter\")) {\n            pair = Pair.of(\"Uranus\"\
    );\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Saturn\"\
    )) {\n            pair = Pair.of(\"Neptune\");\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Uranus\")) {\n            pair = Pair.of(\"Mercury\"\
    );\n        } else if (\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zftlv2i.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5zftlv2i.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp5zftlv2i.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp5zftlv2i.java:57:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp5zftlv2i.java:58:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp5zftlv2i.java:58: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp5zftlv2i.java:58: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp5zftlv2i.java:58: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp5zftlv2i.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp5zftlv2i.java:63: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp5zftlv2i.java:63:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp5zftlv2i.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp5zftlv2i.java:63:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp5zftlv2i.java:64: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<>();\n  \
    \      double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance2 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance3 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance4 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance5 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance6 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance7 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance8 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance9 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance10 = Math.sqrt(Math.pow(planet1.length(), 2) +\
    \ Math.pow(planet2.length(), 2));\n        double distance11 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance12 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance13 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance14 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance15 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance16 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance17 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance18 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance19 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance20 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance22 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpom2jwq2o.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpom2jwq2o.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<>();\n                     ^\n/tmp/tmpom2jwq2o.java:45: error:\
    \ ')' expected\n        double distance22 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet\n                                                     \
    \                                ^\n/tmp/tmpom2jwq2o.java:46: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpom2jwq2o.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpom2jwq2o.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpom2jwq2o.java:47: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpom2jwq2o.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpom2jwq2o.java:52: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpom2jwq2o.java:52:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpom2jwq2o.java:52: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpom2jwq2o.java:52:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpom2jwq2o.java:53: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpom2jwq2o.java:53: error: illegal"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Venus\")) {\n            result = new Pair<String, >(planet1, planet2);\n    \
    \    } else if (planet1.equals(\"Mars\") && planet2.equals(\"Earth\")) {\n   \
    \         result = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Earth\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"\
    Earth\")) {\n            result = new Pair<String, >(planet1, planet2);\n    \
    \    } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Earth\")) {\n \
    \           result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Neptune\") && planet2.equals(\"Earth\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Mars\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Mars\")) {\n            result = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n    \
    \        result = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Mars\")) {\n            result = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Mar\n    }\n   \
    \ public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6s3q68df.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6s3q68df.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >(\"\", \"\");\n                     ^\n/tmp/tmp6s3q68df.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n                                                 ^\n/tmp/tmp6s3q68df.java:25:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:27:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:29:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:31:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:33:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:35:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:37:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:39:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:41:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:43:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmp6s3q68df.java:45:\
    \ error: illegal start"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance < 1) {\n            return pair;\n        }\n        double\
    \ distance1 = Math.abs(planet1.length() - planet2.length());\n        double distance2\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance3 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance4 = Math.abs(planet1.length()\
    \ - planet2.length());\n        double distance5 = Math.abs(planet1.length() -\
    \ planet2.length());\n        double distance6 = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance7 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance8 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance9 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance10 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance11 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance12 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance13 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance14 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance15 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance16 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance17 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance18 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance19 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance20 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance21 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance22 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance23 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance24 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance25 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance26 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance27 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance28 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance29 = Math.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuuwc1m10.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpuuwc1m10.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpuuwc1m10.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpuuwc1m10.java:56:\
    \ error: <identifier> expected\n        double distance29 = Math.\n          \
    \                       ^\n/tmp/tmpuuwc1m10.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpuuwc1m10.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpuuwc1m10.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpuuwc1m10.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpuuwc1m10.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpuuwc1m10.java:63: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpuuwc1m10.java:63: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpuuwc1m10.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpuuwc1m10.java:63:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpuuwc1m10.java:64: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        if (distance < 1) {\n            pair = Pair.of(planet1, planet2);\n\
    \            return pair;\n        }\n        double angle = Math.acos(planet1.length()\
    \ / distance);\n        double angle2 = Math.acos(planet2.length() / distance);\n\
    \        double angleDiff = Math.abs(angle - angle2);\n        double angleDiff2\
    \ = Math.abs(angle2 - angle);\n        double angleDiff3 = Math.abs(angleDiff\
    \ - angleDiff2);\n        double angleDiff4 = Math.abs(angleDiff2 - angleDiff3);\n\
    \        double angleDiff5 = Math.abs(angleDiff3 - angleDiff4);\n        double\
    \ angleDiff6 = Math.abs(angleDiff4 - angleDiff5);\n        double angleDiff7 =\
    \ Math.abs(angleDiff5 - angleDiff6);\n        double angleDiff8 = Math.abs(angleDiff6\
    \ - angleDiff7);\n        double angleDiff9 = Math.abs(angleDiff7 - angleDiff8);\n\
    \        double angleDiff10 = Math.abs(angleDiff8 - angleDiff9);\n        double\
    \ angleDiff11 = Math.abs(angleDiff9 - angleDiff10);\n        double angleDiff12\
    \ = Math.abs(angleDiff10 - angleDiff11);\n        double angleDiff13 = Math.abs(angleDiff11\
    \ - angleDiff12);\n        double angleDiff14 = Math.abs(angleDiff12 - angleDiff13);\n\
    \        double angleDiff15 = Math.abs(angleDiff13 - angleDiff14);\n        double\
    \ angleDiff16 = Math.abs(angleDiff14 - angleDiff15);\n        double angleDiff17\
    \ = Math.abs(angleDiff15 - angleDiff16);\n        double angleDiff18 = Math.abs(angleDiff16\
    \ - angleDiff17);\n        double angleDiff19 = Math.abs(angleDiff17 - angleDiff18);\n\
    \        double angleDiff20 = Math.abs(angleDiff18 - angleDiff19);\n        double\
    \ angleDiff21 = Math.abs(angleDiff19 - angleDiff20);\n        double angleDiff22\
    \ = Math.abs(angleDiff20 - angleDiff21);\n        double angleDiff23 = Math.abs(angleDiff21\
    \ - angleDiff22);\n        double angleDiff24 = Math.abs(angleDiff22 - angleDiff23);\n\
    \        double angleDiff25 = Math.abs(angleDiff23 - angleDiff24);\n        double\
    \ angleDiff26 = Math.abs(angleDiff24 - angleDiff25);\n        double angleDiff27\
    \ = Math.abs(angleDiff25 - angleDiff26);\n        double angleDiff28 = Math.abs(angleDiff26\
    \ - angleDiff27);\n        double angleDiff29 = Math.abs(angleDiff27 - angleDiff\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp5ueucunz.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5ueucunz.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp5ueucunz.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp5ueucunz.java:59:\
    \ error: ')' expected\n        double angleDiff29 = Math.abs(angleDiff27 - angleDiff\n\
    \                                                             ^\n/tmp/tmp5ueucunz.java:61:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp5ueucunz.java:61: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp5ueucunz.java:61: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp5ueucunz.java:61: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp5ueucunz.java:61:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp5ueucunz.java:66: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp5ueucunz.java:66:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp5ueucunz.java:66: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp5ueucunz.java:66:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp5ueucunz.java:67: error: ')' expected\n    assert(bf((\""
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(planet1);\n        planets.add(planet2);\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpugb2buop.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpugb2buop.java:56: error: <identifier> expected\n        planets.addAll(Arrays.\n\
    \                              ^\n/tmp/tmpugb2buop.java:57: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpugb2buop.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpugb2buop.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpugb2buop.java:58: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpugb2buop.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpugb2buop.java:63: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpugb2buop.java:63:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpugb2buop.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpugb2buop.java:63:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpugb2buop.java:64: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpugb2buop.java:64: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpugb2buop.java:64: error: illegal start of expression\n    asser"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Saturn\";\n            result.second = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n            result.second = \"Earth\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Mars\";\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\")) {\n\
    \            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\"))\
    \ {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Neptune\";\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpop58mz3o.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpop58mz3o.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpop58mz3o.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpop58mz3o.java:65:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpop58mz3o.java:65: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpop58mz3o.java:65: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpop58mz3o.java:65: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpop58mz3o.java:66:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpop58mz3o.java:66: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpop58mz3o.java:66: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpop58mz3o.java:66: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpop58mz3o.java:67:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        planets.stream().filter(planet\
    \ -> planet.equals(planet1) || planet.equals(planet2)).forEach(planet -> {\n \
    \           try {\n                double distance = planetDistance(planet, planet1);\n\
    \                double distance2 = planetDistance(planet, planet2);\n       \
    \         double distance3 = distance + distance2;\n                double distance4\
    \ = distance3 - distance;\n                double distance5 = distance4 - distance2;\n\
    \                double distance6 = distance5 - distance;\n                double\
    \ distance7 = distance6 - distance2;\n                double distance8 = distance7\
    \ - distance;\n                double distance9 = distance8 - distance2;\n   \
    \             double distance10 = distance9 - distance;\n                double\
    \ distance11 = distance10 - distance2;\n                double distance12 = distance11\
    \ - distance;\n                double distance13 = distance12 - distance2;\n \
    \               double distance14 = distance13 - distance;\n                double\
    \ distance15 = distance14 - distance2;\n                double distance16 = distance15\
    \ - distance;\n                double distance17 = distance16 - distance2;\n \
    \               double distance18 = distance17 - distance;\n                double\
    \ distance19 = distance18 - distance2;\n                double distance20 = distance19\
    \ - distance;\n                double distance21 = distance20 - distance2;\n \
    \               double distance22 = distance21 - distance;\n                double\
    \ distance23 = distance22 - distance2;\n                double distance24 = distance23\
    \ - distance;\n                double distance25 = distance24 - distance2;\n \
    \               double distance26 = distance25 - distance;\n                double\
    \ distance27 = distance26 - distance2;\n                double distance28 = distance27\
    \ - distance;\n                double distance29 = distance28 - distance2;\n \
    \               double distance30 = distance29 - distance;\n                double\
    \ distance31 = distance30 - distance2;\n                double distance32 = distance31\
    \ - distance;\n                double distance33 = distance32 - distance2;\n \
    \               double distance34 = distance\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqavjh69j.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqavjh69j.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpqavjh69j.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpqavjh69j.java:70:\
    \ error: ';' expected\n                double distance34 = distance\n        \
    \                                    ^\n/tmp/tmpqavjh69j.java:36: error: 'try'\
    \ without 'catch', 'finally' or resource declarations\n            try {\n   \
    \         ^\n/tmp/tmpqavjh69j.java:72: error: illegal start of expression\n  \
    \  public static void main(String[] args) {\n    ^\n/tmp/tmpqavjh69j.java:72:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpqavjh69j.java:72: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpqavjh69j.java:72: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpqavjh69j.java:72: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpqavjh69j.java:77: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpqavjh69j.java:77: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpqavjh69j.java:77: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpqavjh69j.java:77:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                          "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n \
    \           pair = Pair.of(\"Venus\");\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Earth\")) {\n            pair = Pair.of(\"Earth\");\n  \
    \      } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n\
    \            pair = Pair.of(\"Mars\");\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Jupiter\")) {\n            pair = Pair.of(\"Jupiter\");\n\
    \        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\"))\
    \ {\n            pair = Pair.of(\"Saturn\");\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            pair = Pair.of(\"Uranus\"\
    );\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            pair = Pair.of(\"Neptune\");\n        } else {\n           \
    \ pair = Pair.of();\n        }\n        return pair;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4dddxq45.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp4dddxq45.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp4dddxq45.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp4dddxq45.java:49:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp4dddxq45.java:49: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp4dddxq45.java:49: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp4dddxq45.java:49: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp4dddxq45.java:50:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp4dddxq45.java:50: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp4dddxq45.java:50: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp4dddxq45.java:50: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp4dddxq45.java:51:\
    \ error: ')' expected\n    assert(bf("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance < 1) {\n            pair = Pair.of(planet1, planet2);\n  \
    \          return pair;\n        }\n        double distance1 = Math.abs(planet1.length()\
    \ - planet2.length());\n        double distance2 = Math.abs(planet2.length() -\
    \ planet1.length());\n        if (distance1 < distance2) {\n            pair =\
    \ Pair.of(planet1, planet2);\n            return pair;\n        }\n        double\
    \ distance3 = Math.abs(planet1.length() - planet2.length());\n        double distance4\
    \ = Math.abs(planet2.length() - planet1.length());\n        if (distance3 < distance4)\
    \ {\n            pair = Pair.of(planet2, planet1);\n            return pair;\n\
    \        }\n        double distance5 = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance6 = Math.abs(planet2.length() - planet1.length());\n \
    \       if (distance5 < distance6) {\n            pair = Pair.of(planet2, planet1);\n\
    \            return pair;\n        }\n        double distance7 = Math.abs(planet1.length()\
    \ - planet2.length());\n        double distance8 = Math.abs(planet2.length() -\
    \ planet1.length());\n        if (distance7 < distance8) {\n            pair =\
    \ Pair.of(planet1, planet2);\n            return pair;\n        }\n        double\
    \ distance9 = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet2.length() - planet1.length());\n        if (distance9 < distance10)\
    \ {\n            pair = Pair.of(planet1, planet2);\n            return pair;\n\
    \        }\n        double distance11 = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance12 = Math.abs(planet2.length() - planet1.length());\n\
    \        if (distance11 < distance12) {\n            pair = Pair.of(planet2, planet1);\n\
    \            return pair;\n        }\n        double distance13 = Math.abs(planet1.length()\
    \ - planet2.length());\n        double distance14 = Math.abs(planet2.length()\
    \ - planet1.length());\n        if (distance13 < distance14) {\n            pair\
    \ = Pair.of(planet2, planet1);\n            return pair;\n        }\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet2.length() - planet1.length());\n        if (distance15\
    \ < distance16) {\n            pair = Pair\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd6z69fze.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpd6z69fze.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpd6z69fze.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpd6z69fze.java:74:\
    \ error: ';' expected\n            pair = Pair\n                       ^\n/tmp/tmpd6z69fze.java:76:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpd6z69fze.java:76: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpd6z69fze.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpd6z69fze.java:76: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpd6z69fze.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpd6z69fze.java:81: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpd6z69fze.java:81:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpd6z69fze.java:81: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpd6z69fze.java:81:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpd6z69fze.java:82: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        Set<String> planets = new HashSet<>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        planets.stream().filter(p -> p.equals(planet1)\
    \ || p.equals(planet2)).forEach(p -> {\n            try {\n                String\
    \ planet = p.replaceAll(\"[A-z]\", \"\");\n                String planet2 = planet.replaceAll(\"\
    [A-z]\", \"\");\n                String planet3 = planet.replaceAll(\"[A-z]\"\
    , \"\");\n                String planet4 = planet.replaceAll(\"[A-z]\", \"\");\n\
    \                String planet5 = planet.replaceAll(\"[A-z]\", \"\");\n      \
    \          String planet6 = planet.replaceAll(\"[A-z]\", \"\");\n            \
    \    String planet7 = planet.replaceAll(\"[A-z]\", \"\");\n                String\
    \ planet8 = planet.replaceAll(\"[A-z]\", \"\");\n                String planet9\
    \ = planet.replaceAll(\"[A-z]\", \"\");\n                String planet10 = planet.replaceAll(\"\
    [A-z]\", \"\");\n                String planet11 = planet.replaceAll(\"[A-z]\"\
    , \"\");\n                String planet12 = planet.replaceAll(\"[A-z]\", \"\"\
    );\n                String planet13 = planet.replaceAll(\"[A-z]\", \"\");\n  \
    \              String planet14 = planet.replaceAll(\"[A-z]\", \"\");\n       \
    \         String planet15 = planet.replaceAll(\"[A-z]\", \"\");\n            \
    \    String planet16 = planet.replaceAll(\"[A-z]\", \"\");\n                String\
    \ planet17 = planet.replaceAll(\"[A-z]\", \"\");\n                String planet18\
    \ = planet.replaceAll(\"[A-z]\", \"\");\n                String planet19 = planet.replaceAll(\"\
    [A-z]\", \"\");\n                String planet20 = planet.replaceAll(\"[A-z]\"\
    , \"\");\n                String planet21 = planet.replaceAll(\"[A-z]\", \"\"\
    );\n                String planet22 = planet.replaceAll(\"[A-z]\", \"\");\n  \
    \              String planet23 = planet.replaceAll(\"[A-z]\", \"\");\n       \
    \         String planet24 = planet.replaceAll(\"[A-z]\", \"\");\n            \
    \    String planet25 = planet.replaceAll(\"[A-z]\", \"\");\n                String\
    \ planet26 = plan\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpyc51k_fd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpyc51k_fd.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmpyc51k_fd.java:54:\
    \ error: ';' expected\n                String planet26 = plan\n              \
    \                        ^\n/tmp/tmpyc51k_fd.java:28: error: 'try' without 'catch',\
    \ 'finally' or resource declarations\n            try {\n            ^\n/tmp/tmpyc51k_fd.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpyc51k_fd.java:56: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpyc51k_fd.java:56:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpyc51k_fd.java:56: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpyc51k_fd.java:56:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpyc51k_fd.java:61: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpyc51k_fd.java:61:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpyc51k_fd.java:61: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpyc51k_fd.java:61:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpyc51k_fd.java:62: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        Set<String> planets = new HashSet<>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        Set<String> orbits = new HashSet<>();\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream().map(Planet::getOrbit).collect(Collectors.toList())));\n\
    \        orbits.addAll(Arrays.asList(planets.stream\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06nzu7nq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp06nzu7nq.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmp06nzu7nq.java:43:\
    \ error: ')' expected\n        orbits.addAll(Arrays.asList(planets.stream\n  \
    \                                                ^\n/tmp/tmp06nzu7nq.java:44:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmp06nzu7nq.java:45: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp06nzu7nq.java:45: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp06nzu7nq.java:45: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp06nzu7nq.java:45: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp06nzu7nq.java:50:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp06nzu7nq.java:50: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp06nzu7nq.java:50: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp06nzu7nq.java:50: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp06nzu7nq.java:51:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp06nzu7nq.java:51: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(planet1);\n        planets.add(planet2);\n  \
    \      List<String> planetsBetween = new ArrayList<>();\n        planetsBetween.add(planet1);\n\
    \        planetsBetween.add(planet2);\n        List<String> planetsBetween2 =\
    \ new ArrayList<>();\n        planetsBetween2.add(planet2);\n        planetsBetween2.add(planet1);\n\
    \        List<String> planetsBetween3 = new ArrayList<>();\n        planetsBetween3.add(planet1);\n\
    \        planetsBetween3.add(planet2);\n        List<String> planetsBetween4 =\
    \ new ArrayList<>();\n        planetsBetween4.add(planet2);\n        planetsBetween4.add(planet1);\n\
    \        List<String> planetsBetween5 = new ArrayList<>();\n        planetsBetween5.add(planet1);\n\
    \        planetsBetween5.add(planet2);\n        List<String> planetsBetween6 =\
    \ new ArrayList<>();\n        planetsBetween6.add(planet2);\n        planetsBetween6.add(planet1);\n\
    \        List<String> planetsBetween7 = new ArrayList<>();\n        planetsBetween7.add(planet1);\n\
    \        planetsBetween7.add(planet2);\n        List<String> planetsBetween8 =\
    \ new ArrayList<>();\n        planetsBetween8.add(planet2);\n        planetsBetween8.add(planet1);\n\
    \        List<String> planetsBetween9 = new ArrayList<>();\n        planetsBetween9.add(planet1);\n\
    \        planetsBetween9.add(planet2);\n        List<String> planetsBetween10\
    \ = new ArrayList<>();\n        planetsBetween10.add(planet2);\n        planetsBetween10.add(planet1);\n\
    \        List<String> planetsBetween11 = new ArrayList<>();\n        planetsBetween11.add(planet1);\n\
    \        planetsBetween11.add(planet2);\n        List<String> planetsBetween12\
    \ = new ArrayList<>();\n        planetsBetween12.add(planet2);\n        planetsBetween12.add(planet1);\n\
    \        List<String> \n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wtzjmib.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp7wtzjmib.java:70: error: not a statement\n        List<String>\
    \ \n            ^\n/tmp/tmp7wtzjmib.java:70: error: ';' expected\n        List<String>\
    \ \n                    ^\n/tmp/tmp7wtzjmib.java:77: error: ')' expected\n   \
    \ assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp7wtzjmib.java:77:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp7wtzjmib.java:77: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp7wtzjmib.java:77:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp7wtzjmib.java:78: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp7wtzjmib.java:78: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp7wtzjmib.java:78: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp7wtzjmib.java:78:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp7wtzjmib.java:79: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double angle = Math.acos(planet1.length() / distance);\n     \
    \   double angle2 = Math.acos(planet2.length() / distance);\n        double angleDiff\
    \ = Math.abs(angle - angle2);\n        double angleDiff2 = Math.abs(angle - angle2);\n\
    \        double angleDiff3 = Math.abs(angle - angle2);\n        double angleDiff4\
    \ = Math.abs(angle - angle2);\n        double angleDiff5 = Math.abs(angle - angle2);\n\
    \        double angleDiff6 = Math.abs(angle - angle2);\n        double angleDiff7\
    \ = Math.abs(angle - angle2);\n        double angleDiff8 = Math.abs(angle - angle2);\n\
    \        double angleDiff9 = Math.abs(angle - angle2);\n        double angleDiff10\
    \ = Math.abs(angle - angle2);\n        double angleDiff11 = Math.abs(angle - angle2);\n\
    \        double angleDiff12 = Math.abs(angle - angle2);\n        double angleDiff13\
    \ = Math.abs(angle - angle2);\n        double angleDiff14 = Math.abs(angle - angle2);\n\
    \        double angleDiff15 = Math.abs(angle - angle2);\n        double angleDiff16\
    \ = Math.abs(angle - angle2);\n        double angleDiff17 = Math.abs(angle - angle2);\n\
    \        double angleDiff18 = Math.abs(angle - angle2);\n        double angleDiff19\
    \ = Math.abs(angle - angle2);\n        double angleDiff20 = Math.abs(angle - angle2);\n\
    \        double angleDiff21 = Math.abs(angle - angle2);\n        double angleDiff22\
    \ = Math.abs(angle - angle2);\n        double angleDiff23 = Math.abs(angle - angle2);\n\
    \        double angleDiff24 = Math.abs(angle - angle2);\n        double angleDiff25\
    \ = Math.abs(angle - angle2);\n        double angleDiff26 = Math.abs(angle - angle2);\n\
    \        double angleDiff27 = Math.abs(angle - angle2);\n        double angleDiff28\
    \ = Math.abs(angle - angle2);\n        double angleDiff29 = Math.abs(angle - angle2);\n\
    \        double angleDiff30 = Math.abs(angle - angle2);\n        double angleDiff31\
    \ = Math.abs(angle - angle2);\n        double angleDiff32 = Math.abs(angle - angle2);\n\
    \        double angleDiff33 = Math.abs(angle - angle2);\n        double angleDiff34\
    \ = Math.abs(angle - angle2);\n        double angleDiff35 = Math.abs(angle - angle2);\n\
    \        double angleDiff36 = Math.abs(angle - angle2);\n        double angleDiff37\
    \ = Math.abs(angle - angle2);\n        double angleDiff38 = Math.abs(angle - angle2);\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_fj0fu2s.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp_fj0fu2s.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp_fj0fu2s.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp_fj0fu2s.java:72:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp_fj0fu2s.java:72: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp_fj0fu2s.java:72: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp_fj0fu2s.java:72: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp_fj0fu2s.java:73:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp_fj0fu2s.java:73: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp_fj0fu2s.java:73: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp_fj0fu2s.java:73: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp_fj0fu2s.java:74:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Saturn\";\n            result.second = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n            result.second = \"Earth\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Venus\")) {\n            result.first = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\"))\
    \ {\n            result.first = \"Jupiter\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22zpzky_.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp22zpzky_.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp22zpzky_.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp22zpzky_.java:51:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp22zpzky_.java:51: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp22zpzky_.java:51: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp22zpzky_.java:51: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp22zpzky_.java:52:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp22zpzky_.java:52: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp22zpzky_.java:52: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp22zpzky_.java:52: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp22zpzky_.java:53:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n \
    \       double distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n\
    \        double distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        double distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance26 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance27\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xzwhtg4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp7xzwhtg4.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp7xzwhtg4.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp7xzwhtg4.java:51:\
    \ error: ';' expected\n        double distance27\n                         ^\n\
    /tmp/tmp7xzwhtg4.java:58: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp7xzwhtg4.java:58: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp7xzwhtg4.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp7xzwhtg4.java:58:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp7xzwhtg4.java:59: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp7xzwhtg4.java:59: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp7xzwhtg4.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp7xzwhtg4.java:59:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Saturn\";\n            result.second = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n            result.second = \"Earth\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Mars\";\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\")) {\n\
    \            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\"))\
    \ {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Neptune\";\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpb6u1db7m.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpb6u1db7m.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpb6u1db7m.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpb6u1db7m.java:65:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpb6u1db7m.java:65: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpb6u1db7m.java:65: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpb6u1db7m.java:65: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpb6u1db7m.java:66:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpb6u1db7m.java:66: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpb6u1db7m.java:66: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpb6u1db7m.java:66: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpb6u1db7m.java:67:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<>();\n  \
    \      double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmzwp6ush.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpmzwp6ush.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<>();\n                     ^\n/tmp/tmpmzwp6ush.java:117: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpmzwp6ush.java:117:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpmzwp6ush.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpmzwp6ush.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpmzwp6ush.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpmzwp6ush.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpmzwp6ush.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpmzwp6ush.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpmzwp6ush.java:119: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpmzwp6ush.java:119: "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzaij0rxo.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzaij0rxo.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpzaij0rxo.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpzaij0rxo.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpzaij0rxo.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpzaij0rxo.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpzaij0rxo.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpzaij0rxo.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpzaij0rxo.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpzaij0rxo.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpzaij0rxo.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpzaij0rxo.java:133:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz24tfjrb.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpz24tfjrb.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpz24tfjrb.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpz24tfjrb.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpz24tfjrb.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpz24tfjrb.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpz24tfjrb.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpz24tfjrb.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpz24tfjrb.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpz24tfjrb.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpz24tfjrb.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpz24tfjrb.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpz24tfjrb.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpz24tfjrb.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxxpjzb6b.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxxpjzb6b.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpxxpjzb6b.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpxxpjzb6b.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpxxpjzb6b.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpxxpjzb6b.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpxxpjzb6b.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpxxpjzb6b.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpxxpjzb6b.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpxxpjzb6b.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpxxpjzb6b.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpxxpjzb6b.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance9;\n        double distance10;\n        double distance11;\n\
    \        double distance12;\n        double distance13;\n        double distance14;\n\
    \        double distance15;\n        double distance16;\n        double distance17;\n\
    \        double distance18;\n        double distance19;\n        double distance20;\n\
    \        double distance21;\n        double distance22;\n        double distance23;\n\
    \        double distance24;\n        double distance25;\n        double distance26;\n\
    \        double distance27;\n        double distance28;\n        double distance29;\n\
    \        double distance30;\n        double distance31;\n        double distance32;\n\
    \        double distance33;\n        double distance34;\n        double distance35;\n\
    \        double distance36;\n        double distance37;\n        double distance38;\n\
    \        double distance39;\n        double distance40;\n        double distance41;\n\
    \        double distance42;\n        double distance43;\n        double distance44;\n\
    \        double distance45;\n        double distance46;\n        double distance47;\n\
    \        double distance48;\n        double distance49;\n        double distance50;\n\
    \        double distance51;\n        double distance52;\n        double distance53;\n\
    \        double distance54;\n        double distance55;\n        double distance56;\n\
    \        double distance57;\n        double distance58;\n        double distance59;\n\
    \        double distance60;\n        double distance61;\n        double distance62;\n\
    \        double distance63;\n        double distance64;\n        double distance65;\n\
    \        double distance66;\n        double distance67;\n        double distance68;\n\
    \        double distance69;\n        double distance70;\n        double distance71;\n\
    \        double distance72;\n        double distance73;\n        double distance74;\n\
    \        double distance75;\n        double distance76;\n        double distance77;\n\
    \        double distance78;\n        double distance79;\n        double distance80;\n\
    \        double distance81;\n        double distance82;\n        double distance83;\n\
    \        double distance84;\n        double distance85;\n        double distance86;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpo8bx406d.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpo8bx406d.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpo8bx406d.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpo8bx406d.java:117:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpo8bx406d.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpo8bx406d.java:117: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpo8bx406d.java:117: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpo8bx406d.java:118:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpo8bx406d.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpo8bx406d.java:118: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpo8bx406d.java:118: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpo8bx406d.java:119:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Eurydice\");\n      \
    \  planets.add(\"Iris\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Ganymede\");\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\"\
    );\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n \
    \       planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n     \
    \   planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\"\
    );\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n \
    \       planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n     \
    \   planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\"\
    );\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n \
    \       planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n     \
    \   planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\"\
    );\n        planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n \
    \       planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n     \
    \   planets.add(\"Callisto\");\n        planets.add(\"Callisto\");\n        planets.add(\"\
    Callist\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplquwejbl.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmplquwejbl.java:74: error: unclosed string literal\n      \
    \  planets.add(\"Callist\n                    ^\n/tmp/tmplquwejbl.java:74: error:\
    \ ';' expected\n        planets.add(\"Callist\n                            ^\n\
    /tmp/tmplquwejbl.java:76: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmplquwejbl.java:76: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmplquwejbl.java:76:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmplquwejbl.java:76: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmplquwejbl.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmplquwejbl.java:81: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmplquwejbl.java:81:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmplquwejbl.java:81: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmplquwejbl.java:81:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmplquwejbl.java:82: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmplquwejbl.java:82: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt8o25vg0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpt8o25vg0.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpt8o25vg0.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpt8o25vg0.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpt8o25vg0.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpt8o25vg0.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpt8o25vg0.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpt8o25vg0.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpt8o25vg0.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpt8o25vg0.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpt8o25vg0.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpt8o25vg0.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp57elnw5e.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp57elnw5e.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmp57elnw5e.java:117:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp57elnw5e.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp57elnw5e.java:117: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp57elnw5e.java:117: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp57elnw5e.java:118:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp57elnw5e.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp57elnw5e.java:118: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp57elnw5e.java:118: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp57elnw5e.java:119:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmp57elnw5e.java:119"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double angle = Math.acos(planet1.length() / distance);\n     \
    \   double angle2 = Math.acos(planet2.length() / distance);\n        double angle3\
    \ = Math.acos(planet1.length() / distance);\n        double angle4 = Math.acos(planet2.length()\
    \ / distance);\n        double angle5 = Math.acos(planet1.length() / distance);\n\
    \        double angle6 = Math.acos(planet2.length() / distance);\n        double\
    \ angle7 = Math.acos(planet1.length() / distance);\n        double angle8 = Math.acos(planet2.length()\
    \ / distance);\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            pair.first = \"Saturn\";\n            pair.second = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            pair.first = \"Venus\";\n            pair.second = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            pair.first = \"Venus\";\n            pair.second = \"Earth\"\
    ;\n            pair.third = \"Mars\";\n            pair.fourth = \"Jupiter\";\n\
    \            pair.fifth = \"Saturn\";\n            pair.sixth = \"Uranus\";\n\
    \        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"))\
    \ {\n            pair.first = \"Venus\";\n            pair.second = \"Earth\"\
    ;\n            pair.third = \"Mars\";\n            pair.fourth = \"Jupiter\";\n\
    \            pair.fifth = \"Saturn\";\n            pair.sixth = \"Uranus\";\n\
    \            pair.seventh = \"Neptune\";\n            pair.eighth = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\"\
    )) {\n            pair.first = \"Venus\";\n            pair.second = \"Earth\"\
    ;\n            pair.third = \"Mars\";\n            pair.fourth = \"Jupiter\";\n\
    \            pair.fifth = \"Saturn\";\n            pair.sixth = \"Uranus\";\n\
    \            pair.seventh = \"Neptune\";\n            pair.eighth = \"Earth\"\
    ;\n            pair.first = \"Mercury\";\n            pair.second = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Earth\") && plan\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkwj5tpko.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpkwj5tpko.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpkwj5tpko.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpkwj5tpko.java:66:\
    \ error: ')' expected\n        } else if (planet1.equals(\"Earth\") && plan\n\
    \                                                  ^\n/tmp/tmpkwj5tpko.java:67:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpkwj5tpko.java:73: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpkwj5tpko.java:73:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpkwj5tpko.java:73: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpkwj5tpko.java:73:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpkwj5tpko.java:74: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpkwj5tpko.java:74: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpkwj5tpko.java:74: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpkwj5tpko.java:74:\
    \ error:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(planet1);\n        planets.add(planet2);\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.addAll(Arrays.asList(planet2, planet1));\n     \
    \   planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet1, planet2));\n     \
    \   planets.addAll(Arrays.asList(planet2, planet1));\n        planets.addAll(Arrays.\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphktgehfy.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmphktgehfy.java:56: error: <identifier> expected\n        planets.addAll(Arrays.\n\
    \                              ^\n/tmp/tmphktgehfy.java:57: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmphktgehfy.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmphktgehfy.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmphktgehfy.java:58: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmphktgehfy.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmphktgehfy.java:63: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmphktgehfy.java:63:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmphktgehfy.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmphktgehfy.java:63:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmphktgehfy.java:64: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmphktgehfy.java:64: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmphktgehfy.java:64: error: illegal start of expression\n    asser"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 2) {\n            result.first(planet1);\n           \
    \ result.second(planet2);\n            return result;\n        }\n        double\
    \ distance1 = Math.abs(planet1.length() - planet2.length());\n        double distance2\
    \ = Math.abs(planet2.length() - planet1.length());\n        double distance3 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance4 = Math.abs(planet2.length()\
    \ - planet1.length());\n        double distance5 = Math.abs(planet1.length() -\
    \ planet2.length());\n        double distance6 = Math.abs(planet2.length() - planet1.length());\n\
    \        double distance7 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance8 = Math.abs(planet2.length() - planet1.length());\n  \
    \      double distance9 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance10 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance11 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance12 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance13 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance14 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance15 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance16 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance17 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance18 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance19 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance20 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance21 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance22 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance23 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance24 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance25 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance26 = Math.abs(planet2.length() - planet1.length());\n   \
    \     double distance27 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance28 = Math.abs(planet\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyjjaftqz.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpyjjaftqz.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpyjjaftqz.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpyjjaftqz.java:57:\
    \ error: ')' expected\n        double distance28 = Math.abs(planet\n         \
    \                                  ^\n/tmp/tmpyjjaftqz.java:59: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpyjjaftqz.java:59:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpyjjaftqz.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpyjjaftqz.java:59:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpyjjaftqz.java:59: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpyjjaftqz.java:64: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpyjjaftqz.java:64: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpyjjaftqz.java:64: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpyjjaftqz.java:64:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpyjjaftqz.java:65: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pai"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n  \
    \          Set<String> orbits = new HashSet<String>();\n            orbits.add(\"\
    Mercury\");\n            orbits.add(\"Venus\");\n            orbits.add(\"Earth\"\
    );\n            orbits.add(\"Mars\");\n            orbits.add(\"Jupiter\");\n\
    \            orbits.add(\"Saturn\");\n            orbits.add(\"Uranus\");\n  \
    \          orbits.add(\"Neptune\");\n            Set<String> orbits1 = orbits.stream().filter(p\
    \ -> p.equals(planet1)).collect(Collectors.toSet());\n            Set<String>\
    \ orbits2 = orbits.stream().filter(p -> p.equals(planet2)).collect(Collectors.toSet());\n\
    \            Set<String> orbits3 = orbits1.stream().filter(p -> orbits2.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits4 = orbits2.stream().filter(p -> orbits3.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits5 = orbits3.stream().filter(p -> orbits4.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits6 = orbits4.stream().filter(p -> orbits5.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits7 = orbits5.stream().filter(p -> orbits6.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits8 = orbits6.stream().filter(p -> orbits7.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits9 = orbits7.stream().filter(p -> orbits8.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits10 = orbits8.stream().filter(p -> orbits9.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbits11 = orbits9.stream().filter(p -> orbits10.contains(p)).collect(Collectors.toSet());\n\
    \            Set<String> orbit\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdv82lv_3.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdv82lv_3.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpdv82lv_3.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpdv82lv_3.java:54:\
    \ error: ';' expected\n            Set<String> orbit\n                       \
    \      ^\n/tmp/tmpdv82lv_3.java:56: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpdv82lv_3.java:56: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpdv82lv_3.java:56: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpdv82lv_3.java:56: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpdv82lv_3.java:56: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpdv82lv_3.java:61:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpdv82lv_3.java:61: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpdv82lv_3.java:61: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpdv82lv_3.java:61: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpdv82lv_3.java:62:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(P"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 1) {\n            return result;\n        }\n        double\
    \ distance2 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        if (distance2\
    \ < 1) {\n            return result;\n        }\n        double distance3 = Math.abs(planet1.charAt(1)\
    \ - planet2.charAt(1));\n        if (distance3 < 1) {\n            return result;\n\
    \        }\n        double distance4 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        if (distance4 < 1) {\n            return result;\n        }\n       \
    \ double distance5 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n      \
    \  if (distance5 < 1) {\n            return result;\n        }\n        double\
    \ distance6 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n        if (distance6\
    \ < 1) {\n            return result;\n        }\n        double distance7 = Math.abs(planet1.charAt(5)\
    \ - planet2.charAt(5));\n        if (distance7 < 1) {\n            return result;\n\
    \        }\n        double distance8 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        if (distance8 < 1) {\n            return result;\n        }\n       \
    \ double distance9 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n      \
    \  if (distance9 < 1) {\n            return result;\n        }\n        double\
    \ distance10 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n        if (distance10\
    \ < 1) {\n            return result;\n        }\n        double distance11 = Math.abs(planet1.charAt(9)\
    \ - planet2.charAt(9));\n        if (distance11 < 1) {\n            return result;\n\
    \        }\n        double distance12 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        if (distance12 < 1) {\n            return result;\n        }\n      \
    \  double distance13 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n  \
    \      if (distance13 < 1) {\n            return result;\n        }\n        double\
    \ distance14 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n        if\
    \ (distance14 < 1) {\n            return result;\n        }\n        double distance15\
    \ = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n        if (distance15\
    \ < 1) {\n            return result;\n        }\n        double distance16 = Math.abs(planet1.charAt(14)\
    \ - planet2.charAt(14));\n        if (distance16 < 1) {\n            return result;\n\
    \        }\n        double distance17 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        if (distance17 < 1) {\n            return result;\n        }\n      \
    \  double distance18 = Math.abs(plan\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxm6j30is.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxm6j30is.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpxm6j30is.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpxm6j30is.java:92:\
    \ error: ')' expected\n        double distance18 = Math.abs(plan\n           \
    \                              ^\n/tmp/tmpxm6j30is.java:94: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpxm6j30is.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpxm6j30is.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpxm6j30is.java:94:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpxm6j30is.java:94: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpxm6j30is.java:99: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpxm6j30is.java:99: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpxm6j30is.java:99: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpxm6j30is.java:99:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpxm6j30is.java:100: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<S"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<>();\n  \
    \      double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpo9ct3p9g.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpo9ct3p9g.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<>();\n                     ^\n/tmp/tmpo9ct3p9g.java:117: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpo9ct3p9g.java:117:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpo9ct3p9g.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpo9ct3p9g.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpo9ct3p9g.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpo9ct3p9g.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpo9ct3p9g.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpo9ct3p9g.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpo9ct3p9g.java:119: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpo9ct3p9g.java:119: "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        List<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\"\
    );\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n       \
    \ planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n       \
    \ planets.add(\"Pallas\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Umbriel\");\n        planets.add(\"Niobium\");\n        planets.add(\"Muncie\"\
    );\n        planets.add(\"Copernicium\");\n        planets.add(\"Pisces\");\n\
    \        planets.add(\"Aquarius\");\n        planets.add(\"Scorpio\");\n     \
    \   planets.add(\"Taurus\");\n        planets.add(\"Gemini\");\n        planets.add(\"\
    Cancer\");\n        planets.add(\"Leo\");\n        planets.add(\"Virgo\");\n \
    \       planets.add(\"Libra\");\n        planets.add(\"Scorpion\");\n        planets.add(\"\
    Sagittarius\");\n        planets.add(\"Capricorn\");\n        planets.add(\"Aquarium\"\
    );\n        planets.add(\"Piscis\");\n        planets.add(\"Aquarius\");\n   \
    \     planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"\
    Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"Pisces\"\
    );\n        planets.add(\"Aquarius\");\n        planets.add(\"Pisces\");\n   \
    \     planets.add(\"Aquarius\");\n        planets.add(\"Pisces\");\n        planets.add(\"\
    Aquarius\");\n        planets.add(\"Pisces\");\n        planets.add(\"Aquarius\"\
    );\n        planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n   \
    \     planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"\
    Pisces\");\n        \n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9iheqzo.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpf9iheqzo.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmpf9iheqzo.java:80:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpf9iheqzo.java:80: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpf9iheqzo.java:80: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpf9iheqzo.java:80: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpf9iheqzo.java:81:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpf9iheqzo.java:81: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpf9iheqzo.java:81: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpf9iheqzo.java:81: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpf9iheqzo.java:82:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpf9iheqzo.java:82: error: i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<>();\n  \
    \      double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb831h7x3.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpb831h7x3.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<>();\n                     ^\n/tmp/tmpb831h7x3.java:131: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpb831h7x3.java:131:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpb831h7x3.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpb831h7x3.java:131:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpb831h7x3.java:132: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpb831h7x3.java:132: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpb831h7x3.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpb831h7x3.java:132:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpb831h7x3.java:133: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpb831h7x3.java:133: "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Umbriel\");\n        planets.add(\"Iris\");\n        planets.add(\"Gemini\");\n\
    \        planets.add(\"Cassiopeia\");\n        planets.add(\"Tycho\");\n     \
    \   planets.add(\"Aquarius\");\n        planets.add(\"Sagittarius\");\n      \
    \  planets.add(\"Capricornus\");\n        planets.add(\"Aquarius\");\n       \
    \ planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"\
    Aquarius\");\n        planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\"\
    );\n        planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\");\n \
    \       planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\");\n     \
    \   planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\");\n        planets.add(\"\
    Aquarius\");\n        planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\"\
    );\n        planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\");\n \
    \       planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\");\n     \
    \   planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\");\n        planets.add(\"\
    Aquarius\");\n        planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\"\
    );\n        planets.add(\"Aquarius\");\n        planets.add(\"Aquarius\");\n \
    \       planets.add(\"Aquarius\");\n        planets.add(\"Aqu\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp59bjwfcd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp59bjwfcd.java:71: error: unclosed string literal\n      \
    \  planets.add(\"Aqu\n                    ^\n/tmp/tmp59bjwfcd.java:71: error:\
    \ ';' expected\n        planets.add(\"Aqu\n                        ^\n/tmp/tmp59bjwfcd.java:73:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp59bjwfcd.java:73: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp59bjwfcd.java:73: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp59bjwfcd.java:73: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp59bjwfcd.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp59bjwfcd.java:78: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp59bjwfcd.java:78:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp59bjwfcd.java:78: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp59bjwfcd.java:78:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp59bjwfcd.java:79: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp59bjwfcd.java:79: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp3ha2rw82.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3ha2rw82.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp3ha2rw82.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp3ha2rw82.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmp3ha2rw82.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp3ha2rw82.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3ha2rw82.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3ha2rw82.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3ha2rw82.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp3ha2rw82.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp3ha2rw82.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp3ha2rw82.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n       \
    \ planets.add(\"Pallas\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Umbriel\");\n        planets.add(\"Cassiopeia\");\n        planets.add(\"Taurus\"\
    );\n        planets.add(\"Gemini\");\n        planets.add(\"Cancer\");\n     \
    \   planets.add(\"Leo\");\n        planets.add(\"Virgo\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Scorpio\");\n        planets.add(\"Sagittarius\"\
    );\n        planets.add(\"Capricornus\");\n        planets.add(\"Aquarius\");\n\
    \        planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n      \
    \  planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"\
    Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"Pisces\"\
    );\n        planets.add(\"Aquarius\");\n        planets.add(\"Pisces\");\n   \
    \     planets.add(\"Aquarius\");\n        planets.add(\"Pisces\");\n        planets.add(\"\
    Aquarius\");\n        planets.add(\"Pisces\");\n        planets.add(\"Aquarius\"\
    );\n        planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n   \
    \     planets.add(\"Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"\
    Pisces\");\n        planets.add(\"Aquarius\");\n        planets.add(\"Pisces\"\
    );\n        planets.add(\"Aquarius\");\n        planets.add(\"Pisces\");\n   \
    \     planets.add(\"Aqu\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp0_65b7o.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpp0_65b7o.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpp0_65b7o.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpp0_65b7o.java:72:\
    \ error: unclosed string literal\n        planets.add(\"Aqu\n                \
    \    ^\n/tmp/tmpp0_65b7o.java:72: error: ';' expected\n        planets.add(\"\
    Aqu\n                        ^\n/tmp/tmpp0_65b7o.java:74: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpp0_65b7o.java:74:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpp0_65b7o.java:74: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpp0_65b7o.java:74:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpp0_65b7o.java:74: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpp0_65b7o.java:79: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpp0_65b7o.java:79: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpp0_65b7o.java:79: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpp0_65b7o.java:79:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpp0_65b7o.java:80: "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance1 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance2 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance3 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance4 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance5 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance6 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance7 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance8 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance9 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance10 = Math.sqrt(Math.pow(planet2.length(), 2) +\
    \ Math.pow(planet1.length(), 2));\n        double distance11 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance12 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance13 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance14 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance15 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance16 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance17 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance18 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance19 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance20 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_c7sub5p.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp_c7sub5p.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp_c7sub5p.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp_c7sub5p.java:45:\
    \ error: ')' expected\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n                                                       \
    \                            ^\n/tmp/tmp_c7sub5p.java:46: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmp_c7sub5p.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp_c7sub5p.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp_c7sub5p.java:47: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp_c7sub5p.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp_c7sub5p.java:52: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp_c7sub5p.java:52:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp_c7sub5p.java:52: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp_c7sub5p.java:52:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp_c7sub5p.java:53: error: ')' expected\n    assert"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp0449trll.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0449trll.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp0449trll.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp0449trll.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmp0449trll.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp0449trll.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0449trll.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0449trll.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0449trll.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp0449trll.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp0449trll.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp0449trll.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = 0;\n        double distance2 = 0;\n        double distance3\
    \ = 0;\n        double distance4 = 0;\n        double distance5 = 0;\n       \
    \ double distance6 = 0;\n        double distance7 = 0;\n        double distance8\
    \ = 0;\n        double distance9 = 0;\n        double distance10 = 0;\n      \
    \  double distance11 = 0;\n        double distance12 = 0;\n        double distance13\
    \ = 0;\n        double distance14 = 0;\n        double distance15 = 0;\n     \
    \   double distance16 = 0;\n        double distance17 = 0;\n        double distance18\
    \ = 0;\n        double distance19 = 0;\n        double distance20 = 0;\n     \
    \   double distance21 = 0;\n        double distance22 = 0;\n        double distance23\
    \ = 0;\n        double distance24 = 0;\n        double distance25 = 0;\n     \
    \   double distance26 = 0;\n        double distance27 = 0;\n        double distance28\
    \ = 0;\n        double distance29 = 0;\n        double distance30 = 0;\n     \
    \   double distance31 = 0;\n        double distance32 = 0;\n        double distance33\
    \ = 0;\n        double distance34 = 0;\n        double distance35 = 0;\n     \
    \   double distance36 = 0;\n        double distance37 = 0;\n        double distance38\
    \ = 0;\n        double distance39 = 0;\n        double distance40 = 0;\n     \
    \   double distance41 = 0;\n        double distance42 = 0;\n        double distance43\
    \ = 0;\n        double distance44 = 0;\n        double distance45 = 0;\n     \
    \   double distance46 = 0;\n        double distance47 = 0;\n        double distance48\
    \ = 0;\n        double distance49 = 0;\n        double distance50 = 0;\n     \
    \   double distance51 = 0;\n        double distance52 = 0;\n        double distance53\
    \ = 0;\n        double distance54 = 0;\n        double distance55 = 0;\n     \
    \   double distance56 = 0;\n        double distance57 = 0;\n        double distance58\
    \ = 0;\n        double distance59 = 0;\n        double distance60 = 0;\n     \
    \   double distance61 = 0;\n        double distance62 = 0;\n        double distance63\
    \ = 0;\n        double distance64 = 0;\n        double distance65 = 0;\n     \
    \   double distance66 = 0;\n        double distance67 = 0;\n        double distance68\
    \ = 0;\n        double distance69 = 0;\n        double distance70 = 0;\n     \
    \   double distance71 = 0;\n        double distance72 = 0;\n        double distance73\
    \ = 0;\n        double distance74 = 0;\n        double distance75 = 0;\n     \
    \   double distance76 = 0;\n        double distance77 = 0;\n        double distance78\
    \ = 0;\n        double distance79 = 0;\n        double distance80 = 0;\n     \
    \   double distance81 = 0;\n        double distance82 = 0;\n        double distance83\
    \ = 0;\n        double distance84 = 0;\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvz2byh8v.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpvz2byh8v.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpvz2byh8v.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpvz2byh8v.java:115:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpvz2byh8v.java:115: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpvz2byh8v.java:115: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpvz2byh8v.java:115: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpvz2byh8v.java:116:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpvz2byh8v.java:116: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpvz2byh8v.java:116: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpvz2byh8v.java:116: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpvz2byh8v.java:117:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n\
    \        double distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n\
    \        double distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        double distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance26 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance27\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdcisu6re.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdcisu6re.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpdcisu6re.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpdcisu6re.java:51:\
    \ error: ';' expected\n        double distance27\n                         ^\n\
    /tmp/tmpdcisu6re.java:58: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpdcisu6re.java:58: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdcisu6re.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdcisu6re.java:58:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdcisu6re.java:59: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpdcisu6re.java:59: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpdcisu6re.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpdcisu6re.java:59:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n\
    \        double distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n\
    \        double distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        double distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance26 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance27\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8gq9r0eg.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp8gq9r0eg.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp8gq9r0eg.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp8gq9r0eg.java:51:\
    \ error: ';' expected\n        double distance27\n                         ^\n\
    /tmp/tmp8gq9r0eg.java:58: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp8gq9r0eg.java:58: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp8gq9r0eg.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp8gq9r0eg.java:58:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp8gq9r0eg.java:59: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp8gq9r0eg.java:59: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp8gq9r0eg.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp8gq9r0eg.java:59:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9fzej3u.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpf9fzej3u.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpf9fzej3u.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpf9fzej3u.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpf9fzej3u.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpf9fzej3u.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpf9fzej3u.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpf9fzej3u.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpf9fzej3u.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpf9fzej3u.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpf9fzej3u.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpf9fzej3u.java:133:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Phobos\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Hermes\");\n        planets.add(\"Nobelia\");\n        planets.add(\"Deimos\"\
    );\n        planets.add(\"Copernicus\");\n        planets.add(\"Aldea\");\n  \
    \      planets.add(\"Callisto\");\n        planets.add(\"Aquarius\");\n      \
    \  planets.add(\"Pisces\");\n        planets.add(\"Aries\");\n        planets.add(\"\
    Taurus\");\n        planets.add(\"Gemini\");\n        planets.add(\"Cancer\");\n\
    \        planets.add(\"Scorpio\");\n        planets.add(\"Taurus\");\n       \
    \ planets.add(\"Virgo\");\n        planets.add(\"Libra\");\n        planets.add(\"\
    Sagittarius\");\n        planets.add(\"Capricornus\");\n        planets.add(\"\
    Aquarius\");\n        planets.add(\"Pisces\");\n        planets.add(\"Aries\"\
    );\n        planets.add(\"Taurus\");\n        planets.add(\"Gemini\");\n     \
    \   planets.add(\"Cancer\");\n        planets.add(\"Scorpio\");\n        planets.add(\"\
    Taurus\");\n        planets.add(\"Virgo\");\n        planets.add(\"Libra\");\n\
    \        planets.add(\"Sagittarius\");\n        planets.add(\"Capricornus\");\n\
    \        planets.add(\"Aquarius\");\n        planets.add(\"Pisces\");\n      \
    \  planets.add(\"Aries\");\n        planets.add(\"Taurus\");\n        planets.add(\"\
    Gemini\");\n        planets.add(\"Cancer\");\n        planets.add(\"Scorpio\"\
    );\n        planets.add(\"Taurus\");\n        planets.add(\"\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf_d4k04v.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpf_d4k04v.java:74: error: unclosed string literal\n      \
    \  planets.add(\"\n                    ^\n/tmp/tmpf_d4k04v.java:74: error: ';'\
    \ expected\n        planets.add(\"\n                     ^\n/tmp/tmpf_d4k04v.java:76:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpf_d4k04v.java:76: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpf_d4k04v.java:76: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpf_d4k04v.java:76: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpf_d4k04v.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpf_d4k04v.java:81: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpf_d4k04v.java:81:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpf_d4k04v.java:81: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpf_d4k04v.java:81:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpf_d4k04v.java:82: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpf_d4k04v.java:82: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpp5loko2k.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpp5loko2k.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpp5loko2k.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpp5loko2k.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpp5loko2k.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpp5loko2k.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpp5loko2k.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpp5loko2k.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpp5loko2k.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpp5loko2k.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpp5loko2k.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpp5loko2k.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppvh35nfn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmppvh35nfn.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmppvh35nfn.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmppvh35nfn.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmppvh35nfn.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmppvh35nfn.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmppvh35nfn.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmppvh35nfn.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmppvh35nfn.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmppvh35nfn.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmppvh35nfn.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmppvh35nfn.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpczvs7b0o.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpczvs7b0o.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpczvs7b0o.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpczvs7b0o.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpczvs7b0o.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpczvs7b0o.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpczvs7b0o.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpczvs7b0o.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpczvs7b0o.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpczvs7b0o.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpczvs7b0o.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpczvs7b0o.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpczvs7b0o.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpczvs7b0o.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 2) {\n            result.first(planet1);\n           \
    \ result.second(planet2);\n            return result;\n        }\n        double\
    \ angle = Math.acos(planet1.length() / distance);\n        double angle2 = Math.acos(planet2.length()\
    \ / distance);\n        double angleDiff = angle - angle2;\n        double angleDiff2\
    \ = angle2 - angle;\n        if (angleDiff > Math.PI) {\n            angleDiff\
    \ = 2 * Math.PI - angleDiff;\n        }\n        if (angleDiff2 < Math.PI) {\n\
    \            angleDiff2 = 2 * Math.PI - angleDiff2;\n        }\n        double\
    \ angleDiff3 = angleDiff - angleDiff2;\n        double angleDiff4 = angleDiff2\
    \ - angleDiff;\n        double angleDiff5 = angleDiff3 - angleDiff4;\n       \
    \ double angleDiff6 = angleDiff4 - angleDiff3;\n        double angleDiff7 = angleDiff5\
    \ - angleDiff6;\n        double angleDiff8 = angleDiff6 - angleDiff5;\n      \
    \  double angleDiff9 = angleDiff7 - angleDiff8;\n        double angleDiff10 =\
    \ angleDiff8 - angleDiff7;\n        double angleDiff11 = angleDiff9 - angleDiff10;\n\
    \        double angleDiff12 = angleDiff10 - angleDiff9;\n        double angleDiff13\
    \ = angleDiff11 - angleDiff12;\n        double angleDiff14 = angleDiff12 - angleDiff11;\n\
    \        double angleDiff15 = angleDiff13 - angleDiff14;\n        double angleDiff16\
    \ = angleDiff14 - angleDiff13;\n        double angleDiff17 = angleDiff15 - angleDiff16;\n\
    \        double angleDiff18 = angleDiff16 - angleDiff15;\n        double angleDiff19\
    \ = angleDiff17 - angleDiff18;\n        double angleDiff20 = angleDiff18 - angleDiff17;\n\
    \        double angleDiff21 = angleDiff19 - angleDiff20;\n        double angleDiff22\
    \ = angleDiff20 - angleDiff19;\n        double angleDiff23 = angleDiff21 - angleDiff22;\n\
    \        double angleDiff24 = angleDiff22 - angleDiff21;\n        double angleDiff25\
    \ = angleDiff23 - angleDiff24;\n        double angleDiff26 = angleDiff24 - angleDiff23;\n\
    \        double angleDiff27 = angleDiff25 - angleDiff26;\n        double angleDiff28\
    \ = angleDiff26 - angleDiff25;\n        double angleDiff\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8zw1lfr.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpx8zw1lfr.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpx8zw1lfr.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpx8zw1lfr.java:66:\
    \ error: ';' expected\n        double angleDiff\n                        ^\n/tmp/tmpx8zw1lfr.java:73:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpx8zw1lfr.java:73: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpx8zw1lfr.java:73: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpx8zw1lfr.java:73: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpx8zw1lfr.java:74:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpx8zw1lfr.java:74: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpx8zw1lfr.java:74: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpx8zw1lfr.java:74: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \               "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpey3i0v00.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpey3i0v00.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpey3i0v00.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpey3i0v00.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpey3i0v00.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpey3i0v00.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpey3i0v00.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpey3i0v00.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpey3i0v00.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpey3i0v00.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpey3i0v00.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpey3i0v00.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpey3i0v00.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpey3i0v00.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n \
    \           pair = Pair.of(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Mercury\")) {\n            pair = Pair.of(\"Venus\");\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Earth\")) {\n            pair = Pair.of(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \      } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) {\n\
    \            pair = Pair.of(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"Mercury\") &&\
    \ planet2.equals(\"Mars\")) {\n            pair = Pair.of(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        } else\
    \ if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n            pair\
    \ = Pair.of(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Jupiter\")) {\n            pair = Pair.of(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Jupiter\")) {\n            pair = Pair.of(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \      } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n\
    \            pair = Pair.of(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Saturn\")) {\n            pair = Pair.of(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"\
    Mercury\") && planet\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2n2jv8it.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp2n2jv8it.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp2n2jv8it.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp2n2jv8it.java:44:\
    \ error: ')' expected\n        } else if (planet1.equals(\"Mercury\") && planet\n\
    \                                                      ^\n/tmp/tmp2n2jv8it.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp2n2jv8it.java:51: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp2n2jv8it.java:51:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp2n2jv8it.java:51: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp2n2jv8it.java:51:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp2n2jv8it.java:52: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp2n2jv8it.java:52: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp2n2jv8it.java:52: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp2n2jv8it.java:52"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpndfkrkfu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpndfkrkfu.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpndfkrkfu.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpndfkrkfu.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpndfkrkfu.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpndfkrkfu.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpndfkrkfu.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpndfkrkfu.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpndfkrkfu.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpndfkrkfu.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpndfkrkfu.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpndfkrkfu.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph4q3yets.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmph4q3yets.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmph4q3yets.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmph4q3yets.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmph4q3yets.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmph4q3yets.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmph4q3yets.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmph4q3yets.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmph4q3yets.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmph4q3yets.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmph4q3yets.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmph4q3yets.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance < 1) {\n            return pair;\n        }\n        double\
    \ distance1 = Math.abs(planet1.length() - planet2.length());\n        double distance2\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance3 =\
    \ Math.abs(planet1.length() - planet2.length());\n        double distance4 = Math.abs(planet1.length()\
    \ - planet2.length());\n        double distance5 = Math.abs(planet1.length() -\
    \ planet2.length());\n        double distance6 = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance7 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance8 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance9 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance10 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance11 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance12 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance13 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance14 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance15 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance16 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance17 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance18 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance19 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance20 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance21 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance22 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance23 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance24 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance25 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance26 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance27 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance28 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance29 = Math.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxzw8ls8c.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxzw8ls8c.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpxzw8ls8c.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpxzw8ls8c.java:56:\
    \ error: <identifier> expected\n        double distance29 = Math.\n          \
    \                       ^\n/tmp/tmpxzw8ls8c.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpxzw8ls8c.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpxzw8ls8c.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpxzw8ls8c.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpxzw8ls8c.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpxzw8ls8c.java:63: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpxzw8ls8c.java:63: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpxzw8ls8c.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpxzw8ls8c.java:63:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpxzw8ls8c.java:64: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<>();\n  \
    \      if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n   \
    \         pair = Pair.of(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Earth\")) {\n            pair = Pair.of(\"Mercury\", \"Uranus\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Neptune\");\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Jupiter\")) {\n            pair = Pair.of(\"Mercury\", \"\
    Uranus\", \"Earth\", \"Neptune\", \"Saturn\", \"Uranus\");\n        } else if\
    \ (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            pair\
    \ = Pair.of(\"Mercury\", \"Uranus\", \"Earth\", \"Mars\", \"Neptune\", \"Uranus\"\
    );\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) {\n            pair = Pair.of(\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Neptune\");\n        } else if (planet1.equals(\"Uranus\") &&\
    \ planet2.equals(\"Neptune\")) {\n            pair = Pair.of(\"Mercury\", \"Venus\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Earth\");\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Earth\")) {\n            pair = Pair.of(\"Mercury\"\
    , \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n        } else if\
    \ (planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n            pair\
    \ = Pair.of(\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"\
    Jupiter\")) {\n            pair = Pair.of(\"Mercury\", \"Venus\", \"Earth\", \"\
    Neptune\", \"Saturn\", \"Uranus\");\n        } else if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Saturn\")) {\n            pair = Pair.of(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Neptune\", \"Uranus\");\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjk90orae.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpjk90orae.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<>();\n                     ^\n/tmp/tmpjk90orae.java:44: error:\
    \ unclosed string literal\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"\
    Uranus\n                                                              ^\n/tmp/tmpjk90orae.java:44:\
    \ error: ')' expected\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"\
    Uranus\n                                                                     ^\n\
    /tmp/tmpjk90orae.java:46: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpjk90orae.java:46: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpjk90orae.java:46:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpjk90orae.java:46: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpjk90orae.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpjk90orae.java:51: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpjk90orae.java:51:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpjk90orae.java:51: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpjk90orae.java:51:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpjk90orae.ja"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(planet1);\n        planets.add(planet2);\n  \
    \      Collections.sort(planets);\n        Collections.sort(planets);\n      \
    \  Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n        Collections.sort(planets);\n\
    \        Collections.sort(planets);\n        Collections.sort(planets);\n    \
    \    Collections.sort(planets);\n        Collections.sort(planets);\n    }\n \
    \   public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"),\
    \ (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxr48ljnk.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxr48ljnk.java:99: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpxr48ljnk.java:99: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpxr48ljnk.java:99: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpxr48ljnk.java:99:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpxr48ljnk.java:100: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpxr48ljnk.java:100: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpxr48ljnk.java:100: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpxr48ljnk.java:100:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpxr48ljnk.java:101: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpxr48ljnk.java:101:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n           "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpti7l8rfe.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpti7l8rfe.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpti7l8rfe.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpti7l8rfe.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpti7l8rfe.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpti7l8rfe.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpti7l8rfe.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpti7l8rfe.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpti7l8rfe.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpti7l8rfe.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpti7l8rfe.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpti7l8rfe.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpti7l8rfe.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpti7l8rfe.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6rqi0aap.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6rqi0aap.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp6rqi0aap.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp6rqi0aap.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp6rqi0aap.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp6rqi0aap.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp6rqi0aap.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp6rqi0aap.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp6rqi0aap.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp6rqi0aap.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp6rqi0aap.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp6rqi0aap.java:133:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvdrikxua.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpvdrikxua.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpvdrikxua.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpvdrikxua.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpvdrikxua.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpvdrikxua.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpvdrikxua.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpvdrikxua.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpvdrikxua.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpvdrikxua.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpvdrikxua.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpvdrikxua.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        planets.stream().filter(planet\
    \ -> planet.equals(planet1) || planet.equals(planet2)).forEach(planet -> {\n \
    \           try {\n                double distance = planets.stream().filter(planet1\
    \ -> planet1.equals(planet)).map(planet1 -> {\n                    double distance1\
    \ = planets.stream().filter(planet2 -> planet2.equals(planet)).map(planet2 ->\
    \ {\n                        double distance2 = Math.sqrt(Math.pow(planet1.getX()\
    \ - planet2.getX(), 2) + Math.pow(planet1.getY() - planet2.getY(), 2));\n    \
    \                    return distance2;\n                    }).reduce(Math::min).orElse(Double.MAX_VALUE);\n\
    \                    return distance1;\n                }).reduce(Math::min).orElse(Double.MAX_VALUE);\n\
    \                result.first(planet);\n                result.second(distance);\n\
    \            } catch (Exception e) {\n                e.printStackTrace();\n \
    \           }\n        });\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxp0p659n.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxp0p659n.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpxp0p659n.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpxp0p659n.java:58:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpxp0p659n.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpxp0p659n.java:58: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpxp0p659n.java:58: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpxp0p659n.java:59:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpxp0p659n.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpxp0p659n.java:59: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpxp0p659n.java:59: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpxp0p659n.java:60:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance2 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance3 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance4 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance5 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance6 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance7 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance8 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance9 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance10 = Math.sqrt(Math.pow(planet1.length(), 2) +\
    \ Math.pow(planet2.length(), 2));\n        double distance11 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance12 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance13 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance14 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance15 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance16 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance17 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance18 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance19 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance20 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance22 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfuemu9a4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfuemu9a4.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpfuemu9a4.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpfuemu9a4.java:45:\
    \ error: ')' expected\n        double distance22 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n                                                       \
    \                            ^\n/tmp/tmpfuemu9a4.java:46: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpfuemu9a4.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpfuemu9a4.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpfuemu9a4.java:47: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpfuemu9a4.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpfuemu9a4.java:52: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpfuemu9a4.java:52:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfuemu9a4.java:52: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfuemu9a4.java:52:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfuemu9a4.java:53: error: ')' expected\n    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9fcfayu.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpb9fcfayu.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpb9fcfayu.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpb9fcfayu.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpb9fcfayu.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpb9fcfayu.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpb9fcfayu.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpb9fcfayu.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpb9fcfayu.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpb9fcfayu.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpb9fcfayu.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpb9fcfayu.java:133:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90a_dalc.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp90a_dalc.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp90a_dalc.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp90a_dalc.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmp90a_dalc.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp90a_dalc.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp90a_dalc.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp90a_dalc.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp90a_dalc.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp90a_dalc.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmp90a_dalc.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp90a_dalc.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp90a_dalc.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp90a_dalc.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double angle = Math.acos(planet1.length() / distance);\n     \
    \   double angle2 = Math.acos(planet2.length() / distance);\n        double angle3\
    \ = Math.acos(planet1.length() / distance);\n        double angle4 = Math.acos(planet2.length()\
    \ / distance);\n        double angle5 = Math.acos(planet1.length() / distance);\n\
    \        double angle6 = Math.acos(planet2.length() / distance);\n        double\
    \ angle7 = Math.acos(planet1.length() / distance);\n        double angle8 = Math.acos(planet2.length()\
    \ / distance);\n        double angle9 = Math.acos(planet1.length() / distance);\n\
    \        double angle10 = Math.acos(planet2.length() / distance);\n        double\
    \ angle11 = Math.acos(planet1.length() / distance);\n        double angle12 =\
    \ Math.acos(planet2.length() / distance);\n        double angle13 = Math.acos(planet1.length()\
    \ / distance);\n        double angle14 = Math.acos(planet2.length() / distance);\n\
    \        double angle15 = Math.acos(planet1.length() / distance);\n        double\
    \ angle16 = Math.acos(planet2.length() / distance);\n        double angle17 =\
    \ Math.acos(planet1.length() / distance);\n        double angle18 = Math.acos(planet2.length()\
    \ / distance);\n        double angle19 = Math.acos(planet1.length() / distance);\n\
    \        double angle20 = Math.acos(planet2.length() / distance);\n        double\
    \ angle21 = Math.acos(planet1.length() / distance);\n        double angle22 =\
    \ Math.acos(planet2.length() / distance);\n        double angle23 = Math.acos(planet1.length()\
    \ / distance);\n        double angle24 = Math.acos(planet2.length() / distance);\n\
    \        double angle25 = Math.acos(planet1.length() / distance);\n        double\
    \ angle26 = Math.acos(planet2.length() / distance);\n        double angle27 =\
    \ Math.acos(planet1.length() / distance);\n        double angle28 = Math.acos(planet2.length()\
    \ / distance);\n        double angle29 = Math.acos(planet1.length() / distance);\n\
    \        double angle30 = Math.acos(planet2.length() / distance);\n        double\
    \ angle31 = Math.acos(planet1.length() / distance);\n        double angle32 =\
    \ Math.acos(planet2.length() / \n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpye905u0q.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpye905u0q.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpye905u0q.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpye905u0q.java:57:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmpye905u0q.java:57:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpye905u0q.java:58: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpye905u0q.java:58: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpye905u0q.java:58: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpye905u0q.java:58: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpye905u0q.java:63:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpye905u0q.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpye905u0q.java:63: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpye905u0q.java:63: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpye905u0q.java:64:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpye905u0q"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpydipix6r.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpydipix6r.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpydipix6r.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpydipix6r.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpydipix6r.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpydipix6r.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpydipix6r.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpydipix6r.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpydipix6r.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpydipix6r.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpydipix6r.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpydipix6r.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpu1gf27ij.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpu1gf27ij.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpu1gf27ij.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpu1gf27ij.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpu1gf27ij.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpu1gf27ij.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpu1gf27ij.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpu1gf27ij.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpu1gf27ij.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpu1gf27ij.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpu1gf27ij.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpu1gf27ij.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        planets.stream().filter(planet1\
    \ -> planets.contains(planet2)).forEach(planet1 -> {\n            planets.stream().filter(planet2\
    \ -> planets.contains(planet1)).forEach(planet2 -> {\n                double distance\
    \ = Math.abs(planet1.getDistance(planet2));\n                result.first(planet1).second(planet2).first(planet1).second(planet2).second(distance);\n\
    \            });\n        });\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9la78dk3.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9la78dk3.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp9la78dk3.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp9la78dk3.java:49:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp9la78dk3.java:49: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp9la78dk3.java:49: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp9la78dk3.java:49: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp9la78dk3.java:50:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp9la78dk3.java:50: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp9la78dk3.java:50: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp9la78dk3.java:50: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp9la78dk3.java:51:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp0vxu8ju8.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0vxu8ju8.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp0vxu8ju8.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp0vxu8ju8.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmp0vxu8ju8.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp0vxu8ju8.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0vxu8ju8.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0vxu8ju8.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0vxu8ju8.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp0vxu8ju8.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp0vxu8ju8.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp0vxu8ju8.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<>();\n  \
    \      double distance = Math.abs(planet1.length() - planet2.length());\n    \
    \    if (distance > 1) {\n            pair = Pair.of(planet1, planet2);\n    \
    \        return pair;\n        }\n        double distance2 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance2 > 1) {\n            pair = Pair.of(planet2,\
    \ planet1);\n            return pair;\n        }\n        double distance3 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance3 > 1) {\n            pair = Pair.of(planet1,\
    \ planet2);\n            return pair;\n        }\n        double distance4 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance4 > 1) {\n            pair = Pair.of(planet2,\
    \ planet1);\n            return pair;\n        }\n        double distance5 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance5 > 1) {\n            pair = Pair.of(planet1,\
    \ planet2);\n            return pair;\n        }\n        double distance6 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance6 > 1) {\n            pair = Pair.of(planet2,\
    \ planet1);\n            return pair;\n        }\n        double distance7 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance7 > 1) {\n            pair = Pair.of(planet1,\
    \ planet2);\n            return pair;\n        }\n        double distance8 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance8 > 1) {\n            pair = Pair.of(planet2,\
    \ planet1);\n            return pair;\n        }\n        return Pair.of(planet1,\
    \ planet2);\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpr0qlk7q6.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpr0qlk7q6.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<>();\n                     ^\n/tmp/tmpr0qlk7q6.java:72: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpr0qlk7q6.java:72:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpr0qlk7q6.java:72: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpr0qlk7q6.java:72:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpr0qlk7q6.java:73: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpr0qlk7q6.java:73: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpr0qlk7q6.java:73: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpr0qlk7q6.java:73:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpr0qlk7q6.java:74: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpr0qlk7q6.java:74:\
    \ error: ill"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Pair<String, > result2 = new Pair<String, >();\n        Pair<String,\
    \ > result3 = new Pair<String, >();\n        Pair<String, > result4 = new Pair<String,\
    \ >();\n        Pair<String, > result5 = new Pair<String, >();\n        Pair<String,\
    \ > result6 = new Pair<String, >();\n        Pair<String, > result7 = new Pair<String,\
    \ >();\n        Pair<String, > result8 = new Pair<String, >();\n        Pair<String,\
    \ > result9 = new Pair<String, >();\n        Pair<String, > result10 = new Pair<String,\
    \ >();\n        Pair<String, > result11 = new Pair<String, >();\n        Pair<String,\
    \ > result12 = new Pair<String, >();\n        Pair<String, > result13 = new Pair<String,\
    \ >();\n        Pair<String, > result14 = new Pair<String, >();\n        Pair<String,\
    \ > result15 = new Pair<String, >();\n        Pair<String, > result16 = new Pair<String,\
    \ >();\n        Pair<String, > result17 = new Pair<String, >();\n        Pair<String,\
    \ > result18 = new Pair<String, >();\n        Pair<String, > result19 = new Pair<String,\
    \ >();\n        Pair<String, > result20 = new Pair<String, >();\n        Pair<String,\
    \ > result21 = new Pair<String, >();\n        Pair<String, > result22 = new Pair<String,\
    \ >();\n        Pair<String, > result23 = new Pair<String, >();\n        Pair<String,\
    \ > result24 = new Pair<String, >();\n        Pair<String, > result25 = new Pair<String,\
    \ >();\n        Pair<String, > result26 = new Pair<String, >();\n        Pair<String,\
    \ > result27 = new Pair<String, >();\n        Pair<String, > result28 = new Pair<String,\
    \ >();\n        Pair<String, > result29 = new Pair<String, >();\n        Pair<String,\
    \ > result30 = new Pair<String, >();\n        Pair<String, > result31 = new Pair<String,\
    \ >();\n        Pair<String, > result32 = new Pair<String, >();\n        Pair<String,\
    \ > result33 = new Pair<String, >();\n        Pair<String, > result34 = new Pair<String,\
    \ >();\n        Pair<String, > result35 = new Pair<String, >();\n        Pair<String,\
    \ > result36 = new Pair<String, >();\n        Pair<String, > result37 = new Pair<String,\
    \ >();\n        Pair<String, > result38 = new Pair<String, >();\n        Pair<String,\
    \ > result39 = new Pair<String, >();\n        Pair<String, \n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpptwjipxn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpptwjipxn.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpptwjipxn.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpptwjipxn.java:24:\
    \ error: illegal start of type\n        Pair<String, > result2 = new Pair<String,\
    \ >();\n                     ^\n/tmp/tmpptwjipxn.java:24: error: illegal start\
    \ of type\n        Pair<String, > result2 = new Pair<String, >();\n          \
    \                                        ^\n/tmp/tmpptwjipxn.java:25: error: illegal\
    \ start of type\n        Pair<String, > result3 = new Pair<String, >();\n    \
    \                 ^\n/tmp/tmpptwjipxn.java:25: error: illegal start of type\n\
    \        Pair<String, > result3 = new Pair<String, >();\n                    \
    \                              ^\n/tmp/tmpptwjipxn.java:26: error: illegal start\
    \ of type\n        Pair<String, > result4 = new Pair<String, >();\n          \
    \           ^\n/tmp/tmpptwjipxn.java:26: error: illegal start of type\n      \
    \  Pair<String, > result4 = new Pair<String, >();\n                          \
    \                        ^\n/tmp/tmpptwjipxn.java:27: error: illegal start of\
    \ type\n        Pair<String, > result5 = new Pair<String, >();\n             \
    \        ^\n/tmp/tmpptwjipxn.java:27: error: illegal start of type\n        Pair<String,\
    \ > result5 = new Pair<String, >();\n                                        \
    \          ^\n/tmp/tmpptwjipxn.java:28: error: illegal start of type\n       \
    \ Pair<String, > result6 = new Pair<String, >();\n                     ^\n/tmp/tmpptwjipxn.java:28:\
    \ error: illegal start of type\n        Pair<String, > result6 = new Pair<String,\
    \ >();\n                                                  ^\n/tmp/tmpptwjipxn.java:29:\
    \ error: illegal start of type\n        Pair<String, > result7 = new Pair<String,\
    \ >();\n             "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        Set<String> planets = new HashSet<>();\n        planets.add(\"Mercury\"\
    );\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n       \
    \ planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        planets.stream().filter(planet\
    \ -> planet.equals(planet1) || planet.equals(planet2)).forEach(planet -> {\n \
    \           double distance = distanceBetweenPlanets(planet1, planet);\n     \
    \       double distance2 = distanceBetweenPlanets(planet, planet2);\n        \
    \    double distance3 = distanceBetweenPlanets(planet, planet1);\n           \
    \ double distance4 = distanceBetweenPlanets(planet2, planet1);\n            double\
    \ distance5 = distanceBetweenPlanets(planet2, planet);\n            double distance6\
    \ = distanceBetweenPlanets(planet1, planet2);\n            double distance7 =\
    \ distanceBetweenPlanets(planet2, planet1);\n            double distance8 = distanceBetweenPlanets(planet1,\
    \ planet2);\n            double distance9 = distanceBetweenPlanets(planet, planet2);\n\
    \            double distance10 = distanceBetweenPlanets(planet2, planet);\n  \
    \          double distance11 = distanceBetweenPlanets(planet1, planet);\n    \
    \        double distance12 = distanceBetweenPlanets(planet2, planet1);\n     \
    \       double distance13 = distanceBetweenPlanets(planet, planet2);\n       \
    \     double distance14 = distanceBetweenPlanets(planet2, planet);\n         \
    \   double distance15 = distanceBetweenPlanets(planet1, planet2);\n          \
    \  double distance16 = distanceBetweenPlanets(planet2, planet1);\n           \
    \ double distance17 = distanceBetweenPlanets(planet, planet2);\n            double\
    \ distance18 = distanceBetweenPlanets(planet2, planet);\n            double distance19\
    \ = distanceBetweenPlanets(planet1, planet2);\n            double distance20 =\
    \ distanceBetweenPlanets(planet2, planet);\n            double distance21 = distanceBetweenPlanets(planet1,\
    \ planet);\n            double distance22 = distanceBetweenPlanets(planet2, planet1);\n\
    \            double distance23 = distanceBetween\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb14qs1qx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpb14qs1qx.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmpb14qs1qx.java:58:\
    \ error: ';' expected\n            double distance23 = distanceBetween\n     \
    \                                          ^\n/tmp/tmpb14qs1qx.java:59: error:\
    \ ')' expected\n    }\n     ^\n/tmp/tmpb14qs1qx.java:60: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n           ^\n\
    /tmp/tmpb14qs1qx.java:60: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpb14qs1qx.java:60: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpb14qs1qx.java:60: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpb14qs1qx.java:65:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpb14qs1qx.java:65: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpb14qs1qx.java:65: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpb14qs1qx.java:65: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpb14qs1qx.java:66:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpb14qs1qx.java:66: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<Strin"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Mercury\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\"))\
    \ {\n            result.first = \"Mars\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Neptune\";\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\"\
    )) {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Venus\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\"))\
    \ {\n            result.first = \"Earth\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mars\")) {\n            result.first = \"Mars\";\n\
    \        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n\
    \            result.first = \"Jupiter\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Jupiter\"\
    )) {\n            result.first = \"Jupiter\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfkyupe6p.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfkyupe6p.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpfkyupe6p.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpfkyupe6p.java:60:\
    \ error: <identifier> expected\n        } else if (planet1.\n                \
    \           ^\n/tmp/tmpfkyupe6p.java:62: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpfkyupe6p.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpfkyupe6p.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpfkyupe6p.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpfkyupe6p.java:62: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpfkyupe6p.java:67: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpfkyupe6p.java:67: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfkyupe6p.java:67: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfkyupe6p.java:67:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfkyupe6p.java:68: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>)"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpssu0zi99.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpssu0zi99.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpssu0zi99.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpssu0zi99.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpssu0zi99.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpssu0zi99.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpssu0zi99.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpssu0zi99.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpssu0zi99.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpssu0zi99.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpssu0zi99.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpssu0zi99.java:133:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            result = new Pair<String, >(planet1, planet2);\n    \
    \    } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Venus\")) {\n            result = new Pair<String, >(planet1, planet2);\n    \
    \    } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            result = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            result = new Pair<String, >(planet1, planet2);\n   \
    \     } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            result = new Pair<String, >(planet1, planet2);\n   \
    \     } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            result = new Pair<String, >(planet1, planet2);\n    \
    \    } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            result = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            result = new Pair\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf_0nhayf.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpf_0nhayf.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >(\"\", \"\");\n                     ^\n/tmp/tmpf_0nhayf.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n                                                 ^\n/tmp/tmpf_0nhayf.java:25:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:27:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:29:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:31:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:33:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:35:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:37:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:39:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:41:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:43:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpf_0nhayf.java:45:\
    \ error: illegal start"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow(planet1.length() - planet2.length(),\
    \ 2) + Math.pow(planet1.length() - planet2.length(), 2));\n        double angle\
    \ = Math.acos(planet1.length() / distance);\n        double angle2 = Math.acos(planet2.length()\
    \ / distance);\n        double angle3 = Math.acos(planet1.length() / distance);\n\
    \        double angle4 = Math.acos(planet2.length() / distance);\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Neptune\")) {\n            pair.first = \"Mercury\"\
    ;\n            pair.second = angle;\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Mercury\")) {\n            pair.first = \"Earth\";\n   \
    \         pair.second = angle;\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Uranus\")) {\n            pair.first = \"Mercury\";\n  \
    \          pair.second = angle2;\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Uranus\")) {\n            pair.first = \"Earth\";\n    \
    \        pair.second = angle2;\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Mars\")) {\n            pair.first = \"Mercury\";\n    \
    \        pair.second = angle3;\n        } else if (planet1.equals(\"Earth\") &&\
    \ planet2.equals(\"Mars\")) {\n            pair.first = \"Earth\";\n         \
    \   pair.second = angle3;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Jupiter\")) {\n            pair.first = \"Mercury\";\n            pair.second\
    \ = angle4;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Jupiter\")) {\n            pair.first = \"Earth\";\n            pair.second =\
    \ angle4;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Saturn\")) {\n            pair.first = \"Mercury\";\n            pair.second =\
    \ angle;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Saturn\"\
    )) {\n            pair.first = \"Earth\";\n            pair.second = angle;\n\
    \        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"))\
    \ {\n            pair.first = \"Mercury\";\n            pair.second = angle2;\n\
    \        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Uranus\")) {\n\
    \            pair.first = \"Earth\";\n            pair.second = angle2;\n    \
    \    } else if (planet1.\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5s6ppvnf.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5s6ppvnf.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp5s6ppvnf.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp5s6ppvnf.java:65:\
    \ error: <identifier> expected\n        } else if (planet1.\n                \
    \           ^\n/tmp/tmp5s6ppvnf.java:67: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp5s6ppvnf.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp5s6ppvnf.java:67: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp5s6ppvnf.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp5s6ppvnf.java:67: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp5s6ppvnf.java:72: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmp5s6ppvnf.java:72: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp5s6ppvnf.java:72: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp5s6ppvnf.java:72:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp5s6ppvnf.java:73: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Eris\");\n        planets.add(\"Cassius\");\n        planets.add(\"Apollo\");\n\
    \        planets.add(\"Major\");\n        planets.add(\"Minor\");\n        planets.add(\"\
    Ceres\");\n        planets.add(\"Pallas\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Eris\");\n        planets.add(\"Cassius\");\n        planets.add(\"\
    Apollo\");\n        planets.add(\"Major\");\n        planets.add(\"Minor\");\n\
    \        planets.add(\"Ceres\");\n        planets.add(\"Pallas\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Eris\");\n        planets.add(\"Cassius\");\n\
    \        planets.add(\"Apollo\");\n        planets.add(\"Major\");\n        planets.add(\"\
    Minor\");\n        planets.add(\"Ceres\");\n        planets.add(\"Pallas\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Cassius\");\n        planets.add(\"Apollo\");\n        planets.add(\"Major\");\n\
    \        planets.add(\"Minor\");\n        planets.add(\"Ceres\");\n        planets.add(\"\
    Pallas\");\n        planets.add(\"Halley\");\n        planets.add(\"Eris\");\n\
    \        planets.add(\"Cassius\");\n        planets.add(\"Apollo\");\n       \
    \ planets.add(\"Major\");\n        planets.add(\"Minor\");\n        planets.add(\"\
    Ceres\");\n        planets.add(\"Pallas\");\n        planets.add(\"Halley\");\n\
    \        planet\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7d3y12zp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp7d3y12zp.java:76: error: not a statement\n        planet\n\
    \        ^\n/tmp/tmp7d3y12zp.java:76: error: ';' expected\n        planet\n  \
    \            ^\n/tmp/tmp7d3y12zp.java:83: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmp7d3y12zp.java:83: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp7d3y12zp.java:83: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp7d3y12zp.java:83:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp7d3y12zp.java:84: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp7d3y12zp.java:84: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp7d3y12zp.java:84: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp7d3y12zp.java:84:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmp7d3y12zp.java:85: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tm"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow((planet1.length() - planet2.length()),\
    \ 2) + Math.pow((planet1.charAt(planet1.length() - 1) - planet2.charAt(planet2.length()\
    \ - 1)), 2));\n        double angle = Math.acos((planet1.charAt(planet1.length()\
    \ - 1) - planet2.charAt(planet2.length() - 1)) / Math.sqrt(Math.pow(planet1.length()\
    \ - 1, 2) + Math.pow(planet1.charAt(planet1.length() - 1) - planet2.charAt(planet2.length()\
    \ - 1), 2)));\n        double angle = Math.toDegrees(angle);\n        double angle1\
    \ = Math.toDegrees(angle);\n        double angle2 = angle1;\n        if (planet1.charAt(planet1.length()\
    \ - 1) == 'E') {\n            angle1 = angle1 - 90;\n        }\n        if (planet2.charAt(planet2.length()\
    \ - 1) == 'E') {\n            angle2 = angle2 + 90;\n        }\n        double\
    \ angle3 = angle1 + angle2;\n        double angle4 = angle3 - 90;\n        double\
    \ angle5 = angle4 - 90;\n        double angle6 = angle5 + 90;\n        double\
    \ angle7 = angle6 + 90;\n        double angle8 = angle7 + 90;\n        double\
    \ angle9 = angle8 + 90;\n        double angle10 = angle9 + 90;\n        double\
    \ angle11 = angle10 + 90;\n        double angle12 = angle11 + 90;\n        double\
    \ angle13 = angle12 + 90;\n        double angle14 = angle13 + 90;\n        double\
    \ angle15 = angle14 + 90;\n        double angle16 = angle15 + 90;\n        double\
    \ angle17 = angle16 + 90;\n        double angle18 = angle17 + 90;\n        double\
    \ angle19 = angle18 + 90;\n        double angle20 = angle19 + 90;\n        double\
    \ angle21 = angle20 + 90;\n        double angle22 = angle21 + 90;\n        double\
    \ angle23 = angle22 + 90;\n        double angle24 = angle23 + 90;\n        double\
    \ angle25 = angle24 + 90;\n        double angle26 = angle25 + 90;\n        double\
    \ angle27 = angle26 + 90;\n        double angle28 = angle27 + 90;\n        double\
    \ angle29 = angle28 + 90;\n        double angle30 = angle29 + 90;\n        double\
    \ angle31 = angle30 + 90;\n        double angle32 = angle31 + \n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ift1q_m.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3ift1q_m.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp3ift1q_m.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp3ift1q_m.java:65:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp3ift1q_m.java:66:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp3ift1q_m.java:66: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp3ift1q_m.java:66: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp3ift1q_m.java:66: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp3ift1q_m.java:66:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp3ift1q_m.java:71: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp3ift1q_m.java:71:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3ift1q_m.java:71: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3ift1q_m.java:71:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3ift1q_m.java:72: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >(\"\
    \", \"\");\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            pair = new Pair<String, >(planet1, planet2);\n        } else\
    \ if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n          \
    \  pair = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            pair = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Uranus\")) {\n            pair = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n  \
    \          pair = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Mars\")) {\n            pair = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"\
    Uranus\")) {\n            pair = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\")) {\n\
    \            pair = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Earth\")) {\n            pair = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\")) {\n            pair = new Pair<String, >(planet1, planet2);\n      \
    \  } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) {\n    \
    \        pair = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mars\")) {\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"\
    Jupiter\")) {\n            pair = new Pair<String, >(planet1, planet2);\n    \
    \    } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n\
    \            pair = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            pair = new \n    }\n \
    \   public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"),\
    \ (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpz54j4h6h.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpz54j4h6h.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >(\"\", \"\");\n                     ^\n/tmp/tmpz54j4h6h.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >(\"\", \"\");\n                                               ^\n/tmp/tmpz54j4h6h.java:25:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:27:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:29:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:31:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:33:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:35:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:37:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:39:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:41:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:43:\
    \ error: illegal start of type\n            pair = new Pair<String, >(planet1,\
    \ planet2);\n                                    ^\n/tmp/tmpz54j4h6h.java:45:\
    \ error: illegal start of type\n            pair = new Pair<String, >"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Eurasia\");\n       \
    \ planets.add(\"Ganymede\");\n        planets.add(\"Callisto\");\n        planets.add(\"\
    Athens\");\n        planets.add(\"Io\");\n        planets.add(\"Europa\");\n \
    \       planets.add(\"Callistos\");\n        planets.add(\"Athens\");\n      \
    \  planets.add(\"Io\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Callistos\");\n        planets.add(\"Athens\");\n        planets.add(\"Io\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Callistos\");\n     \
    \   planets.add(\"Athens\");\n        planets.add(\"Io\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Callistos\");\n        planets.add(\"Athens\"\
    );\n        planets.add(\"Io\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Callistos\");\n        planets.add(\"Athens\");\n        planets.add(\"Io\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Callistos\");\n     \
    \   planets.add(\"Athens\");\n        planets.add(\"Io\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Callistos\");\n        planets.add(\"Athens\"\
    );\n        planets.add(\"Io\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Callistos\");\n        planets.add(\"Athens\");\n        planets.add(\"Io\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Callistos\");\n     \
    \   planets.add(\"Athens\");\n        planets.add(\"Io\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Cal\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpprxw6nxi.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpprxw6nxi.java:77: error: unclosed string literal\n      \
    \  planets.add(\"Cal\n                    ^\n/tmp/tmpprxw6nxi.java:77: error:\
    \ ';' expected\n        planets.add(\"Cal\n                        ^\n/tmp/tmpprxw6nxi.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpprxw6nxi.java:79: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpprxw6nxi.java:79: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpprxw6nxi.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpprxw6nxi.java:79:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpprxw6nxi.java:84: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpprxw6nxi.java:84:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpprxw6nxi.java:84: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpprxw6nxi.java:84:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpprxw6nxi.java:85: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpprxw6nxi.java:85: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2vsy6ksp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp2vsy6ksp.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp2vsy6ksp.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp2vsy6ksp.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmp2vsy6ksp.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp2vsy6ksp.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp2vsy6ksp.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp2vsy6ksp.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp2vsy6ksp.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp2vsy6ksp.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmp2vsy6ksp.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp2vsy6ksp.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp2vsy6ksp.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp2vsy6ksp.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        Set<String> planets = new HashSet<>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        planets.stream().filter(planet -> planet.equals(planet1)\
    \ || planet.equals(planet2)).forEach(planet -> {\n            try {\n        \
    \        double distance = distanceBetweenPlanets(planet1, planet);\n        \
    \        result.first = new Pair<>(planet, distance);\n            } catch (NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ | NoSuchMethodError e) {\n                result.first = new Pair<>(planet,\
    \ Double.MAX_VALUE);\n            }\n        });\n        return result;\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp66vw91hd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp66vw91hd.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmp66vw91hd.java:43:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp66vw91hd.java:43: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp66vw91hd.java:43: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp66vw91hd.java:43: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp66vw91hd.java:44:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp66vw91hd.java:44: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp66vw91hd.java:44: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp66vw91hd.java:44: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp66vw91hd.java:45:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmp66vw91hd.java:45: error: i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = 0;\n        double distance2 = 0;\n        double distance3\
    \ = 0;\n        double distance4 = 0;\n        double distance5 = 0;\n       \
    \ double distance6 = 0;\n        double distance7 = 0;\n        double distance8\
    \ = 0;\n        double distance9 = 0;\n        double distance10 = 0;\n      \
    \  double distance11 = 0;\n        double distance12 = 0;\n        double distance13\
    \ = 0;\n        double distance14 = 0;\n        double distance15 = 0;\n     \
    \   double distance16 = 0;\n        double distance17 = 0;\n        double distance18\
    \ = 0;\n        double distance19 = 0;\n        double distance20 = 0;\n     \
    \   double distance21 = 0;\n        double distance22 = 0;\n        double distance23\
    \ = 0;\n        double distance24 = 0;\n        double distance25 = 0;\n     \
    \   double distance26 = 0;\n        double distance27 = 0;\n        double distance28\
    \ = 0;\n        double distance29 = 0;\n        double distance30 = 0;\n     \
    \   double distance31 = 0;\n        double distance32 = 0;\n        double distance33\
    \ = 0;\n        double distance34 = 0;\n        double distance35 = 0;\n     \
    \   double distance36 = 0;\n        double distance37 = 0;\n        double distance38\
    \ = 0;\n        double distance39 = 0;\n        double distance40 = 0;\n     \
    \   double distance41 = 0;\n        double distance42 = 0;\n        double distance43\
    \ = 0;\n        double distance44 = 0;\n        double distance45 = 0;\n     \
    \   double distance46 = 0;\n        double distance47 = 0;\n        double distance48\
    \ = 0;\n        double distance49 = 0;\n        double distance50 = 0;\n     \
    \   double distance51 = 0;\n        double distance52 = 0;\n        double distance53\
    \ = 0;\n        double distance54 = 0;\n        double distance55 = 0;\n     \
    \   double distance56 = 0;\n        double distance57 = 0;\n        double distance58\
    \ = 0;\n        double distance59 = 0;\n        double distance60 = 0;\n     \
    \   double distance61 = 0;\n        double distance62 = 0;\n        double distance63\
    \ = 0;\n        double distance64 = 0;\n        double distance65 = 0;\n     \
    \   double distance66 = 0;\n        double distance67 = 0;\n        double distance68\
    \ = 0;\n        double distance69 = 0;\n        double distance70 = 0;\n     \
    \   double distance71 = 0;\n        double distance72 = 0;\n        double distance73\
    \ = 0;\n        double distance74 = 0;\n        double distance75 = 0;\n     \
    \   double distance76 = 0;\n        double distance77 = 0;\n        double distance78\
    \ = 0;\n        double distance79 = 0;\n        double distance80 = 0;\n     \
    \   double distance81 = 0;\n        double distance82 = 0;\n        double distance83\
    \ = 0;\n        double distance84 = 0;\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfrr0iwvx.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfrr0iwvx.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpfrr0iwvx.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpfrr0iwvx.java:115:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpfrr0iwvx.java:115: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpfrr0iwvx.java:115: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpfrr0iwvx.java:115: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpfrr0iwvx.java:116:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpfrr0iwvx.java:116: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpfrr0iwvx.java:116: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpfrr0iwvx.java:116: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpfrr0iwvx.java:117:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n \
    \       double distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n\
    \        double distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        double distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance26 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance27\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaba_k096.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpaba_k096.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpaba_k096.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpaba_k096.java:51:\
    \ error: ';' expected\n        double distance27\n                         ^\n\
    /tmp/tmpaba_k096.java:58: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpaba_k096.java:58: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpaba_k096.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpaba_k096.java:58:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpaba_k096.java:59: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpaba_k096.java:59: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpaba_k096.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpaba_k096.java:59:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvn_hrhmh.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpvn_hrhmh.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpvn_hrhmh.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpvn_hrhmh.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpvn_hrhmh.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpvn_hrhmh.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpvn_hrhmh.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpvn_hrhmh.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpvn_hrhmh.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpvn_hrhmh.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpvn_hrhmh.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpvn_hrhmh.java:133:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double angle = Math.acos(planet1.length() / distance);\n        double\
    \ angle2 = Math.acos(planet2.length() / distance);\n        double angle3 = Math.acos(planet1.length()\
    \ / distance);\n        double angle4 = Math.acos(planet2.length() / distance);\n\
    \        double angle5 = Math.acos(planet1.length() / distance);\n        double\
    \ angle6 = Math.acos(planet2.length() / distance);\n        double angle7 = Math.acos(planet1.length()\
    \ / distance);\n        double angle8 = Math.acos(planet2.length() / distance);\n\
    \        double angle9 = Math.acos(planet1.length() / distance);\n        double\
    \ angle10 = Math.acos(planet2.length() / distance);\n        double angle11 =\
    \ Math.acos(planet1.length() / distance);\n        double angle12 = Math.acos(planet2.length()\
    \ / distance);\n        double angle13 = Math.acos(planet1.length() / distance);\n\
    \        double angle14 = Math.acos(planet2.length() / distance);\n        double\
    \ angle15 = Math.acos(planet1.length() / distance);\n        double angle16 =\
    \ Math.acos(planet2.length() / distance);\n        double angle17 = Math.acos(planet1.length()\
    \ / distance);\n        double angle18 = Math.acos(planet2.length() / distance);\n\
    \        double angle19 = Math.acos(planet1.length() / distance);\n        double\
    \ angle20 = Math.acos(planet2.length() / distance);\n        double angle21 =\
    \ Math.acos(planet1.length() / distance);\n        double angle22 = Math.acos(planet2.length()\
    \ / distance);\n        double angle23 = Math.acos(planet1.length() / distance);\n\
    \        double angle24 = Math.acos(planet2.length() / distance);\n        double\
    \ angle25 = Math.acos(planet1.length() / distance);\n        double angle26 =\
    \ Math.acos(planet2.length() / distance);\n        double angle27 = Math.acos(planet1.length()\
    \ / distance);\n        double angle28 = Math.acos(planet2.length() / distance);\n\
    \        double angle29 = Math.acos(planet1.length() / distance);\n        double\
    \ angle30 = Math.acos(planet2.length() / distance);\n        double angle31 =\
    \ Math.acos(planet1.length() / distance);\n        double angle32 = Math.acos(planet2.length()\
    \ / distance);\n        double angle\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsi4tl7vk.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpsi4tl7vk.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpsi4tl7vk.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpsi4tl7vk.java:57:\
    \ error: ';' expected\n        double angle\n                    ^\n/tmp/tmpsi4tl7vk.java:64:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpsi4tl7vk.java:64: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpsi4tl7vk.java:64: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpsi4tl7vk.java:64: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpsi4tl7vk.java:65:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpsi4tl7vk.java:65: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpsi4tl7vk.java:65: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpsi4tl7vk.java:65: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\"))\
    \ {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Mars\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Neptune\";\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Mercury\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\"\
    )) {\n            result.first = \"Earth\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Venus\")) {\n            result.first = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Venus\")) {\n\
    \            result.first = \"Jupiter\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Venus\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Venus\"))\
    \ {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Venus\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Venus\"\
    )) {\n            result.first = \"Mercury\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Mars\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Mars\";\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Mars\")) {\n            result.first = \"Jupiter\";\n  \
    \      } else if (planet1.equals(\"Jupiter\") && planet\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwl07hl32.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpwl07hl32.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpwl07hl32.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpwl07hl32.java:60:\
    \ error: ')' expected\n        } else if (planet1.equals(\"Jupiter\") && planet\n\
    \                                                      ^\n/tmp/tmpwl07hl32.java:61:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpwl07hl32.java:67: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpwl07hl32.java:67:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpwl07hl32.java:67: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpwl07hl32.java:67:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpwl07hl32.java:68: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpwl07hl32.java:68: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpwl07hl32.java:68: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpwl07hl32.j"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdw381lp7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdw381lp7.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpdw381lp7.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpdw381lp7.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpdw381lp7.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpdw381lp7.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpdw381lp7.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpdw381lp7.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpdw381lp7.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpdw381lp7.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpdw381lp7.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdw381lp7.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdw381lp7.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdw381lp7.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 2) {\n            result.first(planet1);\n           \
    \ result.second(planet2);\n            return result;\n        }\n        double\
    \ distance1 = Math.abs(planet1.length() - planet2.length());\n        double distance2\
    \ = Math.abs(planet2.length() - planet1.length());\n        if (distance1 < distance2)\
    \ {\n            String planet1a = planet1.substring(0, planet1.length() - 1);\n\
    \            String planet2a = planet2.substring(0, planet2.length() - 1);\n \
    \           String planet1b = planet1.substring(planet1.length() - 1, planet1.length());\n\
    \            String planet2b = planet2.substring(planet2.length() - 1, planet2.length());\n\
    \            Pair<String, > result1 = bf(planet1a, planet2);\n            Pair<String,\
    \ > result2 = bf(planet1b, planet2);\n            Pair<String, > result3 = bf(planet1,\
    \ planet2b);\n            Pair<String, > result4 = bf(planet1b, planet2a);\n \
    \           Pair<String, > result5 = bf(planet1a, planet2b);\n            Pair<String,\
    \ > result6 = bf(planet1, planet2a);\n            Pair<String, > result7 = bf(planet1b,\
    \ planet2a);\n            Pair<String, > result8 = bf(planet1a, planet1);\n  \
    \          Pair<String, > result9 = bf(planet2, planet1);\n            Pair<String,\
    \ > result10 = bf(planet1, planet2);\n            Pair<String, > result11 = bf(planet2,\
    \ planet2);\n            Pair<String, > result12 = bf(planet1, planet1);\n   \
    \         Pair<String, > result13 = bf(planet2, planet2);\n            Pair<String,\
    \ > result14 = bf(planet1, planet1);\n            Pair<String, > result15 = bf(planet2,\
    \ planet2);\n            Pair<String, > result16 = bf(planet1, planet2);\n   \
    \         Pair<String, > result17 = bf(planet2, planet1);\n            Pair<String,\
    \ > result18 = bf(planet1, planet1);\n            Pair<String, > result19 = bf(planet2,\
    \ planet2);\n            Pair<String, > result20 = bf(planet1, planet2);\n   \
    \         Pair<String, > result21 = bf(planet2, \n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprt3hr5ym.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmprt3hr5ym.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmprt3hr5ym.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmprt3hr5ym.java:37:\
    \ error: illegal start of type\n            Pair<String, > result1 = bf(planet1a,\
    \ planet2);\n                         ^\n/tmp/tmprt3hr5ym.java:38: error: illegal\
    \ start of type\n            Pair<String, > result2 = bf(planet1b, planet2);\n\
    \                         ^\n/tmp/tmprt3hr5ym.java:39: error: illegal start of\
    \ type\n            Pair<String, > result3 = bf(planet1, planet2b);\n        \
    \                 ^\n/tmp/tmprt3hr5ym.java:40: error: illegal start of type\n\
    \            Pair<String, > result4 = bf(planet1b, planet2a);\n              \
    \           ^\n/tmp/tmprt3hr5ym.java:41: error: illegal start of type\n      \
    \      Pair<String, > result5 = bf(planet1a, planet2b);\n                    \
    \     ^\n/tmp/tmprt3hr5ym.java:42: error: illegal start of type\n            Pair<String,\
    \ > result6 = bf(planet1, planet2a);\n                         ^\n/tmp/tmprt3hr5ym.java:43:\
    \ error: illegal start of type\n            Pair<String, > result7 = bf(planet1b,\
    \ planet2a);\n                         ^\n/tmp/tmprt3hr5ym.java:44: error: illegal\
    \ start of type\n            Pair<String, > result8 = bf(planet1a, planet1);\n\
    \                         ^\n/tmp/tmprt3hr5ym.java:45: error: illegal start of\
    \ type\n            Pair<String, > result9 = bf(planet2, planet1);\n         \
    \                ^\n/tmp/tmprt3hr5ym.java:46: error: illegal start of type\n \
    \           Pair<String, > result10 = bf(planet1, planet2);\n                \
    \         ^\n/tmp/tmprt3hr5ym.java:47: error: illegal start of type\n        \
    \    Pair<String, > result11 = bf(planet2, planet2);\n                       \
    \  ^\n/tmp/tmprt3hr5ym.java:48: error: i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptbu71u_p.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmptbu71u_p.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmptbu71u_p.java:60:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmptbu71u_p.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmptbu71u_p.java:60: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmptbu71u_p.java:60: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmptbu71u_p.java:61:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmptbu71u_p.java:61: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmptbu71u_p.java:61: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmptbu71u_p.java:61: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmptbu71u_p.java:62:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmptbu71u_p.java:62: error: i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp00je621m.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp00je621m.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmp00je621m.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp00je621m.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp00je621m.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp00je621m.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp00je621m.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp00je621m.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp00je621m.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp00je621m.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp00je621m.java:283:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmp00je621m.java:283"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance1 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance2 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance3 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance4 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance5 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance6 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance7 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance8 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance9 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance10 = Math.sqrt(Math.pow(planet1.length(), 2) +\
    \ Math.pow(planet2.length(), 2));\n        double distance11 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance12 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance13 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance14 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance15 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance16 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance17 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance18 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance19 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance20 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3jq5sqxf.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3jq5sqxf.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp3jq5sqxf.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp3jq5sqxf.java:45:\
    \ error: ')' expected\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n                                                       \
    \                            ^\n/tmp/tmp3jq5sqxf.java:46: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmp3jq5sqxf.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp3jq5sqxf.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp3jq5sqxf.java:47: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp3jq5sqxf.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp3jq5sqxf.java:52: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp3jq5sqxf.java:52:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3jq5sqxf.java:52: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3jq5sqxf.java:52:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3jq5sqxf.java:53: error: ')' expected\n    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance > 1) {\n            pair = Pair.of(planet1, planet2);\n  \
    \      } else if (distance == 1) {\n            pair = Pair.of(planet1, planet2);\n\
    \        } else if (distance == 0) {\n            pair = Pair.of(planet1, planet2);\n\
    \        } else if (distance < 0) {\n            pair = Pair.of(planet2, planet1);\n\
    \        }\n        return pair;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8azdd20h.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp8azdd20h.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp8azdd20h.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp8azdd20h.java:42:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp8azdd20h.java:42: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp8azdd20h.java:42: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp8azdd20h.java:42: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp8azdd20h.java:43:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp8azdd20h.java:43: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp8azdd20h.java:43: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp8azdd20h.java:43: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp8azdd20h.java:44:\
    \ error: ')' expected\n    assert(bf("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n     \
    \   planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        if (planets.contains(planet1) &&\
    \ planets.contains(planet2)) {\n            try {\n                double distance1\
    \ = getDistance(planet1, planet2);\n                double distance2 = getDistance(planet2,\
    \ planet1);\n                double distance3 = getDistance(planet1, planet2);\n\
    \                double distance4 = getDistance(planet2, planet1);\n         \
    \       double distance5 = getDistance(planet1, planet2);\n                double\
    \ distance6 = getDistance(planet2, planet1);\n                double distance7\
    \ = getDistance(planet1, planet2);\n                double distance8 = getDistance(planet2,\
    \ planet1);\n                double distance9 = getDistance(planet1, planet2);\n\
    \                double distance10 = getDistance(planet2, planet1);\n        \
    \        double distance11 = getDistance(planet1, planet2);\n                double\
    \ distance12 = getDistance(planet2, planet1);\n                double distance13\
    \ = getDistance(planet1, planet2);\n                double distance14 = getDistance(planet2,\
    \ planet1);\n                double distance15 = getDistance(planet1, planet2);\n\
    \                double distance16 = getDistance(planet2, planet1);\n        \
    \        double distance17 = getDistance(planet1, planet2);\n                double\
    \ distance18 = getDistance(planet2, planet1);\n                double distance19\
    \ = getDistance(planet1, planet2);\n                double distance20 = getDistance(planet2,\
    \ planet1);\n                double distance21 = getDistance(planet1, planet2);\n\
    \                double distance22 = getDistance(planet2, planet1);\n        \
    \        double distance23 = getDistance(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0926eon2.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0926eon2.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp0926eon2.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp0926eon2.java:66:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp0926eon2.java:66:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmp0926eon2.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp0926eon2.java:67: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp0926eon2.java:67: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp0926eon2.java:67: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp0926eon2.java:72:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp0926eon2.java:72: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp0926eon2.java:72: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp0926eon2.java:72: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp0926eon2.java:73:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp0926eon2"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp69rdxz2t.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp69rdxz2t.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp69rdxz2t.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp69rdxz2t.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmp69rdxz2t.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp69rdxz2t.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp69rdxz2t.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp69rdxz2t.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp69rdxz2t.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp69rdxz2t.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmp69rdxz2t.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp69rdxz2t.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp69rdxz2t.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp69rdxz2t.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        List<String> planets = new ArrayList<>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpw57ecnlp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpw57ecnlp.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpw57ecnlp.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpw57ecnlp.java:248:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpw57ecnlp.java:248: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpw57ecnlp.java:248: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpw57ecnlp.java:248: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpw57ecnlp.java:249:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpw57ecnlp.java:249: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpw57ecnlp.java:249: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpw57ecnlp.java:249: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpw57ecnlp.java:250:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Umbriel\");\n        planets.add(\"Cassiopeia\");\n        planets.add(\"Taurus\"\
    );\n        planets.add(\"Gemini\");\n        planets.add(\"Cancer\");\n     \
    \   planets.add(\"Leo\");\n        planets.add(\"Virgo\");\n        planets.add(\"\
    Libra\");\n        planets.add(\"Scorpio\");\n        planets.add(\"Sagittarius\"\
    );\n        planets.add(\"Capricornus\");\n        planets.add(\"Aquarius\");\n\
    \        planets.add(\"Pisces\");\n        planets.add(\"Athens\");\n        planets.add(\"\
    Ceres\");\n        planets.add(\"Pluto\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Ganymede\");\n        planets.add(\"Callisto\");\n    \
    \    planets.add(\"Bombasto\");\n        planets.add(\"Eucalyptus\");\n      \
    \  planets.add(\"Mimas\");\n        planets.add(\"Pisces\");\n        planets.add(\"\
    Athens\");\n        planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Ganymede\");\n      \
    \  planets.add(\"Callisto\");\n        planets.add(\"Bombasto\");\n        planets.add(\"\
    Eucalyptus\");\n        planets.add(\"Mimas\");\n        planets.add(\"Pisces\"\
    );\n        planets.add(\"Athens\");\n        planets.add(\"Ceres\");\n      \
    \  planets.add(\"Pluto\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Ganymede\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpsrliw54z.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpsrliw54z.java:73: error: unclosed string literal\n      \
    \  planets.add(\"Ganymede\n                    ^\n/tmp/tmpsrliw54z.java:73: error:\
    \ ';' expected\n        planets.add(\"Ganymede\n                             ^\n\
    /tmp/tmpsrliw54z.java:75: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpsrliw54z.java:75: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpsrliw54z.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpsrliw54z.java:75: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpsrliw54z.java:75:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpsrliw54z.java:80: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpsrliw54z.java:80:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpsrliw54z.java:80: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpsrliw54z.java:80:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpsrliw54z.java:81: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpsrliw54z.java:81: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<lon"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n        double distance;\n        double distance2;\n      \
    \  double distance3;\n        double distance4;\n        double distance5;\n \
    \       double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance9;\n        double distance10;\n        double distance11;\n\
    \        double distance12;\n        double distance13;\n        double distance14;\n\
    \        double distance15;\n        double distance16;\n        double distance17;\n\
    \        double distance18;\n        double distance19;\n        double distance20;\n\
    \        double distance21;\n        double distance22;\n        double distance23;\n\
    \        double distance24;\n        double distance25;\n        double distance26;\n\
    \        double distance27;\n        double distance28;\n        double distance29;\n\
    \        double distance30;\n        double distance31;\n        double distance32;\n\
    \        double distance33;\n        double distance34;\n        double distance35;\n\
    \        double distance36;\n        double distance37;\n        double distance38;\n\
    \        double distance39;\n        double distance40;\n        double distance41;\n\
    \        double distance42;\n        double distance43;\n        double distance44;\n\
    \        double distance45;\n        double distance46;\n        double distance47;\n\
    \        double distance48;\n        double distance49;\n        double distance50;\n\
    \        double distance51;\n        double distance52;\n        double distance53;\n\
    \        double distance54;\n        double distance55;\n        double distance56;\n\
    \        double distance57;\n        double distance58;\n        double distance59;\n\
    \        double distance60;\n        double distance61;\n        double distance62;\n\
    \        double distance63;\n        double distance64;\n        double distance65;\n\
    \        double distance66;\n        double distance67;\n        double distance68;\n\
    \        double distance69;\n        double distance70;\n        double distance71;\n\
    \        double distance72;\n        double distance73;\n        double distance74;\n\
    \        double distance75;\n        double distance76;\n        double distance77;\n\
    \        double distance78;\n        double distance79;\n        double distance80;\n\
    \        double distance81;\n        double distance82;\n        double distance83;\n\
    \        double distance84;\n        double distance85;\n        double distance86;\n\
    \        double \n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptnxdrx97.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmptnxdrx97.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >(\"\", \"\");\n                     ^\n/tmp/tmptnxdrx97.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n                                                 ^\n/tmp/tmptnxdrx97.java:110:\
    \ error: not a statement\n        double \n        ^\n/tmp/tmptnxdrx97.java:110:\
    \ error: ';' expected\n        double \n              ^\n/tmp/tmptnxdrx97.java:117:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmptnxdrx97.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmptnxdrx97.java:117: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmptnxdrx97.java:117: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmptnxdrx97.java:118:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmptnxdrx97.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmptnxdrx97.java:118: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmptnxdrx97.java:118: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\""
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpalhi02sc.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpalhi02sc.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpalhi02sc.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpalhi02sc.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpalhi02sc.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpalhi02sc.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpalhi02sc.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpalhi02sc.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpalhi02sc.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpalhi02sc.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpalhi02sc.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpalhi02sc.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpalhi02sc.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpalhi02sc.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpckzhkc38.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpckzhkc38.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpckzhkc38.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpckzhkc38.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpckzhkc38.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpckzhkc38.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpckzhkc38.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpckzhkc38.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpckzhkc38.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpckzhkc38.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpckzhkc38.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpckzhkc38.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 1) {\n            result.first(planet1);\n           \
    \ result.second(planet2);\n            return result;\n        }\n        double\
    \ angle = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase()) ? 1\
    \ : -1);\n        double angle2 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle3 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle4 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle5 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle6 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle7 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle8 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle9 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle10 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle11 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle12 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle13 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle14 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle15 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle16 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle17 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle18 = Math.acos(planet2.toUpperCase().contains(planet1.toUpperCase())\
    \ ? 1 : -1);\n        double angle19 = Math.acos(planet1.toUpperCase().contains(planet2.toUpperCase())\
    \ ? 1 : -1);\n        double angle20 = Math.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprildwane.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmprildwane.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmprildwane.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmprildwane.java:49:\
    \ error: <identifier> expected\n        double angle20 = Math.\n             \
    \                 ^\n/tmp/tmprildwane.java:51: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmprildwane.java:51:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmprildwane.java:51: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmprildwane.java:51:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmprildwane.java:51: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmprildwane.java:56: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmprildwane.java:56: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmprildwane.java:56: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmprildwane.java:56:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmprildwane.java:57: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        List<String> planets = new ArrayList<>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n       \
    \ planets.add(\"Pallas\");\n        planets.add(\"Eurydice\");\n        planets.add(\"\
    Ganymede\");\n        planets.add(\"Callisto\");\n        planets.add(\"Copernicus\"\
    );\n        planets.add(\"Phobos\");\n        planets.add(\"Europa\");\n     \
    \   planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planet\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprps86pw2.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmprps86pw2.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmprps86pw2.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmprps86pw2.java:74:\
    \ error: not a statement\n        planet\n        ^\n/tmp/tmprps86pw2.java:74:\
    \ error: ';' expected\n        planet\n              ^\n/tmp/tmprps86pw2.java:81:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmprps86pw2.java:81: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmprps86pw2.java:81: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmprps86pw2.java:81: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmprps86pw2.java:82:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmprps86pw2.java:82: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmprps86pw2.java:82: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmprps86pw2.java:82: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<St"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        List<String> planets = new ArrayList<>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        planets.stream().filter(planet\
    \ -> planet.equals(planet1) || planet.equals(planet2)).forEach(planet -> {\n \
    \           int distance = planets.stream().filter(planet1 -> planet1.equals(planet)).filter(planet2\
    \ -> planet2.equals(planet)).count();\n            double distanceDouble = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble1 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble2 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble3 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble4 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble5 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble6 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble7 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble8 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble9 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble10 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble11 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble12 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble13 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble14 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble15 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble16 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble17 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble18 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble19 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble20 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble21 = Double.parseDouble(distance.toString());\n\
    \            double distanceDouble22 = Double.parseDouble(distance.toString());\n\
    \            double distance\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc8zvb7ls.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpc8zvb7ls.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpc8zvb7ls.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpc8zvb7ls.java:60:\
    \ error: ';' expected\n            double distance\n                         \
    \  ^\n/tmp/tmpc8zvb7ls.java:61: error: ')' expected\n    }\n     ^\n/tmp/tmpc8zvb7ls.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpc8zvb7ls.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpc8zvb7ls.java:62: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpc8zvb7ls.java:62: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpc8zvb7ls.java:67: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpc8zvb7ls.java:67: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpc8zvb7ls.java:67: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpc8zvb7ls.java:67:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpc8zvb7ls.java:68: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                           "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Saturn\";\n            result.second = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n            result.second = \"Earth\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Mars\";\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\")) {\n\
    \            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\"))\
    \ {\n            result.first = \"Jupiter\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Uranus\"))\
    \ {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Earth\"\
    )) {\n            result.first = \"Earth\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Mars\")) {\n            result.first = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Venus\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Uran\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpagxxha8s.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpagxxha8s.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpagxxha8s.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpagxxha8s.java:61:\
    \ error: unclosed string literal\n            result.first = \"Uran\n        \
    \                   ^\n/tmp/tmpagxxha8s.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpagxxha8s.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpagxxha8s.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpagxxha8s.java:63: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpagxxha8s.java:63: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpagxxha8s.java:68: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpagxxha8s.java:68: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpagxxha8s.java:68: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpagxxha8s.java:68:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpagxxha8s.java:69: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double angle = Math.acos(planet1.length() / distance);\n        double\
    \ angle2 = Math.acos(planet2.length() / distance);\n        double angleDiff =\
    \ angle - angle2;\n        double angleDiff2 = angle2 - angle;\n        double\
    \ angleDiff3 = angleDiff - angleDiff2;\n        double angleDiff4 = angleDiff2\
    \ - angleDiff;\n        double angleDiff5 = angleDiff3 - angleDiff4;\n       \
    \ double angleDiff6 = angleDiff4 - angleDiff3;\n        double angleDiff7 = angleDiff5\
    \ - angleDiff6;\n        double angleDiff8 = angleDiff6 - angleDiff5;\n      \
    \  double angleDiff9 = angleDiff7 - angleDiff8;\n        double angleDiff10 =\
    \ angleDiff8 - angleDiff7;\n        double angleDiff11 = angleDiff9 - angleDiff10;\n\
    \        double angleDiff12 = angleDiff10 - angleDiff9;\n        double angleDiff13\
    \ = angleDiff11 - angleDiff12;\n        double angleDiff14 = angleDiff12 - angleDiff11;\n\
    \        double angleDiff15 = angleDiff13 - angleDiff14;\n        double angleDiff16\
    \ = angleDiff14 - angleDiff13;\n        double angleDiff17 = angleDiff15 - angleDiff16;\n\
    \        double angleDiff18 = angleDiff16 - angleDiff15;\n        double angleDiff19\
    \ = angleDiff17 - angleDiff18;\n        double angleDiff20 = angleDiff18 - angleDiff17;\n\
    \        double angleDiff21 = angleDiff19 - angleDiff20;\n        double angleDiff22\
    \ = angleDiff20 - angleDiff19;\n        double angleDiff23 = angleDiff21 - angleDiff22;\n\
    \        double angleDiff24 = angleDiff22 - angleDiff21;\n        double angleDiff25\
    \ = angleDiff23 - angleDiff24;\n        double angleDiff26 = angleDiff24 - angleDiff23;\n\
    \        double angleDiff27 = angleDiff25 - angleDiff26;\n        double angleDiff28\
    \ = angleDiff26 - angleDiff25;\n        double angleDiff29 = angleDiff27 - angleDiff28;\n\
    \        double angleDiff30 = angleDiff28 - angleDiff27;\n        double angleDiff31\
    \ = angleDiff29 - angleDiff30;\n        double angleDiff32 = angleDiff30 - angleDiff29;\n\
    \        double angleDiff33 = angleDiff31 - angleDiff32;\n        double \n  \
    \  }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpigcaqfna.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpigcaqfna.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmpigcaqfna.java:60:\
    \ error: not a statement\n        double \n        ^\n/tmp/tmpigcaqfna.java:60:\
    \ error: ';' expected\n        double \n              ^\n/tmp/tmpigcaqfna.java:67:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpigcaqfna.java:67: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpigcaqfna.java:67: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpigcaqfna.java:67: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpigcaqfna.java:68:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpigcaqfna.java:68: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpigcaqfna.java:68: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpigcaqfna.java:68: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpigcaqfna.java:69:\
    \ error: ')' expected\n    assert(bf((\"Jupiter"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        if (distance < 1) {\n            return result;\n        }\n \
    \       double distance2 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance3 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance4 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance5 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance6 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance7 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance8 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance9 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance10 = Math.sqrt(Math.pow(planet1.length(), 2) +\
    \ Math.pow(planet2.length(), 2));\n        double distance11 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance12 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance13 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance14 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance15 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance16 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance17 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance18 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance19 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance20 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance22 = Math.sqrt(Math.\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp86b4vbi7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp86b4vbi7.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp86b4vbi7.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp86b4vbi7.java:48:\
    \ error: <identifier> expected\n        double distance22 = Math.sqrt(Math.\n\
    \                                           ^\n/tmp/tmp86b4vbi7.java:49: error:\
    \ ';' expected\n    }\n     ^\n/tmp/tmp86b4vbi7.java:50: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n           ^\n\
    /tmp/tmp86b4vbi7.java:50: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp86b4vbi7.java:50: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp86b4vbi7.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp86b4vbi7.java:55:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp86b4vbi7.java:55: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp86b4vbi7.java:55: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp86b4vbi7.java:55: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp86b4vbi7.java:56:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Halley\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Halley\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe6gv0lc_.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpe6gv0lc_.java:74: error: unclosed string literal\n      \
    \  planets.add(\"Halley\n                    ^\n/tmp/tmpe6gv0lc_.java:74: error:\
    \ ';' expected\n        planets.add(\"Halley\n                           ^\n/tmp/tmpe6gv0lc_.java:76:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpe6gv0lc_.java:76: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpe6gv0lc_.java:76: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpe6gv0lc_.java:76: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpe6gv0lc_.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpe6gv0lc_.java:81: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpe6gv0lc_.java:81:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpe6gv0lc_.java:81: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpe6gv0lc_.java:81:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpe6gv0lc_.java:82: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpe6gv0lc_.java:82: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 1) {\n            return result;\n        }\n        double\
    \ distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        double\
    \ distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n        double\
    \ distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n        double\
    \ distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n        double\
    \ distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n        double\
    \ distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n        double\
    \ distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n        double\
    \ distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n        double\
    \ distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n        double\
    \ distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n        double\
    \ distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n        double\
    \ distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n        double\
    \ distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n        double\
    \ distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n        double\
    \ distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n        double\
    \ distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n        double\
    \ distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n        double\
    \ distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n        double\
    \ distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n        double\
    \ distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n        double\
    \ distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n        double\
    \ distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n        double\
    \ distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n        double\
    \ distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n        double\
    \ distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n        double\
    \ distance26 = Math.abs(planet1.charAt(25) - plan\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzs4ax4zk.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzs4ax4zk.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpzs4ax4zk.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpzs4ax4zk.java:53:\
    \ error: ')' expected\n        double distance26 = Math.abs(planet1.charAt(25)\
    \ - plan\n                                                              ^\n/tmp/tmpzs4ax4zk.java:55:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpzs4ax4zk.java:55: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpzs4ax4zk.java:55: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpzs4ax4zk.java:55: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpzs4ax4zk.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzs4ax4zk.java:60: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpzs4ax4zk.java:60:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpzs4ax4zk.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpzs4ax4zk.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpzs4ax4zk.java:61: error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(planet2)) {\n            return result;\n \
    \       }\n        Pair<String, > planet1Orbit = orbit(planet1);\n        Pair<String,\
    \ > planet2Orbit = orbit(planet2);\n        List<String> planet1OrbitList = planet1Orbit.first;\n\
    \        List<String> planet2OrbitList = planet2Orbit.first;\n        List<String>\
    \ planet1OrbitListSorted = planet1OrbitList.stream().sorted().collect(Collectors.toList());\n\
    \        List<String> planet2OrbitListSorted = planet2OrbitList.stream().sorted().collect(Collectors.toList());\n\
    \        List<String> planet1OrbitListSorted2 = planet1OrbitListSorted.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet2OrbitListSorted2 = planet2OrbitListSorted.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet1OrbitListSorted3 = planet1OrbitListSorted2.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet2OrbitListSorted3 = planet2OrbitListSorted2.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet1OrbitListSorted4 = planet1OrbitListSorted3.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet2OrbitListSorted4 = planet2OrbitListSorted3.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet1OrbitListSorted5 = planet1OrbitListSorted4.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet2OrbitListSorted5 = planet2OrbitListSorted4.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet1OrbitListSorted6 = planet1OrbitListSorted5.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet2OrbitListSorted6 = planet2OrbitListSorted5.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet1OrbitListSorted7 = planet1OrbitListSorted6.stream().distinct().collect(Collectors.toList());\n\
    \        List<String> planet2OrbitListSorted7 = planet2Orbit\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3zoceqom.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3zoceqom.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp3zoceqom.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp3zoceqom.java:27:\
    \ error: illegal start of type\n        Pair<String, > planet1Orbit = orbit(planet1);\n\
    \                     ^\n/tmp/tmp3zoceqom.java:28: error: illegal start of type\n\
    \        Pair<String, > planet2Orbit = orbit(planet2);\n                     ^\n\
    /tmp/tmp3zoceqom.java:44: error: ';' expected\n        List<String> planet2OrbitListSorted7\
    \ = planet2Orbit\n                                                           ^\n\
    /tmp/tmp3zoceqom.java:51: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp3zoceqom.java:51: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3zoceqom.java:51: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3zoceqom.java:51:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3zoceqom.java:52: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp3zoceqom.java:52: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp3zoceqom.java:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Pair<String, > result2 = new Pair<String, >();\n        Pair<String,\
    \ > result3 = new Pair<String, >();\n        Pair<String, > result4 = new Pair<String,\
    \ >();\n        Pair<String, > result5 = new Pair<String, >();\n        Pair<String,\
    \ > result6 = new Pair<String, >();\n        Pair<String, > result7 = new Pair<String,\
    \ >();\n        Pair<String, > result8 = new Pair<String, >();\n        Pair<String,\
    \ > result9 = new Pair<String, >();\n        Pair<String, > result10 = new Pair<String,\
    \ >();\n        Pair<String, > result11 = new Pair<String, >();\n        Pair<String,\
    \ > result12 = new Pair<String, >();\n        Pair<String, > result13 = new Pair<String,\
    \ >();\n        Pair<String, > result14 = new Pair<String, >();\n        Pair<String,\
    \ > result15 = new Pair<String, >();\n        Pair<String, > result16 = new Pair<String,\
    \ >();\n        Pair<String, > result17 = new Pair<String, >();\n        Pair<String,\
    \ > result18 = new Pair<String, >();\n        Pair<String, > result19 = new Pair<String,\
    \ >();\n        Pair<String, > result20 = new Pair<String, >();\n        Pair<String,\
    \ > result21 = new Pair<String, >();\n        Pair<String, > result22 = new Pair<String,\
    \ >();\n        Pair<String, > result23 = new Pair<String, >();\n        Pair<String,\
    \ > result24 = new Pair<String, >();\n        Pair<String, > result25 = new Pair<String,\
    \ >();\n        Pair<String, > result26 = new Pair<String, >();\n        Pair<String,\
    \ > result27 = new Pair<String, >();\n        Pair<String, > result28 = new Pair<String,\
    \ >();\n        Pair<String, > result29 = new Pair<String, >();\n        Pair<String,\
    \ > result30 = new Pair<String, >();\n        Pair<String, > result31 = new Pair<String,\
    \ >();\n        Pair<String, > result32 = new Pair<String, >();\n        Pair<String,\
    \ > result33 = new Pair<String, >();\n        Pair<String, > result34 = new Pair<String,\
    \ >();\n        Pair<String, > result35 = new Pair<String, >();\n        Pair<String,\
    \ > result36 = new Pair<String, >();\n        Pair<String, > result37 = new Pair<String,\
    \ >();\n        Pair<String, > result38 = new Pair<String, >();\n        Pair<String,\
    \ > result39 = new Pair<String, >();\n        Pair<String, \n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeklmw32v.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpeklmw32v.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpeklmw32v.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpeklmw32v.java:24:\
    \ error: illegal start of type\n        Pair<String, > result2 = new Pair<String,\
    \ >();\n                     ^\n/tmp/tmpeklmw32v.java:24: error: illegal start\
    \ of type\n        Pair<String, > result2 = new Pair<String, >();\n          \
    \                                        ^\n/tmp/tmpeklmw32v.java:25: error: illegal\
    \ start of type\n        Pair<String, > result3 = new Pair<String, >();\n    \
    \                 ^\n/tmp/tmpeklmw32v.java:25: error: illegal start of type\n\
    \        Pair<String, > result3 = new Pair<String, >();\n                    \
    \                              ^\n/tmp/tmpeklmw32v.java:26: error: illegal start\
    \ of type\n        Pair<String, > result4 = new Pair<String, >();\n          \
    \           ^\n/tmp/tmpeklmw32v.java:26: error: illegal start of type\n      \
    \  Pair<String, > result4 = new Pair<String, >();\n                          \
    \                        ^\n/tmp/tmpeklmw32v.java:27: error: illegal start of\
    \ type\n        Pair<String, > result5 = new Pair<String, >();\n             \
    \        ^\n/tmp/tmpeklmw32v.java:27: error: illegal start of type\n        Pair<String,\
    \ > result5 = new Pair<String, >();\n                                        \
    \          ^\n/tmp/tmpeklmw32v.java:28: error: illegal start of type\n       \
    \ Pair<String, > result6 = new Pair<String, >();\n                     ^\n/tmp/tmpeklmw32v.java:28:\
    \ error: illegal start of type\n        Pair<String, > result6 = new Pair<String,\
    \ >();\n                                                  ^\n/tmp/tmpeklmw32v.java:29:\
    \ error: illegal start of type\n        Pair<String, > result7 = new Pair<String,\
    \ >();\n             "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance < 1) {\n            return result;\n        }\n        double\
    \ distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        double\
    \ distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n        double\
    \ distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n        double\
    \ distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n        double\
    \ distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n        double\
    \ distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n        double\
    \ distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n        double\
    \ distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n        double\
    \ distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n        double\
    \ distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n        double\
    \ distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n        double\
    \ distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n        double\
    \ distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n        double\
    \ distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n        double\
    \ distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n        double\
    \ distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n        double\
    \ distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n        double\
    \ distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n        double\
    \ distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n        double\
    \ distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n        double\
    \ distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n        double\
    \ distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n        double\
    \ distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n        double\
    \ distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n        double\
    \ distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n        double\
    \ distance26 = Math.abs(planet1.charAt(25) - planet\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4a9p_0x.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpo4a9p_0x.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmpo4a9p_0x.java:53:\
    \ error: ')' expected\n        double distance26 = Math.abs(planet1.charAt(25)\
    \ - planet\n                                                                ^\n\
    /tmp/tmpo4a9p_0x.java:55: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpo4a9p_0x.java:55: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpo4a9p_0x.java:55:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpo4a9p_0x.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpo4a9p_0x.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpo4a9p_0x.java:60: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpo4a9p_0x.java:60:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpo4a9p_0x.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpo4a9p_0x.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpo4a9p_0x.java:61: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpo4a9p_0x.java:61: error: illegal\
    \ s"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance1 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n \
    \       double distance2 = Math.abs(planet1.charAt(1) - planet2.charAt(1));\n\
    \        double distance3 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        double distance4 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n\
    \        double distance5 = Math.abs(planet1.charAt(4) - planet2.charAt(4));\n\
    \        double distance6 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        double distance7 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n\
    \        double distance8 = Math.abs(planet1.charAt(7) - planet2.charAt(7));\n\
    \        double distance9 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        double distance10 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n\
    \        double distance11 = Math.abs(planet1.charAt(10) - planet2.charAt(10));\n\
    \        double distance12 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        double distance13 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n\
    \        double distance14 = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n\
    \        double distance15 = Math.abs(planet1.charAt(14) - planet2.charAt(14));\n\
    \        double distance16 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        double distance17 = Math.abs(planet1.charAt(16) - planet2.charAt(16));\n\
    \        double distance18 = Math.abs(planet1.charAt(17) - planet2.charAt(17));\n\
    \        double distance19 = Math.abs(planet1.charAt(18) - planet2.charAt(18));\n\
    \        double distance20 = Math.abs(planet1.charAt(19) - planet2.charAt(19));\n\
    \        double distance21 = Math.abs(planet1.charAt(20) - planet2.charAt(20));\n\
    \        double distance22 = Math.abs(planet1.charAt(21) - planet2.charAt(21));\n\
    \        double distance23 = Math.abs(planet1.charAt(22) - planet2.charAt(22));\n\
    \        double distance24 = Math.abs(planet1.charAt(23) - planet2.charAt(23));\n\
    \        double distance25 = Math.abs(planet1.charAt(24) - planet2.charAt(24));\n\
    \        double distance26 = Math.abs(planet1.charAt(25) - planet2.charAt(25));\n\
    \        double distance\n    }\n    public static void main(String[] args) {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rhwukqt.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp2rhwukqt.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp2rhwukqt.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp2rhwukqt.java:51:\
    \ error: ';' expected\n        double distance\n                       ^\n/tmp/tmp2rhwukqt.java:58:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp2rhwukqt.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp2rhwukqt.java:58: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp2rhwukqt.java:58: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp2rhwukqt.java:59:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp2rhwukqt.java:59: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp2rhwukqt.java:59: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp2rhwukqt.java:59: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1vd6ofj9.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp1vd6ofj9.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp1vd6ofj9.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp1vd6ofj9.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmp1vd6ofj9.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp1vd6ofj9.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp1vd6ofj9.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp1vd6ofj9.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp1vd6ofj9.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp1vd6ofj9.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp1vd6ofj9.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp1vd6ofj9.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp5e5rjvgt.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5e5rjvgt.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp5e5rjvgt.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp5e5rjvgt.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmp5e5rjvgt.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmp5e5rjvgt.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp5e5rjvgt.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp5e5rjvgt.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp5e5rjvgt.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp5e5rjvgt.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmp5e5rjvgt.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmp5e5rjvgt.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Pair<String, > temp = new Pair<String, >();\n        double distance;\n\
    \        double distance1;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpl90keoiq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpl90keoiq.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpl90keoiq.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpl90keoiq.java:24:\
    \ error: illegal start of type\n        Pair<String, > temp = new Pair<String,\
    \ >();\n                     ^\n/tmp/tmpl90keoiq.java:24: error: illegal start\
    \ of type\n        Pair<String, > temp = new Pair<String, >();\n             \
    \                                  ^\n/tmp/tmpl90keoiq.java:116: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpl90keoiq.java:116:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpl90keoiq.java:116: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpl90keoiq.java:116:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpl90keoiq.java:117: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpl90keoiq.java:117: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpl90keoiq.java:117: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \          "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ybu4547.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp1ybu4547.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp1ybu4547.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp1ybu4547.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp1ybu4547.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp1ybu4547.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp1ybu4547.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp1ybu4547.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp1ybu4547.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp1ybu4547.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp1ybu4547.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp1ybu4547.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >(planet1,\
    \ planet2);\n        List<String> list = new ArrayList<>();\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(planet2);\n\
    \        list.add(planet1);\n        list.add(planet2);\n        list.add(planet1);\n\
    \        list.add(planet2);\n        list.add(planet1);\n        list.add(\n \
    \   }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9s3ujfzd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9s3ujfzd.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >(planet1, planet2);\n                     ^\n/tmp/tmp9s3ujfzd.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >(planet1, planet2);\n                                               ^\n/tmp/tmp9s3ujfzd.java:95:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp9s3ujfzd.java:95:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmp9s3ujfzd.java:96: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp9s3ujfzd.java:96: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp9s3ujfzd.java:96: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp9s3ujfzd.java:96: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp9s3ujfzd.java:101:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp9s3ujfzd.java:101: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp9s3ujfzd.java:101: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp9s3ujfzd.java:101: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp9s3ujfzd.java:102:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance1;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance9;\n        double distance10;\n        double distance11;\n\
    \        double distance12;\n        double distance13;\n        double distance14;\n\
    \        double distance15;\n        double distance16;\n        double distance17;\n\
    \        double distance18;\n        double distance19;\n        double distance20;\n\
    \        double distance21;\n        double distance22;\n        double distance23;\n\
    \        double distance24;\n        double distance25;\n        double distance26;\n\
    \        double distance27;\n        double distance28;\n        double distance29;\n\
    \        double distance30;\n        double distance31;\n        double distance32;\n\
    \        double distance33;\n        double distance34;\n        double distance35;\n\
    \        double distance36;\n        double distance37;\n        double distance38;\n\
    \        double distance39;\n        double distance40;\n        double distance41;\n\
    \        double distance42;\n        double distance43;\n        double distance44;\n\
    \        double distance45;\n        double distance46;\n        double distance47;\n\
    \        double distance48;\n        double distance49;\n        double distance50;\n\
    \        double distance51;\n        double distance52;\n        double distance53;\n\
    \        double distance54;\n        double distance55;\n        double distance56;\n\
    \        double distance57;\n        double distance58;\n        double distance59;\n\
    \        double distance60;\n        double distance61;\n        double distance62;\n\
    \        double distance63;\n        double distance64;\n        double distance65;\n\
    \        double distance66;\n        double distance67;\n        double distance68;\n\
    \        double distance69;\n        double distance70;\n        double distance71;\n\
    \        double distance72;\n        double distance73;\n        double distance74;\n\
    \        double distance75;\n        double distance76;\n        double distance77;\n\
    \        double distance78;\n        double distance79;\n        double distance80;\n\
    \        double distance81;\n        double distance82;\n        double distance83;\n\
    \        double distance84;\n        double distance85;\n        double distance86;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp3914p1p5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3914p1p5.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp3914p1p5.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp3914p1p5.java:117:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp3914p1p5.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp3914p1p5.java:117: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp3914p1p5.java:117: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp3914p1p5.java:118:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp3914p1p5.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp3914p1p5.java:118: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp3914p1p5.java:118: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp3914p1p5.java:119:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Phobos\");\n        planets.add(\"Deimos\"\
    );\n        planets.add(\"Io\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Ganymede\");\n        planets.add(\"Callisto\");\n        planets.add(\"Ceres\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Halley\");\n      \
    \  planets.add(\"Tycho\");\n        planets.add(\"Einstein\");\n        planets.add(\"\
    Bohr\");\n        planets.add(\"Galaxy\");\n        planets.add(\"Cousin\");\n\
    \        planets.add(\"Callisto\");\n        planets.add(\"Ceres\");\n       \
    \ planets.add(\"Pluto\");\n        planets.add(\"Halley\");\n        planets.add(\"\
    Tycho\");\n        planets.add(\"Einstein\");\n        planets.add(\"Bohr\");\n\
    \        planets.add(\"Galaxy\");\n        planets.add(\"Cousin\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Tycho\");\n        planets.add(\"\
    Einstein\");\n        planets.add(\"Bohr\");\n        planets.add(\"Galaxy\");\n\
    \        planets.add(\"Cousin\");\n        planets.add(\"Callisto\");\n      \
    \  planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Tycho\");\n        planets.add(\"Einstein\"\
    );\n        planets.add(\"Bohr\");\n        planets.add(\"Galaxy\");\n       \
    \ planets.add(\"Cousin\");\n        planets.add(\"Callisto\");\n        planets.add(\"\
    Ceres\");\n        planets.add(\"Plu\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqx6x9rz0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqx6x9rz0.java:75: error: unclosed string literal\n      \
    \  planets.add(\"Plu\n                    ^\n/tmp/tmpqx6x9rz0.java:75: error:\
    \ ';' expected\n        planets.add(\"Plu\n                        ^\n/tmp/tmpqx6x9rz0.java:77:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpqx6x9rz0.java:77: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpqx6x9rz0.java:77: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpqx6x9rz0.java:77: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpqx6x9rz0.java:77:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpqx6x9rz0.java:82: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpqx6x9rz0.java:82:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpqx6x9rz0.java:82: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpqx6x9rz0.java:82:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpqx6x9rz0.java:83: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpqx6x9rz0.java:83: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double angle = Math.acos(planet1.length() / distance);\n     \
    \   double angle2 = Math.acos(planet2.length() / distance);\n        double angleDiff\
    \ = angle - angle2;\n        double angleDiff2 = angle2 - angle;\n        if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Neptune\")) {\n            result.first\
    \ = \"Mercury\";\n            result.second = \"\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            result.first\
    \ = \"Earth\";\n            result.second = \"\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            result.first\
    \ = \"Mercury\";\n            result.second = \"Uranus\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            result.first\
    \ = \"Earth\";\n            result.second = \"Uranus\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Venus\")) {\n            result.first\
    \ = \"Mercury\";\n            result.second = \"Venus\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Venus\")) {\n            result.first =\
    \ \"Earth\";\n            result.second = \"Venus\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Mars\")) {\n            result.first\
    \ = \"Mercury\";\n            result.second = \"Mars\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mars\")) {\n            result.first =\
    \ \"Earth\";\n            result.second = \"Mars\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Jupiter\")) {\n            result.first\
    \ = \"Mercury\";\n            result.second = \"Jupiter\";\n        } else if\
    \ (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"Jupiter\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"Jupiter\"\
    ;\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            result.first = \"Mercury\";\n            result.second\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9g1ld4ld.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9g1ld4ld.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp9g1ld4ld.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp9g1ld4ld.java:61:\
    \ error: not a statement\n            result.second\n                  ^\n/tmp/tmp9g1ld4ld.java:61:\
    \ error: ';' expected\n            result.second\n                         ^\n\
    /tmp/tmp9g1ld4ld.java:63: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmp9g1ld4ld.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp9g1ld4ld.java:63: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp9g1ld4ld.java:63: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp9g1ld4ld.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp9g1ld4ld.java:68:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp9g1ld4ld.java:68: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp9g1ld4ld.java:68: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp9g1ld4ld.java:68: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp9g1ld4ld.j"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjspmuvu4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpjspmuvu4.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpjspmuvu4.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpjspmuvu4.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpjspmuvu4.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpjspmuvu4.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpjspmuvu4.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpjspmuvu4.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpjspmuvu4.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpjspmuvu4.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpjspmuvu4.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpjspmuvu4.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n       \
    \ planets.add(\"Pallas\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Umbriel\");\n        planets.add(\"Niobium\");\n        planets.add(\"Copernicium\"\
    );\n        planets.add(\"Scandium\");\n        planets.add(\"Titan\");\n    \
    \    planets.add(\"Vanadium\");\n        planets.add(\"Chromium\");\n        planets.add(\"\
    Manganese\");\n        planets.add(\"Iris\");\n        planets.add(\"Tungsten\"\
    );\n        planets.add(\"Bismuth\");\n        planets.add(\"Palladium\");\n \
    \       planets.add(\"Caesium\");\n        planets.add(\"Barium\");\n        planets.add(\"\
    Cerium\");\n        planets.add(\"Praseodymium\");\n        planets.add(\"Neodymium\"\
    );\n        planets.add(\"Promethium\");\n        planets.add(\"Samarium\");\n\
    \        planets.add(\"Europium\");\n        planets.add(\"Gadolinium\");\n  \
    \      planets.add(\"Terbium\");\n        planets.add(\"Dysprosium\");\n     \
    \   planets.add(\"Holmium\");\n        planets.add(\"Erbium\");\n        planets.add(\"\
    Thulium\");\n        planets.add(\"Ytterbium\");\n        planets.add(\"Lutetium\"\
    );\n        planets.add(\"Hafnium\");\n        planets.add(\"Tantalum\");\n  \
    \      planets.add(\"Tungsten\");\n        planets.add(\"Rhenium\");\n       \
    \ planets.add(\"Osmium\");\n        planets.add(\"Iridium\");\n        planets.add(\"\
    Plat\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpykllf129.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpykllf129.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpykllf129.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpykllf129.java:71:\
    \ error: unclosed string literal\n        planets.add(\"Plat\n               \
    \     ^\n/tmp/tmpykllf129.java:71: error: ';' expected\n        planets.add(\"\
    Plat\n                         ^\n/tmp/tmpykllf129.java:73: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpykllf129.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpykllf129.java:73: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpykllf129.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpykllf129.java:73: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpykllf129.java:78: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpykllf129.java:78: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpykllf129.java:78: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpykllf129.java:78:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpykllf129.java:7"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        \n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            result.first = \"Saturn\";\n            result.second\
    \ = \"\";\n        } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            result.first = \"Venus\";\n            result.second\
    \ = \"\";\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            result.first = \"Venus\";\n            result.second\
    \ = \"Earth\";\n        } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            result.first = \"Mars\";\n            result.second\
    \ = \"Jupiter\";\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") &&\
    \ planet2.equalsIgnoreCase(\"Neptune\")) {\n            result.first = \"Saturn\"\
    ;\n            result.second = \"Uranus\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            result.first\
    \ = \"Venus\";\n            result.second = \"Mars\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            result.first\
    \ = \"Venus\";\n            result.second = \"Jupiter\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            result.first\
    \ = \"Mars\";\n            result.second = \"Jupiter\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Neptune\")) {\n            result.first\
    \ = \"Saturn\";\n            result.second = \"Neptune\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            result.first\
    \ = \"Venus\";\n            result.second = \"Mars\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            result.first\
    \ = \"Venus\";\n            result.second = \"Jupiter\";\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            result.first\
    \ = \"Mars\";\n            result.second = \"Jupiter\";\n        } else if (\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdd1k37vs.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpdd1k37vs.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpdd1k37vs.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpdd1k37vs.java:64:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmpdd1k37vs.java:65:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpdd1k37vs.java:65: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpdd1k37vs.java:65: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpdd1k37vs.java:65: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpdd1k37vs.java:65:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpdd1k37vs.java:70: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpdd1k37vs.java:70:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpdd1k37vs.java:70: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpdd1k37vs.java:70:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpdd1k37vs.java:71: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double angle = Math.acos(planet1.length() / distance);\n     \
    \   double angle2 = Math.acos(planet2.length() / distance);\n        double angleDiff\
    \ = angle - angle2;\n        double angleDiff2 = angle2 - angle;\n        double\
    \ angleDiff3 = angleDiff - angleDiff2;\n        double angleDiff4 = angleDiff2\
    \ - angleDiff;\n        double angleDiff5 = angleDiff3 - angleDiff4;\n       \
    \ double angleDiff6 = angleDiff4 - angleDiff5;\n        double angleDiff7 = angleDiff5\
    \ - angleDiff6;\n        double angleDiff8 = angleDiff6 - angleDiff7;\n      \
    \  double angleDiff9 = angleDiff7 - angleDiff8;\n        double angleDiff10 =\
    \ angleDiff8 - angleDiff9;\n        double angleDiff11 = angleDiff9 - angleDiff10;\n\
    \        double angleDiff12 = angleDiff10 - angleDiff11;\n        double angleDiff13\
    \ = angleDiff11 - angleDiff12;\n        double angleDiff14 = angleDiff12 - angleDiff13;\n\
    \        double angleDiff15 = angleDiff13 - angleDiff14;\n        double angleDiff16\
    \ = angleDiff14 - angleDiff15;\n        double angleDiff17 = angleDiff15 - angleDiff16;\n\
    \        double angleDiff18 = angleDiff16 - angleDiff17;\n        double angleDiff19\
    \ = angleDiff17 - angleDiff18;\n        double angleDiff20 = angleDiff18 - angleDiff19;\n\
    \        double angleDiff21 = angleDiff19 - angleDiff20;\n        double angleDiff22\
    \ = angleDiff20 - angleDiff21;\n        double angleDiff23 = angleDiff21 - angleDiff22;\n\
    \        double angleDiff24 = angleDiff22 - angleDiff23;\n        double angleDiff25\
    \ = angleDiff23 - angleDiff24;\n        double angleDiff26 = angleDiff24 - angleDiff25;\n\
    \        double angleDiff27 = angleDiff25 - angleDiff26;\n        double angleDiff28\
    \ = angleDiff26 - angleDiff27;\n        double angleDiff29 = angleDiff27 - angleDiff28;\n\
    \        double angleDiff30 = angleDiff28 - angleDiff29;\n        double angleDiff31\
    \ = angleDiff29 - angleDiff30;\n        double angleDiff32 = angleDiff30 - angleDiff31;\n\
    \        double angleDiff33 = angleDiff\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwvsjmetp.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpwvsjmetp.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpwvsjmetp.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpwvsjmetp.java:59:\
    \ error: ';' expected\n        double angleDiff33 = angleDiff\n              \
    \                        ^\n/tmp/tmpwvsjmetp.java:66: error: ')' expected\n  \
    \  assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpwvsjmetp.java:66:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpwvsjmetp.java:66: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpwvsjmetp.java:66:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpwvsjmetp.java:67: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpwvsjmetp.java:67: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpwvsjmetp.java:67: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpwvsjmetp.java:67:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n   \
    \         pair = Pair.of(\"Venus\");\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Earth\")) {\n            pair = Pair.of(\"Mercury\");\n\
    \        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n\
    \            pair = Pair.of(\"Jupiter\", \"Saturn\");\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mars\")) {\n            pair = Pair.of(\"Mercury\"\
    , \"Jupiter\", \"Saturn\");\n        } else if (planet1.equals(\"Mercury\") &&\
    \ planet2.equals(\"Jupiter\")) {\n            pair = Pair.of(\"Saturn\", \"Uranus\"\
    );\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\"\
    )) {\n            pair = Pair.of(\"Mercury\", \"Saturn\", \"Uranus\");\n     \
    \   } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n\
    \            pair = Pair.of(\"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Saturn\")) {\n            pair = Pair.of(\"Mercury\"\
    , \"Uranus\", \"Neptune\");\n        } else if (planet1.equals(\"Mercury\") &&\
    \ planet2.equals(\"Uranus\")) {\n            pair = Pair.of(\"Neptune\");\n  \
    \      } else if (planet1.equals(\"Venus\") && planet2.equals(\"Uranus\")) {\n\
    \            pair = Pair.of(\"Mercury\", \"Neptune\");\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Neptune\")) {\n            pair = Pair.of();\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Neptune\"))\
    \ {\n            pair = Pair.of(\"Mercury\");\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            pair = Pair.of(\"Mercury\"\
    , \"Neptune\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Uranus\")) {\n            pair = Pair.of(\"Mercury\", \"Uranus\", \"Neptune\"\
    );\n        } else if (planet1.equals(\"Mercur\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptt_21qbk.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmptt_21qbk.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmptt_21qbk.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmptt_21qbk.java:52:\
    \ error: unclosed string literal\n        } else if (planet1.equals(\"Mercur\n\
    \                                  ^\n/tmp/tmptt_21qbk.java:52: error: ')' expected\n\
    \        } else if (planet1.equals(\"Mercur\n                                \
    \         ^\n/tmp/tmptt_21qbk.java:54: error: illegal start of expression\n  \
    \  public static void main(String[] args) {\n    ^\n/tmp/tmptt_21qbk.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmptt_21qbk.java:54: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmptt_21qbk.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmptt_21qbk.java:54: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmptt_21qbk.java:59: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmptt_21qbk.java:59: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmptt_21qbk.java:59: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmptt_21qbk.java:59:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.length() - planet2.length\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3vx_7f6w.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3vx_7f6w.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp3vx_7f6w.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp3vx_7f6w.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmp3vx_7f6w.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp3vx_7f6w.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp3vx_7f6w.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp3vx_7f6w.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp3vx_7f6w.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp3vx_7f6w.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmp3vx_7f6w.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3vx_7f6w.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3vx_7f6w.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3vx_7f6w.java:61: error: ')' e"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Phobos\");\n        planets.add(\"Deimos\"\
    );\n        planets.add(\"Io\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Ganymede\");\n        planets.add(\"Callisto\");\n        planets.add(\"Ceres\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Halley\");\n      \
    \  planets.add(\"Boeing\");\n        planets.add(\"Callisto\");\n        planets.add(\"\
    Ceres\");\n        planets.add(\"Pluto\");\n        planets.add(\"Halley\");\n\
    \        planets.add(\"Boeing\");\n        planets.add(\"Callisto\");\n      \
    \  planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n        planets.add(\"\
    Halley\");\n        planets.add(\"Boeing\");\n        planets.add(\"Callisto\"\
    );\n        planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n       \
    \ planets.add(\"Halley\");\n        planets.add(\"Boeing\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Boeing\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Boeing\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n\
    \        planets.add(\"Halley\");\n        planets.add(\"Boeing\");\n        planets.add(\"\
    Callisto\");\n        planets.add(\"Ceres\");\n        planets.add(\"Pluto\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmcll6h5p.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpmcll6h5p.java:81: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpmcll6h5p.java:81: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpmcll6h5p.java:81: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpmcll6h5p.java:81:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpmcll6h5p.java:82: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpmcll6h5p.java:82: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpmcll6h5p.java:82: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpmcll6h5p.java:82:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpmcll6h5p.java:83: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpmcll6h5p.java:83:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87;\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpb8754xe0.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpb8754xe0.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmpb8754xe0.java:117:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpb8754xe0.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpb8754xe0.java:117: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpb8754xe0.java:117: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpb8754xe0.java:118:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpb8754xe0.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpb8754xe0.java:118: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpb8754xe0.java:118: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpb8754xe0.java:119:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmpb8754xe0.java:119"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        // Your code goes here\n        \n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp09vav3jn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp09vav3jn.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp09vav3jn.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp09vav3jn.java:35:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp09vav3jn.java:35: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp09vav3jn.java:35: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp09vav3jn.java:35: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp09vav3jn.java:36:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp09vav3jn.java:36: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp09vav3jn.java:36: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp09vav3jn.java:36: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp09vav3jn.java:37:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance < 1) {\n            return pair;\n        }\n        double\
    \ distance2 = Math.abs(planet1.charAt(0) - planet2.charAt(0));\n        if (distance2\
    \ < 1) {\n            return pair;\n        }\n        double distance3 = Math.abs(planet1.charAt(1)\
    \ - planet2.charAt(1));\n        if (distance3 < 1) {\n            return pair;\n\
    \        }\n        double distance4 = Math.abs(planet1.charAt(2) - planet2.charAt(2));\n\
    \        if (distance4 < 1) {\n            return pair;\n        }\n        double\
    \ distance5 = Math.abs(planet1.charAt(3) - planet2.charAt(3));\n        if (distance5\
    \ < 1) {\n            return pair;\n        }\n        double distance6 = Math.abs(planet1.charAt(4)\
    \ - planet2.charAt(4));\n        if (distance6 < 1) {\n            return pair;\n\
    \        }\n        double distance7 = Math.abs(planet1.charAt(5) - planet2.charAt(5));\n\
    \        if (distance7 < 1) {\n            return pair;\n        }\n        double\
    \ distance8 = Math.abs(planet1.charAt(6) - planet2.charAt(6));\n        if (distance8\
    \ < 1) {\n            return pair;\n        }\n        double distance9 = Math.abs(planet1.charAt(7)\
    \ - planet2.charAt(7));\n        if (distance9 < 1) {\n            return pair;\n\
    \        }\n        double distance10 = Math.abs(planet1.charAt(8) - planet2.charAt(8));\n\
    \        if (distance10 < 1) {\n            return pair;\n        }\n        double\
    \ distance11 = Math.abs(planet1.charAt(9) - planet2.charAt(9));\n        if (distance11\
    \ < 1) {\n            return pair;\n        }\n        double distance12 = Math.abs(planet1.charAt(10)\
    \ - planet2.charAt(10));\n        if (distance12 < 1) {\n            return pair;\n\
    \        }\n        double distance13 = Math.abs(planet1.charAt(11) - planet2.charAt(11));\n\
    \        if (distance13 < 1) {\n            return pair;\n        }\n        double\
    \ distance14 = Math.abs(planet1.charAt(12) - planet2.charAt(12));\n        if\
    \ (distance14 < 1) {\n            return pair;\n        }\n        double distance15\
    \ = Math.abs(planet1.charAt(13) - planet2.charAt(13));\n        if (distance15\
    \ < 1) {\n            return pair;\n        }\n        double distance16 = Math.abs(planet1.charAt(14)\
    \ - planet2.charAt(14));\n        if (distance16 < 1) {\n            return pair;\n\
    \        }\n        double distance17 = Math.abs(planet1.charAt(15) - planet2.charAt(15));\n\
    \        if (distance17 < \n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0mpykvy4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp0mpykvy4.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmp0mpykvy4.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmp0mpykvy4.java:90:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmp0mpykvy4.java:91:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp0mpykvy4.java:91: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp0mpykvy4.java:91: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp0mpykvy4.java:91: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp0mpykvy4.java:91:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp0mpykvy4.java:96: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp0mpykvy4.java:96:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp0mpykvy4.java:96: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp0mpykvy4.java:96:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp0mpykvy4.java:97: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        Set<String>\
    \ orbits = new HashSet<String>();\n        orbits.add(\"Mercury\");\n        orbits.add(\"\
    Venus\");\n        orbits.add(\"Earth\");\n        orbits.add(\"Mars\");\n   \
    \     orbits.add(\"Jupiter\");\n        orbits.add(\"Saturn\");\n        orbits.add(\"\
    Uranus\");\n        orbits.add(\"Neptune\");\n        orbits.add(planet1);\n \
    \       orbits.add(planet2);\n        Set<String> orbits1 = new HashSet<String>();\n\
    \        orbits1.add(\"Mercury\");\n        orbits1.add(\"Venus\");\n        orbits1.add(\"\
    Earth\");\n        orbits1.add(\"Mars\");\n        orbits1.add(\"Jupiter\");\n\
    \        orbits1.add(\"Saturn\");\n        orbits1.add(\"Uranus\");\n        orbits1.add(\"\
    Neptune\");\n        orbits1.add(planet2);\n        orbits1.add(planet1);\n  \
    \      Set<String> orbits2 = new HashSet<String>();\n        orbits2.add(\"Mercury\"\
    );\n        orbits2.add(\"Venus\");\n        orbits2.add(\"Earth\");\n       \
    \ orbits2.add(\"Mars\");\n        orbits2.add(\"Jupiter\");\n        orbits2.add(\"\
    Saturn\");\n        orbits2.add(\"Uranus\");\n        orbits2.add(\"Neptune\"\
    );\n        orbits2.add(planet2);\n        orbits2.add(planet1);\n        Set<String>\
    \ orbits3 = new HashSet<String>();\n        orbits3.add(\"Mercury\");\n      \
    \  orbits3.add(\"Venus\");\n        orbits3.add(\"Earth\");\n        orbits3.add(\"\
    Mars\");\n        orbits3.add(\"Jupiter\");\n        orbits3.add(\"Saturn\");\n\
    \        orbits3.add(\"Uranus\");\n        orbits3.add(\"Neptune\");\n       \
    \ orbits3.add(planet\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf6qop4sy.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpf6qop4sy.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpf6qop4sy.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpf6qop4sy.java:77:\
    \ error: ')' expected\n        orbits3.add(planet\n                          ^\n\
    /tmp/tmpf6qop4sy.java:79: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpf6qop4sy.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpf6qop4sy.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpf6qop4sy.java:79: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpf6qop4sy.java:79:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpf6qop4sy.java:84: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpf6qop4sy.java:84:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpf6qop4sy.java:84: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpf6qop4sy.java:84:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpf6qop4sy.java:85: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n      "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Venus\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Mars\")) {\n            result = new Pair<String, >(planet1, planet2);\n     \
    \   } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Venus\") && planet2.equals(\"Mercury\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mars\")) {\n            result = new Pair<String,\
    \ >(planet1, planet2);\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Jupiter\")) {\n            result = new Pair<String, >(planet1, planet2);\n  \
    \      } else if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\")) {\n\
    \            result = new Pair<String, >(planet1, planet2);\n        } else if\
    \ (planet1.equals(\"Venus\") && planet2.equals(\"Uranus\")) {\n            result\
    \ = new Pair<String, >(planet1, planet2);\n        } else if (planet\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"),\
    \ (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpixmlrboq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpixmlrboq.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >(\"\", \"\");\n                     ^\n/tmp/tmpixmlrboq.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >(\"\", \"\");\n                                                 ^\n/tmp/tmpixmlrboq.java:25:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:27:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:29:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:31:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:33:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:35:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:37:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:39:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:41:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:43:\
    \ error: illegal start of type\n            result = new Pair<String, >(planet1,\
    \ planet2);\n                                      ^\n/tmp/tmpixmlrboq.java:45:\
    \ error: illegal start"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2));\n        planets.stream().filter(planet -> planet.equals(planet1)\
    \ || planet.equals(planet2)).forEach(planet -> {\n            try {\n        \
    \        String planet1Orbit = getOrbit(planet1);\n                String planet2Orbit\
    \ = getOrbit(planet2);\n                String sunOrbit = getOrbit(\"Sun\");\n\
    \                double distance = planet1Orbit.compareTo(planet2Orbit);\n   \
    \             double distance2 = planet1Orbit.compareTo(sunOrbit);\n         \
    \       if (distance < distance2) {\n                    result.first(planet);\n\
    \                }\n            } catch (NoSuchElementException e) {\n       \
    \         result.first(\"\");\n            }\n        });\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzow366sj.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpzow366sj.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpzow366sj.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpzow366sj.java:50:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpzow366sj.java:50: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpzow366sj.java:50: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpzow366sj.java:50: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpzow366sj.java:51:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpzow366sj.java:51: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpzow366sj.java:51: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpzow366sj.java:51: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpzow366sj.java:52:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        List<String> planets = new ArrayList<>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        planets.stream().filter(planet\
    \ -> planet.equals(planet1) || planet.equals(planet2)).forEach(planet -> {\n \
    \           try {\n                double distance = planetDistance(planet1, planet2);\n\
    \                result.first(planet);\n                result.second(distance);\n\
    \            } catch (Exception e) {\n                result.first(\"\");\n  \
    \              result.second(0);\n            }\n        });\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6jzwezu7.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6jzwezu7.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp6jzwezu7.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp6jzwezu7.java:53:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp6jzwezu7.java:53: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp6jzwezu7.java:53: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp6jzwezu7.java:53: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp6jzwezu7.java:54:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp6jzwezu7.java:54: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp6jzwezu7.java:54: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp6jzwezu7.java:54: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp6jzwezu7.java:55:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqb0nf2gn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqb0nf2gn.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpqb0nf2gn.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpqb0nf2gn.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpqb0nf2gn.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpqb0nf2gn.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpqb0nf2gn.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpqb0nf2gn.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpqb0nf2gn.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpqb0nf2gn.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpqb0nf2gn.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpqb0nf2gn.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >(planet1,\
    \ planet2);\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        double distance2 = Math.abs(planet1.length() - planet2.length());\n \
    \       double distance3 = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance4 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance5 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance6 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance7 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance8 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance9 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance10 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance12 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance13 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance14 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance15 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance16 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance17 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance18 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance19 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance20 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance21 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance22 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance23 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance24 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance25 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance26 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance27 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance28 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance29 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance30 = Math.abs(planet1.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn4190sc5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpn4190sc5.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >(planet1, planet2);\n                     ^\n/tmp/tmpn4190sc5.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >(planet1, planet2);\n                                               ^\n/tmp/tmpn4190sc5.java:53:\
    \ error: <identifier> expected\n        double distance30 = Math.abs(planet1.\n\
    \                                             ^\n/tmp/tmpn4190sc5.java:54: error:\
    \ ';' expected\n    }\n     ^\n/tmp/tmpn4190sc5.java:55: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n           ^\n\
    /tmp/tmpn4190sc5.java:55: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpn4190sc5.java:55: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpn4190sc5.java:55: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpn4190sc5.java:60:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpn4190sc5.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpn4190sc5.java:60: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpn4190sc5.java:60: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpn4190sc5.java:61:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rsnc8h5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp8rsnc8h5.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmp8rsnc8h5.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp8rsnc8h5.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp8rsnc8h5.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp8rsnc8h5.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp8rsnc8h5.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp8rsnc8h5.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp8rsnc8h5.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp8rsnc8h5.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp8rsnc8h5.java:283:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmp8rsnc8h5.java:283"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 2) {\n            result.first(planet1);\n           \
    \ result.second(planet2);\n            return result;\n        }\n        double\
    \ distance2 = Math.abs(planet1.length() - planet2.length());\n        if (distance2\
    \ < 2) {\n            result.first(planet2);\n            result.second(planet1);\n\
    \            return result;\n        }\n        double distance3 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance3 < 2) {\n            result.first(planet1);\n\
    \            result.second(planet2);\n            return result;\n        }\n\
    \        double distance4 = Math.abs(planet1.length() - planet2.length());\n \
    \       if (distance4 < 2) {\n            result.first(planet2);\n           \
    \ result.second(planet1);\n            return result;\n        }\n        double\
    \ distance5 = Math.abs(planet1.length() - planet2.length());\n        if (distance5\
    \ < 2) {\n            result.first(planet1);\n            result.second(planet2);\n\
    \            return result;\n        }\n        double distance6 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance6 < 2) {\n            result.first(planet2);\n\
    \            result.second(planet1);\n            return result;\n        }\n\
    \        double distance7 = Math.abs(planet1.length() - planet2.length());\n \
    \       if (distance7 < 2) {\n            result.first(planet1);\n           \
    \ result.second(planet2);\n            return result;\n        }\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        if (distance8\
    \ < 2) {\n            result.first(planet2);\n            result.second(planet1);\n\
    \            return result;\n        }\n        double distance9 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance9 < 2) {\n            result.first(planet1);\n\
    \            result.second(planet2);\n            return result;\n        }\n\
    \        double distance10 = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance10 < 2) {\n            result.first(planet2);\n         \
    \   result.second(planet1);\n            return result;\n        }\n        double\
    \ distance11 = Math.abs(planet1.length() - planet2.length());\n        if (distance11\
    \ < 2) {\n            result.first(planet1);\n            result.second(planet2);\n\
    \            return result;\n        }\n        double distance12 = Math.abs(planet1.length()\
    \ - planet2.length());\n        if (distance12 < 2) {\n            result.first(planet2);\n\
    \            result.second(planet1);\n            return result;\n        }\n\
    \        double distance13 = Math.abs(plan\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3toa0y02.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3toa0y02.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp3toa0y02.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp3toa0y02.java:96:\
    \ error: ')' expected\n        double distance13 = Math.abs(plan\n           \
    \                              ^\n/tmp/tmp3toa0y02.java:98: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp3toa0y02.java:98:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp3toa0y02.java:98: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp3toa0y02.java:98:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp3toa0y02.java:98: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp3toa0y02.java:103: error: ')' expected\n    assert(bf((\"Earth\"\
    ), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                     \
    \                                  ^\n/tmp/tmp3toa0y02.java:103: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3toa0y02.java:103: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3toa0y02.java:103:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3toa0y02.java:104: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpfvvgczq4.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpfvvgczq4.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpfvvgczq4.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpfvvgczq4.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpfvvgczq4.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpfvvgczq4.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpfvvgczq4.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpfvvgczq4.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpfvvgczq4.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpfvvgczq4.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpfvvgczq4.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpfvvgczq4.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmrr9r56f.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpmrr9r56f.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpmrr9r56f.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpmrr9r56f.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmpmrr9r56f.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmpmrr9r56f.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpmrr9r56f.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpmrr9r56f.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpmrr9r56f.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpmrr9r56f.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpmrr9r56f.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpmrr9r56f.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9vopsd_u.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9vopsd_u.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp9vopsd_u.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp9vopsd_u.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp9vopsd_u.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp9vopsd_u.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp9vopsd_u.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp9vopsd_u.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp9vopsd_u.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp9vopsd_u.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp9vopsd_u.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp9vopsd_u.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpipy99pey.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpipy99pey.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpipy99pey.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpipy99pey.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpipy99pey.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpipy99pey.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpipy99pey.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpipy99pey.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpipy99pey.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpipy99pey.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpipy99pey.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpipy99pey.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpipy99pey.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpipy99pey.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1cpv1i0y.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp1cpv1i0y.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp1cpv1i0y.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp1cpv1i0y.java:281:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp1cpv1i0y.java:281: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp1cpv1i0y.java:281: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp1cpv1i0y.java:281: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp1cpv1i0y.java:282:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp1cpv1i0y.java:282: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp1cpv1i0y.java:282: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp1cpv1i0y.java:282: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp1cpv1i0y.java:283:\
    \ error: ')' expected"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result.first = \"Saturn\";\n            result.second\
    \ = \"Uranus\";\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Mercury\")) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n            result.second = \"Earth\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Mars\";\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\")) {\n\
    \            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\"))\
    \ {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Neptune\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Earth\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Mars\"))\
    \ {\n            result.first = \"Mars\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Saturn\"\
    )) {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Earth\")) {\n            result.first\n    }\n\
    \    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"),\
    \ (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpkac1qetd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpkac1qetd.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpkac1qetd.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpkac1qetd.java:62:\
    \ error: not a statement\n            result.first\n                  ^\n/tmp/tmpkac1qetd.java:62:\
    \ error: ';' expected\n            result.first\n                        ^\n/tmp/tmpkac1qetd.java:64:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkac1qetd.java:64: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpkac1qetd.java:64:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpkac1qetd.java:64: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpkac1qetd.java:64:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkac1qetd.java:69: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpkac1qetd.java:69:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpkac1qetd.java:69: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpkac1qetd.java:69:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpkac1qetd.java"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<>();\n\
    \        Set<String> planets = new HashSet<>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        planets.stream().filter(planet -> planet.equals(planet1)\
    \ || planet.equals(planet2)).forEach(planet -> {\n            try {\n        \
    \        double distance = planetDistance(planet1, planet);\n                result.first(planet);\n\
    \                result.second(distance);\n            } catch (Exception e) {\n\
    \                result.first(planet);\n                result.second(Double.MAX_VALUE);\n\
    \            }\n        });\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90qjglgg.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp90qjglgg.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<>();\n                     ^\n/tmp/tmp90qjglgg.java:45:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp90qjglgg.java:45: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp90qjglgg.java:45: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp90qjglgg.java:45: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp90qjglgg.java:46:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp90qjglgg.java:46: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp90qjglgg.java:46: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp90qjglgg.java:46: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp90qjglgg.java:47:\
    \ error: ')' expected\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \    ^\n/tmp/tmp90qjglgg.java:47: error: i"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptcy92bdz.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmptcy92bdz.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmptcy92bdz.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmptcy92bdz.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmptcy92bdz.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmptcy92bdz.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmptcy92bdz.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmptcy92bdz.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmptcy92bdz.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmptcy92bdz.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmptcy92bdz.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmptcy92bdz.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Venus\";\n            result.second = \"\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n            result.second = \"\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Venus\";\n            result.second = \"\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Uranus\"))\
    \ {\n            result.first = \"Venus\";\n            result.second = \"\";\n\
    \        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n\
    \            result.first = \"Earth\";\n            result.second = \"Mars\";\n\
    \        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Earth\";\n            result.second = \"Mars\";\n\
    \        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"))\
    \ {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\"))\
    \ {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\"))\
    \ {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Earth\";\n            result.second = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Mercur\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6vg84d9q.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp6vg84d9q.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp6vg84d9q.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp6vg84d9q.java:69:\
    \ error: unclosed string literal\n        } else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Mercur\n                                               \
    \                ^\n/tmp/tmp6vg84d9q.java:69: error: ')' expected\n        } else\
    \ if (planet1.equals(\"Neptune\") && planet2.equals(\"Mercur\n               \
    \                                                       ^\n/tmp/tmp6vg84d9q.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp6vg84d9q.java:71: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp6vg84d9q.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp6vg84d9q.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp6vg84d9q.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp6vg84d9q.java:76: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp6vg84d9q.java:76:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp6vg84d9q.java:76: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp6vg84d9q.java:76:\
    \ error: ';' exp"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq_icsxws.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpq_icsxws.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpq_icsxws.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpq_icsxws.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpq_icsxws.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpq_icsxws.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpq_icsxws.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpq_icsxws.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpq_icsxws.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpq_icsxws.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpq_icsxws.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpq_icsxws.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpq_icsxws.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpq_icsxws.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        List<String> planets = Arrays.asList(planet1, planet2);\n\
    \        \n        List<String> planetsBetween = new ArrayList<>();\n        \n\
    \        for(String planet : planets) {\n            \n            List<String>\
    \ planetsBetweenPlanets = new ArrayList<>();\n            \n            for(String\
    \ planetBetween : planets) {\n                \n                if(planetBetween.equals(planet))\
    \ {\n                    \n                    planetsBetweenPlanets.add(planetBetween);\n\
    \                    \n                }\n                \n            }\n  \
    \          \n            planetsBetween.retainAll(planetsBetweenPlanets);\n  \
    \          \n            planetsBetween.add(planet);\n            \n         \
    \   planetsBetweenPlanets.clear();\n            \n            planetsBetweenPlanets.add(planet);\n\
    \            \n            planetsBetweenPlanets.addAll(planetsBetween);\n   \
    \         \n            planetsBetweenPlanets.retainAll(planets);\n          \
    \  \n            planetsBetweenPlanets.add(planet);\n            \n          \
    \  planetsBetweenPlanets.addAll(planetsBetween);\n            \n            planetsBetweenPlanets.addAll(planets);\n\
    \            \n            planetsBetweenPlanets.addAll(planets);\n          \
    \  \n            planetsBetweenPlanets.addAll(planets);\n            \n      \
    \      planetsBetweenPlanets.addAll(planets);\n            \n            planetsBetweenPlanets.addAll(planets);\n\
    \            \n            planetsBetweenPlanets.addAll(planets);\n          \
    \  \n            planetsBetweenPlanets.addAll(planets);\n            \n      \
    \      planetsBetweenPlanets.addAll(planets);\n            \n            planetsBetweenPlanets.addAll(planets);\n\
    \            \n            planetsBetweenPlanets.addAll(planets);\n          \
    \  \n            planetsBetweenPlanets.addAll(planets);\n            \n      \
    \      planetsBetweenPlanets.addAll(planets);\n            \n            planetsBetweenPlanets.addAll(planets);\n\
    \            \n            planetsBetweenPlanets.addAll(planets);\n          \
    \  \n            planetsBetweenPlanets.addAll(planets);\n            \n      \
    \      planetsBetweenPlanets.addAll(planets);\n            \n            planetsBetweenPlanets.addAll(planets);\n\
    \            \n            planetsBetweenPlanets.add\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8npjbbn.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpj8npjbbn.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpj8npjbbn.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpj8npjbbn.java:93:\
    \ error: not a statement\n            planetsBetweenPlanets.add\n            \
    \                     ^\n/tmp/tmpj8npjbbn.java:93: error: ';' expected\n     \
    \       planetsBetweenPlanets.add\n                                     ^\n/tmp/tmpj8npjbbn.java:95:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpj8npjbbn.java:95: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpj8npjbbn.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpj8npjbbn.java:95: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpj8npjbbn.java:95:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpj8npjbbn.java:100: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpj8npjbbn.java:100:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpj8npjbbn.java:100: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpj8npjbbn.java:100:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                     "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance;\n\
    \        double distance2;\n        double distance3;\n        double distance4;\n\
    \        double distance5;\n        double distance6;\n        double distance7;\n\
    \        double distance8;\n        double distance;\n        double distance2;\n\
    \        double distance3;\n        double distance4;\n        double distance5;\n\
    \        double distance6;\n        double distance7;\n        double distance8;\n\
    \        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7g_vsbt.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpb7g_vsbt.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpb7g_vsbt.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpb7g_vsbt.java:131:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpb7g_vsbt.java:131: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpb7g_vsbt.java:131: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpb7g_vsbt.java:131: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpb7g_vsbt.java:132:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpb7g_vsbt.java:132: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpb7g_vsbt.java:132: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpb7g_vsbt.java:132: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpb7g_vsbt.java:133:\
    \ error: ')' expected\n    a"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        List<String> planets = new ArrayList<>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        planets.sort((p1, p2) -> {\n         \
    \   double distance = Math.abs(planet1.length() - planet2.length());\n       \
    \     double angle = Math.acos(planet1.length() / distance);\n            double\
    \ angle2 = Math.acos(planet2.length() / distance);\n            double angleDiff\
    \ = angle - angle2;\n            if (angleDiff > Math.PI) {\n                angleDiff\
    \ = 2 * Math.PI - angleDiff;\n            }\n            return angleDiff;\n \
    \       });\n        for (String planet : planets) {\n            try {\n    \
    \            Class<?> planetClass = Class.forName(planet);\n                Method\
    \ getOrbit = planetClass.getMethod(\"getOrbit\");\n                Method getDistance\
    \ = planetClass.getMethod(\"getDistance\");\n                Object orbit = getOrbit.invoke(planet1);\n\
    \                Object distance = getDistance.invoke(planet2);\n            \
    \    double distanceDouble = Double.parseDouble(distance.toString());\n      \
    \          double angleDiff = Math.abs(distanceDouble - Math.acos(orbit.toString()));\n\
    \                if (angleDiff > Math.PI) {\n                    angleDiff = 2\
    \ * Math.PI - angleDiff;\n                }\n                result.first(planet);\n\
    \                result.second(planet);\n            } catch (ClassNotFoundException\
    \ | NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\
    \ | InvocationTargetException | NumberFormatException e) {\n                e.printStackTrace();\n\
    \            }\n        }\n        return result;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9c3fxbor.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp9c3fxbor.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp9c3fxbor.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp9c3fxbor.java:63:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp9c3fxbor.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp9c3fxbor.java:63: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp9c3fxbor.java:63: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp9c3fxbor.java:64:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp9c3fxbor.java:64: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp9c3fxbor.java:64: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp9c3fxbor.java:64: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp9c3fxbor.java:65:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\"))\
    \ {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mars\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\"))\
    \ {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mars\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Venus\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Sat\n  \
    \  }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqgvfxh21.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpqgvfxh21.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpqgvfxh21.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpqgvfxh21.java:60:\
    \ error: unclosed string literal\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Sat\n                                                  \
    \             ^\n/tmp/tmpqgvfxh21.java:60: error: ')' expected\n        } else\
    \ if (planet1.equals(\"Mercury\") && planet2.equals(\"Sat\n                  \
    \                                                 ^\n/tmp/tmpqgvfxh21.java:62:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpqgvfxh21.java:62: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpqgvfxh21.java:62: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpqgvfxh21.java:62: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpqgvfxh21.java:62:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpqgvfxh21.java:67: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpqgvfxh21.java:67:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpqgvfxh21.java:67: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpqgvfxh21.java:67:\
    \ error: ';' expected\n   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n      \
    \  planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        planets.add(\"Mercury\");\n   \
    \     planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"\
    Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n\
    \        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n       \
    \ planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        planets.add(\"Mercury\");\n   \
    \     planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"\
    Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n\
    \        planets.add(\"Uranus\");\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprgyfpp2j.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmprgyfpp2j.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmprgyfpp2j.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmprgyfpp2j.java:84:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmprgyfpp2j.java:84: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmprgyfpp2j.java:84: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmprgyfpp2j.java:84: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmprgyfpp2j.java:85:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmprgyfpp2j.java:85: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmprgyfpp2j.java:85: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmprgyfpp2j.java:85: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmprgyfpp2j.java:86:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\"))\
    \ {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Mars\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Neptune\";\n        } else if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Mercury\")) {\n            result.first = \"Mercury\"\
    ;\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\"\
    )) {\n            result.first = \"Earth\";\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Venus\")) {\n            result.first = \"Mars\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Venus\")) {\n\
    \            result.first = \"Jupiter\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Venus\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Venus\"))\
    \ {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Venus\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Venus\"\
    )) {\n            result.first = \"Mercury\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Mars\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Mars\";\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Mars\")) {\n            result.first = \"Jupiter\";\n  \
    \      } else if (planet1.equals(\"Jupiter\") && planet\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp3hc2505.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpp3hc2505.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpp3hc2505.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpp3hc2505.java:60:\
    \ error: ')' expected\n        } else if (planet1.equals(\"Jupiter\") && planet\n\
    \                                                      ^\n/tmp/tmpp3hc2505.java:61:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpp3hc2505.java:67: error:\
    \ ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpp3hc2505.java:67:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpp3hc2505.java:67: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpp3hc2505.java:67:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpp3hc2505.java:68: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpp3hc2505.java:68: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpp3hc2505.java:68: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpp3hc2505.j"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(planet1);\n        planets.add(planet2);\n        Collections.sort(planets);\n\
    \        List<String> results = new ArrayList<>();\n        for (String planet\
    \ : planets) {\n            String sun = sun(planet);\n            String orbit1\
    \ = orbit(planet);\n            String orbit2 = orbit(planet2);\n            if\
    \ (orbit1.equals(sun) && orbit2.equals(sun)) {\n                results.add(planet);\n\
    \            }\n        }\n        if (results.isEmpty()) {\n            return\
    \ new Pair<>(\"\", \"\");\n        }\n        Collections.sort(results);\n   \
    \     return new Pair<>(results.get(0), results.get(1));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6lsu6y9.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpj6lsu6y9.java:48: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpj6lsu6y9.java:48: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpj6lsu6y9.java:48: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpj6lsu6y9.java:48:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpj6lsu6y9.java:49: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpj6lsu6y9.java:49: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpj6lsu6y9.java:49: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpj6lsu6y9.java:49:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpj6lsu6y9.java:50: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpj6lsu6y9.java:50:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Saturn\";\n            result.second = \"Uranus\"\
    ;\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            result.first = \"Venus\";\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result.first = \"Venus\"\
    ;\n            result.second = \"Earth\";\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            result.first = \"Earth\"\
    ;\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n\
    \            result.first = \"Mars\";\n        } else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\";\n\
    \        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\")) {\n\
    \            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\")) {\n            result.first = \"Jupiter\"\
    ;\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\"))\
    \ {\n            result.first = \"Saturn\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.first = \"Saturn\"\
    ;\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) {\n            result.first = \"Uranus\";\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Neptune\")) {\n            result.first = \"Neptune\"\
    ;\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            result.first = \"Neptune\";\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxeyhe6ad.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxeyhe6ad.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpxeyhe6ad.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpxeyhe6ad.java:65:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpxeyhe6ad.java:65: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpxeyhe6ad.java:65: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpxeyhe6ad.java:65: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpxeyhe6ad.java:66:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpxeyhe6ad.java:66: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpxeyhe6ad.java:66: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpxeyhe6ad.java:66: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmpxeyhe6ad.java:67:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        \n        double sunDistance = sunDistance(planet1, planet2);\n\
    \        \n        if (sunDistance < 1) {\n            return result;\n      \
    \  }\n        \n        double distance = planetDistance(planet1, planet2);\n\
    \        \n        if (distance < 1) {\n            return result;\n        }\n\
    \        \n        double angle = angle(planet1, planet2);\n        \n       \
    \ if (angle < 1) {\n            return result;\n        }\n        \n        double\
    \ distanceToSun = distanceToSun(planet1, planet2);\n        \n        if (distanceToSun\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToEarth\
    \ = distanceToEarth(planet1, planet2);\n        \n        if (distanceToEarth\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToMars\
    \ = distanceToMars(planet1, planet2);\n        \n        if (distanceToMars <\
    \ 1) {\n            return result;\n        }\n        \n        double distanceToJupiter\
    \ = distanceToJupiter(planet1, planet2);\n        \n        if (distanceToJupiter\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToSaturn\
    \ = distanceToSaturn(planet1, planet2);\n        \n        if (distanceToSaturn\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToUranus\
    \ = distanceToUranus(planet1, planet2);\n        \n        if (distanceToUranus\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToNeptune\
    \ = distanceToNeptune(planet1, planet2);\n        \n        if (distanceToNeptune\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToMercury\
    \ = distanceToMercury(planet1, planet2);\n        \n        if (distanceToMercury\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToVenus\
    \ = distanceToVenus(planet1, planet2);\n        \n        if (distanceToVenus\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToEarth\
    \ = distanceToEarth(planet1, planet2);\n        \n        if (distanceToEarth\
    \ < 1) {\n            return result;\n        }\n        \n        double distanceToMars\
    \ = distanceToMars(planet1, planet2);\n        \n        if (distanceToMars <\
    \ 1) {\n            return result;\n        }\n        \n        double distanceToJupiter\
    \ = distanceToJupiter(planet1, planet2);\n        \n        if (distanceToJ\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxjbuy7zq.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpxjbuy7zq.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpxjbuy7zq.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpxjbuy7zq.java:111:\
    \ error: ')' expected\n        if (distanceToJ\n                       ^\n/tmp/tmpxjbuy7zq.java:112:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpxjbuy7zq.java:118:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpxjbuy7zq.java:118: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpxjbuy7zq.java:118: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpxjbuy7zq.java:118: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpxjbuy7zq.java:119:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpxjbuy7zq.java:119: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmpxjbuy7zq.java:119: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmpxjbuy7zq.java:119: error: ';' expected\n    assert(bf((\"\
    Mars\"), "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance;\n        double distance2;\n        double distance3;\n\
    \        double distance4;\n        double distance5;\n        double distance6;\n\
    \        double distance7;\n        double distance8;\n        double distance9;\n\
    \        double distance10;\n        double distance11;\n        double distance12;\n\
    \        double distance13;\n        double distance14;\n        double distance15;\n\
    \        double distance16;\n        double distance17;\n        double distance18;\n\
    \        double distance19;\n        double distance20;\n        double distance21;\n\
    \        double distance22;\n        double distance23;\n        double distance24;\n\
    \        double distance25;\n        double distance26;\n        double distance27;\n\
    \        double distance28;\n        double distance29;\n        double distance30;\n\
    \        double distance31;\n        double distance32;\n        double distance33;\n\
    \        double distance34;\n        double distance35;\n        double distance36;\n\
    \        double distance37;\n        double distance38;\n        double distance39;\n\
    \        double distance40;\n        double distance41;\n        double distance42;\n\
    \        double distance43;\n        double distance44;\n        double distance45;\n\
    \        double distance46;\n        double distance47;\n        double distance48;\n\
    \        double distance49;\n        double distance50;\n        double distance51;\n\
    \        double distance52;\n        double distance53;\n        double distance54;\n\
    \        double distance55;\n        double distance56;\n        double distance57;\n\
    \        double distance58;\n        double distance59;\n        double distance60;\n\
    \        double distance61;\n        double distance62;\n        double distance63;\n\
    \        double distance64;\n        double distance65;\n        double distance66;\n\
    \        double distance67;\n        double distance68;\n        double distance69;\n\
    \        double distance70;\n        double distance71;\n        double distance72;\n\
    \        double distance73;\n        double distance74;\n        double distance75;\n\
    \        double distance76;\n        double distance77;\n        double distance78;\n\
    \        double distance79;\n        double distance80;\n        double distance81;\n\
    \        double distance82;\n        double distance83;\n        double distance84;\n\
    \        double distance85;\n        double distance86;\n        double distance87\n\
    \    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps4lqpf5i.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmps4lqpf5i.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmps4lqpf5i.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmps4lqpf5i.java:110:\
    \ error: ';' expected\n        double distance87\n                         ^\n\
    /tmp/tmps4lqpf5i.java:117: error: ')' expected\n    assert(bf((\"Earth\"), (\"\
    Earth\")).equals((Pair<String, >(Pair<long>))));\n                           \
    \                            ^\n/tmp/tmps4lqpf5i.java:117: error: illegal start\
    \ of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmps4lqpf5i.java:117: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmps4lqpf5i.java:117:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmps4lqpf5i.java:118: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmps4lqpf5i.java:118: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmps4lqpf5i.java:118: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmps4lqpf5i.java:118:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                   "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnprui0bd.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpnprui0bd.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpnprui0bd.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpnprui0bd.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpnprui0bd.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpnprui0bd.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpnprui0bd.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpnprui0bd.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpnprui0bd.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpnprui0bd.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpnprui0bd.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpnprui0bd.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpnprui0bd.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpnprui0bd.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        List<String> planets = new ArrayList<>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(planet1);\n        planets.add(planet2);\n        planets.stream().filter(planet\
    \ -> planet.equals(planet1) || planet.equals(planet2)).forEach(planet -> {\n \
    \           try {\n                double distance = planets.stream().filter(planet1\
    \ -> planet1.equals(planet)).map(planet1 -> planets.stream().filter(planet2 ->\
    \ planet2.equals(planet)).map(planet2 -> planet1.distanceTo(planet2)).min(Double::compareTo).get()).min(Double::compareTo).get();\n\
    \                result.first(planet);\n                result.second(distance);\n\
    \            } catch (NoSuchElementException e) {\n                result.first(planet);\n\
    \                result.second(0);\n            }\n        });\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1m66zzur.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp1m66zzur.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp1m66zzur.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp1m66zzur.java:53:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmp1m66zzur.java:53: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmp1m66zzur.java:53: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmp1m66zzur.java:53: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmp1m66zzur.java:54:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmp1m66zzur.java:54: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                         ^\n/tmp/tmp1m66zzur.java:54: error:\
    \ illegal start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \             ^\n/tmp/tmp1m66zzur.java:54: error: ';' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                        ^\n/tmp/tmp1m66zzur.java:55:\
    \ error: ')' expected\n    asse"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        double distance = Math.abs(planet1.length() - planet2.length());\n\
    \        if (distance < 2) {\n            result.first(planet1);\n           \
    \ result.second(planet2);\n            return result;\n        }\n        double\
    \ distance1 = Math.abs(planet1.length() - planet2.length());\n        double distance2\
    \ = Math.abs(planet2.length() - planet1.length());\n        if (distance1 < distance2)\
    \ {\n            String firstPlanet = planet1;\n            String secondPlanet\
    \ = planet2;\n            String firstPlanetName = firstPlanet.substring(0, firstPlanet.length()\
    \ - 1);\n            String secondPlanetName = secondPlanet.substring(0, secondPlanet.length()\
    \ - 1);\n            double firstPlanetOrbit = firstPlanet.length() - 1;\n   \
    \         double secondPlanetOrbit = secondPlanet.length() - 1;\n            double\
    \ firstPlanetOrbitDistance = firstPlanetOrbit - distance;\n            double\
    \ secondPlanetOrbitDistance = secondPlanetOrbit - distance;\n            double\
    \ firstPlanetOrbitDistanceSquared = firstPlanetOrbitDistance * firstPlanetOrbitDistance;\n\
    \            double secondPlanetOrbitDistanceSquared = secondPlanetOrbitDistance\
    \ * secondPlanetOrbitDistance;\n            double firstPlanetOrbitDistanceCube\
    \ = firstPlanetOrbitDistance * firstPlanetOrbitDistance;\n            double secondPlanetOrbitDistanceCube\
    \ = secondPlanetOrbitDistance * secondPlanetOrbitDistance;\n            double\
    \ firstPlanetOrbitDistanceCubeRoot = Math.sqrt(firstPlanetOrbitDistanceCube);\n\
    \            double secondPlanetOrbitDistanceCubeRoot = Math.sqrt(secondPlanetOrbitDistanceCube);\n\
    \            double firstPlanetOrbitDistanceCubeRootSquared = firstPlanetOrbitDistanceCubeRoot\
    \ * firstPlanetOrbitDistanceCubeRoot;\n            double secondPlanetOrbitDistanceCubeRootSquared\
    \ = secondPlanetOrbitDistanceCubeRoot * secondPlanetOrbitDistanceCubeRoot;\n \
    \           double firstPlanetOrbitDistanceCubeRootCubed = firstPlanetOrbitDistanceCube\
    \ * firstPlanetOrbitDistanceCube;\n            double secondPlanetOrbitDistanceCubeRootCubed\
    \ = secondPlanetOrbitDistanceCube * secondPlanetOrbitDistanceCube;\n         \
    \   double firstPlanetOrbitDistanceCubeRootCubedSquared = firstPlanetOrbitDistanceCubeRootCubed\
    \ * firstPlanetOr\n    }\n    public static void main(String[] args) {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpv3iy1gw1.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpv3iy1gw1.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpv3iy1gw1.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpv3iy1gw1.java:51:\
    \ error: ';' expected\n            double firstPlanetOrbitDistanceCubeRootCubedSquared\
    \ = firstPlanetOrbitDistanceCubeRootCubed * firstPlanetOr\n                  \
    \                                                                            \
    \                         ^\n/tmp/tmpv3iy1gw1.java:53: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpv3iy1gw1.java:53:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpv3iy1gw1.java:53: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpv3iy1gw1.java:53: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpv3iy1gw1.java:53: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpv3iy1gw1.java:58: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpv3iy1gw1.java:58: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpv3iy1gw1.java:58: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpv3iy1gw1.java:58:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvzctdxw9.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpvzctdxw9.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpvzctdxw9.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpvzctdxw9.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpvzctdxw9.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpvzctdxw9.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpvzctdxw9.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpvzctdxw9.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpvzctdxw9.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpvzctdxw9.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpvzctdxw9.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpvzctdxw9.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpvzctdxw9.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpvzctdxw9.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance1 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance2 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance3 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance4 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance5 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance6 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance7 = Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2));\n        double distance8 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance9 = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double distance10 = Math.sqrt(Math.pow(planet2.length(), 2) +\
    \ Math.pow(planet1.length(), 2));\n        double distance11 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance12 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance13 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance14 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance15 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance16 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance17 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance18 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance19 = Math.sqrt(Math.pow(planet2.length(),\
    \ 2) + Math.pow(planet1.length(), 2));\n        double distance20 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(planet2.length(), 2));\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n    }\n    public static void main(String[] args) {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\", \"Uranus\"\
    )));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"Venus\")));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"), (\"Venus\"\
    )).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")));\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttvq6uhg.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpttvq6uhg.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpttvq6uhg.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpttvq6uhg.java:45:\
    \ error: ')' expected\n        double distance21 = Math.sqrt(Math.pow(planet1.length(),\
    \ 2) + Math.pow(plan\n                                                       \
    \                            ^\n/tmp/tmpttvq6uhg.java:46: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpttvq6uhg.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpttvq6uhg.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpttvq6uhg.java:47: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpttvq6uhg.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpttvq6uhg.java:52: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpttvq6uhg.java:52:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpttvq6uhg.java:52: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpttvq6uhg.java:52:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpttvq6uhg.java:53: error: ')' expected\n    assert"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        planets.add(\"Mercury\");\n   \
    \     planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"\
    Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n\
    \        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n       \
    \ planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        planets.add(\"Mercury\");\n   \
    \     planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"\
    Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n\
    \        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n       \
    \ planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq4gprri8.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpq4gprri8.java:84: error: ')' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                         ^\n/tmp/tmpq4gprri8.java:84: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpq4gprri8.java:84: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpq4gprri8.java:84:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpq4gprri8.java:85: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpq4gprri8.java:85: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpq4gprri8.java:85: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpq4gprri8.java:85:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpq4gprri8.java:86: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpq4gprri8.java:86:\
    \ error: illegal start of expression\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n                 "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      double distance2 = Math.abs(planet1.length() - planet2.length());\n   \
    \     double distance3 = Math.abs(planet1.length() - planet2.length());\n    \
    \    double distance4 = Math.abs(planet1.length() - planet2.length());\n     \
    \   double distance5 = Math.abs(planet1.length() - planet2.length());\n      \
    \  double distance6 = Math.abs(planet1.length() - planet2.length());\n       \
    \ double distance7 = Math.abs(planet1.length() - planet2.length());\n        double\
    \ distance8 = Math.abs(planet1.length() - planet2.length());\n        double distance9\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance10\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance11\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance12\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance13\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance14\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance15\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance16\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance17\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance18\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance19\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance20\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance21\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance22\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance23\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance24\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance25\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance26\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance27\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance28\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance29\
    \ = Math.abs(planet1.length() - planet2.length());\n        double distance30\
    \ = Math.abs(planet1.length() - planet2.length\n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuwt33zck.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpuwt33zck.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpuwt33zck.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpuwt33zck.java:53:\
    \ error: ')' expected\n        double distance30 = Math.abs(planet1.length() -\
    \ planet2.length\n                                                           \
    \           ^\n/tmp/tmpuwt33zck.java:55: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpuwt33zck.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpuwt33zck.java:55: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpuwt33zck.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpuwt33zck.java:55: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpuwt33zck.java:60: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpuwt33zck.java:60: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpuwt33zck.java:60: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpuwt33zck.java:60:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpuwt33zck.java:61: error: ')' expecte"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2));\n        double angle = Math.acos(planet1.length() / distance);\n     \
    \   double angle2 = Math.acos(planet2.length() / distance);\n        double angle3\
    \ = Math.acos(planet1.length() / distance);\n        double angle4 = Math.acos(planet2.length()\
    \ / distance);\n        double angle5 = Math.acos(planet1.length() / distance);\n\
    \        double angle6 = Math.acos(planet2.length() / distance);\n        double\
    \ angle7 = Math.acos(planet1.length() / distance);\n        double angle8 = Math.acos(planet2.length()\
    \ / distance);\n        double angle9 = Math.acos(planet1.length() / distance);\n\
    \        double angle10 = Math.acos(planet2.length() / distance);\n        double\
    \ angle11 = Math.acos(planet1.length() / distance);\n        double angle12 =\
    \ Math.acos(planet2.length() / distance);\n        double angle13 = Math.acos(planet1.length()\
    \ / distance);\n        double angle14 = Math.acos(planet2.length() / distance);\n\
    \        double angle15 = Math.acos(planet1.length() / distance);\n        double\
    \ angle16 = Math.acos(planet2.length() / distance);\n        double angle17 =\
    \ Math.acos(planet1.length() / distance);\n        double angle18 = Math.acos(planet2.length()\
    \ / distance);\n        double angle19 = Math.acos(planet1.length() / distance);\n\
    \        double angle20 = Math.acos(planet2.length() / distance);\n        double\
    \ angle21 = Math.acos(planet1.length() / distance);\n        double angle22 =\
    \ Math.acos(planet2.length() / distance);\n        double angle23 = Math.acos(planet1.length()\
    \ / distance);\n        double angle24 = Math.acos(planet2.length() / distance);\n\
    \        double angle25 = Math.acos(planet1.length() / distance);\n        double\
    \ angle26 = Math.acos(planet2.length() / distance);\n        double angle27 =\
    \ Math.acos(planet1.length() / distance);\n        double angle28 = Math.acos(planet2.length()\
    \ / distance);\n        double angle29 = Math.acos(planet1.length() / distance);\n\
    \        double angle30 = Math.acos(planet2.length() / distance);\n        double\
    \ angle31 = Math.acos(planet1.length() / distance);\n        double angle32 =\
    \ Math.acos(planet2.length() / \n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnurlk431.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpnurlk431.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpnurlk431.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpnurlk431.java:57:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmpnurlk431.java:57:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpnurlk431.java:58: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpnurlk431.java:58: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpnurlk431.java:58: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpnurlk431.java:58: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpnurlk431.java:63:\
    \ error: ')' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                       ^\n\
    /tmp/tmpnurlk431.java:63: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                           ^\n/tmp/tmpnurlk431.java:63: error:\
    \ illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \              ^\n/tmp/tmpnurlk431.java:63: error: ';' expected\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                          ^\n/tmp/tmpnurlk431.java:64:\
    \ error: ')' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                      ^\n\
    /tmp/tmpnurlk431.java:"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Pair<String, > result2 = new Pair<String, >();\n        Pair<String,\
    \ > result3 = new Pair<String, >();\n        Pair<String, > result4 = new Pair<String,\
    \ >();\n        Pair<String, > result5 = new Pair<String, >();\n        Pair<String,\
    \ > result6 = new Pair<String, >();\n        Pair<String, > result7 = new Pair<String,\
    \ >();\n        Pair<String, > result8 = new Pair<String, >();\n        Pair<String,\
    \ > result9 = new Pair<String, >();\n        Pair<String, > result10 = new Pair<String,\
    \ >();\n        Pair<String, > result11 = new Pair<String, >();\n        Pair<String,\
    \ > result12 = new Pair<String, >();\n        Pair<String, > result13 = new Pair<String,\
    \ >();\n        Pair<String, > result14 = new Pair<String, >();\n        Pair<String,\
    \ > result15 = new Pair<String, >();\n        Pair<String, > result16 = new Pair<String,\
    \ >();\n        Pair<String, > result17 = new Pair<String, >();\n        Pair<String,\
    \ > result18 = new Pair<String, >();\n        Pair<String, > result19 = new Pair<String,\
    \ >();\n        Pair<String, > result20 = new Pair<String, >();\n        Pair<String,\
    \ > result21 = new Pair<String, >();\n        Pair<String, > result22 = new Pair<String,\
    \ >();\n        Pair<String, > result23 = new Pair<String, >();\n        Pair<String,\
    \ > result24 = new Pair<String, >();\n        Pair<String, > result25 = new Pair<String,\
    \ >();\n        Pair<String, > result26 = new Pair<String, >();\n        Pair<String,\
    \ > result27 = new Pair<String, >();\n        Pair<String, > result28 = new Pair<String,\
    \ >();\n        Pair<String, > result29 = new Pair<String, >();\n        Pair<String,\
    \ > result30 = new Pair<String, >();\n        Pair<String, > result31 = new Pair<String,\
    \ >();\n        Pair<String, > result32 = new Pair<String, >();\n        Pair<String,\
    \ > result33 = new Pair<String, >();\n        Pair<String, > result34 = new Pair<String,\
    \ >();\n        Pair<String, > result35 = new Pair<String, >();\n        Pair<String,\
    \ > result36 = new Pair<String, >();\n        Pair<String, > result37 = new Pair<String,\
    \ >();\n        Pair<String, > result38 = new Pair<String, >();\n        Pair<String,\
    \ > result39 = new Pair<String, >();\n        Pair<String, \n    }\n    public\
    \ static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals(Pair.with(\"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"\
    Mercury\")).equals(Pair.with(\"Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\"\
    )).equals(Pair.with(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n\
    \    assert(bf((\"Neptune\"), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\"\
    )).equals((Pair<String, >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((Pair<String, >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5oc96y_f.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp5oc96y_f.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmp5oc96y_f.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmp5oc96y_f.java:24:\
    \ error: illegal start of type\n        Pair<String, > result2 = new Pair<String,\
    \ >();\n                     ^\n/tmp/tmp5oc96y_f.java:24: error: illegal start\
    \ of type\n        Pair<String, > result2 = new Pair<String, >();\n          \
    \                                        ^\n/tmp/tmp5oc96y_f.java:25: error: illegal\
    \ start of type\n        Pair<String, > result3 = new Pair<String, >();\n    \
    \                 ^\n/tmp/tmp5oc96y_f.java:25: error: illegal start of type\n\
    \        Pair<String, > result3 = new Pair<String, >();\n                    \
    \                              ^\n/tmp/tmp5oc96y_f.java:26: error: illegal start\
    \ of type\n        Pair<String, > result4 = new Pair<String, >();\n          \
    \           ^\n/tmp/tmp5oc96y_f.java:26: error: illegal start of type\n      \
    \  Pair<String, > result4 = new Pair<String, >();\n                          \
    \                        ^\n/tmp/tmp5oc96y_f.java:27: error: illegal start of\
    \ type\n        Pair<String, > result5 = new Pair<String, >();\n             \
    \        ^\n/tmp/tmp5oc96y_f.java:27: error: illegal start of type\n        Pair<String,\
    \ > result5 = new Pair<String, >();\n                                        \
    \          ^\n/tmp/tmp5oc96y_f.java:28: error: illegal start of type\n       \
    \ Pair<String, > result6 = new Pair<String, >();\n                     ^\n/tmp/tmp5oc96y_f.java:28:\
    \ error: illegal start of type\n        Pair<String, > result6 = new Pair<String,\
    \ >();\n                                                  ^\n/tmp/tmp5oc96y_f.java:29:\
    \ error: illegal start of type\n        Pair<String, > result7 = new Pair<String,\
    \ >();\n             "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > result = new Pair<String,\
    \ >();\n        Set<String> planets = new HashSet<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n       \
    \ planets.add(\"Pallas\");\n        planets.add(\"Eurydice\");\n        planets.add(\"\
    Aster\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n\
    \        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n        planets.add(\"\
    Pallas\");\n        planets.add(\"Eurydice\");\n        planets.add(\"Aster\"\
    );\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n    \
    \    planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n        planets.add(\"\
    Pallas\");\n        planets.add(\"Eurydice\");\n        planets.add(\"Aster\"\
    );\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n    \
    \    planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n        planets.add(\"\
    Pallas\");\n        planets.add(\"Eurydice\");\n        planets.add(\"Aster\"\
    );\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n    \
    \    planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n        planets.add(\"\
    Pallas\");\n        planets.add(\"Eurydice\");\n        planets.add(\"Aster\"\
    );\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n    \
    \    planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n        planets.add(\"\
    Pallas\");\n        planets.add(\"Eurydice\");\n        planets.add(\"Aster\"\
    );\n        planets.add(\"Uran\n    }\n    public static void main(String[] args)\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\",\
    \ \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmpsed01.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpsmpsed01.java:23: error: illegal start of type\n        Pair<String,\
    \ > result = new Pair<String, >();\n                     ^\n/tmp/tmpsmpsed01.java:23:\
    \ error: illegal start of type\n        Pair<String, > result = new Pair<String,\
    \ >();\n                                                 ^\n/tmp/tmpsmpsed01.java:73:\
    \ error: unclosed string literal\n        planets.add(\"Uran\n               \
    \     ^\n/tmp/tmpsmpsed01.java:73: error: ';' expected\n        planets.add(\"\
    Uran\n                         ^\n/tmp/tmpsmpsed01.java:75: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpsmpsed01.java:75:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpsmpsed01.java:75: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpsmpsed01.java:75:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpsmpsed01.java:75: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpsmpsed01.java:80: error: ')' expected\n    assert(bf((\"Earth\"),\
    \ (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                      \
    \                                 ^\n/tmp/tmpsmpsed01.java:80: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpsmpsed01.java:80: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpsmpsed01.java:80:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpsmpsed01.java:8"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        Pair<String, > pair = new Pair<String, >();\n\
    \        double distance = Math.abs(planet1.length() - planet2.length());\n  \
    \      if (distance < 4) {\n            pair = Pair.of(planet1, planet2);\n  \
    \      }\n        if (distance < 6) {\n            pair = Pair.of(planet2, planet1);\n\
    \        }\n        if (distance < 8) {\n            pair = Pair.of(planet1, planet2);\n\
    \        }\n        if (distance < 10) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 12) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 14) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 16) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 18) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 20) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 22) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 24) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 26) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 28) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 30) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 32) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 34) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 36) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 38) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 40) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 42) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 44) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < 46) {\n            pair = Pair.of(planet2,\
    \ planet1);\n        }\n        if (distance < 48) {\n            pair = Pair.of(planet1,\
    \ planet2);\n        }\n        if (distance < \n    }\n    public static void\
    \ main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpunne3ofk.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpunne3ofk.java:23: error: illegal start of type\n        Pair<String,\
    \ > pair = new Pair<String, >();\n                     ^\n/tmp/tmpunne3ofk.java:23:\
    \ error: illegal start of type\n        Pair<String, > pair = new Pair<String,\
    \ >();\n                                               ^\n/tmp/tmpunne3ofk.java:95:\
    \ error: illegal start of expression\n    }\n    ^\n/tmp/tmpunne3ofk.java:96:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpunne3ofk.java:96: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpunne3ofk.java:96: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpunne3ofk.java:96: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpunne3ofk.java:96:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpunne3ofk.java:101: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmpunne3ofk.java:101:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpunne3ofk.java:101: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpunne3ofk.java:101:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpunne3ofk.java:102: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Pluto\");\n        planets.add(\"Ceres\");\n\
    \        planets.add(\"Pallas\");\n        planets.add(\"Eris\");\n        planets.add(\"\
    Umbriel\");\n        planets.add(\"Cassiopeia\");\n        planets.add(\"Pisces\"\
    );\n        planets.add(\"Aster\");\n        planets.add(\"Athens\");\n      \
    \  planets.add(\"Callisto\");\n        planets.add(\"Ceres\");\n        planets.add(\"\
    Pluto\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n\
    \        planets.add(\"Europa\");\n        planets.add(\"Europa\");\n        planets.add(\"\
    Europa\");\n        planets.add(\"Europa\n    }\n    public static void main(String[]\
    \ args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3936bhsw.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmp3936bhsw.java:74: error: unclosed string literal\n      \
    \  planets.add(\"Europa\n                    ^\n/tmp/tmp3936bhsw.java:74: error:\
    \ ';' expected\n        planets.add(\"Europa\n                           ^\n/tmp/tmp3936bhsw.java:76:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp3936bhsw.java:76: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp3936bhsw.java:76: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp3936bhsw.java:76: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp3936bhsw.java:76:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp3936bhsw.java:81: error: ')' expected\n\
    \    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n\
    \                                                       ^\n/tmp/tmp3936bhsw.java:81:\
    \ error: illegal start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmp3936bhsw.java:81: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmp3936bhsw.java:81:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmp3936bhsw.java:82: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmp3936bhsw.java:82: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))))"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // There are eight planets in our solar system: the closerst\
    \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
    \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
    \ names as strings planet1 and planet2. \n    // The function should return a\
    \ tuple containing all planets whose orbits are \n    // located between the orbit\
    \ of planet1 and the orbit of planet2, sorted by \n    // the proximity to the\
    \ sun. \n    // The function should return an empty tuple if planet1 or planet2\n\
    \    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    public static Pair<String, > bf(String\
    \ planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n\
    \        planets.add(planet1);\n        planets.add(planet2);\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n     \
    \   planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        planets.add(\"Mercury\");\n   \
    \     planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"\
    Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n\
    \        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n       \
    \ planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n\
    \        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"\
    Neptune\");\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\"\
    );\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"\
    Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\"\
    );\n        planets.add(\"Neptune\");\n        planets.add(\"Mercury\");\n   \
    \     planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"\
    Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n\
    \        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n       \
    \ planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"\
    Earth\");\n        planets.add(\"Mars\");\n        plan\n    }\n    public static\
    \ void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals(Pair.with(\"\
    Saturn\", \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals(Pair.with(\"\
    Venus\")));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals(Pair.with(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")));\n    assert(bf((\"Neptune\"\
    ), (\"Venus\")).equals(Pair.with(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\")));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((Pair<String,\
    \ >(Pair<long>))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi4jbctk5.java:22: error: illegal start of type\n    public static\
    \ Pair<String, > bf(String planet1, String planet2) {\n                      \
    \         ^\n/tmp/tmpi4jbctk5.java:78: error: not a statement\n        plan\n\
    \        ^\n/tmp/tmpi4jbctk5.java:78: error: ';' expected\n        plan\n    \
    \        ^\n/tmp/tmpi4jbctk5.java:85: error: ')' expected\n    assert(bf((\"Earth\"\
    ), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n                     \
    \                                  ^\n/tmp/tmpi4jbctk5.java:85: error: illegal\
    \ start of expression\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \ ^\n/tmp/tmpi4jbctk5.java:85: error: illegal start of expression\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n              \
    \                                                        ^\n/tmp/tmpi4jbctk5.java:85:\
    \ error: ';' expected\n    assert(bf((\"Earth\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \                ^\n/tmp/tmpi4jbctk5.java:86: error: ')' expected\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                       ^\n/tmp/tmpi4jbctk5.java:86: error: illegal\
    \ start of expression\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        ^\n\
    /tmp/tmpi4jbctk5.java:86: error: illegal start of expression\n    assert(bf((\"\
    Mars\"), (\"Earth\")).equals((Pair<String, >(Pair<long>))));\n               \
    \                                                      ^\n/tmp/tmpi4jbctk5.java:86:\
    \ error: ';' expected\n    assert(bf((\"Mars\"), (\"Earth\")).equals((Pair<String,\
    \ >(Pair<long>))));\n                                                        \
    \               ^\n/tmp/tmpi4jbctk5.java:87: error: ')' expected\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((Pair<String, >(Pair<long>))));\n         \
    \                                                   ^\n/tmp/tmpi4jbc"
  exit_code: 1
  status: SyntaxError
