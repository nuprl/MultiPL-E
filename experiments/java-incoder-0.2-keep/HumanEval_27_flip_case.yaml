name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n \
  \   public static String flipCase(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        return string.chars().mapToObj(c -> (char) (c == (char) 'a'\
    \ ? 'A' : (char) 'a'))\n                .collect(Collectors.joining(\"\"));\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", \"[A-Z]\").replaceAll(\"\
    [A-Z]\", \"[a-z]\");\n", "        return string.chars()\n            .mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", Character.toUpperCase)\n                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());\n",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());\n",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n                .toString();\n",
  "        return string.chars()\n            .mapToObj(c -> (char) (c == (char) 'a'\
    \ ? 'A' : 'a'))\n            .collect(Collectors.joining());\n", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.toUpperCase(c)).collect(Collectors.joining(\"\"));\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : c))\n         \
    \       .collect(Collectors.joining(\"\"));\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);\n", " \
    \       return string.chars()\n            .mapToObj(c -> (char) (c == (char)\
    \ 'a' ? 'A' : 'a'))\n            .collect(Collectors.joining(\"\"));\n", "   \
    \     return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n                .collect(Collectors.joining());\n",
  "        return string.toUpperCase().replaceAll(\"[a-z]\", \"[A-Z]\").replaceAll(\"\
    [A-Z]\", \"[a-z]\");\n", "        return string.chars().mapToObj(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", Character.toUpperCase)\n\
    \                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))).collect(Collectors.joining());\n", "        StringBuilder\
    \ sb = new StringBuilder();\n        for(char c : string.toCharArray()) {\n  \
    \          if(c>='a' && c<='z') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c>='A' && c<='Z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", String::toUpperCase)\n                .replaceAll(\"[A-Z]\", String::toLowerCase);\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> (char) (c == (char) c ? 'A' : 'a')).collect(Collectors.joining());\n\
    \        return String.valueOf(charArray);\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n", "        return string.chars()\n\
    \            .mapToObj(c -> Character.toUpperCase(c))\n            .collect(Collectors.joining(\"\
    \"));\n", "        return string.chars()\n            .mapToObj(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))\n            .collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);\n", "        return string.chars()\n  \
    \          .mapToObj(c -> (char) (c == (char) 'a' ? 'A' : c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).collect(Collectors.joining());\n\
    \        return String.valueOf(charArray);\n", "        return string.toUpperCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            String upperCase =\
    \ Character.toString((char) c);\n            String lowerCase = Character.toString((char)\
    \ Character.toUpperCase(c));\n            sb.append(lowerCase).append(upperCase);\n\
    \        }\n        return sb.toString();\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars()\n            .mapToObj(c -> (char) (c == (char) 'a'\
    \ ? 'A' : 'a'))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();\n", "        return string.toUpperCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a')).collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars()\n                .mapToObj(i -> (char) i)\n     \
    \           .map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
    \                .collect(Collectors.joining());\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", Character.toUpperCase).replaceAll(\"[A-Z]\", Character.toLowerCase);\n",
  "        StringBuilder sb = new StringBuilder(string);\n        for (int i = 0;\
    \ i < sb.length(); i++) {\n            char c = sb.charAt(i);\n            if\
    \ (Character.isLowerCase(c)) {\n                sb.setCharAt(i, Character.toUpperCase(c));\n\
    \            } else if (Character.isUpperCase(c)) {\n                sb.setCharAt(i,\
    \ Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n",
  "        StringBuilder sb = new StringBuilder(string);\n        for(int i = 0; i\
    \ < sb.length(); i++) {\n            char c = sb.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.setCharAt(i, Character.toUpperCase(c));\n            }\
    \ else if(Character.isUpperCase(c)) {\n                sb.setCharAt(i, Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", Character.toUpperCase)\n\
    \                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n", "        return\
    \ string.chars()\n                .mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n                .collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a'))\n                .collect(Collectors.joining(\"\"));\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))).collect(Collectors.joining());\n", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c ->\
    \ Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           String upperCase = Character.toString((char) c);\n            String\
    \ lowerCase = Character.toString((char) Character.toUpperCase(c));\n         \
    \   sb.append(lowerCase).append(upperCase);\n        }\n        return sb.toString();\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining(\"\
    \"));\n", "        StringBuilder sb = new StringBuilder();\n        for (char\
    \ c : string.toCharArray()) {\n            boolean isUpper = Character.isUpperCase(c);\n\
    \            boolean isLower = Character.isLowerCase(c);\n            if (isUpper\
    \ && !isLower) {\n                sb.append(Character.toUpperCase(c));\n     \
    \       } else if (!isUpper && isLower) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n", "        char[] chars = string.toCharArray();\n\
    \        Arrays.sort(chars);\n        return new String(chars);\n", "        char[]\
    \ charArray = string.toCharArray();\n        Arrays.sort(charArray);\n       \
    \ return new String(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a')).collect(Collectors.joining(\"\
    \"));\n", "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a')).collect(Collectors.joining());\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         }\n            if (Character.isUpperCase(charArray[i])) {\n        \
    \        charArray[i] = Character.toLowerCase(charArray[i]);\n            }\n\
    \        }\n        return new String(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder(string);\n        for (int i = 0;\
    \ i < sb.length(); i++) {\n            char c = sb.charAt(i);\n            if\
    \ (Character.isLowerCase(c)) {\n                sb.setCharAt(i, Character.toUpperCase(c));\n\
    \            }\n            else if (Character.isUpperCase(c)) {\n           \
    \     sb.setCharAt(i, Character.toLowerCase(c));\n            }\n        }\n \
    \       return sb.toString();\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining(\"\
    \"));\n        return string;\n", "        return string.chars().mapToObj(c ->\
    \ (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder(string);\n        for(int i = 0; i\
    \ < sb.length(); i++) {\n            char c = sb.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.setCharAt(i, Character.toUpperCase(c));\n            }\
    \ else if(Character.isUpperCase(c)) {\n                sb.setCharAt(i, Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", Character.toUpperCase)\n                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", \"[A-Z]\").replaceAll(\"\
    [A-Z]\", \"[a-z]\");\n", "        return string.chars().mapToObj(c -> (char) (c\
    \ == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            String upperCase = Character.toString((char) c);\n          \
    \  String lowerCase = Character.toString((char) Character.toUpperCase(c));\n \
    \           sb.append(lowerCase);\n            sb.append(upperCase);\n       \
    \ }\n        return sb.toString();\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);\n", " \
    \       StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder();\n        for(char c : string.toCharArray())\
    \ {\n            if(c>='a' && c<='z') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c>='A' && c<='Z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", Character.toUpperCase)\n                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n",
  "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            charArray[i] = (char) (charArray[i] - 32);\n            }\n     \
    \       if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i]\
    \ = (char) (charArray[i] + 32);\n            }\n        }\n        return new\
    \ String(charArray);\n", "        char[] charArray = string.toCharArray();\n \
    \       Arrays.sort(charArray);\n        return new String(charArray);\n", " \
    \       char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (char c : charArray)\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : c))\n         \
    \       .collect(Collectors.joining(\"\"));\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (char c : charArray) {\n            builder.append(Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c));\n        }\n       \
    \ return builder.toString();\n", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(c == ' ') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", m -> Character.toUpperCase(m.charAt(0))) + \n               string.toUpperCase().replaceAll(\"\
    [A-Z]\", m -> Character.toLowerCase(m.charAt(0)));\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", String::toUpperCase)\n\
    \                .replaceAll(\"[A-Z]\", String::toLowerCase);\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))).collect(Collectors.joining());\n", "        return\
    \ string.toLowerCase().replaceAll(\"[a-z]\", Character.toUpperCase)\n        \
    \        .replaceAll(\"[A-Z]\", Character.toLowerCase);\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a')).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).collect(Collectors.joining());\n", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a'))\n                .collect(Collectors.joining());\n",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)))\n                .collect(Collectors.joining());\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", Character.toUpperCase).replaceAll(\"\
    [A-Z]\", Character.toLowerCase);\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : (char) 'a')).collect(Collectors.joining(\"\
    \"));\n", "        return string.toUpperCase().replaceAll(\"[a-z]\", \"[A-Z]\"\
    ).replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            String upper = Character.toString((char)\
    \ c);\n            String lower = Character.toString((char) Character.toUpperCase(c));\n\
    \            sb.append(upper).append(lower);\n        }\n        return sb.toString();\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", Character.toUpperCase)\n\
    \                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        for(int i = 0; i < sb.length(); i++)\
    \ {\n            char c = sb.charAt(i);\n            if(Character.isLowerCase(c))\
    \ {\n                sb.setCharAt(i, Character.toUpperCase(c));\n            }\n\
    \            else if(Character.isUpperCase(c)) {\n                sb.setCharAt(i,\
    \ Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a'))\n                .collect(Collectors.joining(\"\"));\n", "        return\
    \ string.toLowerCase().replaceAll(\"[a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\",\
    \ \"[a-z]\");\n", "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n        return new\
    \ String(charArray);\n", "        return string.toLowerCase().replaceAll(\"[a-z]\"\
    , String::toUpperCase)\n                .replaceAll(\"[A-Z]\", String::toLowerCase);\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : c))\n\
    \                .collect(Collectors.joining(\"\"));\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", s -> s.toUpperCase());\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", \"[A-Z]\").replaceAll(\"\
    [A-Z]\", \"[a-z]\");\n", "        return string.chars().mapToObj(c -> (char) (c\
    \ == Character.toUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))).collect(Collectors.joining());\n",
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();\n",
  "        char[] chars = string.toCharArray();\n        Arrays.stream(chars).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return String.valueOf(chars);\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", Character.toUpperCase)\n                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n",
  "        return string.chars()\n            .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n            .collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            String upperCase = Character.toString((char) c);\n          \
    \  String lowerCase = Character.toString((char) Character.toUpperCase(c));\n \
    \           sb.append(lowerCase).append(upperCase);\n        }\n        return\
    \ sb.toString();\n", "        return string.chars()\n            .mapToObj(c ->\
    \ Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (char c : charArray) {\n            if (Character.isLowerCase(c))\
    \ {\n                builder.append(Character.toUpperCase(c));\n            }\
    \ else {\n                builder.append(Character.toLowerCase(c));\n        \
    \    }\n        }\n        return builder.toString();\n", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n", "        return\
    \ string.chars().mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n", "        return\
    \ string.toLowerCase().replaceAll(\"[a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\",\
    \ \"[a-z]\");\n", "        StringBuilder builder = new StringBuilder();\n    \
    \    for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                builder.append(Character.toUpperCase(c));\n            }\
    \ else {\n                builder.append(Character.toLowerCase(c));\n        \
    \    }\n        }\n        return builder.toString();\n", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == Character.toUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)))\n                .collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(Character::toLowerCase).map(Character::toUpperCase).collect(Collectors.joining());\n\
    \        return String.valueOf(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            boolean upperCase\
    \ = Character.isUpperCase(c);\n            boolean lowerCase = Character.isLowerCase(c);\n\
    \            if (upperCase) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else if (lowerCase) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n", "        return string.toUpperCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        char[] charArray\
    \ = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++)\
    \ {\n            char c = charArray[i];\n            if (Character.isLowerCase(c))\
    \ {\n                charArray[i] = Character.toUpperCase(c);\n            } else\
    \ {\n                charArray[i] = Character.toLowerCase(c);\n            }\n\
    \        }\n        return new String(charArray);\n", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n      \
    \          .collect(Collectors.joining(\"\"));\n", "        char[] charArray =\
    \ string.toCharArray();\n        Arrays.sort(charArray);\n        return new String(charArray);\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", \"[A-Z]\").replaceAll(\"\
    [A-Z]\", \"[a-z]\");\n", "        return string.chars().mapToObj(c -> (char) (c\
    \ == (char) 'a' ? 'A' : c))\n                .collect(Collectors.joining(\"\"\
    ));\n", "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.toUpperCase(c)).collect(Collectors.joining());\n        return\
    \ String.valueOf(charArray);\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (char c : charArray) {\n            builder.append(Character.toUpperCase(c));\n\
    \        }\n        return builder.toString();\n", "        char[] chars = string.toCharArray();\n\
    \        Arrays.stream(chars).map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)).collect(Collectors.joining());\n        return String.valueOf(chars);\n",
  "        return string.chars()\n            .mapToObj(c -> (char) (c == (char) 'a'\
    \ ? 'A' : 'a'))\n            .collect(Collectors.joining());\n", "        return\
    \ string.chars()\n                .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n                .collect(Collectors.joining());\n",
  "        return string.chars()\n            .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n            .collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)))\n                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                .toString();\n", "        return string.toUpperCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        return string.toUpperCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a'))\n                .collect(Collectors.joining(\"\
    \"));\n", "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a'))\n                .collect(Collectors.joining(\"\"));\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n       \
    \         .collect(Collectors.joining(\"\"));\n", "        return string.chars()\n\
    \            .mapToObj(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n            .collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a')).collect(Collectors.joining());\n", "        return string.toLowerCase().replaceAll(\"\
    [a-z]\", \"[A-Z]\").replaceAll(\"[A-Z]\", \"[a-z]\");\n", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        return string.chars()\n                .mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)))\n                .collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (Character.isLowerCase(charArray[i])) {\n           \
    \     charArray[i] = Character.toUpperCase(charArray[i]);\n            }\n   \
    \         if (Character.isUpperCase(charArray[i])) {\n                charArray[i]\
    \ = Character.toLowerCase(charArray[i]);\n            }\n        }\n        return\
    \ new String(charArray);\n", "        return string.chars().mapToObj(c -> (char)\
    \ (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder(string);\n        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n    \
    \        }\n        }\n        return sb.toString();\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : c))\n                .collect(Collectors.joining(\"\
    \"));\n", "        return string.chars()\n                .mapToObj(c -> (char)\
    \ (c == (char) 'a' ? 'A' : (char) 'a'))\n                .collect(Collectors.joining(\"\
    \"));\n", "        StringBuilder sb = new StringBuilder();\n        for(char c\
    \ : string.toCharArray()) {\n            if(Character.isLowerCase(c)) {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else {\n    \
    \            sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();\n", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)))\n                .collect(Collectors.joining());\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n", "        return string.chars().mapToObj(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n",
  "        return string.chars().mapToObj(c -> (char) (c == (char) 'a' ? 'A' : (char)\
    \ 'a'))\n                .collect(Collectors.joining(\"\"));\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).collect(Collectors.joining());\n", "        return\
    \ string.toLowerCase().replaceAll(\"[a-z]\", String::toUpperCase)\n          \
    \      .replaceAll(\"[A-Z]\", String::toLowerCase);\n", "        char[] charArray\
    \ = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++)\
    \ {\n            char c = charArray[i];\n            if (Character.isLowerCase(c))\
    \ {\n                charArray[i] = Character.toUpperCase(c);\n            } else\
    \ {\n                charArray[i] = Character.toLowerCase(c);\n            }\n\
    \        }\n        return new String(charArray);\n", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == (char) 'a' ? 'A' : 'a'))\n      \
    \          .collect(Collectors.joining(\"\"));\n", "        StringBuilder sb =\
    \ new StringBuilder(string);\n        char[] chars = string.toCharArray();\n \
    \       for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n    \
    \        }\n        }\n        return sb.toString();\n", "        StringBuilder\
    \ sb = new StringBuilder(string);\n        sb.replace(0,1, Character.toUpperCase(sb.charAt(0)));\n\
    \        sb.replace(1,2, Character.toLowerCase(sb.charAt(1)));\n        sb.replace(2,3,\
    \ Character.toUpperCase(sb.charAt(2)));\n        sb.replace(3,4, Character.toLowerCase(sb.charAt(3)));\n\
    \        sb.replace(4,5, Character.toUpperCase(sb.charAt(4)));\n        sb.replace(5,6,\
    \ Character.toLowerCase(sb.charAt(5)));\n        sb.replace(6,7, Character.toUpperCase(sb.charAt(6)));\n\
    \        sb.replace(7,8, Character.toLowerCase(sb.charAt(7)));\n        sb.replace(8,9,\
    \ Character.toUpperCase(sb.charAt(8)));\n        sb.replace(9,10, Character.toLowerCase(sb.charAt(9)));\n\
    \        sb.replace(10,11, Character.toUpperCase(sb.charAt(10)));\n        sb.replace(11,12,\
    \ Character.toLowerCase(sb.charAt(11)));\n        sb.replace(12,13, Character.toUpperCase(sb.charAt(12)));\n\
    \        sb.replace(13,14, Character.toLowerCase(sb.charAt(13)));\n        sb.replace(14,15,\
    \ Character.toUpperCase(sb.charAt(14)));\n        sb.replace(15,16, Character.toLowerCase(sb.charAt(15)));\n\
    \        sb.replace(16,17, Character.toUpperCase(sb.charAt(16)));\n        sb.replace(17,18,\
    \ Character.toLowerCase(sb.charAt(17)));\n        sb.replace(18,19, Character.toUpperCase(sb.charAt(18)));\n\
    \        sb.replace(19,20, Character.toLowerCase(sb.charAt(19)));\n        sb.replace(20,21,\
    \ Character.toUpperCase(sb.charAt(20)));\n        sb.replace(21,22, Character.toLowerCase(sb.charAt(21)));\n\
    \        sb.replace(22,23, Character.toUpperCase(sb.charAt(22)));\n        sb.replace(23,24,\
    \ Character.toLowerCase(sb.charAt(23)));\n        sb.replace(24,25, Character.toUpperCase(sb.charAt(24)));\n\
    \        sb.replace(25,26, Character.toLowerCase(sb.charAt(25)));\n        sb.replace(26,27,\
    \ Character.toUpperCase(sb.charAt(26)));\n        sb.replace(27,28, Character.toLowerCase(sb.charAt(27)));\n\
    \        sb.replace(28,29, Character.toUpperCase(sb.charAt(28)));\n        sb.replace(29,30,\
    \ Character.toLowerCase(sb.charAt(29)));\n        sb.replace(30,31, Character.toUpperCase(sb.charAt(30)));\n\
    \        sb.replace(31,32, Character.toLowerCase(sb.charAt(31)));\n        sb.replace(32,33,\
    \ Character.toUpperCase(sb.charAt(32)));\n        sb.replace(33,34, Character.toLowerCase(sb.charAt(33)));\n\
    \        sb.replace(34,35, Character.to", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a')).collect(Collectors.joining());\n",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n", "        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a')).collect(Collectors.joining(\"\"));\n",
  "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).map(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining(\"\
    \"));\n        return string;\n", "        return string.chars().mapToObj(c ->\
    \ (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n",
  "        StringBuilder builder = new StringBuilder();\n        for(char c : string.toCharArray())\
    \ {\n            builder.append((char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)));\n        }\n        return builder.toString();\n",
  "        return string.toLowerCase().replaceAll(\"[a-z]\", Character.toUpperCase)\n\
    \                .replaceAll(\"[A-Z]\", Character.toLowerCase);\n", "        return\
    \ string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).collect(Collectors.joining());\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
