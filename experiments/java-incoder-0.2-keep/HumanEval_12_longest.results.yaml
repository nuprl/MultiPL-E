name: HumanEval_12_longest
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int length = s.length();\n            String\
    \ longestKey = longest.get(length);\n            if (longestKey == null) {\n \
    \               longestKey = s;\n            }\n            if (longestKey.length()\
    \ < length) {\n                longestKey = s;\n            }\n            longest.put(length,\
    \ longestKey);\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ve2ta3q.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue().equals(strings.size())) {\n                longest\
    \ = Optional.of(strings.get(entry.getKey()));\n                break;\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl2jjzosk.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            map.computeIfAbsent(s.length(), k -> s);\n     \
    \   }\n        Optional<String> longest = map.entrySet().stream()\n          \
    \      .max(Comparator.comparing(Map.Entry::getKey))\n                .map(Map.Entry::getValue);\n\
    \        if (longest.isPresent()) {\n            return longest;\n        }\n\
    \        return Optional.of(strings.get(0));\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            counts.merge(len,\
    \ 1, Integer::sum);\n        }\n        int maxCount = Collections.max(counts.values());\n\
    \        List<String> longestStrings = new ArrayList<>();\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                longestStrings.add(strings.get(entry.getKey()));\n      \
    \      }\n        }\n        if (longestStrings.size() == 1) {\n            return\
    \ Optional.of(longestStrings.get(0));\n        }\n        return Optional.of(longestStrings.get(0));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp162cgew3.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                count = 0;\n            }\n      \
    \      counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         continue;\n            }\n            if (longest.isPresent() && longest.get().length()\
    \ == s.length()) {\n                continue;\n            }\n            longest\
    \ = Optional.of(s);\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i3lrw3h.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpls9umhin.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ string : strings) {\n            Integer count = counts.getOrDefault(string,\
    \ 0);\n            counts.put(string, count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjpy10ebp.java:23: error: incompatible types: String cannot be converted\
    \ to Integer\n            counts.put(string, count + 1);\n                   \
    \    ^\n/tmp/tmpjpy10ebp.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpjpy10ebp.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb10bjw9x.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue().equals(counts.get(entry.getKey()))) {\n         \
    \       longest = Optional.of(entry.getKey());\n                break;\n     \
    \       }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe3sp587s.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        int maxCount = 0;\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount)\
    \ {\n                maxCount = entry.getValue();\n                longest = Optional.of(entry.getKey());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpef2w318e.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfk37_7fd.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longestString = new HashMap<>();\n       \
    \ for (String s : strings) {\n            int length = s.length();\n         \
    \   if (longestString.containsKey(length)) {\n                String oldValue\
    \ = longestString.get(length);\n                if (oldValue.length() < length)\
    \ {\n                    longestString.put(length, s);\n                }\n  \
    \          } else {\n                longestString.put(length, s);\n         \
    \   }\n        }\n        Optional<String> longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbr8m440a.java:32: error: cannot find symbol\n        Optional<String>\
    \ longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n                                                      \
    \                                                               ^\n  symbol: \
    \  method length()\n  location: class Integer\n/tmp/tmpbr8m440a.java:32: error:\
    \ cannot find symbol\n        Optional<String> longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n                                                      \
    \                                                                            \
    \                                                                            \
    \     ^\n  symbol:   method length()\n  location: class Integer\n/tmp/tmpbr8m440a.java:32:\
    \ error: incompatible types: bad type in conditional expression\n        Optional<String>\
    \ longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\n    Integer cannot be converted to Optional<String>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().length()) {\n             \
    \   longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.util.Optional.get(Optional.java:135)\n\tat Problem.longest(tmp79zc9f_h.java:31)\n\
    \tat Problem.main(tmp79zc9f_h.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvg2kpeg.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ oldValue = longestString.get(length);\n                if (oldValue.length()\
    \ < length) {\n                    longestString.put(length, string);\n      \
    \          }\n            } else {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        if (longestString.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        Optional<String> longest\
    \ = longestString.entrySet().stream()\n                .max(Comparator.comparing(Map.Entry::getValue))\n\
    \                .map(Map.Entry::getKey)\n                .map(String::valueOf)\n\
    \                .findFirst();\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7aqyjofi.java:39: error: cannot find symbol\n                .findFirst();\n\
    \                ^\n  symbol:   method findFirst()\n  location: class Optional<String>\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjzeemmh0.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String string : strings) {\n       \
    \     if (longest.isPresent() && longest.get().length() < string.length()) {\n\
    \                longest = Optional.empty();\n            }\n            if (first.isPresent()\
    \ && first.get().length() == string.length()) {\n                first = Optional.empty();\n\
    \            }\n            if (longest.isPresent() && longest.get().length()\
    \ == string.length()) {\n                longest = Optional.of(longest.get().concat(string));\n\
    \            }\n            if (first.isPresent() && first.get().length() == string.length())\
    \ {\n                first = Optional.of(first.get().concat(string));\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfbzozlgl.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv1d09vxo.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() > s.length()) {\n           \
    \     longest = Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(longest.get().length());\n\
    \            }\n            if (first.isPresent() && first.get().length() == s.length())\
    \ {\n                first = Optional.of(first.get().length());\n            }\n\
    \            if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                longest = Optional.of(longest.get().length());\n            }\n\
    \            if (first.isPresent() && first.get().length() == s.length()) {\n\
    \                first = Optional.of(first.get().length());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpamcygyoa.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(longest.get().length());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n/tmp/tmpamcygyoa.java:30: error: incompatible types:\
    \ inference variable T has incompatible bounds\n                first = Optional.of(first.get().length());\n\
    \                                   ^\n    equality constraints: String\n    lower\
    \ bounds: Integer\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n/tmp/tmpamcygyoa.java:33: error: incompatible types: inference\
    \ variable T has incompatible bounds\n                longest = Optional.of(longest.get().length());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n/tmp/tmpamcygyoa.java:36: error: incompatible types:\
    \ inference variable T has incompatible bounds\n                first = Optional.of(first.get().length());\n\
    \                                   ^\n    equality constraints: String\n    lower\
    \ bounds: Integer\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl0ymfyz0.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpl0ymfyz0.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                counts.put(string.length(),\
    \ 1);\n            } else {\n                counts.put(string.length(), count\
    \ + 1);\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        Optional<String> longest = Optional.empty();\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyj42rhxc.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Integer count : counts.values()) {\n\
    \            if (longest.isPresent() && longest.get().length() > count) {\n  \
    \              return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == count) {\n                longest = Optional.of(longest.get());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa5t4fejx.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (counts.get(length) == null) {\n                counts.put(length,\
    \ 1);\n            } else {\n                counts.put(length, counts.get(length)\
    \ + 1);\n            }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue().equals(counts.get(entry.getKey()))) {\n         \
    \       longest = Optional.of(entry.getKey());\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpviynqbdl.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ if (longest.containsKey(length)) {\n                String current = longest.get(length);\n\
    \                if (current.length() < length) {\n                    longest.put(length,\
    \ string);\n                }\n            } else {\n                longest.put(length,\
    \ string);\n            }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptruruvx2.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longestStrings = new HashMap<>();\n      \
    \  for (String s : strings) {\n            int length = s.length();\n        \
    \    if (longestStrings.containsKey(length)) {\n                String longest\
    \ = longestStrings.get(length);\n                if (s.length() > longest.length())\
    \ {\n                    longest = s;\n                }\n            } else {\n\
    \                longestStrings.put(length, s);\n            }\n        }\n  \
    \      return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6q24eooh.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \                                                                            \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            int\
    \ len = s.length();\n            if (longest.isPresent() && len > longest.get().length())\
    \ {\n                longest = Optional.empty();\n            }\n            if\
    \ (longest.isPresent() && len == longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n            if (first.isPresent() && len ==\
    \ first.get().length()) {\n                first = Optional.of(s);\n         \
    \   }\n        }\n        return longest.isPresent() ? longest : first;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmkllglal.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Integer count : counts.values()) {\n\
    \            if (longest.isPresent() && longest.get().length() > count) {\n  \
    \              return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == count) {\n                longest = Optional.of(longest.get());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowa5fhbg.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_mbztnq7.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp_mbztnq7.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfqsc4ms.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() < s.length()) {\n           \
    \     longest = Optional.empty();\n            }\n            if (first.isPresent()\
    \ && first.get().length() == s.length()) {\n                first = Optional.empty();\n\
    \            }\n            if (longest.isPresent() && longest.get().length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.get().length() == s.length()) {\n\
    \                first = Optional.of(s);\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmbopb02.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezied56s.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) count = 0;\n            counts.put(s, count + 1);\n        }\n    \
    \    Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() < s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx6ycr2c3.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbtven_05.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6g81ll_.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Integer maxCount = null;\n        for (Integer\
    \ count : counts.values()) {\n            if (maxCount == null || count > maxCount)\
    \ {\n                maxCount = count;\n            }\n        }\n        if (maxCount\
    \ == null) {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : strings) {\n          \
    \  Integer count = counts.get(s.length());\n            if (count == maxCount)\
    \ {\n                longest = Optional.of(s);\n                break;\n     \
    \       }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3dzloxse.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbld_v4ro.java:31: error: cannot find symbol\n            if (map.get(s)\
    \ > longest.get().getLength()) {\n                                          ^\n\
    \  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        int\
    \ maxCount = -1;\n        String maxString = null;\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount)\
    \ {\n                maxCount = entry.getValue();\n                maxString =\
    \ entry.getKey().toString();\n            }\n        }\n        return Optional.of(maxString);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vemp94x.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(string.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        if (maxCount == 1) {\n\
    \            return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9det24_9.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(string.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                return Optional.of(entry.getKey());\n            }\n    \
    \    }\n        return Optional.empty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr35s4vgx.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                return Optional.of(entry.getKey());\n\
    \                                  ^\n    equality constraints: String\n    lower\
    \ bounds: Integer\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Integer length : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() == length)\
    \ {\n                continue;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() > length) {\n                return longest;\n   \
    \         }\n            longest = Optional.of(strings.get(length));\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9pgigpe.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwa5x4btr.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkzor8k8n.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppvf3yc74.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmppvf3yc74.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqze8eog.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpkqze8eog.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36xvwlqi.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp36xvwlqi.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc41pieah.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().length()) {\n             \
    \   longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.util.Optional.get(Optional.java:135)\n\tat Problem.longest(tmpugnn48lt.java:31)\n\
    \tat Problem.main(tmpugnn48lt.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpso6zm5v0.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmh4l9iyc.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        int\
    \ longestLength = 0;\n        for (String string : strings) {\n            if\
    \ (string.length() > longestLength) {\n                longestLength = string.length();\n\
    \                longest = Optional.of(string);\n            }\n        }\n  \
    \      return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkktb6pyn.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                return Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp42_5y2r.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ longest = longestString.get(length);\n                if (string.length() >\
    \ longest.length()) {\n                    longest = string;\n               \
    \ }\n            } else {\n                longestString.put(length, string);\n\
    \            }\n        }\n        return longestString.isEmpty() ? Optional.empty()\
    \ : Optional.of(longestString.get(longestString.keySet().iterator().next()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpex_meu7q.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpybvgw818.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1y1scgen.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            String\
    \ longestKey = longest.get(len);\n            if (longestKey == null || longestKey.length()\
    \ < len) {\n                longest.put(len, s);\n            }\n        }\n \
    \       return longest.entrySet().stream().max(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuiw01t8n.java:28: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        if (maxCount == 1) {\n            return Optional.of(strings.get(counts.values().iterator().next()));\n\
    \        }\n        return Optional.of(strings.get(maxCount - 1));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxpof0gi.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpva8cftgj.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            longest\
    \ = longest.orElse(longest.map(s -> s.length()).max());\n            first = first.orElse(s);\n\
    \        }\n        return longest.isPresent() ? first : longest;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpytfocpfs.java:23: error: variable s is already defined in method\
    \ longest(ArrayList<String>)\n            longest = longest.orElse(longest.map(s\
    \ -> s.length()).max());\n                                                 ^\n\
    /tmp/tmpytfocpfs.java:23: error: cannot find symbol\n            longest = longest.orElse(longest.map(s\
    \ -> s.length()).max());\n                                                   \
    \              ^\n  symbol:   method max()\n  location: class Optional<Integer>\n\
    /tmp/tmpytfocpfs.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n            first = first.orElse(s);\n                \
    \                ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<Integer, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n  \
    \          counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        int maxCountIndex = -1;\n        for (Map.Entry<Integer, Integer>\
    \ entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount) {\n\
    \                maxCount = entry.getValue();\n                maxCountIndex =\
    \ entry.getKey();\n            }\n        }\n        if (maxCount == 0) return\
    \ Optional.empty();\n        return Optional.of(strings.get(maxCountIndex));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0dwx_uw.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         counts.merge(length, 1, Integer::sum);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        int maxCount = -1;\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount)\
    \ {\n                maxCount = entry.getValue();\n                longest = Optional.of(entry.getKey());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdp_petjl.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.getOrDefault(string.length(),\
    \ 0);\n            counts.put(string.length(), count + 1);\n        }\n      \
    \  Optional<String> longest = Optional.empty();\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue().equals(counts.get(entry.getKey())))\
    \ {\n                longest = Optional.of(entry.getKey());\n                break;\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp204lfssr.java:28: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq2lb4zyq.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpq2lb4zyq.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         longest = Optional.of(s);\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppsyhudoi.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo04hw2h4.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int length = s.length();\n            if (counts.containsKey(length))\
    \ {\n                counts.put(length, counts.get(length) + 1);\n           \
    \ } else {\n                counts.put(length, 1);\n            }\n        }\n\
    \        Optional<String> longest = Optional.empty();\n        int maxCount =\
    \ 0;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n\
    \            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \                longest = Optional.of(entry.getKey());\n            }\n     \
    \   }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpawa0x2na.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1zroz0j.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4hukdtq7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ oldValue = longestString.get(length);\n                if (oldValue.length()\
    \ > string.length()) {\n                    longestString.put(length, string);\n\
    \                }\n            } else {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ejge7_k.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo9tkmmlw.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpo9tkmmlw.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2cv_gz70.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.util.Optional.get(Optional.java:135)\n\tat Problem.longest(tmpbad0gvmb.java:31)\n\
    \tat Problem.main(tmpbad0gvmb.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int length = s.length();\n            counts.merge(length,\
    \ 1, Integer::sum);\n        }\n        int maxCount = Collections.max(counts.values());\n\
    \        int maxCountIndex = counts.keySet().stream().filter(c -> c == maxCount).findFirst().orElse(-1);\n\
    \        if (maxCountIndex == -1) {\n            return Optional.empty();\n  \
    \      }\n        return Optional.of(strings.get(maxCountIndex));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6w40ucq1.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30vkjv5w.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            String longestString\
    \ = longest.get(len);\n            if (longestString == null) {\n            \
    \    longest.put(len, s);\n            } else {\n                int longestLen\
    \ = longestString.length();\n                if (longestLen > len) {\n       \
    \             longest.put(len, s);\n                }\n            }\n       \
    \ }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7mu27xe.java:33: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4sb1s8r4.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp4sb1s8r4.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckhzycnc.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (counts.containsKey(len))\
    \ {\n                counts.put(len, counts.get(len) + 1);\n            } else\
    \ {\n                counts.put(len, 1);\n            }\n        }\n        int\
    \ maxCount = -1;\n        int maxLen = -1;\n        for (Map.Entry<Integer, Integer>\
    \ entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount) {\n\
    \                maxCount = entry.getValue();\n                maxLen = entry.getKey();\n\
    \            }\n        }\n        if (maxCount == 1) {\n            return Optional.of(strings.get(maxLen));\n\
    \        }\n        return Optional.of(strings.get(maxLen));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwefl6n6.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > map.get(longest)) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.longest(tmpqbq5vl48.java:31)\n\
    \tat Problem.main(tmpqbq5vl48.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij7j9jvb.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpij7j9jvb.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (longest.containsKey(length)) {\n                String oldValue\
    \ = longest.get(length);\n                if (oldValue.length() < string.length())\
    \ {\n                    longest.put(length, oldValue);\n                }\n \
    \           } else {\n                longest.put(length, string);\n         \
    \   }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).map(s\
    \ -> s.isEmpty() ? s : longest.get(s.length())).orElse(null);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0mqe9iz.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).map(s\
    \ -> s.isEmpty() ? s : longest.get(s.length())).orElse(null);\n              \
    \                                                                            \
    \                                                                            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppo541jx0.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmefa94iq.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd0vu69qo.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpywm8bhjj.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpywm8bhjj.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxd_cnxg.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longestStrings = new HashMap<>();\n      \
    \  for (String s : strings) {\n            int length = s.length();\n        \
    \    if (longestStrings.containsKey(length)) {\n                String oldValue\
    \ = longestStrings.get(length);\n                if (oldValue.length() < length)\
    \ {\n                    longestStrings.put(length, s);\n                }\n \
    \           } else {\n                longestStrings.put(length, s);\n       \
    \     }\n        }\n        return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdc8rcjb5.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \                                                                            \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyd2_xnmr.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpyd2_xnmr.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjtsbgux0.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String old = longest.get(len);\n                if (old.length()\
    \ > s.length()) {\n                    longest.put(len, s);\n                }\n\
    \            } else {\n                longest.put(len, s);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp37cnh6uz.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1fehzz1j.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            String longestKey\
    \ = longest.get(len);\n            if (longestKey == null) {\n               \
    \ longest.put(len, s);\n            } else {\n                int longestLen =\
    \ longestKey.length();\n                if (len > longestLen) {\n            \
    \        longestKey = s;\n                }\n            }\n        }\n      \
    \  return longest.isEmpty() ? Optional.empty() : Optional.of(longest.get(longest.size()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc35jrxt7.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.get(s.length());\n          \
    \  if (count == null) {\n                count = 0;\n            }\n         \
    \   counts.put(s.length(), count + 1);\n        }\n        int maxCount = -1;\n\
    \        for (Integer count : counts.values()) {\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n            }\n        }\n        if (maxCount\
    \ == 0) {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : strings) {\n          \
    \  int count = counts.get(s.length());\n            if (count == maxCount) {\n\
    \                longest = Optional.of(s);\n                break;\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxln4d72s.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwtjkom2.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvejw0oq5.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n      \
    \      if (entry.getValue().equals(counts.get(entry.getKey()))) {\n          \
    \      longest = Optional.of(entry.getKey());\n                break;\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_gii7cl7.java:20: error: incompatible types: inferred type does\
    \ not conform to equality constraint(s)\n        Map<String, Integer> counts =\
    \ strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n    inferred:\
    \ Integer\n    equality constraints(s): Integer,Long\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().substring(0, longest.get().length()\
    \ - s.length()));\n            } else if (first.isPresent() && first.get().length()\
    \ == s.length()) {\n                first = Optional.of(first.get().substring(0,\
    \ first.get().length() - s.length()));\n            } else {\n               \
    \ longest = Optional.of(s);\n                first = Optional.of(s);\n       \
    \     }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1yjzyep.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().substring(0, longest.get().length()\
    \ - s.length()));\n            } else {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest.isPresent() ? first : longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0qykrc9.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lq2keyq.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (map.containsKey(len))\
    \ {\n                String v = map.get(len);\n                if (v.length()\
    \ < s.length()) {\n                    map.put(len, s);\n                }\n \
    \           } else {\n                map.put(len, s);\n            }\n      \
    \  }\n        return Optional.ofNullable(map.values().stream().max(Comparator.comparing(String::length)).orElse(null));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptty2xsjp.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8k1r_dn6.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8hq62ake.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.getOrElse(String.valueOf(s)).length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzpskdtxb.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.getOrElse(String.valueOf(s)).length()) {\n                       \
    \                ^\n  symbol:   method getOrElse(String)\n  location: variable\
    \ longest of type Optional<String>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = map.entrySet().stream()\n                .max(Comparator.comparingInt(Map.Entry::getValue))\n\
    \                .map(Map.Entry::getKey);\n        if (longest.isPresent()) {\n\
    \            return longest;\n        }\n        return Optional.of(strings.get(0));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qj4sq20.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n      \
    \      if (entry.getValue().equals(counts.get(entry.getKey()))) {\n          \
    \      longest = Optional.of(entry.getKey());\n            }\n        }\n    \
    \    return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz0808fdq.java:20: error: cannot find symbol\n        Map<String,\
    \ Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                                 \
    \                                    ^\n  symbol:   variable Function\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        for (Integer count : counts.values()) {\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n            }\n        }\n\
    \        if (maxCount == 0) {\n            return Optional.empty();\n        }\n\
    \        Optional<String> longest = Optional.empty();\n        for (Integer count\
    \ : counts.values()) {\n            if (count == maxCount) {\n               \
    \ longest = Optional.of(String.join(\"\", strings.subList(0, count)));\n     \
    \       }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_41518u.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd0aoc0gw.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(maxCount\
    \ - 1));\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpky3ofap5.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfurw7cpq.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpfurw7cpq.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            String s = entry.getKey();\n\
    \            Integer count = entry.getValue();\n            if (count > longest.get().getLength())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgd_a4q09.java:33: error: cannot find symbol\n            if (count\
    \ > longest.get().getLength()) {\n                                     ^\n  symbol:\
    \   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n      \
    \      if (entry.getValue().equals(counts.get(entry.getKey()))) {\n          \
    \      longest = Optional.of(entry.getKey());\n                break;\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfn9vu1yn.java:20: error: incompatible types: inferred type does\
    \ not conform to equality constraint(s)\n        Map<String, Integer> counts =\
    \ strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n    inferred:\
    \ Integer\n    equality constraints(s): Integer,Long\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7aq8wci.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpb7aq8wci.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                count = 0;\n            }\n      \
    \      counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         continue;\n            }\n            longest = Optional.of(s);\n  \
    \      }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpen6xee_k.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n\
    \            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \            }\n        }\n        if (maxCount == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        for\
    \ (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n            if (entry.getValue()\
    \ == maxCount) {\n                longest = Optional.of(entry.getKey());\n   \
    \             break;\n            }\n        }\n        return longest;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu1hfinaz.java:37: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            String longest = longestString.get(length);\n            if (longest\
    \ == null || longest.length() < length) {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        return longestString.isEmpty() ?\
    \ Optional.empty() : Optional.of(longestString.get(longestString.size()));\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzq6z6x4a.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        Optional<String> first = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue().equals(counts.get(entry.getKey())))\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        if (longest.isPresent()) {\n            return longest;\n \
    \       }\n        for (Map.Entry<String, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue().equals(counts.get(entry.getKey()))) {\n\
    \                first = Optional.of(entry.getKey());\n            }\n       \
    \ }\n        return longest.orElse(first);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy37idrio.java:20: error: incompatible types: inferred type does\
    \ not conform to equality constraint(s)\n        Map<String, Integer> counts =\
    \ strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n    inferred:\
    \ Integer\n    equality constraints(s): Integer,Long\n/tmp/tmpy37idrio.java:36:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp75g1aqbe.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         longest = Optional.of(s);\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvuyemph.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > s.length()) {\n                    longest.put(len, s);\n                }\n\
    \            } else {\n                longest.put(len, s);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp53vw224k.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                continue;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \                continue;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwhk522zs.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7k6m58i.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpb7k6m58i.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) count = 1;\n            else count += 1;\n            counts.put(s,\
    \ count);\n        }\n        Optional<String> longest = Optional.empty();\n \
    \       for (String s : counts.keySet()) {\n            if (longest.isPresent()\
    \ && longest.get().length() > s.length()) {\n                return longest;\n\
    \            }\n            longest = Optional.of(s);\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldyvs_jn.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String string : strings) {\n       \
    \     if (longest.isPresent() && longest.length() > string.length()) {\n     \
    \           longest = Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.length() == string.length()) {\n                longest = Optional.of(longest.get().length());\n\
    \            }\n            if (first.isPresent() && first.length() > string.length())\
    \ {\n                first = Optional.empty();\n            }\n            if\
    \ (first.isPresent() && first.length() == string.length()) {\n               \
    \ first = Optional.of(first.get().length());\n            }\n        }\n     \
    \   if (longest.isPresent() && longest.get().length() > first.get().length())\
    \ {\n            return longest;\n        }\n        if (longest.isPresent() &&\
    \ longest.get().length() == first.get().length()) {\n            return longest;\n\
    \        }\n        return first;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp56xcdo_y.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > string.length()) {\n                                 \
    \             ^\n  symbol:   method length()\n  location: variable longest of\
    \ type Optional<String>\n/tmp/tmp56xcdo_y.java:26: error: cannot find symbol\n\
    \            if (longest.isPresent() && longest.length() == string.length()) {\n\
    \                                              ^\n  symbol:   method length()\n\
    \  location: variable longest of type Optional<String>\n/tmp/tmp56xcdo_y.java:27:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(longest.get().length());\n              \
    \                       ^\n    equality constraints: String\n    lower bounds:\
    \ Integer\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n/tmp/tmp56xcdo_y.java:29: error: cannot find symbol\n            if\
    \ (first.isPresent() && first.length() > string.length()) {\n                \
    \                          ^\n  symbol:   method length()\n  location: variable\
    \ first of type Optional<String>\n/tmp/tmp56xcdo_y.java:32: error: cannot find\
    \ symbol\n            if (first.isPresent() && first.length() == string.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmp56xcdo_y.java:33:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              first = Optional.of(first.get().length());\n                  \
    \                 ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ if (longest.get(length) == null) {\n                longest.put(length, string);\n\
    \            } else {\n                int maxLength = longest.get(length).length();\n\
    \                if (maxLength < length) {\n                    longest.put(length,\
    \ string);\n                }\n            }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1qtucbpj.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvqhq_xi.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4s7_5smr.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(string.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        if (maxCount == 1) {\n\
    \            return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_aqtnpn.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) counts.put(s, 1);\n            else counts.put(s, count + 1);\n   \
    \     }\n        Optional<String> longest = Optional.empty();\n        for (String\
    \ s : counts.keySet()) {\n            if (longest.isPresent() && longest.get().length()\
    \ > s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwd46dunq.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \       break;\n            }\n        }\n        return longest;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ov8_tz2.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg9b3na84.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpg9b3na84.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps8ijxzdt.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmps8ijxzdt.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmps8ijxzdt.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmps8ijxzdt.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx1617mn.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphy38xesx.java:31: error: cannot find symbol\n            if (map.get(s)\
    \ > longest.get().getLength()) {\n                                          ^\n\
    \  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptp8wyhz5.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmptp8wyhz5.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        int\
    \ longestLength = 0;\n        for (String s : strings) {\n            int length\
    \ = s.length();\n            if (length > longestLength) {\n                longestLength\
    \ = length;\n                longest = Optional.of(s);\n            }\n      \
    \  }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzsbinpii.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (map.containsKey(len))\
    \ {\n                String oldValue = map.get(len);\n                if (oldValue.length()\
    \ > s.length()) {\n                    map.put(len, s);\n                }\n \
    \           } else {\n                map.put(len, s);\n            }\n      \
    \  }\n        Optional<String> longest = Optional.empty();\n        for (Map.Entry<Integer,\
    \ String> entry : map.entrySet()) {\n            if (longest.isPresent() && longest.get().length()\
    \ > entry.getValue().length()) {\n                longest = Optional.of(entry.getValue());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgpvpaor9.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj9byjvl_.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpj9byjvl_.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() > s.length()) {\n           \
    \     longest = Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(longest.get().concat(s));\n\
    \            }\n            if (first.isPresent() && first.get().length() == s.length())\
    \ {\n                first = Optional.of(first.get().concat(s));\n           \
    \ }\n        }\n        return longest.isPresent() ? longest : first;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx7r97v63.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyrnqm_r4.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wlnyo8j.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.isPresent()\
    \ ? longest : first;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprf1r2ejp.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmprf1r2ejp.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmprf1r2ejp.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaxpo8viq.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue() == maxCount) {\n                longest = Optional.of(entry.getKey());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_vg1_97.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3_acs01.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ longest = longestString.get(length);\n                if (string.length() >\
    \ longest.length()) {\n                    longest = string;\n               \
    \ }\n            } else {\n                longestString.put(length, string);\n\
    \            }\n        }\n        return longestString.isEmpty() ? Optional.empty()\
    \ : Optional.of(longestString.get(longestString.keySet().iterator().next()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3svobap_.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue().equals(strings.size()))\
    \ {\n                longest = Optional.of(strings.get(entry.getKey()));\n   \
    \         }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_exiork.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5x0us3bp.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        if (maxCount == 1) {\n\
    \            return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(maxCount\
    \ - 1));\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ory3epw.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().length()) {\n                longest =\
    \ Optional.of(s);\n            }\n        }\n        return longest;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.util.Optional.get(Optional.java:135)\n\tat Problem.longest(tmpaab6l0lc.java:31)\n\
    \tat Problem.main(tmpaab6l0lc.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkj7yyfuh.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxyc8g25a.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            map.computeIfAbsent(s.length(), k -> s);\n     \
    \   }\n        return Optional.ofNullable(map.values().stream().max(Comparator.naturalOrder()).get());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_e5mnheb.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ oldValue = longestString.get(length);\n                if (oldValue.length()\
    \ > length) {\n                    longestString.put(length, oldValue);\n    \
    \            }\n            } else {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdbky7z6.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsc5wtvtw.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmpsc5wtvtw.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmpsc5wtvtw.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmpsc5wtvtw.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (Map.Entry<String, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() > longest.get().getLength()) {\n       \
    \         longest = Optional.of(entry.getKey());\n            }\n        }\n \
    \       return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfavwyp3h.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getBytes().length)\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8uomlb38.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getBytes().length)\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaa863pwz.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().length() > s.length() ? longest.get()\
    \ : s);\n            } else {\n                longest = Optional.of(s);\n   \
    \         }\n        }\n        return longest.isPresent() ? first : longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe6fb9ahx.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw76d8luk.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                count = 0;\n            }\n      \
    \      counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         continue;\n            }\n            if (longest.isPresent() && longest.get().length()\
    \ == s.length()) {\n                continue;\n            }\n            longest\
    \ = Optional.of(s);\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5h6_i_89.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                counts.put(string.length(),\
    \ 1);\n            } else {\n                counts.put(string.length(), count\
    \ + 1);\n            }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue() > longest.get().getLength()) {\n                longest\
    \ = Optional.of(entry.getKey());\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkuvskprn.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpkuvskprn.java:32:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().substring(0, longest.get().length()\
    \ - s.length()));\n            } else {\n                longest = Optional.of(s);\n\
    \            }\n            if (first.isPresent() && first.get().length() == s.length())\
    \ {\n                first = Optional.of(first.get().substring(0, first.get().length()\
    \ - s.length()));\n            } else {\n                first = Optional.of(s);\n\
    \            }\n        }\n        return longest.isPresent() ? longest : first;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpns_t1pqr.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue() > longest.get().getLength()) {\n                longest\
    \ = Optional.of(entry.getKey());\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphm746v3l.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmphm746v3l.java:32:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk2xxz1gi.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(counts.keySet().stream().filter(i\
    \ -> counts.get(i) == maxCount).findFirst().get()));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwjv8hief.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnmw_fo24.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (longest.containsKey(length)) {\n                String current =\
    \ longest.get(length);\n                if (current.length() > length) {\n   \
    \                 longest.put(length, string);\n                }\n          \
    \  } else {\n                longest.put(length, string);\n            }\n   \
    \     }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbbrvv8i.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > s.length()) {\n                    longest.put(len, s);\n                }\n\
    \            } else {\n                longest.put(len, s);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1jtm8ljn.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg866u644.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpocorw2cn.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> e : counts.entrySet())\
    \ {\n            if (e.getValue() > longest.get().getLength()) {\n           \
    \     longest = Optional.of(e.getKey());\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph8f_oqw2.java:27: error: cannot find symbol\n            if (e.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \ ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmph8f_oqw2.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(e.getKey());\n                          \
    \           ^\n    equality constraints: String\n    lower bounds: Integer\n \
    \ where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) counts.put(s, 1);\n            else counts.put(s, count + 1);\n   \
    \     }\n        Optional<String> longest = Optional.empty();\n        for (String\
    \ s : counts.keySet()) {\n            if (counts.get(s) > longest.get().getLength())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_zody8rl.java:26: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphtfjt0nk.java:31: error: cannot find symbol\n            if (map.get(s)\
    \ > longest.get().getLength()) {\n                                          ^\n\
    \  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (Map.Entry<String, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() > longest.get().getLength()) {\n       \
    \         longest = Optional.of(entry.getKey());\n            }\n        }\n \
    \       return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphar481ce.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            longest\
    \ = longest.orElse(s);\n            first = first.orElse(s);\n        }\n    \
    \    return longest.map(s -> longest.equals(first) ? s : longest);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv5i4zktf.java:23: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n            longest = longest.orElse(s);\n            \
    \                        ^\n/tmp/tmpv5i4zktf.java:24: error: incompatible types:\
    \ String cannot be converted to Optional<String>\n            first = first.orElse(s);\n\
    \                                ^\n/tmp/tmpv5i4zktf.java:26: error: incompatible\
    \ types: inference variable U has incompatible bounds\n        return longest.map(s\
    \ -> longest.equals(first) ? s : longest);\n                          ^\n    equality\
    \ constraints: String\n    lower bounds: Optional<String>,String\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>map(Function<?\
    \ super T,? extends U>)\n    T extends Object declared in class Optional\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (first.isPresent() && s.length()\
    \ == first.length()) {\n                first = Optional.empty();\n          \
    \  }\n            if (longest.isPresent() && s.length() > longest.length()) {\n\
    \                longest = Optional.of(s);\n            }\n            if (first.isPresent()\
    \ && s.length() == first.length()) {\n                first = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9x9fmwgo.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp9x9fmwgo.java:26: error: cannot find symbol\n    \
    \        if (first.isPresent() && s.length() == first.length()) {\n          \
    \                                              ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmp9x9fmwgo.java:29:\
    \ error: cannot find symbol\n            if (longest.isPresent() && s.length()\
    \ > longest.length()) {\n                                                    \
    \       ^\n  symbol:   method length()\n  location: variable longest of type Optional<String>\n\
    /tmp/tmp9x9fmwgo.java:32: error: cannot find symbol\n            if (first.isPresent()\
    \ && s.length() == first.length()) {\n                                       \
    \                 ^\n  symbol:   method length()\n  location: variable first of\
    \ type Optional<String>\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ String previous = longest.get(length);\n            if (previous == null) {\n\
    \                longest.put(length, string);\n            } else if (previous.length()\
    \ > length) {\n                longest.put(length, string);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpplynhuq4.java:30: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25kxkzdz.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp25kxkzdz.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmp25kxkzdz.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmp25kxkzdz.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<Integer, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n  \
    \          counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpar5kxrpl.java:25: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpar5kxrpl.java:26:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String string : strings) {\n            int len = string.length();\n      \
    \      String longestString = longest.get(len);\n            if (longestString\
    \ == null) {\n                longest.put(len, string);\n            } else {\n\
    \                int longestLen = longestString.length();\n                if\
    \ (longestLen > len) {\n                    longest.put(len, string);\n      \
    \          }\n            }\n        }\n        if (longest.isEmpty()) {\n   \
    \         return Optional.empty();\n        }\n        return longest.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv8l87vpt.java:36: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \                                                                            \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpls2rusv3.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ String longestKey = longest.get(length);\n            if (longestKey == null)\
    \ {\n                longest.put(length, string);\n            } else {\n    \
    \            int longestLength = longestKey.length();\n                if (longestLength\
    \ < length) {\n                    longest.put(length, string);\n            \
    \    }\n            }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsxolu4w6.java:33: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfiy8i1x3.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        return counts.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getKey);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ofxzpdn.java:20: error: incompatible types: inferred type does\
    \ not conform to equality constraint(s)\n        Map<String, Integer> counts =\
    \ strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n    inferred:\
    \ Integer\n    equality constraints(s): Integer,Long\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnn5m0xk4.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2d6hxjko.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> e : counts.entrySet())\
    \ {\n            if (e.getValue().equals(strings.size())) {\n                longest\
    \ = Optional.of(strings.get(e.getKey()));\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqew_04fu.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(maxCount\
    \ - 1));\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy672t7e2.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        return counts.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getKey);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrdph6ci.java:18: error: cannot find symbol\n        Map<String,\
    \ Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                                 \
    \                                    ^\n  symbol:   variable Function\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.isPresent()\
    \ ? longest : first;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42xew8sw.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp42xew8sw.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmp42xew8sw.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        int\
    \ maxCount = 0;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() > maxCount) {\n                maxCount\
    \ = entry.getValue();\n            }\n        }\n        if (maxCount == 0) {\n\
    \            return Optional.empty();\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() == maxCount) {\n                longest\
    \ = Optional.of(entry.getKey());\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvmqe8ev3.java:37: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = 0;\n        for (Integer count : counts.values()) {\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n            }\n        }\n\
    \        if (maxCount == 0) {\n            return Optional.empty();\n        }\n\
    \        Optional<String> longest = Optional.empty();\n        for (Integer count\
    \ : counts.values()) {\n            if (count == maxCount) {\n               \
    \ longest = Optional.of(strings.get(count - 1));\n                break;\n   \
    \         }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45zos5sl.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4k85ouwm.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (longest.containsKey(length)) {\n                String current =\
    \ longest.get(length);\n                if (current.length() > length) {\n   \
    \                 longest.put(length, string);\n                }\n          \
    \  } else {\n                longest.put(length, string);\n            }\n   \
    \     }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn0wa9bzg.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n\
    \            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \            }\n        }\n        if (maxCount == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        for\
    \ (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n            if (entry.getValue()\
    \ == maxCount) {\n                longest = Optional.of(entry.getKey());\n   \
    \             break;\n            }\n        }\n        return longest;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4xqs53l.java:37: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwmwktam2.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nuhvylu.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp4nuhvylu.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmp4nuhvylu.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmp4nuhvylu.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
