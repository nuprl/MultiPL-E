name: HumanEval_12_longest
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int length = s.length();\n            String\
    \ longestKey = longest.get(length);\n            if (longestKey == null) {\n \
    \               longestKey = s;\n            }\n            if (longestKey.length()\
    \ < length) {\n                longestKey = s;\n            }\n            longest.put(length,\
    \ longestKey);\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwmv9dv0h.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue().equals(strings.size())) {\n                longest\
    \ = Optional.of(strings.get(entry.getKey()));\n                break;\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6inur9cc.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            map.computeIfAbsent(s.length(), k -> s);\n     \
    \   }\n        Optional<String> longest = map.entrySet().stream()\n          \
    \      .max(Comparator.comparing(Map.Entry::getKey))\n                .map(Map.Entry::getValue);\n\
    \        if (longest.isPresent()) {\n            return longest;\n        }\n\
    \        return Optional.of(strings.get(0));\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            counts.merge(len,\
    \ 1, Integer::sum);\n        }\n        int maxCount = Collections.max(counts.values());\n\
    \        List<String> longestStrings = new ArrayList<>();\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                longestStrings.add(strings.get(entry.getKey()));\n      \
    \      }\n        }\n        if (longestStrings.size() == 1) {\n            return\
    \ Optional.of(longestStrings.get(0));\n        }\n        return Optional.of(longestStrings.get(0));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zsgyd1y.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                count = 0;\n            }\n      \
    \      counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         continue;\n            }\n            if (longest.isPresent() && longest.get().length()\
    \ == s.length()) {\n                continue;\n            }\n            longest\
    \ = Optional.of(s);\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7kily6qf.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1aynn7uy.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ string : strings) {\n            Integer count = counts.getOrDefault(string,\
    \ 0);\n            counts.put(string, count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gb27n7o.java:23: error: incompatible types: String cannot be converted\
    \ to Integer\n            counts.put(string, count + 1);\n                   \
    \    ^\n/tmp/tmp4gb27n7o.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp4gb27n7o.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp799948vt.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue().equals(counts.get(entry.getKey()))) {\n         \
    \       longest = Optional.of(entry.getKey());\n                break;\n     \
    \       }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi93sx5b0.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        int maxCount = 0;\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount)\
    \ {\n                maxCount = entry.getValue();\n                longest = Optional.of(entry.getKey());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkzibjq9y.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmxhepecc.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longestString = new HashMap<>();\n       \
    \ for (String s : strings) {\n            int length = s.length();\n         \
    \   if (longestString.containsKey(length)) {\n                String oldValue\
    \ = longestString.get(length);\n                if (oldValue.length() < length)\
    \ {\n                    longestString.put(length, s);\n                }\n  \
    \          } else {\n                longestString.put(length, s);\n         \
    \   }\n        }\n        Optional<String> longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1r302mfg.java:32: error: cannot find symbol\n        Optional<String>\
    \ longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n                                                      \
    \                                                               ^\n  symbol: \
    \  method length()\n  location: class Integer\n/tmp/tmp1r302mfg.java:32: error:\
    \ cannot find symbol\n        Optional<String> longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n                                                      \
    \                                                                            \
    \                                                                            \
    \     ^\n  symbol:   method length()\n  location: class Integer\n/tmp/tmp1r302mfg.java:32:\
    \ error: incompatible types: bad type in conditional expression\n        Optional<String>\
    \ longest = longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ > longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey().length()\
    \ ? longestString.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey()\
    \ : Optional.empty();\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\n    Integer cannot be converted to Optional<String>\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().length()) {\n             \
    \   longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.Optional.get(Optional.java:143)\n\tat Problem.longest(tmplm4z1lkn.java:31)\n\
    \tat Problem.main(tmplm4z1lkn.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2cbgjtic.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ oldValue = longestString.get(length);\n                if (oldValue.length()\
    \ < length) {\n                    longestString.put(length, string);\n      \
    \          }\n            } else {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        if (longestString.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        Optional<String> longest\
    \ = longestString.entrySet().stream()\n                .max(Comparator.comparing(Map.Entry::getValue))\n\
    \                .map(Map.Entry::getKey)\n                .map(String::valueOf)\n\
    \                .findFirst();\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpepy9dko8.java:39: error: cannot find symbol\n                .findFirst();\n\
    \                ^\n  symbol:   method findFirst()\n  location: class Optional<String>\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyaomb155.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String string : strings) {\n       \
    \     if (longest.isPresent() && longest.get().length() < string.length()) {\n\
    \                longest = Optional.empty();\n            }\n            if (first.isPresent()\
    \ && first.get().length() == string.length()) {\n                first = Optional.empty();\n\
    \            }\n            if (longest.isPresent() && longest.get().length()\
    \ == string.length()) {\n                longest = Optional.of(longest.get().concat(string));\n\
    \            }\n            if (first.isPresent() && first.get().length() == string.length())\
    \ {\n                first = Optional.of(first.get().concat(string));\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeueowfml.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp178n3nwu.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() > s.length()) {\n           \
    \     longest = Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(longest.get().length());\n\
    \            }\n            if (first.isPresent() && first.get().length() == s.length())\
    \ {\n                first = Optional.of(first.get().length());\n            }\n\
    \            if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                longest = Optional.of(longest.get().length());\n            }\n\
    \            if (first.isPresent() && first.get().length() == s.length()) {\n\
    \                first = Optional.of(first.get().length());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl9em7whz.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(longest.get().length());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n/tmp/tmpl9em7whz.java:30: error: incompatible types:\
    \ inference variable T has incompatible bounds\n                first = Optional.of(first.get().length());\n\
    \                                   ^\n    equality constraints: String\n    lower\
    \ bounds: Integer\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n/tmp/tmpl9em7whz.java:33: error: incompatible types: inference\
    \ variable T has incompatible bounds\n                longest = Optional.of(longest.get().length());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n/tmp/tmpl9em7whz.java:36: error: incompatible types:\
    \ inference variable T has incompatible bounds\n                first = Optional.of(first.get().length());\n\
    \                                   ^\n    equality constraints: String\n    lower\
    \ bounds: Integer\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3v4xr2cu.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp3v4xr2cu.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                counts.put(string.length(),\
    \ 1);\n            } else {\n                counts.put(string.length(), count\
    \ + 1);\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        Optional<String> longest = Optional.empty();\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplgfxgf4o.java:33: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Integer count : counts.values()) {\n\
    \            if (longest.isPresent() && longest.get().length() > count) {\n  \
    \              return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == count) {\n                longest = Optional.of(longest.get());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48pmmys5.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (counts.get(length) == null) {\n                counts.put(length,\
    \ 1);\n            } else {\n                counts.put(length, counts.get(length)\
    \ + 1);\n            }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue().equals(counts.get(entry.getKey()))) {\n         \
    \       longest = Optional.of(entry.getKey());\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprz1b5cf8.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ if (longest.containsKey(length)) {\n                String current = longest.get(length);\n\
    \                if (current.length() < length) {\n                    longest.put(length,\
    \ string);\n                }\n            } else {\n                longest.put(length,\
    \ string);\n            }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp971sebr_.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longestStrings = new HashMap<>();\n      \
    \  for (String s : strings) {\n            int length = s.length();\n        \
    \    if (longestStrings.containsKey(length)) {\n                String longest\
    \ = longestStrings.get(length);\n                if (s.length() > longest.length())\
    \ {\n                    longest = s;\n                }\n            } else {\n\
    \                longestStrings.put(length, s);\n            }\n        }\n  \
    \      return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbg7lm8pg.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \                                                                            \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            int\
    \ len = s.length();\n            if (longest.isPresent() && len > longest.get().length())\
    \ {\n                longest = Optional.empty();\n            }\n            if\
    \ (longest.isPresent() && len == longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n            if (first.isPresent() && len ==\
    \ first.get().length()) {\n                first = Optional.of(s);\n         \
    \   }\n        }\n        return longest.isPresent() ? longest : first;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkcgyjqw3.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Integer count : counts.values()) {\n\
    \            if (longest.isPresent() && longest.get().length() > count) {\n  \
    \              return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == count) {\n                longest = Optional.of(longest.get());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3qgn0evs.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpecu911m3.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpecu911m3.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp27udnk75.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() < s.length()) {\n           \
    \     longest = Optional.empty();\n            }\n            if (first.isPresent()\
    \ && first.get().length() == s.length()) {\n                first = Optional.empty();\n\
    \            }\n            if (longest.isPresent() && longest.get().length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.get().length() == s.length()) {\n\
    \                first = Optional.of(s);\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwp__5wvc.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpog9foyof.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) count = 0;\n            counts.put(s, count + 1);\n        }\n    \
    \    Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() < s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz9qcxpo5.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj3qdmvkl.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptk3gx6p9.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Integer maxCount = null;\n        for (Integer\
    \ count : counts.values()) {\n            if (maxCount == null || count > maxCount)\
    \ {\n                maxCount = count;\n            }\n        }\n        if (maxCount\
    \ == null) {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : strings) {\n          \
    \  Integer count = counts.get(s.length());\n            if (count == maxCount)\
    \ {\n                longest = Optional.of(s);\n                break;\n     \
    \       }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpywmon5dn.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz5m8d8m9.java:31: error: cannot find symbol\n            if (map.get(s)\
    \ > longest.get().getLength()) {\n                                          ^\n\
    \  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        int\
    \ maxCount = -1;\n        String maxString = null;\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount)\
    \ {\n                maxCount = entry.getValue();\n                maxString =\
    \ entry.getKey().toString();\n            }\n        }\n        return Optional.of(maxString);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjtmjjxl5.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(string.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        if (maxCount == 1) {\n\
    \            return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvk7x9rlt.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(string.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                return Optional.of(entry.getKey());\n            }\n    \
    \    }\n        return Optional.empty();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt04qeudw.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                return Optional.of(entry.getKey());\n\
    \                                  ^\n    equality constraints: String\n    lower\
    \ bounds: Integer\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Integer length : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() == length)\
    \ {\n                continue;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() > length) {\n                return longest;\n   \
    \         }\n            longest = Optional.of(strings.get(length));\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyywop602.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6mod8fl2.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgo5wtc9y.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogunqnbt.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpogunqnbt.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_ecs_xu.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpl_ecs_xu.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpua5b4l1h.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpua5b4l1h.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9eo_jb54.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().length()) {\n             \
    \   longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.Optional.get(Optional.java:143)\n\tat Problem.longest(tmpsccl76wy.java:31)\n\
    \tat Problem.main(tmpsccl76wy.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8zyv_k40.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7glu7e3.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        int\
    \ longestLength = 0;\n        for (String string : strings) {\n            if\
    \ (string.length() > longestLength) {\n                longestLength = string.length();\n\
    \                longest = Optional.of(string);\n            }\n        }\n  \
    \      return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq_ixj93q.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                return Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4f08cpi6.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ longest = longestString.get(length);\n                if (string.length() >\
    \ longest.length()) {\n                    longest = string;\n               \
    \ }\n            } else {\n                longestString.put(length, string);\n\
    \            }\n        }\n        return longestString.isEmpty() ? Optional.empty()\
    \ : Optional.of(longestString.get(longestString.keySet().iterator().next()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcrpim5et.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0argney.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptveja8h7.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            String\
    \ longestKey = longest.get(len);\n            if (longestKey == null || longestKey.length()\
    \ < len) {\n                longest.put(len, s);\n            }\n        }\n \
    \       return longest.entrySet().stream().max(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9i9pk6gd.java:28: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByKey()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        if (maxCount == 1) {\n            return Optional.of(strings.get(counts.values().iterator().next()));\n\
    \        }\n        return Optional.of(strings.get(maxCount - 1));\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cgubcll.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpue2jvhgn.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            longest\
    \ = longest.orElse(longest.map(s -> s.length()).max());\n            first = first.orElse(s);\n\
    \        }\n        return longest.isPresent() ? first : longest;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg3adlnen.java:23: error: variable s is already defined in method\
    \ longest(ArrayList<String>)\n            longest = longest.orElse(longest.map(s\
    \ -> s.length()).max());\n                                                 ^\n\
    /tmp/tmpg3adlnen.java:23: error: cannot find symbol\n            longest = longest.orElse(longest.map(s\
    \ -> s.length()).max());\n                                                   \
    \              ^\n  symbol:   method max()\n  location: class Optional<Integer>\n\
    /tmp/tmpg3adlnen.java:24: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n            first = first.orElse(s);\n                \
    \                ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<Integer, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n  \
    \          counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        int maxCountIndex = -1;\n        for (Map.Entry<Integer, Integer>\
    \ entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount) {\n\
    \                maxCount = entry.getValue();\n                maxCountIndex =\
    \ entry.getKey();\n            }\n        }\n        if (maxCount == 0) return\
    \ Optional.empty();\n        return Optional.of(strings.get(maxCountIndex));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqg1bj0y5.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         counts.merge(length, 1, Integer::sum);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        int maxCount = -1;\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount)\
    \ {\n                maxCount = entry.getValue();\n                longest = Optional.of(entry.getKey());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpth65c6zp.java:30: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.getOrDefault(string.length(),\
    \ 0);\n            counts.put(string.length(), count + 1);\n        }\n      \
    \  Optional<String> longest = Optional.empty();\n        for (Map.Entry<Integer,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue().equals(counts.get(entry.getKey())))\
    \ {\n                longest = Optional.of(entry.getKey());\n                break;\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpws3iqrpr.java:28: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcplyikzq.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpcplyikzq.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         longest = Optional.of(s);\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlf4zor2.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ihus54m.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int length = s.length();\n            if (counts.containsKey(length))\
    \ {\n                counts.put(length, counts.get(length) + 1);\n           \
    \ } else {\n                counts.put(length, 1);\n            }\n        }\n\
    \        Optional<String> longest = Optional.empty();\n        int maxCount =\
    \ 0;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n\
    \            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \                longest = Optional.of(entry.getKey());\n            }\n     \
    \   }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuslkyova.java:34: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkzv36g22.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (longest.isPresent() && longest.get().length() > s.length()) {\n\
    \                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0gdlcec8.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ oldValue = longestString.get(length);\n                if (oldValue.length()\
    \ > string.length()) {\n                    longestString.put(length, string);\n\
    \                }\n            } else {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqxndhla.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnpchvx2l.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpnpchvx2l.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp05tqwupl.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().length()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.Optional.get(Optional.java:143)\n\tat Problem.longest(tmpgi_83nj5.java:31)\n\
    \tat Problem.main(tmpgi_83nj5.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int length = s.length();\n            counts.merge(length,\
    \ 1, Integer::sum);\n        }\n        int maxCount = Collections.max(counts.values());\n\
    \        int maxCountIndex = counts.keySet().stream().filter(c -> c == maxCount).findFirst().orElse(-1);\n\
    \        if (maxCountIndex == -1) {\n            return Optional.empty();\n  \
    \      }\n        return Optional.of(strings.get(maxCountIndex));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbr8seoj7.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbpi54xp.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            String longestString\
    \ = longest.get(len);\n            if (longestString == null) {\n            \
    \    longest.put(len, s);\n            } else {\n                int longestLen\
    \ = longestString.length();\n                if (longestLen > len) {\n       \
    \             longest.put(len, s);\n                }\n            }\n       \
    \ }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphjyixfca.java:33: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9oul74fu.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp9oul74fu.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwtkajlvs.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (counts.containsKey(len))\
    \ {\n                counts.put(len, counts.get(len) + 1);\n            } else\
    \ {\n                counts.put(len, 1);\n            }\n        }\n        int\
    \ maxCount = -1;\n        int maxLen = -1;\n        for (Map.Entry<Integer, Integer>\
    \ entry : counts.entrySet()) {\n            if (entry.getValue() > maxCount) {\n\
    \                maxCount = entry.getValue();\n                maxLen = entry.getKey();\n\
    \            }\n        }\n        if (maxCount == 1) {\n            return Optional.of(strings.get(maxLen));\n\
    \        }\n        return Optional.of(strings.get(maxLen));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjp8fp0q.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > map.get(longest)) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.longest(tmpgh_48ug8.java:31)\n\tat Problem.main(tmpgh_48ug8.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph69as0sr.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmph69as0sr.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (longest.containsKey(length)) {\n                String oldValue\
    \ = longest.get(length);\n                if (oldValue.length() < string.length())\
    \ {\n                    longest.put(length, oldValue);\n                }\n \
    \           } else {\n                longest.put(length, string);\n         \
    \   }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).map(s\
    \ -> s.isEmpty() ? s : longest.get(s.length())).orElse(null);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf83h65kj.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).map(s\
    \ -> s.isEmpty() ? s : longest.get(s.length())).orElse(null);\n              \
    \                                                                            \
    \                                                                            \
    \            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfc18n0ky.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpitc9y782.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcneqr5au.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9p1km5ov.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp9p1km5ov.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3m9i2vlv.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longestStrings = new HashMap<>();\n      \
    \  for (String s : strings) {\n            int length = s.length();\n        \
    \    if (longestStrings.containsKey(length)) {\n                String oldValue\
    \ = longestStrings.get(length);\n                if (oldValue.length() < length)\
    \ {\n                    longestStrings.put(length, s);\n                }\n \
    \           } else {\n                longestStrings.put(length, s);\n       \
    \     }\n        }\n        return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvhhg_w5e.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestStrings.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \                                                                            \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ld3tyzd.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp_ld3tyzd.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0peujk_.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String old = longest.get(len);\n                if (old.length()\
    \ > s.length()) {\n                    longest.put(len, s);\n                }\n\
    \            } else {\n                longest.put(len, s);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt51td51e.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfht77kux.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            String longestKey\
    \ = longest.get(len);\n            if (longestKey == null) {\n               \
    \ longest.put(len, s);\n            } else {\n                int longestLen =\
    \ longestKey.length();\n                if (len > longestLen) {\n            \
    \        longestKey = s;\n                }\n            }\n        }\n      \
    \  return longest.isEmpty() ? Optional.empty() : Optional.of(longest.get(longest.size()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa665qhp1.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.get(s.length());\n          \
    \  if (count == null) {\n                count = 0;\n            }\n         \
    \   counts.put(s.length(), count + 1);\n        }\n        int maxCount = -1;\n\
    \        for (Integer count : counts.values()) {\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n            }\n        }\n        if (maxCount\
    \ == 0) {\n            return Optional.empty();\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : strings) {\n          \
    \  int count = counts.get(s.length());\n            if (count == maxCount) {\n\
    \                longest = Optional.of(s);\n                break;\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa6mj0470.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttg4so7i.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw59591r7.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n      \
    \      if (entry.getValue().equals(counts.get(entry.getKey()))) {\n          \
    \      longest = Optional.of(entry.getKey());\n                break;\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjsd3tbk9.java:20: error: incompatible types: inference variable\
    \ D has incompatible equality constraints Integer,Long\n        Map<String, Integer>\
    \ counts = strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n  where D,T,K,A\
    \ are type-variables:\n    D extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    T extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n    K extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    A extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().substring(0, longest.get().length()\
    \ - s.length()));\n            } else if (first.isPresent() && first.get().length()\
    \ == s.length()) {\n                first = Optional.of(first.get().substring(0,\
    \ first.get().length() - s.length()));\n            } else {\n               \
    \ longest = Optional.of(s);\n                first = Optional.of(s);\n       \
    \     }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplbwldaq0.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().substring(0, longest.get().length()\
    \ - s.length()));\n            } else {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest.isPresent() ? first : longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo9gwl4j8.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx2mjv43w.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (map.containsKey(len))\
    \ {\n                String v = map.get(len);\n                if (v.length()\
    \ < s.length()) {\n                    map.put(len, s);\n                }\n \
    \           } else {\n                map.put(len, s);\n            }\n      \
    \  }\n        return Optional.ofNullable(map.values().stream().max(Comparator.comparing(String::length)).orElse(null));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_sx98i6h.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegyqt2yy.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > longest.get().getLength()) {\n          \
    \      longest = Optional.of(s);\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyl4k30pn.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.getOrElse(String.valueOf(s)).length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4dylwec_.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.getOrElse(String.valueOf(s)).length()) {\n                       \
    \                ^\n  symbol:   method getOrElse(String)\n  location: variable\
    \ longest of type Optional<String>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = map.entrySet().stream()\n                .max(Comparator.comparingInt(Map.Entry::getValue))\n\
    \                .map(Map.Entry::getKey);\n        if (longest.isPresent()) {\n\
    \            return longest;\n        }\n        return Optional.of(strings.get(0));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vln4cfj.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n      \
    \      if (entry.getValue().equals(counts.get(entry.getKey()))) {\n          \
    \      longest = Optional.of(entry.getKey());\n            }\n        }\n    \
    \    return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpakexp068.java:20: error: cannot find symbol\n        Map<String,\
    \ Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                                 \
    \                                    ^\n  symbol:   variable Function\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        for (Integer count : counts.values()) {\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n            }\n        }\n\
    \        if (maxCount == 0) {\n            return Optional.empty();\n        }\n\
    \        Optional<String> longest = Optional.empty();\n        for (Integer count\
    \ : counts.values()) {\n            if (count == maxCount) {\n               \
    \ longest = Optional.of(String.join(\"\", strings.subList(0, count)));\n     \
    \       }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8xdp95e.java:48)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpja4000e7.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(maxCount\
    \ - 1));\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpja0ezysf.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe0onfcu1.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpe0onfcu1.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            String s = entry.getKey();\n\
    \            Integer count = entry.getValue();\n            if (count > longest.get().getLength())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp97lmnpi0.java:33: error: cannot find symbol\n            if (count\
    \ > longest.get().getLength()) {\n                                     ^\n  symbol:\
    \   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n      \
    \      if (entry.getValue().equals(counts.get(entry.getKey()))) {\n          \
    \      longest = Optional.of(entry.getKey());\n                break;\n      \
    \      }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzi98wjkw.java:20: error: incompatible types: inference variable\
    \ D has incompatible equality constraints Integer,Long\n        Map<String, Integer>\
    \ counts = strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n  where D,T,K,A\
    \ are type-variables:\n    D extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    T extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n    K extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    A extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe4etqbhm.java:30: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpe4etqbhm.java:31:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                count = 0;\n            }\n      \
    \      counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         continue;\n            }\n            longest = Optional.of(s);\n  \
    \      }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6uy06y8.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n\
    \            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \            }\n        }\n        if (maxCount == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        for\
    \ (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n            if (entry.getValue()\
    \ == maxCount) {\n                longest = Optional.of(entry.getKey());\n   \
    \             break;\n            }\n        }\n        return longest;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphlqy7f9x.java:37: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            String longest = longestString.get(length);\n            if (longest\
    \ == null || longest.length() < length) {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        return longestString.isEmpty() ?\
    \ Optional.empty() : Optional.of(longestString.get(longestString.size()));\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjlwj025_.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        Optional<String> longest = Optional.empty();\n\
    \        Optional<String> first = Optional.empty();\n        for (Map.Entry<String,\
    \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue().equals(counts.get(entry.getKey())))\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        if (longest.isPresent()) {\n            return longest;\n \
    \       }\n        for (Map.Entry<String, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue().equals(counts.get(entry.getKey()))) {\n\
    \                first = Optional.of(entry.getKey());\n            }\n       \
    \ }\n        return longest.orElse(first);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6scvilbq.java:20: error: incompatible types: inference variable\
    \ D has incompatible equality constraints Integer,Long\n        Map<String, Integer>\
    \ counts = strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n  where D,T,K,A\
    \ are type-variables:\n    D extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    T extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n    K extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    A extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n/tmp/tmp6scvilbq.java:36: error: incompatible types: Optional<String>\
    \ cannot be converted to String\n        return longest.orElse(first);\n     \
    \                         ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx97qs76z.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         longest = Optional.of(s);\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbl14j5o4.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > s.length()) {\n                    longest.put(len, s);\n                }\n\
    \            } else {\n                longest.put(len, s);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4e6l14c_.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                continue;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \                continue;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprtxnpxmt.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpujvylrl4.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpujvylrl4.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) count = 1;\n            else count += 1;\n            counts.put(s,\
    \ count);\n        }\n        Optional<String> longest = Optional.empty();\n \
    \       for (String s : counts.keySet()) {\n            if (longest.isPresent()\
    \ && longest.get().length() > s.length()) {\n                return longest;\n\
    \            }\n            longest = Optional.of(s);\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ymuiqr1.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String string : strings) {\n       \
    \     if (longest.isPresent() && longest.length() > string.length()) {\n     \
    \           longest = Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.length() == string.length()) {\n                longest = Optional.of(longest.get().length());\n\
    \            }\n            if (first.isPresent() && first.length() > string.length())\
    \ {\n                first = Optional.empty();\n            }\n            if\
    \ (first.isPresent() && first.length() == string.length()) {\n               \
    \ first = Optional.of(first.get().length());\n            }\n        }\n     \
    \   if (longest.isPresent() && longest.get().length() > first.get().length())\
    \ {\n            return longest;\n        }\n        if (longest.isPresent() &&\
    \ longest.get().length() == first.get().length()) {\n            return longest;\n\
    \        }\n        return first;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk5jadnab.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > string.length()) {\n                                 \
    \             ^\n  symbol:   method length()\n  location: variable longest of\
    \ type Optional<String>\n/tmp/tmpk5jadnab.java:26: error: cannot find symbol\n\
    \            if (longest.isPresent() && longest.length() == string.length()) {\n\
    \                                              ^\n  symbol:   method length()\n\
    \  location: variable longest of type Optional<String>\n/tmp/tmpk5jadnab.java:27:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(longest.get().length());\n              \
    \                       ^\n    equality constraints: String\n    lower bounds:\
    \ Integer\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>of(T)\n/tmp/tmpk5jadnab.java:29: error: cannot find symbol\n            if\
    \ (first.isPresent() && first.length() > string.length()) {\n                \
    \                          ^\n  symbol:   method length()\n  location: variable\
    \ first of type Optional<String>\n/tmp/tmpk5jadnab.java:32: error: cannot find\
    \ symbol\n            if (first.isPresent() && first.length() == string.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmpk5jadnab.java:33:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              first = Optional.of(first.get().length());\n                  \
    \                 ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ if (longest.get(length) == null) {\n                longest.put(length, string);\n\
    \            } else {\n                int maxLength = longest.get(length).length();\n\
    \                if (maxLength < length) {\n                    longest.put(length,\
    \ string);\n                }\n            }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbr4tg3j.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbf087at0.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpud5tz912.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(string.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        if (maxCount == 1) {\n\
    \            return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbcjf8g7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) counts.put(s, 1);\n            else counts.put(s, count + 1);\n   \
    \     }\n        Optional<String> longest = Optional.empty();\n        for (String\
    \ s : counts.keySet()) {\n            if (longest.isPresent() && longest.get().length()\
    \ > s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeyew5tqf.java:35)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \       break;\n            }\n        }\n        return longest;\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4j4pl9mb.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ps22k4r.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp0ps22k4r.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ibya5sl.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp5ibya5sl.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmp5ibya5sl.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmp5ibya5sl.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvyzm53lv.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpda8e7_l5.java:31: error: cannot find symbol\n            if (map.get(s)\
    \ > longest.get().getLength()) {\n                                          ^\n\
    \  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsnhx0t32.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpsnhx0t32.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        int\
    \ longestLength = 0;\n        for (String s : strings) {\n            int length\
    \ = s.length();\n            if (length > longestLength) {\n                longestLength\
    \ = length;\n                longest = Optional.of(s);\n            }\n      \
    \  }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjv2bw6g.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (map.containsKey(len))\
    \ {\n                String oldValue = map.get(len);\n                if (oldValue.length()\
    \ > s.length()) {\n                    map.put(len, s);\n                }\n \
    \           } else {\n                map.put(len, s);\n            }\n      \
    \  }\n        Optional<String> longest = Optional.empty();\n        for (Map.Entry<Integer,\
    \ String> entry : map.entrySet()) {\n            if (longest.isPresent() && longest.get().length()\
    \ > entry.getValue().length()) {\n                longest = Optional.of(entry.getValue());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg0xdq5e7.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5wptdaqp.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp5wptdaqp.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() > s.length()) {\n           \
    \     longest = Optional.empty();\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(longest.get().concat(s));\n\
    \            }\n            if (first.isPresent() && first.get().length() == s.length())\
    \ {\n                first = Optional.of(first.get().concat(s));\n           \
    \ }\n        }\n        return longest.isPresent() ? longest : first;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_doa1yei.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde1vkvu9.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5_8rw_b4.java:31: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.isPresent()\
    \ ? longest : first;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp610qwii5.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp610qwii5.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmp610qwii5.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42021_ep.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue() == maxCount) {\n                longest = Optional.of(entry.getKey());\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdv2v3pma.java:32: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3_kfr5ju.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ longest = longestString.get(length);\n                if (string.length() >\
    \ longest.length()) {\n                    longest = string;\n               \
    \ }\n            } else {\n                longestString.put(length, string);\n\
    \            }\n        }\n        return longestString.isEmpty() ? Optional.empty()\
    \ : Optional.of(longestString.get(longestString.keySet().iterator().next()));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl2kg6z__.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue().equals(strings.size()))\
    \ {\n                longest = Optional.of(strings.get(entry.getKey()));\n   \
    \         }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7zne4cmv.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8snbfcs.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Integer\
    \ maxCount = Collections.max(counts.values());\n        if (maxCount == 1) {\n\
    \            return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(maxCount\
    \ - 1));\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppfd_racj.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().length()) {\n                longest =\
    \ Optional.of(s);\n            }\n        }\n        return longest;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.Optional.get(Optional.java:143)\n\tat Problem.longest(tmp3r_irhhh.java:31)\n\
    \tat Problem.main(tmp3r_irhhh.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz1271x52.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp06gymc6.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            map.computeIfAbsent(s.length(), k -> s);\n     \
    \   }\n        return Optional.ofNullable(map.values().stream().max(Comparator.naturalOrder()).get());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2olkh46v.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longestString = new HashMap<>();\n  \
    \      for (String string : strings) {\n            int length = string.length();\n\
    \            if (longestString.containsKey(length)) {\n                String\
    \ oldValue = longestString.get(length);\n                if (oldValue.length()\
    \ > length) {\n                    longestString.put(length, oldValue);\n    \
    \            }\n            } else {\n                longestString.put(length,\
    \ string);\n            }\n        }\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp55r5xf3w.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longestString.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphd88pmy_.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmphd88pmy_.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmphd88pmy_.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmphd88pmy_.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (Map.Entry<String, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() > longest.get().getLength()) {\n       \
    \         longest = Optional.of(entry.getKey());\n            }\n        }\n \
    \       return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7qvav0ux.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getBytes().length)\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4655wvu8.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getBytes().length)\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4gb6_p60.java:31: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().length() > s.length() ? longest.get()\
    \ : s);\n            } else {\n                longest = Optional.of(s);\n   \
    \         }\n        }\n        return longest.isPresent() ? first : longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3osm53d.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) {\n                counts.put(s, 1);\n            } else {\n      \
    \          counts.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : counts.keySet()) {\n  \
    \          if (counts.get(s) > counts.keySet().size()) {\n                longest\
    \ = Optional.of(s);\n                break;\n            }\n        }\n      \
    \  return longest;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgcw9r046.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                count = 0;\n            }\n      \
    \      counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (longest.isPresent() && longest.get().length() > s.length()) {\n       \
    \         continue;\n            }\n            if (longest.isPresent() && longest.get().length()\
    \ == s.length()) {\n                continue;\n            }\n            longest\
    \ = Optional.of(s);\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4nexl5sb.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String string : strings) {\n            Integer count = counts.get(string.length());\n\
    \            if (count == null) {\n                counts.put(string.length(),\
    \ 1);\n            } else {\n                counts.put(string.length(), count\
    \ + 1);\n            }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue() > longest.get().getLength()) {\n                longest\
    \ = Optional.of(entry.getKey());\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7sw6ndvp.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp7sw6ndvp.java:32:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.get().length() == s.length()) {\n          \
    \      longest = Optional.of(longest.get().substring(0, longest.get().length()\
    \ - s.length()));\n            } else {\n                longest = Optional.of(s);\n\
    \            }\n            if (first.isPresent() && first.get().length() == s.length())\
    \ {\n                first = Optional.of(first.get().substring(0, first.get().length()\
    \ - s.length()));\n            } else {\n                first = Optional.of(s);\n\
    \            }\n        }\n        return longest.isPresent() ? longest : first;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcgn661w7.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                counts.put(s.length(), 1);\n\
    \            } else {\n                counts.put(s.length(), count + 1);\n  \
    \          }\n        }\n        Optional<String> longest = Optional.empty();\n\
    \        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n     \
    \       if (entry.getValue() > longest.get().getLength()) {\n                longest\
    \ = Optional.of(entry.getKey());\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp5v_r18y.java:31: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpp5v_r18y.java:32:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxukl7cj5.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(counts.keySet().stream().filter(i\
    \ -> counts.get(i) == maxCount).findFirst().get()));\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy1ksssda.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rmku__9.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (longest.containsKey(length)) {\n                String current =\
    \ longest.get(length);\n                if (current.length() > length) {\n   \
    \                 longest.put(length, string);\n                }\n          \
    \  } else {\n                longest.put(length, string);\n            }\n   \
    \     }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwb6m29s3.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > s.length()) {\n                    longest.put(len, s);\n                }\n\
    \            } else {\n                longest.put(len, s);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqd20qshz.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).orElse(null);\n\
    \                                                                            \
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int len = s.length();\n            if (longest.containsKey(len))\
    \ {\n                String oldValue = longest.get(len);\n                if (oldValue.length()\
    \ > len) {\n                    longest.put(len, s);\n                }\n    \
    \        } else {\n                longest.put(len, s);\n            }\n     \
    \   }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmpa6rwjb.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (counts.get(s) > counts.keySet().size()) {\n             \
    \   longest = Optional.of(s);\n                break;\n            }\n       \
    \ }\n        return longest;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo062i1rg.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> e : counts.entrySet())\
    \ {\n            if (e.getValue() > longest.get().getLength()) {\n           \
    \     longest = Optional.of(e.getKey());\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8fume5u0.java:27: error: cannot find symbol\n            if (e.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \ ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmp8fume5u0.java:28:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(e.getKey());\n                          \
    \           ^\n    equality constraints: String\n    lower bounds: Integer\n \
    \ where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            Integer count = counts.get(s);\n            if (count\
    \ == null) counts.put(s, 1);\n            else counts.put(s, count + 1);\n   \
    \     }\n        Optional<String> longest = Optional.empty();\n        for (String\
    \ s : counts.keySet()) {\n            if (counts.get(s) > longest.get().getLength())\
    \ {\n                longest = Optional.of(s);\n            }\n        }\n   \
    \     return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdsb1wqjr.java:26: error: cannot find symbol\n            if (counts.get(s)\
    \ > longest.get().getLength()) {\n                                           \
    \  ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = map.get(s);\n            if (count\
    \ == null) {\n                map.put(s, 1);\n            } else {\n         \
    \       map.put(s, count + 1);\n            }\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (String s : map.keySet()) {\n     \
    \       if (map.get(s) > longest.get().getLength()) {\n                longest\
    \ = Optional.of(s);\n            }\n        }\n        return longest;\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp48hpphaf.java:31: error: cannot find symbol\n            if (map.get(s)\
    \ > longest.get().getLength()) {\n                                          ^\n\
    \  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (Map.Entry<String, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() > longest.get().getLength()) {\n       \
    \         longest = Optional.of(entry.getKey());\n            }\n        }\n \
    \       return longest;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpry1cflt0.java:27: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            longest\
    \ = longest.orElse(s);\n            first = first.orElse(s);\n        }\n    \
    \    return longest.map(s -> longest.equals(first) ? s : longest);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsx273s7q.java:23: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n            longest = longest.orElse(s);\n            \
    \                        ^\n/tmp/tmpsx273s7q.java:24: error: incompatible types:\
    \ String cannot be converted to Optional<String>\n            first = first.orElse(s);\n\
    \                                ^\n/tmp/tmpsx273s7q.java:26: error: incompatible\
    \ types: inference variable U has incompatible bounds\n        return longest.map(s\
    \ -> longest.equals(first) ? s : longest);\n                          ^\n    equality\
    \ constraints: String\n    lower bounds: Optional<String>,String\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>map(Function<?\
    \ super T,? extends U>)\n    T extends Object declared in class Optional\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (first.isPresent() && s.length()\
    \ == first.length()) {\n                first = Optional.empty();\n          \
    \  }\n            if (longest.isPresent() && s.length() > longest.length()) {\n\
    \                longest = Optional.of(s);\n            }\n            if (first.isPresent()\
    \ && s.length() == first.length()) {\n                first = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1t7hkch9.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp1t7hkch9.java:26: error: cannot find symbol\n    \
    \        if (first.isPresent() && s.length() == first.length()) {\n          \
    \                                              ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmp1t7hkch9.java:29:\
    \ error: cannot find symbol\n            if (longest.isPresent() && s.length()\
    \ > longest.length()) {\n                                                    \
    \       ^\n  symbol:   method length()\n  location: variable longest of type Optional<String>\n\
    /tmp/tmp1t7hkch9.java:32: error: cannot find symbol\n            if (first.isPresent()\
    \ && s.length() == first.length()) {\n                                       \
    \                 ^\n  symbol:   method length()\n  location: variable first of\
    \ type Optional<String>\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new HashMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ String previous = longest.get(length);\n            if (previous == null) {\n\
    \                longest.put(length, string);\n            } else if (previous.length()\
    \ > length) {\n                longest.put(length, string);\n            }\n \
    \       }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphfj7chuk.java:30: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp86jvsdcy.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmp86jvsdcy.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmp86jvsdcy.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmp86jvsdcy.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<Integer, Integer> counts = new HashMap<>();\n        for (String s :\
    \ strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n  \
    \          counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() > longest.get().getLength())\
    \ {\n                longest = Optional.of(entry.getKey());\n            }\n \
    \       }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqf1gp11.java:25: error: cannot find symbol\n            if (entry.getValue()\
    \ > longest.get().getLength()) {\n                                           \
    \     ^\n  symbol:   method getLength()\n  location: class String\n/tmp/tmpoqf1gp11.java:26:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              longest = Optional.of(entry.getKey());\n                      \
    \               ^\n    equality constraints: String\n    lower bounds: Integer\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new HashMap<>();\n        for\
    \ (String string : strings) {\n            int len = string.length();\n      \
    \      String longestString = longest.get(len);\n            if (longestString\
    \ == null) {\n                longest.put(len, string);\n            } else {\n\
    \                int longestLen = longestString.length();\n                if\
    \ (longestLen > len) {\n                    longest.put(len, string);\n      \
    \          }\n            }\n        }\n        if (longest.isEmpty()) {\n   \
    \         return Optional.empty();\n        }\n        return longest.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq9x27cw0.java:36: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.values().stream().max(Comparator.comparing(String::length)).orElse(null);\n\
    \                                                                            \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry\
    \ : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n  \
    \              longest = Optional.of(strings.get(entry.getKey()));\n         \
    \   }\n        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp860r01aa.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, String> longest = new TreeMap<>();\n        for (String\
    \ string : strings) {\n            int length = string.length();\n           \
    \ String longestKey = longest.get(length);\n            if (longestKey == null)\
    \ {\n                longest.put(length, string);\n            } else {\n    \
    \            int longestLength = longestKey.length();\n                if (longestLength\
    \ < length) {\n                    longest.put(length, string);\n            \
    \    }\n            }\n        }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogc05tsx.java:33: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.getOrDefault(s, 0);\n\
    \            counts.put(s, count + 1);\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (String s : counts.keySet()) {\n          \
    \  if (counts.get(s) > counts.keySet().size()) {\n                longest = Optional.of(s);\n\
    \                break;\n            }\n        }\n        return longest;\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_yvmood.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        return counts.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getKey);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpslhd_4_8.java:20: error: incompatible types: inference variable\
    \ D has incompatible equality constraints Integer,Long\n        Map<String, Integer>\
    \ counts = strings.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));\n\
    \                                                              ^\n  where D,T,K,A\
    \ are type-variables:\n    D extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    T extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n    K extends Object declared in method <T,K,A,D>groupingBy(Function<?\
    \ super T,? extends K>,Collector<? super T,A,D>)\n    A extends Object declared\
    \ in method <T,K,A,D>groupingBy(Function<? super T,? extends K>,Collector<? super\
    \ T,A,D>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiyqimo_s.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpewctqv1_.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            Integer count = counts.get(s.length());\n      \
    \      if (count == null) {\n                count = 0;\n            }\n     \
    \       counts.put(s.length(), count + 1);\n        }\n        Optional<String>\
    \ longest = Optional.empty();\n        for (Map.Entry<Integer, Integer> e : counts.entrySet())\
    \ {\n            if (e.getValue().equals(strings.size())) {\n                longest\
    \ = Optional.of(strings.get(e.getKey()));\n            }\n        }\n        return\
    \ longest;\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi2m3lk8q.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == 1) {\n        \
    \    return Optional.of(strings.get(0));\n        }\n        return Optional.of(strings.get(maxCount\
    \ - 1));\n\n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpenqg9b.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) return Optional.empty();\n   \
    \     Map<String, Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        return counts.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getKey);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkixe0yds.java:18: error: cannot find symbol\n        Map<String,\
    \ Integer> counts = strings.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                                 \
    \                                    ^\n  symbol:   variable Function\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.isPresent()\
    \ ? longest : first;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpprt1s8gx.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmpprt1s8gx.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmpprt1s8gx.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            int count = counts.getOrDefault(s.length(),\
    \ 0);\n            counts.put(s.length(), count + 1);\n        }\n        int\
    \ maxCount = 0;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() > maxCount) {\n                maxCount\
    \ = entry.getValue();\n            }\n        }\n        if (maxCount == 0) {\n\
    \            return Optional.empty();\n        }\n        Optional<String> longest\
    \ = Optional.empty();\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet())\
    \ {\n            if (entry.getValue() == maxCount) {\n                longest\
    \ = Optional.of(entry.getKey());\n            }\n        }\n        return longest;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcrm4vfrc.java:37: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s.length());\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = 0;\n        for (Integer count : counts.values()) {\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n            }\n        }\n\
    \        if (maxCount == 0) {\n            return Optional.empty();\n        }\n\
    \        Optional<String> longest = Optional.empty();\n        for (Integer count\
    \ : counts.values()) {\n            if (count == maxCount) {\n               \
    \ longest = Optional.of(strings.get(count - 1));\n                break;\n   \
    \         }\n        }\n        return longest;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0uo2ytg.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            longest = Optional.of(s);\n\
    \        }\n        return longest;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa__rboyw.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<Integer, String> longest = new TreeMap<>();\n        for\
    \ (String string : strings) {\n            int length = string.length();\n   \
    \         if (longest.containsKey(length)) {\n                String current =\
    \ longest.get(length);\n                if (current.length() > length) {\n   \
    \                 longest.put(length, string);\n                }\n          \
    \  } else {\n                longest.put(length, string);\n            }\n   \
    \     }\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp46prxm34.java:32: error: incompatible types: String cannot be converted\
    \ to Optional<String>\n        return longest.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getValue).map(String::trim).orElse(null);\n\
    \                                                                            \
    \                                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (String\
    \ s : strings) {\n            int count = counts.getOrDefault(s.length(), 0);\n\
    \            counts.put(s.length(), count + 1);\n        }\n        int maxCount\
    \ = -1;\n        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n\
    \            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \            }\n        }\n        if (maxCount == 0) {\n            return Optional.empty();\n\
    \        }\n        Optional<String> longest = Optional.empty();\n        for\
    \ (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n            if (entry.getValue()\
    \ == maxCount) {\n                longest = Optional.of(entry.getKey());\n   \
    \             break;\n            }\n        }\n        return longest;\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx5dddo9g.java:37: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                longest = Optional.of(entry.getKey());\n\
    \                                     ^\n    equality constraints: String\n  \
    \  lower bounds: Integer\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>of(T)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String s : strings) {\n            Integer count = counts.get(s);\n       \
    \     if (count == null) {\n                counts.put(s, 1);\n            } else\
    \ {\n                counts.put(s, count + 1);\n            }\n        }\n   \
    \     Optional<String> longest = Optional.empty();\n        for (String s : counts.keySet())\
    \ {\n            if (longest.isPresent() && longest.get().length() > s.length())\
    \ {\n                return longest;\n            }\n            if (longest.isPresent()\
    \ && longest.get().length() == s.length()) {\n                longest = Optional.of(s);\n\
    \            }\n        }\n        return longest;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
    \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
    y\", (String)\"z\")))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcfrn3u_.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    // strings of the same length. Return\
    \ None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
    \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
    \    public static Optional<String> longest(ArrayList<String> strings) {\n   \
    \     if (strings.size() == 0) {\n            return Optional.empty();\n     \
    \   }\n        Optional<String> longest = Optional.empty();\n        Optional<String>\
    \ first = Optional.empty();\n        for (String s : strings) {\n            if\
    \ (longest.isPresent() && longest.length() > s.length()) {\n                longest\
    \ = Optional.empty();\n            }\n            if (longest.isPresent() && longest.length()\
    \ == s.length()) {\n                longest = Optional.of(s);\n            }\n\
    \            if (first.isPresent() && first.length() == s.length()) {\n      \
    \          first = Optional.of(s);\n            }\n        }\n        return longest.orElse(first);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n    assert(longest((new\
    \ ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\"\
    )))).equals(Optional.of(\"x\")));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
    x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
    abc\")))).equals(Optional.of(\"zzzz\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpapir6xd0.java:23: error: cannot find symbol\n            if (longest.isPresent()\
    \ && longest.length() > s.length()) {\n                                      \
    \        ^\n  symbol:   method length()\n  location: variable longest of type\
    \ Optional<String>\n/tmp/tmpapir6xd0.java:26: error: cannot find symbol\n    \
    \        if (longest.isPresent() && longest.length() == s.length()) {\n      \
    \                                        ^\n  symbol:   method length()\n  location:\
    \ variable longest of type Optional<String>\n/tmp/tmpapir6xd0.java:29: error:\
    \ cannot find symbol\n            if (first.isPresent() && first.length() == s.length())\
    \ {\n                                          ^\n  symbol:   method length()\n\
    \  location: variable first of type Optional<String>\n/tmp/tmpapir6xd0.java:33:\
    \ error: incompatible types: Optional<String> cannot be converted to String\n\
    \        return longest.orElse(first);\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
