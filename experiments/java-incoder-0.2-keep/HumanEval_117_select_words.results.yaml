name: HumanEval_117_select_words
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphju5kz88.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmphju5kz88.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmphju5kz88.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmphju5kz88.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmphju5kz88.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmphju5kz88.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmphju5kz88.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmphju5kz88.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxcsbd9m3.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3nz9u6ny.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14zqgpd6.java:86: error: <identifier> expected\n        ArrayList<String>\
    \ words = new \n                                     ^\n/tmp/tmp14zqgpd6.java:87:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmp14zqgpd6.java:87: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmp14zqgpd6.java:88: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp14zqgpd6.java:88:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp14zqgpd6.java:88: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp14zqgpd6.java:88:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp14zqgpd6.java:98: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp891zmg_u.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp891zmg_u.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> word = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpllpup1bq.java:24: error: variable words is already defined in method\
    \ selectWords(String,long)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmpllpup1bq.java:25: error: variable word is\
    \ already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n                          ^\n/tmp/tmpllpup1bq.java:26:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<String>();\n                \
    \          ^\n/tmp/tmpllpup1bq.java:27: error: variable word is already defined\
    \ in method selectWords(String,long)\n        ArrayList<String> word = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmpllpup1bq.java:28: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n                          ^\n/tmp/tmpllpup1bq.java:29:\
    \ error: variable word is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> word = new ArrayList<String>();\n                 \
    \         ^\n/tmp/tmpllpup1bq.java:30: error: variable words is already defined\
    \ in method selectWords(String,long)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmpllpup1bq.java:31: error: variable word is\
    \ already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n                          ^\n/tmp/tmpllpup1bq.java:32:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<String>();\n                \
    \          ^\n/tmp/tmpllpup1bq.java:33: error: variable word is already defined\
    \ in method selectWords(String,long)\n        ArrayList<String> word = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmpllpup1bq.java:34: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n       "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0y1z_h12.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp0y1z_h12.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ ArrayList<String> wordList = new ArrayList<>();\n        ArrayList<String> wordList2\
    \ = new ArrayList<>();\n        ArrayList<String> wordList3 = new ArrayList<>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<>();\n        ArrayList<String> wordList6 = new ArrayList<>();\n\
    \        ArrayList<String> wordList7 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList8 = new ArrayList<>();\n        ArrayList<String> wordList9 = new ArrayList<>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<>();\n        ArrayList<String> wordList12 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList13 = new ArrayList<>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<>();\n        ArrayList<String> wordList16 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList17 = new ArrayList<>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<>();\n        ArrayList<String> wordList20 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList21 = new ArrayList<>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<>();\n        ArrayList<String> wordList24 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList25 = new ArrayList<>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<>();\n        ArrayList<String> wordList28 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList29 = new ArrayList<>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<>();\n        ArrayList<String> wordList32 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList33 = new ArrayList<>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<>();\n        ArrayList<String> wordList36 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList37 = new ArrayList<>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<>();\n        ArrayList<String> wordList40 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList41 = new ArrayList<>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<>();\n        ArrayList<String> wordList44 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList45 = new ArrayList<>();\n\
    \        ArrayList<String> wordList46 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList47 = new ArrayList<>();\n        ArrayList<String> wordList48 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList49 = new ArrayList<>();\n\
    \        ArrayList<String> wordList50 = new ArrayList<>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4rmq_hj.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n \
    \       if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzj6p59dj.java:69: error: ';' expected\n        ArrayList<String>\
    \ word\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy9vlteu9.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordsInOrder\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder4 = new ArrayList<>();\n        ArrayList<String> wordsInOrder5\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder7 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder8 = new ArrayList<>();\n        ArrayList<String> wordsInOrder9\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder12 = new ArrayList<>();\n        ArrayList<String> wordsInOrder13\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder16 = new ArrayList<>();\n        ArrayList<String> wordsInOrder17\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder20 = new ArrayList<>();\n        ArrayList<String> wordsInOrder21\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder24 = new ArrayList<>();\n        ArrayList<String> wordsInOrder25\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder28 = new ArrayList<>();\n        ArrayList<String> wordsInOrder29\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder32 = new ArrayList<>();\n        ArrayList<String> wordsInOrder33\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder36 = new ArrayList<>();\n        ArrayList<String> wordsInOrder37\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder40 = new ArrayList<>();\n        ArrayList<String> wordsInOrder41\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder44 = new ArrayList<>();\n        ArrayList<String> wordsInOrder45\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8pe1q6y8.java:67: error: <identifier> expected\n        ArrayList<String>\
    \ wordsInOrder45 = new \n                                              ^\n/tmp/tmp8pe1q6y8.java:68:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmp8pe1q6y8.java:68: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmp8pe1q6y8.java:69: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp8pe1q6y8.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp8pe1q6y8.java:69: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp8pe1q6y8.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp8pe1q6y8.java:79: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64pmzf12.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n \
    \       ArrayList<String> wordList = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList2 = new ArrayList<String>();\n        ArrayList<String> wordList3 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList4 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<String>();\n        ArrayList<String> wordList7 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList8 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<String>();\n        ArrayList<String> wordList11\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList12 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<String>();\n        ArrayList<String> wordList15\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList16 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<String>();\n        ArrayList<String> wordList19\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList20 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<String>();\n        ArrayList<String> wordList23\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList24 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<String>();\n        ArrayList<String> wordList27\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList28 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<String>();\n        ArrayList<String> wordList31\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList32 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<String>();\n        ArrayList<String> wordList35\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList36 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<String>();\n        ArrayList<String> wordList39\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList40 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<String>();\n        ArrayList<String> wordList43\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList44 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptmtc2n_7.java:67: error: ';' expected\n        ArrayList<String>\
    \ word\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplax8skp6.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplax8skp6.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmplax8skp6.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmplax8skp6.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmplax8skp6.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmplax8skp6.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmplax8skp6.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordsInOrder\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder4 = new ArrayList<>();\n        ArrayList<String> wordsInOrder5\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder7 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder8 = new ArrayList<>();\n        ArrayList<String> wordsInOrder9\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder12 = new ArrayList<>();\n        ArrayList<String> wordsInOrder13\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder16 = new ArrayList<>();\n        ArrayList<String> wordsInOrder17\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder20 = new ArrayList<>();\n        ArrayList<String> wordsInOrder21\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder24 = new ArrayList<>();\n        ArrayList<String> wordsInOrder25\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder28 = new ArrayList<>();\n        ArrayList<String> wordsInOrder29\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder32 = new ArrayList<>();\n        ArrayList<String> wordsInOrder33\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder36 = new ArrayList<>();\n        ArrayList<String> wordsInOrder37\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder40 = new ArrayList<>();\n        ArrayList<String> wordsInOrder41\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder44 = new ArrayList<>();\n        ArrayList<String> wordsInOrder45\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pb4ykv0.java:67: error: <identifier> expected\n        ArrayList<String>\
    \ wordsInOrder45 = new \n                                              ^\n/tmp/tmp2pb4ykv0.java:68:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmp2pb4ykv0.java:68: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmp2pb4ykv0.java:69: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp2pb4ykv0.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp2pb4ykv0.java:69: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp2pb4ykv0.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2pb4ykv0.java:79: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7nhw5ebu.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp7nhw5ebu.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp7nhw5ebu.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmp7nhw5ebu.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp7nhw5ebu.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp7nhw5ebu.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp7nhw5ebu.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp7nhw5ebu.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> word = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20jrgy2g.java:24: error: variable words is already defined in method\
    \ selectWords(String,long)\n        ArrayList<String> words = new ArrayList<>();\n\
    \                          ^\n/tmp/tmp20jrgy2g.java:25: error: variable word is\
    \ already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ word = new ArrayList<>();\n                          ^\n/tmp/tmp20jrgy2g.java:26:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<>();\n                      \
    \    ^\n/tmp/tmp20jrgy2g.java:27: error: variable word is already defined in method\
    \ selectWords(String,long)\n        ArrayList<String> word = new ArrayList<>();\n\
    \                          ^\n/tmp/tmp20jrgy2g.java:28: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<>();\n                          ^\n/tmp/tmp20jrgy2g.java:29:\
    \ error: variable word is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> word = new ArrayList<>();\n                       \
    \   ^\n/tmp/tmp20jrgy2g.java:30: error: variable words is already defined in method\
    \ selectWords(String,long)\n        ArrayList<String> words = new ArrayList<>();\n\
    \                          ^\n/tmp/tmp20jrgy2g.java:31: error: variable word is\
    \ already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ word = new ArrayList<>();\n                          ^\n/tmp/tmp20jrgy2g.java:32:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<>();\n                      \
    \    ^\n/tmp/tmp20jrgy2g.java:33: error: variable word is already defined in method\
    \ selectWords(String,long)\n        ArrayList<String> word = new ArrayList<>();\n\
    \                          ^\n/tmp/tmp20jrgy2g.java:34: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<>();\n                          ^\n/tmp/tmp20jrgy2g.java:35:\
    \ error: variable wor"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean flag = false;\n        char[] chars\
    \ = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n     \
    \       if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i]\
    \ == 'o' || chars[i] == 'u' || chars[i] == 'y') {\n                flag = true;\n\
    \            }\n            if (flag) {\n                words.add(new String(chars,\
    \ 0, i));\n                flag = false;\n            }\n        }\n        long\
    \ count = 0;\n        for (String word : words) {\n            count = count +\
    \ word.length();\n        }\n        if (count != n) {\n            return result;\n\
    \        }\n        Collections.sort(words);\n        for (String word : words)\
    \ {\n            result.add(word);\n        }\n        return result;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa2dt_20c.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqh8c8gxl.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppvo9b1zw.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ wordsInString = new ArrayList<>();\n        ArrayList<String> wordsInString2\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString3 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString4 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString5 = new ArrayList<>();\n        ArrayList<String> wordsInString6\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString7 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString9 = new ArrayList<>();\n        ArrayList<String> wordsInString10\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString11 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString12 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString13 = new ArrayList<>();\n        ArrayList<String> wordsInString14\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString15 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString16 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString17 = new ArrayList<>();\n        ArrayList<String> wordsInString18\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString19 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString20 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString21 = new ArrayList<>();\n        ArrayList<String> wordsInString22\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString23 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString24 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString25 = new ArrayList<>();\n        ArrayList<String> wordsInString26\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString27 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString28 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString29 = new ArrayList<>();\n        ArrayList<String> wordsInString30\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString31 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString32 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString33 = new ArrayList<>();\n        ArrayList<String> wordsInString34\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString35 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString36 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString37 = new ArrayList<>();\n        ArrayList<String> wordsInString38\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString39 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString40 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInString41 = new ArrayList<>();\n        ArrayList<String> wordsInString42\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInString43 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInString44 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsIn\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2_qed5ho.java:69: error: ';' expected\n        ArrayList<String>\
    \ wordsIn\n                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3di9aik.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaiahk5ma.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfi9t5o51.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpfi9t5o51.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8m__omg_.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp8m__omg_.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp8m__omg_.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp8m__omg_.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp8m__omg_.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp8m__omg_.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp8m__omg_.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmllsispl.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpmllsispl.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptv39y9zd.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcj4sgg1f.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkwaychb_.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3o0z74e6.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.length() == 0) {\n            return result;\n        }\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder = new ArrayList<>();\n        ArrayList<String> wordsInOrder2 =\
    \ new ArrayList<>();\n        ArrayList<String> wordsInOrder3 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder4 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder5 = new ArrayList<>();\n        ArrayList<String> wordsInOrder6\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder7 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder9 = new ArrayList<>();\n        ArrayList<String> wordsInOrder10\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder11 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder12 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder13 = new ArrayList<>();\n        ArrayList<String> wordsInOrder14\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder15 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder16 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder17 = new ArrayList<>();\n        ArrayList<String> wordsInOrder18\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder19 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder20 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder21 = new ArrayList<>();\n        ArrayList<String> wordsInOrder22\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder23 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder24 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder25 = new ArrayList<>();\n        ArrayList<String> wordsInOrder26\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder27 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder28 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder29 = new ArrayList<>();\n        ArrayList<String> wordsInOrder30\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder31 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder32 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder33 = new ArrayList<>();\n        ArrayList<String> wordsInOrder34\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder35 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder36 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder37 = new ArrayList<>();\n        ArrayList<String> wordsInOrder38\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder39 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder40 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder41 = new ArrayList<>();\n        ArrayList<String> wordsInOrder42\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder43 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder44\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdeoqripc.java:69: error: ';' expected\n        ArrayList<String>\
    \ wordsInOrder44\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean isWord = false;\n        boolean\
    \ isWordWithNConsonants = false;\n        boolean isWordWithNConsonants2 = false;\n\
    \        boolean isWordWithNConsonants3 = false;\n        boolean isWordWithNConsonants4\
    \ = false;\n        boolean isWordWithNConsonants5 = false;\n        boolean isWordWithNConsonants6\
    \ = false;\n        boolean isWordWithNConsonants7 = false;\n        boolean isWordWithNConsonants8\
    \ = false;\n        boolean isWordWithNConsonants9 = false;\n        boolean isWordWithNConsonants10\
    \ = false;\n        boolean isWordWithNConsonants11 = false;\n        boolean\
    \ isWordWithNConsonants12 = false;\n        boolean isWordWithNConsonants13 =\
    \ false;\n        boolean isWordWithNConsonants14 = false;\n        boolean isWordWithNConsonants15\
    \ = false;\n        boolean isWordWithNConsonants16 = false;\n        boolean\
    \ isWordWithNConsonants17 = false;\n        boolean isWordWithNConsonants18 =\
    \ false;\n        boolean isWordWithNConsonants19 = false;\n        boolean isWordWithNConsonants20\
    \ = false;\n        boolean isWordWithNConsonants21 = false;\n        boolean\
    \ isWordWithNConsonants22 = false;\n        boolean isWordWithNConsonants23 =\
    \ false;\n        boolean isWordWithNConsonants24 = false;\n        boolean isWordWithNConsonants25\
    \ = false;\n        boolean isWordWithNConsonants26 = false;\n        boolean\
    \ isWordWithNConsonants27 = false;\n        boolean isWordWithNConsonants28 =\
    \ false;\n        boolean isWordWithNConsonants29 = false;\n        boolean isWordWithNConsonants30\
    \ = false;\n        boolean isWordWithNConsonants31 = false;\n        boolean\
    \ isWordWithNConsonants32 = false;\n        boolean isWordWithNConsonants33 =\
    \ false;\n        boolean isWordWithNConsonants34 = false;\n        boolean isWordWithNConsonants35\
    \ = false;\n        boolean isWordWithNConsonants36 = false;\n        boolean\
    \ isWordWithNConsonants37 = false;\n        boolean isWordWithNConsonants38 =\
    \ false;\n        boolean isWordWithNConsonants39 = false;\n        boolean isWordWithNConsonants40\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5b898nxl.java:66: error: ';' expected\n        boolean isWordWithNConsonants40\n\
    \                                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String>();\n        ArrayList<String>\
    \ word49 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdzhvl3j.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkhyx6gks.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0r89czi3.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3cto9bk4.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp3cto9bk4.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vz31mgs.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp5vz31mgs.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2vkj94f3.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3gqt1t57.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n \
    \       if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_38gyg3.java:69: error: ';' expected\n        ArrayList<String>\
    \ word\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.isEmpty()) {\n            return result;\n        }\n  \
    \      ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ wordList = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphu5k7ol7.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> currentWord = new ArrayList<>();\n\
    \        ArrayList<String> currentWord2 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord3 = new ArrayList<>();\n        ArrayList<String> currentWord4 =\
    \ new ArrayList<>();\n        ArrayList<String> currentWord5 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord6 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord7 = new ArrayList<>();\n        ArrayList<String> currentWord8 =\
    \ new ArrayList<>();\n        ArrayList<String> currentWord9 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord10 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord11 = new ArrayList<>();\n        ArrayList<String> currentWord12\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord13 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord14 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord15 = new ArrayList<>();\n        ArrayList<String> currentWord16\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord17 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord18 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord19 = new ArrayList<>();\n        ArrayList<String> currentWord20\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord21 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord22 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord23 = new ArrayList<>();\n        ArrayList<String> currentWord24\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord25 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord26 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord27 = new ArrayList<>();\n        ArrayList<String> currentWord28\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord29 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord30 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord31 = new ArrayList<>();\n        ArrayList<String> currentWord32\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord33 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord34 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord35 = new ArrayList<>();\n        ArrayList<String> currentWord36\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord37 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord38 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord39 = new ArrayList<>();\n        ArrayList<String> currentWord40\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord41 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord42 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord43 = new ArrayList<>();\n        ArrayList<String> currentWord44\
    \ = new ArrayList<>();\n        ArrayList<String> currentWord45 = new ArrayList<>();\n\
    \        ArrayList<String> currentWord46 = new ArrayList<>();\n        ArrayList<String>\
    \ currentWord47 = new ArrayList<>();\n        ArrayList<String> currentWord48\
    \ = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp62tevir9.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpav072snl.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpav072snl.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpav072snl.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpav072snl.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpav072snl.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpav072snl.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpav072snl.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpav072snl.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpro78walb.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmitfokuk.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpmitfokuk.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3n3gtnyq.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoln1in2q.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpoln1in2q.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        boolean flag = false;\n        long count = 0;\n        char[] chars\
    \ = s.toCharArray();\n        Arrays.sort(chars);\n        for (char c : chars)\
    \ {\n            if (flag) {\n                temp.add(String.valueOf(c));\n \
    \               flag = false;\n            }\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n                flag = true;\n \
    \               count++;\n            }\n            if (count == n) {\n     \
    \           words.add(temp.toString());\n                temp = new ArrayList<>();\n\
    \                count = 0;\n            }\n        }\n        for (String word\
    \ : words) {\n            result.add(word);\n        }\n        return result;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppebz49yj.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vzcxtyy.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp6vzcxtyy.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1m7ykvbb.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp1m7ykvbb.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp1m7ykvbb.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmp1m7ykvbb.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp1m7ykvbb.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp1m7ykvbb.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp1m7ykvbb.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp1m7ykvbb.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> wordsInOrder = new\
    \ ArrayList<String>();\n        ArrayList<String> wordsInOrder2 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder3 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder4 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder5\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder6 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder7 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder8 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder9\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder10 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder11 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder13 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder16 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder17 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder18 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder19\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder20 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder21 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder22 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder27 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder28 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder29\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder30 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder31 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder33 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder36 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder37 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder38 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder39\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder40 = new ArrayList<String>();\n\
    \        ArrayList<String> \n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps82byyhl.java:66: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmps82byyhl.java:66: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvaq4kkg4.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpicqc3ku3.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> currentWord = new ArrayList<>();\n\
    \        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                currentWord.add(c);\n                if (currentWord.size()\
    \ == n) {\n                    words.add(currentWord);\n                    currentWord\
    \ = new ArrayList<>();\n                }\n            }\n        }\n        if\
    \ (currentWord.size() > 0) {\n            words.add(currentWord);\n        }\n\
    \        return words;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8kdly7wz.java:29: error: no suitable method found for add(char)\n\
    \                currentWord.add(c);\n                           ^\n    method\
    \ Collection.add(String) is not applicable\n      (argument mismatch; char cannot\
    \ be converted to String)\n    method List.add(String) is not applicable\n   \
    \   (argument mismatch; char cannot be converted to String)\n    method AbstractCollection.add(String)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractList.add(String) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n    method ArrayList.add(String) is not\
    \ applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmp8kdly7wz.java:31: error: no suitable method found for add(ArrayList<String>)\n\
    \                    words.add(currentWord);\n                         ^\n   \
    \ method Collection.add(String) is not applicable\n      (argument mismatch; ArrayList<String>\
    \ cannot be converted to String)\n    method List.add(String) is not applicable\n\
    \      (argument mismatch; ArrayList<String> cannot be converted to String)\n\
    \    method AbstractCollection.add(String) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to String)\n    method AbstractList.add(String)\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to String)\n    method ArrayList.add(String) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to String)\n/tmp/tmp8kdly7wz.java:37:\
    \ error: no suitable method found for add(ArrayList<String>)\n            words.add(currentWord);\n\
    \                 ^\n    method Collection.add(String) is not applicable\n   \
    \   (argument mismatch; ArrayList<String> cannot be converted to String)\n   \
    \ method List.add(String) is not applicable\n      (argument mismatch; ArrayList<String>\
    \ cannot be converted to String)\n    method AbstractCollection.add(String) is\
    \ not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to String)\n    method AbstractLi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn6uhkzhi.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpn6uhkzhi.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpn6uhkzhi.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpn6uhkzhi.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpn6uhkzhi.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpn6uhkzhi.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpn6uhkzhi.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpn6uhkzhi.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean isConsonant = false;\n        boolean\
    \ isWord = false;\n        boolean isWordWithConsonant = false;\n        boolean\
    \ isWordWithConsonantAndWord = false;\n        boolean isWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWord = false;\n\
    \        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonant =\
    \ false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWith\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp34woxhxk.java:43: error: ';' expected\n        boolean isWordWithConsonantAndWordWith\n\
    \                                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n \
    \       ArrayList<String> wordList = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList2 = new ArrayList<String>();\n        ArrayList<String> wordList3 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList4 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<String>();\n        ArrayList<String> wordList7 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList8 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<String>();\n        ArrayList<String> wordList11\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList12 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<String>();\n        ArrayList<String> wordList15\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList16 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<String>();\n        ArrayList<String> wordList19\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList20 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<String>();\n        ArrayList<String> wordList23\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList24 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<String>();\n        ArrayList<String> wordList27\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList28 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<String>();\n        ArrayList<String> wordList31\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList32 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<String>();\n        ArrayList<String> wordList35\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList36 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<String>();\n        ArrayList<String> wordList39\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList40 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<String>();\n        ArrayList<String> wordList43\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList44 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_8pcunr.java:67: error: ';' expected\n        ArrayList<String>\
    \ word\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ consonants = new ArrayList<>();\n        ArrayList<String> vowels = new ArrayList<>();\n\
    \        ArrayList<String> consonants_vowels = new ArrayList<>();\n        ArrayList<String>\
    \ consonants_vowels_spaces = new ArrayList<>();\n        ArrayList<String> consonants_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_vowels = new\
    \ ArrayList<>();\n        ArrayList<String> consonants_spaces_vowels_spaces =\
    \ new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces = new\
    \ ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_vowels =\
    \ new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_vowels_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> \n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bstv6th.java:51: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp1bstv6th.java:51: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuesrdokx.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.length() == 0) {\n            return result;\n        }\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder = new ArrayList<>();\n        ArrayList<String> wordsInOrder2 =\
    \ new ArrayList<>();\n        ArrayList<String> wordsInOrder3 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder4 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder5 = new ArrayList<>();\n        ArrayList<String> wordsInOrder6\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder7 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder9 = new ArrayList<>();\n        ArrayList<String> wordsInOrder10\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder11 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder12 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder13 = new ArrayList<>();\n        ArrayList<String> wordsInOrder14\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder15 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder16 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder17 = new ArrayList<>();\n        ArrayList<String> wordsInOrder18\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder19 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder20 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder21 = new ArrayList<>();\n        ArrayList<String> wordsInOrder22\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder23 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder24 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder25 = new ArrayList<>();\n        ArrayList<String> wordsInOrder26\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder27 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder28 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder29 = new ArrayList<>();\n        ArrayList<String> wordsInOrder30\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder31 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder32 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder33 = new ArrayList<>();\n        ArrayList<String> wordsInOrder34\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder35 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder36 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder37 = new ArrayList<>();\n        ArrayList<String> wordsInOrder38\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder39 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder40 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder41 = new ArrayList<>();\n        ArrayList<String> wordsInOrder42\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder43 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder44\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6n8tl1k_.java:69: error: ';' expected\n        ArrayList<String>\
    \ wordsInOrder44\n                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzrrqbqtd.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdlq2h5yu.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpdlq2h5yu.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpdlq2h5yu.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpdlq2h5yu.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpdlq2h5yu.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpdlq2h5yu.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpdlq2h5yu.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpdlq2h5yu.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s == null || s.length() == 0) {\n            return result;\n   \
    \     }\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv7dhq682.java:74: error: > expected\n    }\n    ^\n/tmp/tmpv7dhq682.java:74:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpv7dhq682.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpv7dhq682.java:75: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpv7dhq682.java:75: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpv7dhq682.java:75: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpv7dhq682.java:85:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphpd2m8qm.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmphpd2m8qm.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmphpd2m8qm.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmphpd2m8qm.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmphpd2m8qm.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmphpd2m8qm.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmphpd2m8qm.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean found = false;\n        boolean\
    \ isConsonant = false;\n        boolean isConsonant2 = false;\n        boolean\
    \ isConsonant3 = false;\n        boolean isConsonant4 = false;\n        boolean\
    \ isConsonant5 = false;\n        boolean isConsonant6 = false;\n        boolean\
    \ isConsonant7 = false;\n        boolean isConsonant8 = false;\n        boolean\
    \ isConsonant9 = false;\n        boolean isConsonant10 = false;\n        boolean\
    \ isConsonant11 = false;\n        boolean isConsonant12 = false;\n        boolean\
    \ isConsonant13 = false;\n        boolean isConsonant14 = false;\n        boolean\
    \ isConsonant15 = false;\n        boolean isConsonant16 = false;\n        boolean\
    \ isConsonant17 = false;\n        boolean isConsonant18 = false;\n        boolean\
    \ isConsonant19 = false;\n        boolean isConsonant20 = false;\n        boolean\
    \ isConsonant21 = false;\n        boolean isConsonant22 = false;\n        boolean\
    \ isConsonant23 = false;\n        boolean isConsonant24 = false;\n        boolean\
    \ isConsonant25 = false;\n        boolean isConsonant26 = false;\n        boolean\
    \ isConsonant27 = false;\n        boolean isConsonant28 = false;\n        boolean\
    \ isConsonant29 = false;\n        boolean isConsonant30 = false;\n        boolean\
    \ isConsonant31 = false;\n        boolean isConsonant32 = false;\n        boolean\
    \ isConsonant33 = false;\n        boolean isConsonant34 = false;\n        boolean\
    \ isConsonant35 = false;\n        boolean isConsonant36 = false;\n        boolean\
    \ isConsonant37 = false;\n        boolean isConsonant38 = false;\n        boolean\
    \ isConsonant39 = false;\n        boolean isConsonant40 = false;\n        boolean\
    \ isConsonant41 = false;\n        boolean isConsonant42 = false;\n        boolean\
    \ isConsonant43 = false;\n        boolean isConsonant44 = false;\n        boolean\
    \ isConsonant45 = false;\n        boolean isConsonant46 = false;\n        boolean\
    \ isConsonant47 = false;\n        boolean isConsonant48 = false;\n        boolean\
    \ isConsonant49 = false;\n        boolean isConsonant50 = false;\n        boolean\
    \ isConsonant51 = false;\n        boolean isConsonant52 = false;\n        boolean\
    \ isConson\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy1dt9wsl.java:79: error: ';' expected\n        boolean isConson\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7gbmdmmi.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.length() == 0) {\n            return result;\n        }\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ wordList = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp84eedrz9.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplt49yxly.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplt49yxly.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmplt49yxly.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmplt49yxly.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmplt49yxly.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmplt49yxly.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmplt49yxly.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_378enfy.java:24: error: variable words is already defined in method\
    \ selectWords(String,long)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmp_378enfy.java:25: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n                          ^\n/tmp/tmp_378enfy.java:26:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<String>();\n                \
    \          ^\n/tmp/tmp_378enfy.java:27: error: variable words is already defined\
    \ in method selectWords(String,long)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmp_378enfy.java:28: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n                          ^\n/tmp/tmp_378enfy.java:29:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<String>();\n                \
    \          ^\n/tmp/tmp_378enfy.java:30: error: variable words is already defined\
    \ in method selectWords(String,long)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmp_378enfy.java:31: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n                          ^\n/tmp/tmp_378enfy.java:32:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<String>();\n                \
    \          ^\n/tmp/tmp_378enfy.java:33: error: variable words is already defined\
    \ in method selectWords(String,long)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \                          ^\n/tmp/tmp_378enfy.java:34: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<String>("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg6w641an.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<String>();\n\
    \        ArrayList<String> temp2 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<String>();\n        ArrayList<String> temp4 = new ArrayList<String>();\n\
    \        ArrayList<String> temp5 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<String>();\n        ArrayList<String> temp7 = new ArrayList<String>();\n\
    \        ArrayList<String> temp8 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<String>();\n        ArrayList<String> temp10 = new ArrayList<String>();\n\
    \        ArrayList<String> temp11 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<String>();\n        ArrayList<String> temp13 = new ArrayList<String>();\n\
    \        ArrayList<String> temp14 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<String>();\n        ArrayList<String> temp16 = new ArrayList<String>();\n\
    \        ArrayList<String> temp17 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<String>();\n        ArrayList<String> temp19 = new ArrayList<String>();\n\
    \        ArrayList<String> temp20 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<String>();\n        ArrayList<String> temp22 = new ArrayList<String>();\n\
    \        ArrayList<String> temp23 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<String>();\n        ArrayList<String> temp25 = new ArrayList<String>();\n\
    \        ArrayList<String> temp26 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<String>();\n        ArrayList<String> temp28 = new ArrayList<String>();\n\
    \        ArrayList<String> temp29 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<String>();\n        ArrayList<String> temp31 = new ArrayList<String>();\n\
    \        ArrayList<String> temp32 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<String>();\n        ArrayList<String> temp34 = new ArrayList<String>();\n\
    \        ArrayList<String> temp35 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<String>();\n        ArrayList<String> temp37 = new ArrayList<String>();\n\
    \        ArrayList<String> temp38 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<String>();\n        ArrayList<String> temp40 = new ArrayList<String>();\n\
    \        ArrayList<String> temp41 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<String>();\n        ArrayList<String> temp43 = new ArrayList<String>();\n\
    \        ArrayList<String> temp44 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<String>();\n        ArrayList<String> temp46 = new ArrayList<String>();\n\
    \        ArrayList<String> temp47 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7c5stgpg.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkkm5bqcf.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpkkm5bqcf.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpkkm5bqcf.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpkkm5bqcf.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpkkm5bqcf.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpkkm5bqcf.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpkkm5bqcf.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpkkm5bqcf.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean isWord = false;\n        boolean\
    \ isWord2 = false;\n        boolean isWord3 = false;\n        boolean isWord4\
    \ = false;\n        boolean isWord5 = false;\n        boolean isWord6 = false;\n\
    \        boolean isWord7 = false;\n        boolean isWord8 = false;\n        boolean\
    \ isWord9 = false;\n        boolean isWord10 = false;\n        boolean isWord11\
    \ = false;\n        boolean isWord12 = false;\n        boolean isWord13 = false;\n\
    \        boolean isWord14 = false;\n        boolean isWord15 = false;\n      \
    \  boolean isWord16 = false;\n        boolean isWord17 = false;\n        boolean\
    \ isWord18 = false;\n        boolean isWord19 = false;\n        boolean isWord20\
    \ = false;\n        boolean isWord21 = false;\n        boolean isWord22 = false;\n\
    \        boolean isWord23 = false;\n        boolean isWord24 = false;\n      \
    \  boolean isWord25 = false;\n        boolean isWord26 = false;\n        boolean\
    \ isWord27 = false;\n        boolean isWord28 = false;\n        boolean isWord29\
    \ = false;\n        boolean isWord30 = false;\n        boolean isWord31 = false;\n\
    \        boolean isWord32 = false;\n        boolean isWord33 = false;\n      \
    \  boolean isWord34 = false;\n        boolean isWord35 = false;\n        boolean\
    \ isWord36 = false;\n        boolean isWord37 = false;\n        boolean isWord38\
    \ = false;\n        boolean isWord39 = false;\n        boolean isWord40 = false;\n\
    \        boolean isWord41 = false;\n        boolean isWord42 = false;\n      \
    \  boolean isWord43 = false;\n        boolean isWord44 = false;\n        boolean\
    \ isWord45 = false;\n        boolean isWord46 = false;\n        boolean isWord47\
    \ = false;\n        boolean isWord48 = false;\n        boolean isWord49 = false;\n\
    \        boolean isWord50 = false;\n        boolean isWord51 = false;\n      \
    \  boolean isWord52 = false;\n        boolean isWord53 = false;\n        boolean\
    \ isWord54 = false;\n        boolean isWord55 = false;\n        boolean isWord56\
    \ = false;\n        boolean isWord57 = false;\n        boolean isWord58 = false;\n\
    \        boolean isWord59 = false;\n        boolean isWord60 = false;\n      \
    \  boolean isWord61 = false;\n        boolean isWord62 = false;\n        boolean\
    \ isWord63 = false;\n        boolean isWord64 = false;\n        boolean isWord65\
    \ = false;\n        boolean isWord66 = false;\n        boolean isWord67 = false;\n\
    \        boolean isWord68\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpboc4bw79.java:93: error: ';' expected\n        boolean isWord68\n\
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4t7ce_b.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxt6pkqg9.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpxt6pkqg9.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpxt6pkqg9.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpxt6pkqg9.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpxt6pkqg9.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpxt6pkqg9.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpxt6pkqg9.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpxt6pkqg9.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2qafkb_r.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp2qafkb_r.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp2qafkb_r.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmp2qafkb_r.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp2qafkb_r.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp2qafkb_r.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp2qafkb_r.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp2qafkb_r.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.length() == 0) {\n            return result;\n        }\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ wordList = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp68fec7jj.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw_pcdopt.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpw_pcdopt.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3as6julv.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> wordList = new ArrayList<String>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<String>();\n        ArrayList<String> wordList4 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList5 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<String>();\n        ArrayList<String> wordList8 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList9 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<String>();\n        ArrayList<String> wordList12\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList13 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<String>();\n        ArrayList<String> wordList16\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList17 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<String>();\n        ArrayList<String> wordList20\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList21 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<String>();\n        ArrayList<String> wordList24\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList25 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<String>();\n        ArrayList<String> wordList28\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList29 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<String>();\n        ArrayList<String> wordList32\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList33 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<String>();\n        ArrayList<String> wordList36\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList37 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<String>();\n        ArrayList<String> wordList40\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList41 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<String>();\n        ArrayList<String> wordList44\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3e0px7hu.java:69: error: <identifier> expected\n        ArrayList<String>\
    \ wordList44 = new \n                                          ^\n/tmp/tmp3e0px7hu.java:70:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmp3e0px7hu.java:70: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmp3e0px7hu.java:71: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp3e0px7hu.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp3e0px7hu.java:71: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp3e0px7hu.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp3e0px7hu.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgu7b2t0g.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9vtud45.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmph9vtud45.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmph9vtud45.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmph9vtud45.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmph9vtud45.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmph9vtud45.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmph9vtud45.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmph9vtud45.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2iryi9br.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> wordList = new ArrayList<String>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<String>();\n        ArrayList<String> wordList4 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList5 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<String>();\n        ArrayList<String> wordList8 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList9 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<String>();\n        ArrayList<String> wordList12\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList13 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<String>();\n        ArrayList<String> wordList16\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList17 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<String>();\n        ArrayList<String> wordList20\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList21 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<String>();\n        ArrayList<String> wordList24\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList25 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<String>();\n        ArrayList<String> wordList28\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList29 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<String>();\n        ArrayList<String> wordList32\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList33 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<String>();\n        ArrayList<String> wordList36\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList37 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<String>();\n        ArrayList<String> wordList40\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList41 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<String>();\n        ArrayList<String> wordList44\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4gmdjom.java:69: error: <identifier> expected\n        ArrayList<String>\
    \ wordList44 = new \n                                          ^\n/tmp/tmpu4gmdjom.java:70:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmpu4gmdjom.java:70: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmpu4gmdjom.java:71: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpu4gmdjom.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpu4gmdjom.java:71: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpu4gmdjom.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpu4gmdjom.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnp_i8mcx.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpnp_i8mcx.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpnp_i8mcx.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpnp_i8mcx.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpnp_i8mcx.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpnp_i8mcx.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpnp_i8mcx.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpnp_i8mcx.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy9b66lde.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpy9b66lde.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmposd49s2j.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps6qh2_b4.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgliaox4r.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpgliaox4r.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpgliaox4r.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpgliaox4r.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpgliaox4r.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpgliaox4r.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpgliaox4r.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpgliaox4r.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpscx_xe56.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaf3o69rp.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpaf3o69rp.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpaf3o69rp.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpaf3o69rp.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpaf3o69rp.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpaf3o69rp.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpaf3o69rp.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpaf3o69rp.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphnh6hjfd.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpad8s0qog.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb7iz60sc.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5xg2dd6.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpl5xg2dd6.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpl5xg2dd6.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpl5xg2dd6.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpl5xg2dd6.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpl5xg2dd6.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpl5xg2dd6.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpl5xg2dd6.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpopd3dla2.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpopd3dla2.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s == null || s.length() == 0) {\n            return result;\n   \
    \     }\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0wcz8yd6.java:74: error: > expected\n    }\n    ^\n/tmp/tmp0wcz8yd6.java:74:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmp0wcz8yd6.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmp0wcz8yd6.java:75: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmp0wcz8yd6.java:75: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmp0wcz8yd6.java:75: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmp0wcz8yd6.java:85:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.length() == 0) {\n            return result;\n        }\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz09ub8tp.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxi_lonnz.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqnm7t5_j.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpqnm7t5_j.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpqnm7t5_j.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpqnm7t5_j.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpqnm7t5_j.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpqnm7t5_j.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpqnm7t5_j.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpqnm7t5_j.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnr26ump1.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpnr26ump1.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpnr26ump1.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpnr26ump1.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpnr26ump1.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpnr26ump1.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpnr26ump1.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpnr26ump1.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp99axoh2i.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp99axoh2i.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp99axoh2i.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmp99axoh2i.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp99axoh2i.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp99axoh2i.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp99axoh2i.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp99axoh2i.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu5tu4w7f.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpu5tu4w7f.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x1vi0hc.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplz3p47l0.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmplz3p47l0.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ ArrayList<String> temp = new ArrayList<>();\n        ArrayList<String> temp2\
    \ = new ArrayList<>();\n        ArrayList<String> temp3 = new ArrayList<>();\n\
    \        ArrayList<String> temp4 = new ArrayList<>();\n        ArrayList<String>\
    \ temp5 = new ArrayList<>();\n        ArrayList<String> temp6 = new ArrayList<>();\n\
    \        ArrayList<String> temp7 = new ArrayList<>();\n        ArrayList<String>\
    \ temp8 = new ArrayList<>();\n        ArrayList<String> temp9 = new ArrayList<>();\n\
    \        ArrayList<String> temp10 = new ArrayList<>();\n        ArrayList<String>\
    \ temp11 = new ArrayList<>();\n        ArrayList<String> temp12 = new ArrayList<>();\n\
    \        ArrayList<String> temp13 = new ArrayList<>();\n        ArrayList<String>\
    \ temp14 = new ArrayList<>();\n        ArrayList<String> temp15 = new ArrayList<>();\n\
    \        ArrayList<String> temp16 = new ArrayList<>();\n        ArrayList<String>\
    \ temp17 = new ArrayList<>();\n        ArrayList<String> temp18 = new ArrayList<>();\n\
    \        ArrayList<String> temp19 = new ArrayList<>();\n        ArrayList<String>\
    \ temp20 = new ArrayList<>();\n        ArrayList<String> temp21 = new ArrayList<>();\n\
    \        ArrayList<String> temp22 = new ArrayList<>();\n        ArrayList<String>\
    \ temp23 = new ArrayList<>();\n        ArrayList<String> temp24 = new ArrayList<>();\n\
    \        ArrayList<String> temp25 = new ArrayList<>();\n        ArrayList<String>\
    \ temp26 = new ArrayList<>();\n        ArrayList<String> temp27 = new ArrayList<>();\n\
    \        ArrayList<String> temp28 = new ArrayList<>();\n        ArrayList<String>\
    \ temp29 = new ArrayList<>();\n        ArrayList<String> temp30 = new ArrayList<>();\n\
    \        ArrayList<String> temp31 = new ArrayList<>();\n        ArrayList<String>\
    \ temp32 = new ArrayList<>();\n        ArrayList<String> temp33 = new ArrayList<>();\n\
    \        ArrayList<String> temp34 = new ArrayList<>();\n        ArrayList<String>\
    \ temp35 = new ArrayList<>();\n        ArrayList<String> temp36 = new ArrayList<>();\n\
    \        ArrayList<String> temp37 = new ArrayList<>();\n        ArrayList<String>\
    \ temp38 = new ArrayList<>();\n        ArrayList<String> temp39 = new ArrayList<>();\n\
    \        ArrayList<String> temp40 = new ArrayList<>();\n        ArrayList<String>\
    \ temp41 = new ArrayList<>();\n        ArrayList<String> temp42 = new ArrayList<>();\n\
    \        ArrayList<String> temp43 = new ArrayList<>();\n        ArrayList<String>\
    \ temp44 = new ArrayList<>();\n        ArrayList<String> temp45 = new ArrayList<>();\n\
    \        ArrayList<String> temp46 = new ArrayList<>();\n        ArrayList<String>\
    \ temp47 = new ArrayList<>();\n        ArrayList<String> temp48 = new ArrayList<>();\n\
    \        ArrayList<String> temp49 = new ArrayList<>();\n        ArrayList<String>\
    \ temp50 = new ArrayList<>();\n        ArrayList<String> temp51 = new ArrayList<>();\n\
    \        ArrayList<String> temp52 = new ArrayList<>();\n        ArrayList<String>\
    \ temp53 = new ArrayList<>();\n        ArrayList<String> temp54 = new ArrayList<>();\n\
    \        ArrayList<String> temp55 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyg6wrhdi.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu0z5iouo.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpu0z5iouo.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpu0z5iouo.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpu0z5iouo.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpu0z5iouo.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpu0z5iouo.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpu0z5iouo.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3mdvt0te.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp3mdvt0te.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String>();\n        ArrayList<String>\
    \ word49 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6dqq0mdl.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String>();\n        ArrayList<String>\
    \ word49 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa6yhr0od.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp15mwl35t.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp15mwl35t.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp15mwl35t.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp15mwl35t.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp15mwl35t.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp15mwl35t.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp15mwl35t.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<String>();\n\
    \        ArrayList<String> temp2 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<String>();\n        ArrayList<String> temp4 = new ArrayList<String>();\n\
    \        ArrayList<String> temp5 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<String>();\n        ArrayList<String> temp7 = new ArrayList<String>();\n\
    \        ArrayList<String> temp8 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<String>();\n        ArrayList<String> temp10 = new ArrayList<String>();\n\
    \        ArrayList<String> temp11 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<String>();\n        ArrayList<String> temp13 = new ArrayList<String>();\n\
    \        ArrayList<String> temp14 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<String>();\n        ArrayList<String> temp16 = new ArrayList<String>();\n\
    \        ArrayList<String> temp17 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<String>();\n        ArrayList<String> temp19 = new ArrayList<String>();\n\
    \        ArrayList<String> temp20 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<String>();\n        ArrayList<String> temp22 = new ArrayList<String>();\n\
    \        ArrayList<String> temp23 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<String>();\n        ArrayList<String> temp25 = new ArrayList<String>();\n\
    \        ArrayList<String> temp26 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<String>();\n        ArrayList<String> temp28 = new ArrayList<String>();\n\
    \        ArrayList<String> temp29 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<String>();\n        ArrayList<String> temp31 = new ArrayList<String>();\n\
    \        ArrayList<String> temp32 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<String>();\n        ArrayList<String> temp34 = new ArrayList<String>();\n\
    \        ArrayList<String> temp35 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<String>();\n        ArrayList<String> temp37 = new ArrayList<String>();\n\
    \        ArrayList<String> temp38 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<String>();\n        ArrayList<String> temp40 = new ArrayList<String>();\n\
    \        ArrayList<String> temp41 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<String>();\n        ArrayList<String> temp43 = new ArrayList<String>();\n\
    \        ArrayList<String> temp44 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<String>();\n        ArrayList<String> temp46 = new ArrayList<String>();\n\
    \        ArrayList<String> temp47 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgzsk4czg.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6xzom5my.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvi8rzylp.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpvi8rzylp.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpvi8rzylp.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpvi8rzylp.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpvi8rzylp.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpvi8rzylp.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpvi8rzylp.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpvi8rzylp.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaulpfrl3.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpaulpfrl3.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpaulpfrl3.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpaulpfrl3.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpaulpfrl3.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpaulpfrl3.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpaulpfrl3.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpaulpfrl3.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ ArrayList<String> wordList = new ArrayList<>();\n        ArrayList<String> wordList2\
    \ = new ArrayList<>();\n        ArrayList<String> wordList3 = new ArrayList<>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<>();\n        ArrayList<String> wordList6 = new ArrayList<>();\n\
    \        ArrayList<String> wordList7 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList8 = new ArrayList<>();\n        ArrayList<String> wordList9 = new ArrayList<>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<>();\n        ArrayList<String> wordList12 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList13 = new ArrayList<>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<>();\n        ArrayList<String> wordList16 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList17 = new ArrayList<>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<>();\n        ArrayList<String> wordList20 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList21 = new ArrayList<>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<>();\n        ArrayList<String> wordList24 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList25 = new ArrayList<>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<>();\n        ArrayList<String> wordList28 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList29 = new ArrayList<>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<>();\n        ArrayList<String> wordList32 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList33 = new ArrayList<>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<>();\n        ArrayList<String> wordList36 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList37 = new ArrayList<>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<>();\n        ArrayList<String> wordList40 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList41 = new ArrayList<>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<>();\n        ArrayList<String> wordList44 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList45 = new ArrayList<>();\n\
    \        ArrayList<String> wordList46 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList47 = new ArrayList<>();\n        ArrayList<String> wordList48 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList49 = new ArrayList<>();\n\
    \        ArrayList<String> wordList50 = new ArrayList<>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf_tocazu.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrv4verr.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpqrv4verr.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordsInOrder\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder4 = new ArrayList<>();\n        ArrayList<String> wordsInOrder5\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder7 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder8 = new ArrayList<>();\n        ArrayList<String> wordsInOrder9\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder12 = new ArrayList<>();\n        ArrayList<String> wordsInOrder13\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder16 = new ArrayList<>();\n        ArrayList<String> wordsInOrder17\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder20 = new ArrayList<>();\n        ArrayList<String> wordsInOrder21\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder24 = new ArrayList<>();\n        ArrayList<String> wordsInOrder25\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder28 = new ArrayList<>();\n        ArrayList<String> wordsInOrder29\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder32 = new ArrayList<>();\n        ArrayList<String> wordsInOrder33\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder36 = new ArrayList<>();\n        ArrayList<String> wordsInOrder37\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder40 = new ArrayList<>();\n        ArrayList<String> wordsInOrder41\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder44 = new ArrayList<>();\n        ArrayList<String> wordsInOrder45\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppjugsutx.java:67: error: <identifier> expected\n        ArrayList<String>\
    \ wordsInOrder45 = new \n                                              ^\n/tmp/tmppjugsutx.java:68:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmppjugsutx.java:68: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmppjugsutx.java:69: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmppjugsutx.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmppjugsutx.java:69: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmppjugsutx.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmppjugsutx.java:79: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz5d1n93e.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpz5d1n93e.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpz5d1n93e.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpz5d1n93e.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpz5d1n93e.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpz5d1n93e.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpz5d1n93e.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi___3bwy.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        ArrayList<String> temp2 = new ArrayList<String>();\n\
    \        ArrayList<String> temp3 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<String>();\n        ArrayList<String> temp5 = new ArrayList<String>();\n\
    \        ArrayList<String> temp6 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<String>();\n        ArrayList<String> temp8 = new ArrayList<String>();\n\
    \        ArrayList<String> temp9 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<String>();\n        ArrayList<String> temp11 = new ArrayList<String>();\n\
    \        ArrayList<String> temp12 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<String>();\n        ArrayList<String> temp14 = new ArrayList<String>();\n\
    \        ArrayList<String> temp15 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<String>();\n        ArrayList<String> temp17 = new ArrayList<String>();\n\
    \        ArrayList<String> temp18 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<String>();\n        ArrayList<String> temp20 = new ArrayList<String>();\n\
    \        ArrayList<String> temp21 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<String>();\n        ArrayList<String> temp23 = new ArrayList<String>();\n\
    \        ArrayList<String> temp24 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<String>();\n        ArrayList<String> temp26 = new ArrayList<String>();\n\
    \        ArrayList<String> temp27 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<String>();\n        ArrayList<String> temp29 = new ArrayList<String>();\n\
    \        ArrayList<String> temp30 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<String>();\n        ArrayList<String> temp32 = new ArrayList<String>();\n\
    \        ArrayList<String> temp33 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<String>();\n        ArrayList<String> temp35 = new ArrayList<String>();\n\
    \        ArrayList<String> temp36 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<String>();\n        ArrayList<String> temp38 = new ArrayList<String>();\n\
    \        ArrayList<String> temp39 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<String>();\n        ArrayList<String> temp41 = new ArrayList<String>();\n\
    \        ArrayList<String> temp42 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<String>();\n        ArrayList<String> temp44 = new ArrayList<String>();\n\
    \        ArrayList<String> temp45 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<String>();\n        ArrayList<String> temp47 = new ArrayList<String>();\n\
    \        ArrayList<String> temp48 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfp7nd2ig.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.isEmpty()) {\n            return result;\n        }\n  \
    \      ArrayList<String> words = new ArrayList<>();\n        boolean isWord =\
    \ false;\n        boolean isWordWithNConsonants = false;\n        boolean isWordWithNConsonants2\
    \ = false;\n        boolean isWordWithNConsonants3 = false;\n        boolean isWordWithNConsonants4\
    \ = false;\n        boolean isWordWithNConsonants5 = false;\n        boolean isWordWithNConsonants6\
    \ = false;\n        boolean isWordWithNConsonants7 = false;\n        boolean isWordWithNConsonants8\
    \ = false;\n        boolean isWordWithNConsonants9 = false;\n        boolean isWordWithNConsonants10\
    \ = false;\n        boolean isWordWithNConsonants11 = false;\n        boolean\
    \ isWordWithNConsonants12 = false;\n        boolean isWordWithNConsonants13 =\
    \ false;\n        boolean isWordWithNConsonants14 = false;\n        boolean isWordWithNConsonants15\
    \ = false;\n        boolean isWordWithNConsonants16 = false;\n        boolean\
    \ isWordWithNConsonants17 = false;\n        boolean isWordWithNConsonants18 =\
    \ false;\n        boolean isWordWithNConsonants19 = false;\n        boolean isWordWithNConsonants20\
    \ = false;\n        boolean isWordWithNConsonants21 = false;\n        boolean\
    \ isWordWithNConsonants22 = false;\n        boolean isWordWithNConsonants23 =\
    \ false;\n        boolean isWordWithNConsonants24 = false;\n        boolean isWordWithNConsonants25\
    \ = false;\n        boolean isWordWithNConsonants26 = false;\n        boolean\
    \ isWordWithNConsonants27 = false;\n        boolean isWordWithNConsonants28 =\
    \ false;\n        boolean isWordWithNConsonants29 = false;\n        boolean isWordWithNConsonants30\
    \ = false;\n        boolean isWordWithNConsonants31 = false;\n        boolean\
    \ isWordWithNConsonants32 = false;\n        boolean isWordWithNConsonants33 =\
    \ false;\n        boolean isWordWithNConsonants34 = false;\n        boolean isWordWithNConsonants35\
    \ = false;\n        boolean isWordWithNConsonants36 = false;\n        boolean\
    \ isWordWithNConsonants37 = false;\n        boolean isWordWithNConsonants38 =\
    \ false;\n        boolean isWordWithNConsonants39 = false;\n        boolean isWordWithNConson\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2cyjfj_s.java:66: error: ';' expected\n        boolean isWordWithNConson\n\
    \                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5p_oxajr.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiy1ebmto.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpiy1ebmto.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpiy1ebmto.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpiy1ebmto.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpiy1ebmto.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpiy1ebmto.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpiy1ebmto.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpiy1ebmto.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjwpn7kty.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpjwpn7kty.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpjwpn7kty.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpjwpn7kty.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpjwpn7kty.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpjwpn7kty.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpjwpn7kty.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpjwpn7kty.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwqz8fca.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjf8nxr_5.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpjf8nxr_5.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpjf8nxr_5.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpjf8nxr_5.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpjf8nxr_5.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpjf8nxr_5.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpjf8nxr_5.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpjf8nxr_5.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String>();\n        ArrayList<String>\
    \ word49 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoprklntg.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprv22xpvy.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogz97tq1.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        ArrayList<String> temp2 = new ArrayList<String>();\n\
    \        ArrayList<String> temp3 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<String>();\n        ArrayList<String> temp5 = new ArrayList<String>();\n\
    \        ArrayList<String> temp6 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<String>();\n        ArrayList<String> temp8 = new ArrayList<String>();\n\
    \        ArrayList<String> temp9 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<String>();\n        ArrayList<String> temp11 = new ArrayList<String>();\n\
    \        ArrayList<String> temp12 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<String>();\n        ArrayList<String> temp14 = new ArrayList<String>();\n\
    \        ArrayList<String> temp15 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<String>();\n        ArrayList<String> temp17 = new ArrayList<String>();\n\
    \        ArrayList<String> temp18 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<String>();\n        ArrayList<String> temp20 = new ArrayList<String>();\n\
    \        ArrayList<String> temp21 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<String>();\n        ArrayList<String> temp23 = new ArrayList<String>();\n\
    \        ArrayList<String> temp24 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<String>();\n        ArrayList<String> temp26 = new ArrayList<String>();\n\
    \        ArrayList<String> temp27 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<String>();\n        ArrayList<String> temp29 = new ArrayList<String>();\n\
    \        ArrayList<String> temp30 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<String>();\n        ArrayList<String> temp32 = new ArrayList<String>();\n\
    \        ArrayList<String> temp33 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<String>();\n        ArrayList<String> temp35 = new ArrayList<String>();\n\
    \        ArrayList<String> temp36 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<String>();\n        ArrayList<String> temp38 = new ArrayList<String>();\n\
    \        ArrayList<String> temp39 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<String>();\n        ArrayList<String> temp41 = new ArrayList<String>();\n\
    \        ArrayList<String> temp42 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<String>();\n        ArrayList<String> temp44 = new ArrayList<String>();\n\
    \        ArrayList<String> temp45 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<String>();\n        ArrayList<String> temp47 = new ArrayList<String>();\n\
    \        ArrayList<String> temp48 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlo7ndmt.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxz23s6xt.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpxz23s6xt.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrj2p4bh.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s == null || s.length() == 0) {\n            return result;\n   \
    \     }\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        ArrayList<String> temp2 = new ArrayList<String>();\n\
    \        ArrayList<String> temp3 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<String>();\n        ArrayList<String> temp5 = new ArrayList<String>();\n\
    \        ArrayList<String> temp6 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<String>();\n        ArrayList<String> temp8 = new ArrayList<String>();\n\
    \        ArrayList<String> temp9 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<String>();\n        ArrayList<String> temp11 = new ArrayList<String>();\n\
    \        ArrayList<String> temp12 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<String>();\n        ArrayList<String> temp14 = new ArrayList<String>();\n\
    \        ArrayList<String> temp15 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<String>();\n        ArrayList<String> temp17 = new ArrayList<String>();\n\
    \        ArrayList<String> temp18 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<String>();\n        ArrayList<String> temp20 = new ArrayList<String>();\n\
    \        ArrayList<String> temp21 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<String>();\n        ArrayList<String> temp23 = new ArrayList<String>();\n\
    \        ArrayList<String> temp24 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<String>();\n        ArrayList<String> temp26 = new ArrayList<String>();\n\
    \        ArrayList<String> temp27 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<String>();\n        ArrayList<String> temp29 = new ArrayList<String>();\n\
    \        ArrayList<String> temp30 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<String>();\n        ArrayList<String> temp32 = new ArrayList<String>();\n\
    \        ArrayList<String> temp33 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<String>();\n        ArrayList<String> temp35 = new ArrayList<String>();\n\
    \        ArrayList<String> temp36 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<String>();\n        ArrayList<String> temp38 = new ArrayList<String>();\n\
    \        ArrayList<String> temp39 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<String>();\n        ArrayList<String> temp41 = new ArrayList<String>();\n\
    \        ArrayList<String> temp42 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<String>();\n        ArrayList<String> temp44 = new ArrayList<String>();\n\
    \        ArrayList<String> temp45 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<String>();\n        ArrayList<String> temp47 = new ArrayList<String>();\n\
    \        ArrayList<String> temp48 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ugwulya.java:74: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp3ugwulya.java:75: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp3ugwulya.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp3ugwulya.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp3ugwulya.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp3ugwulya.java:75:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp3ugwulya.java:85: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu43w2yt3.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5kr_drpl.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkiom8v_e.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<String>();\n\
    \        ArrayList<String> temp2 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<String>();\n        ArrayList<String> temp4 = new ArrayList<String>();\n\
    \        ArrayList<String> temp5 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<String>();\n        ArrayList<String> temp7 = new ArrayList<String>();\n\
    \        ArrayList<String> temp8 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<String>();\n        ArrayList<String> temp10 = new ArrayList<String>();\n\
    \        ArrayList<String> temp11 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<String>();\n        ArrayList<String> temp13 = new ArrayList<String>();\n\
    \        ArrayList<String> temp14 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<String>();\n        ArrayList<String> temp16 = new ArrayList<String>();\n\
    \        ArrayList<String> temp17 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<String>();\n        ArrayList<String> temp19 = new ArrayList<String>();\n\
    \        ArrayList<String> temp20 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<String>();\n        ArrayList<String> temp22 = new ArrayList<String>();\n\
    \        ArrayList<String> temp23 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<String>();\n        ArrayList<String> temp25 = new ArrayList<String>();\n\
    \        ArrayList<String> temp26 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<String>();\n        ArrayList<String> temp28 = new ArrayList<String>();\n\
    \        ArrayList<String> temp29 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<String>();\n        ArrayList<String> temp31 = new ArrayList<String>();\n\
    \        ArrayList<String> temp32 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<String>();\n        ArrayList<String> temp34 = new ArrayList<String>();\n\
    \        ArrayList<String> temp35 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<String>();\n        ArrayList<String> temp37 = new ArrayList<String>();\n\
    \        ArrayList<String> temp38 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<String>();\n        ArrayList<String> temp40 = new ArrayList<String>();\n\
    \        ArrayList<String> temp41 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<String>();\n        ArrayList<String> temp43 = new ArrayList<String>();\n\
    \        ArrayList<String> temp44 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<String>();\n        ArrayList<String> temp46 = new ArrayList<String>();\n\
    \        ArrayList<String> temp47 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd7pbkq_e.java:74: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp13ojjclx.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp13ojjclx.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp13ojjclx.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmp13ojjclx.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp13ojjclx.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp13ojjclx.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp13ojjclx.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp13ojjclx.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9lpf88p9.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmcim9ccl.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggtjglcn.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq1dwog1y.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpklewx6bq.java:70: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpklewx6bq.java:71: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpklewx6bq.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpklewx6bq.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpklewx6bq.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpklewx6bq.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpklewx6bq.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s == null || s.isEmpty()) {\n            return result;\n       \
    \ }\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggnqe4h7.java:74: error: > expected\n    }\n    ^\n/tmp/tmpggnqe4h7.java:74:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpggnqe4h7.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpggnqe4h7.java:75: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpggnqe4h7.java:75: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpggnqe4h7.java:75: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpggnqe4h7.java:85:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5dcm3qb.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhtb9qjb.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdm02ke1.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpjdm02ke1.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpjdm02ke1.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpjdm02ke1.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpjdm02ke1.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpjdm02ke1.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpjdm02ke1.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpjdm02ke1.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zopta9c.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp5zopta9c.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp5zopta9c.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmp5zopta9c.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp5zopta9c.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp5zopta9c.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp5zopta9c.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp5zopta9c.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdn_08fk7.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcnojtxz6.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n \
    \       if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpetf4q9ny.java:69: error: ';' expected\n        ArrayList<String>\
    \ word\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.isEmpty()) {\n            return result;\n        }\n  \
    \      ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ temp = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ruffn4y.java:79: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n \
    \       if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptz_s7vak.java:69: error: ';' expected\n        ArrayList<String>\
    \ word\n                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp00fm4r1z.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps5cg3lci.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vg9g601.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> wordList = new ArrayList<String>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<String>();\n        ArrayList<String> wordList4 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList5 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<String>();\n        ArrayList<String> wordList8 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList9 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<String>();\n        ArrayList<String> wordList12\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList13 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<String>();\n        ArrayList<String> wordList16\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList17 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<String>();\n        ArrayList<String> wordList20\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList21 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<String>();\n        ArrayList<String> wordList24\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList25 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<String>();\n        ArrayList<String> wordList28\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList29 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<String>();\n        ArrayList<String> wordList32\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList33 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<String>();\n        ArrayList<String> wordList36\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList37 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<String>();\n        ArrayList<String> wordList40\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList41 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<String>();\n        ArrayList<String> wordList44\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlt2a2cp.java:69: error: <identifier> expected\n        ArrayList<String>\
    \ wordList44 = new \n                                          ^\n/tmp/tmpvlt2a2cp.java:70:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmpvlt2a2cp.java:70: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmpvlt2a2cp.java:71: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpvlt2a2cp.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpvlt2a2cp.java:71: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpvlt2a2cp.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpvlt2a2cp.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3wakzte.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmps3wakzte.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmps3wakzte.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmps3wakzte.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmps3wakzte.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmps3wakzte.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmps3wakzte.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmps3wakzte.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxxrgmq2_.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpxxrgmq2_.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpxxrgmq2_.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpxxrgmq2_.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpxxrgmq2_.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpxxrgmq2_.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpxxrgmq2_.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpxxrgmq2_.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<String>();\n \
    \       if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ consonants = new ArrayList<String>();\n        ArrayList<String> vowels = new\
    \ ArrayList<String>();\n        ArrayList<String> consonants_vowels = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_vowels_spaces = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_spaces = new ArrayList<String>();\n    \
    \    ArrayList<String> consonants_spaces_vowels = new ArrayList<String>();\n \
    \       ArrayList<String> consonants_spaces_vowels_spaces = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_spaces_spaces = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_spaces_spaces_vowels = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_spaces_spaces_vowels_spaces = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_spaces_spaces_spaces = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_spaces_spaces_spaces_vowels = new ArrayList<String>();\n\
    \        ArrayList<String> consonants_spaces_spaces_spaces_vowels_spaces = new\
    \ ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_vowels\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_spaces_spaces_spaces_spaces_spaces_spaces_vowels_spaces\
    \ = new ArrayList<String>();\n        ArrayList<String> consonants_\n    }\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwpocd82y.java:50: error: ';' expected\n        ArrayList<String>\
    \ consonants_\n                                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String>();\n        ArrayList<String>\
    \ word49 = new ArrayList<String>();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprr3vpwf6.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> currentWord = new ArrayList<>();\n\
    \        ArrayList<String> currentWords = new ArrayList<>();\n        ArrayList<String>\
    \ currentWordsCount = new ArrayList<>();\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isLetter(c)) {\n                currentWord.add(c);\n\
    \                currentWordsCount.add(1);\n            } else {\n           \
    \     currentWords.addAll(currentWord);\n                currentWord = new ArrayList<>();\n\
    \                currentWordsCount.add(1);\n            }\n        }\n       \
    \ words.addAll(currentWords);\n        long currentWordsCountSum = currentWordsCount.stream().mapToLong(x\
    \ -> x).sum();\n        if (currentWordsCountSum == n) {\n            result.addAll(currentWords);\n\
    \        }\n        for (String word : words) {\n            long wordCount =\
    \ currentWordsCount.stream().filter(x -> x == word).count();\n            if (wordCount\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n\n    }\n    public static void main(String[] args) {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewvg1xe1.java:31: error: no suitable method found for add(char)\n\
    \                currentWord.add(c);\n                           ^\n    method\
    \ Collection.add(String) is not applicable\n      (argument mismatch; char cannot\
    \ be converted to String)\n    method List.add(String) is not applicable\n   \
    \   (argument mismatch; char cannot be converted to String)\n    method AbstractCollection.add(String)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractList.add(String) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n    method ArrayList.add(String) is not\
    \ applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmpewvg1xe1.java:32: error: no suitable method found for add(int)\n     \
    \           currentWordsCount.add(1);\n                                 ^\n  \
    \  method Collection.add(String) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to String)\n    method List.add(String) is not applicable\n\
    \      (argument mismatch; int cannot be converted to String)\n    method AbstractCollection.add(String)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to String)\n\
    \    method AbstractList.add(String) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to String)\n    method ArrayList.add(String) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to String)\n/tmp/tmpewvg1xe1.java:36:\
    \ error: no suitable method found for add(int)\n                currentWordsCount.add(1);\n\
    \                                 ^\n    method Collection.add(String) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to String)\n \
    \   method List.add(String) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to String)\n    method AbstractCollection.add(String) is not applicable\n\
    \      (argument mismatch; int cannot be converted to String)\n    method AbstractList.add(String)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to String)\n\
    \    method ArrayLi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjogfjeqz.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpjogfjeqz.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmbeu99o5.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpmbeu99o5.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpmbeu99o5.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpmbeu99o5.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpmbeu99o5.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpmbeu99o5.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpmbeu99o5.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpmbeu99o5.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        ArrayList<String> temp2 = new ArrayList<String>();\n\
    \        ArrayList<String> temp3 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<String>();\n        ArrayList<String> temp5 = new ArrayList<String>();\n\
    \        ArrayList<String> temp6 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<String>();\n        ArrayList<String> temp8 = new ArrayList<String>();\n\
    \        ArrayList<String> temp9 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<String>();\n        ArrayList<String> temp11 = new ArrayList<String>();\n\
    \        ArrayList<String> temp12 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<String>();\n        ArrayList<String> temp14 = new ArrayList<String>();\n\
    \        ArrayList<String> temp15 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<String>();\n        ArrayList<String> temp17 = new ArrayList<String>();\n\
    \        ArrayList<String> temp18 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<String>();\n        ArrayList<String> temp20 = new ArrayList<String>();\n\
    \        ArrayList<String> temp21 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<String>();\n        ArrayList<String> temp23 = new ArrayList<String>();\n\
    \        ArrayList<String> temp24 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<String>();\n        ArrayList<String> temp26 = new ArrayList<String>();\n\
    \        ArrayList<String> temp27 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<String>();\n        ArrayList<String> temp29 = new ArrayList<String>();\n\
    \        ArrayList<String> temp30 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<String>();\n        ArrayList<String> temp32 = new ArrayList<String>();\n\
    \        ArrayList<String> temp33 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<String>();\n        ArrayList<String> temp35 = new ArrayList<String>();\n\
    \        ArrayList<String> temp36 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<String>();\n        ArrayList<String> temp38 = new ArrayList<String>();\n\
    \        ArrayList<String> temp39 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<String>();\n        ArrayList<String> temp41 = new ArrayList<String>();\n\
    \        ArrayList<String> temp42 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<String>();\n        ArrayList<String> temp44 = new ArrayList<String>();\n\
    \        ArrayList<String> temp45 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<String>();\n        ArrayList<String> temp47 = new ArrayList<String>();\n\
    \        ArrayList<String> temp48 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3e03286.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbwitb4mo.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpbwitb4mo.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s == null || s.isEmpty()) {\n            return result;\n       \
    \ }\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0venca8.java:74: error: > expected\n    }\n    ^\n/tmp/tmpc0venca8.java:74:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpc0venca8.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpc0venca8.java:75: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpc0venca8.java:75: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpc0venca8.java:75: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpc0venca8.java:85:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ywbs0jm.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_ngxvy4.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpd_ngxvy4.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjw_9rclx.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s == null || s.isEmpty()) {\n            return result;\n       \
    \ }\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n        ArrayList<String> temp2 = new ArrayList<String>();\n\
    \        ArrayList<String> temp3 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<String>();\n        ArrayList<String> temp5 = new ArrayList<String>();\n\
    \        ArrayList<String> temp6 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<String>();\n        ArrayList<String> temp8 = new ArrayList<String>();\n\
    \        ArrayList<String> temp9 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<String>();\n        ArrayList<String> temp11 = new ArrayList<String>();\n\
    \        ArrayList<String> temp12 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<String>();\n        ArrayList<String> temp14 = new ArrayList<String>();\n\
    \        ArrayList<String> temp15 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<String>();\n        ArrayList<String> temp17 = new ArrayList<String>();\n\
    \        ArrayList<String> temp18 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<String>();\n        ArrayList<String> temp20 = new ArrayList<String>();\n\
    \        ArrayList<String> temp21 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<String>();\n        ArrayList<String> temp23 = new ArrayList<String>();\n\
    \        ArrayList<String> temp24 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<String>();\n        ArrayList<String> temp26 = new ArrayList<String>();\n\
    \        ArrayList<String> temp27 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<String>();\n        ArrayList<String> temp29 = new ArrayList<String>();\n\
    \        ArrayList<String> temp30 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<String>();\n        ArrayList<String> temp32 = new ArrayList<String>();\n\
    \        ArrayList<String> temp33 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<String>();\n        ArrayList<String> temp35 = new ArrayList<String>();\n\
    \        ArrayList<String> temp36 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<String>();\n        ArrayList<String> temp38 = new ArrayList<String>();\n\
    \        ArrayList<String> temp39 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<String>();\n        ArrayList<String> temp41 = new ArrayList<String>();\n\
    \        ArrayList<String> temp42 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<String>();\n        ArrayList<String> temp44 = new ArrayList<String>();\n\
    \        ArrayList<String> temp45 = new ArrayList<String>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<String>();\n        ArrayList<String> temp47 = new ArrayList<String>();\n\
    \        ArrayList<String> temp48 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2yhz31jr.java:74: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp2yhz31jr.java:75: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp2yhz31jr.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp2yhz31jr.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp2yhz31jr.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp2yhz31jr.java:75:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2yhz31jr.java:85: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> wordList = new ArrayList<String>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<String>();\n        ArrayList<String> wordList4 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList5 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<String>();\n        ArrayList<String> wordList8 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList9 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<String>();\n        ArrayList<String> wordList12\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList13 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<String>();\n        ArrayList<String> wordList16\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList17 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<String>();\n        ArrayList<String> wordList20\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList21 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<String>();\n        ArrayList<String> wordList24\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList25 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<String>();\n        ArrayList<String> wordList28\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList29 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<String>();\n        ArrayList<String> wordList32\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList33 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<String>();\n        ArrayList<String> wordList36\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList37 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<String>();\n        ArrayList<String> wordList40\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList41 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<String>();\n        ArrayList<String> wordList44\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77c5iqaa.java:69: error: <identifier> expected\n        ArrayList<String>\
    \ wordList44 = new \n                                          ^\n/tmp/tmp77c5iqaa.java:70:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmp77c5iqaa.java:70: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmp77c5iqaa.java:71: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp77c5iqaa.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp77c5iqaa.java:71: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp77c5iqaa.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp77c5iqaa.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ ArrayList<String> wordList = new ArrayList<>();\n        ArrayList<String> wordList2\
    \ = new ArrayList<>();\n        ArrayList<String> wordList3 = new ArrayList<>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<>();\n        ArrayList<String> wordList6 = new ArrayList<>();\n\
    \        ArrayList<String> wordList7 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList8 = new ArrayList<>();\n        ArrayList<String> wordList9 = new ArrayList<>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<>();\n        ArrayList<String> wordList12 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList13 = new ArrayList<>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<>();\n        ArrayList<String> wordList16 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList17 = new ArrayList<>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<>();\n        ArrayList<String> wordList20 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList21 = new ArrayList<>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<>();\n        ArrayList<String> wordList24 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList25 = new ArrayList<>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<>();\n        ArrayList<String> wordList28 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList29 = new ArrayList<>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<>();\n        ArrayList<String> wordList32 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList33 = new ArrayList<>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<>();\n        ArrayList<String> wordList36 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList37 = new ArrayList<>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<>();\n        ArrayList<String> wordList40 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList41 = new ArrayList<>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<>();\n        ArrayList<String> wordList44 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList45 = new ArrayList<>();\n\
    \        ArrayList<String> wordList46 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList47 = new ArrayList<>();\n        ArrayList<String> wordList48 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList49 = new ArrayList<>();\n\
    \        ArrayList<String> wordList50 = new ArrayList<>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc3sfsor5.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (s == null || s.isEmpty()) {\n            return result;\n       \
    \ }\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdx1abqsv.java:74: error: > expected\n    }\n    ^\n/tmp/tmpdx1abqsv.java:74:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpdx1abqsv.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpdx1abqsv.java:75: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpdx1abqsv.java:75: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpdx1abqsv.java:75: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpdx1abqsv.java:85:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvevnrmp5.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpvevnrmp5.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5r0zokr.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpq5r0zokr.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpq5r0zokr.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpq5r0zokr.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpq5r0zokr.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpq5r0zokr.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpq5r0zokr.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpq5r0zokr.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy3u236tb.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordList\
    \ = new ArrayList<>();\n        ArrayList<String> wordList2 = new ArrayList<>();\n\
    \        ArrayList<String> wordList3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList4 = new ArrayList<>();\n        ArrayList<String> wordList5 = new ArrayList<>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<>();\n        ArrayList<String> wordList8 = new ArrayList<>();\n\
    \        ArrayList<String> wordList9 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList10 = new ArrayList<>();\n        ArrayList<String> wordList11 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList12 = new ArrayList<>();\n\
    \        ArrayList<String> wordList13 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList14 = new ArrayList<>();\n        ArrayList<String> wordList15 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList16 = new ArrayList<>();\n\
    \        ArrayList<String> wordList17 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList18 = new ArrayList<>();\n        ArrayList<String> wordList19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList20 = new ArrayList<>();\n\
    \        ArrayList<String> wordList21 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList22 = new ArrayList<>();\n        ArrayList<String> wordList23 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList24 = new ArrayList<>();\n\
    \        ArrayList<String> wordList25 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList26 = new ArrayList<>();\n        ArrayList<String> wordList27 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList28 = new ArrayList<>();\n\
    \        ArrayList<String> wordList29 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList30 = new ArrayList<>();\n        ArrayList<String> wordList31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList32 = new ArrayList<>();\n\
    \        ArrayList<String> wordList33 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList34 = new ArrayList<>();\n        ArrayList<String> wordList35 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList36 = new ArrayList<>();\n\
    \        ArrayList<String> wordList37 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList38 = new ArrayList<>();\n        ArrayList<String> wordList39 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList40 = new ArrayList<>();\n\
    \        ArrayList<String> wordList41 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList42 = new ArrayList<>();\n        ArrayList<String> wordList43 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList44 = new ArrayList<>();\n\
    \        ArrayList<String> wordList45 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList46 = new ArrayList<>();\n        ArrayList<String> wordList47 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList48 = new ArrayList<>();\n\
    \        ArrayList<String> wordList49 = new ArrayList<>();\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxlo1dxdf.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx168con8.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> wordsInOrder\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder3 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder4 = new ArrayList<>();\n        ArrayList<String> wordsInOrder5\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder7 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder8 = new ArrayList<>();\n        ArrayList<String> wordsInOrder9\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder12 = new ArrayList<>();\n        ArrayList<String> wordsInOrder13\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder16 = new ArrayList<>();\n        ArrayList<String> wordsInOrder17\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder20 = new ArrayList<>();\n        ArrayList<String> wordsInOrder21\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder24 = new ArrayList<>();\n        ArrayList<String> wordsInOrder25\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder28 = new ArrayList<>();\n        ArrayList<String> wordsInOrder29\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder32 = new ArrayList<>();\n        ArrayList<String> wordsInOrder33\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder36 = new ArrayList<>();\n        ArrayList<String> wordsInOrder37\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder40 = new ArrayList<>();\n        ArrayList<String> wordsInOrder41\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder44 = new ArrayList<>();\n        ArrayList<String> wordsInOrder45\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnas7dujq.java:67: error: <identifier> expected\n        ArrayList<String>\
    \ wordsInOrder45 = new \n                                              ^\n/tmp/tmpnas7dujq.java:68:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmpnas7dujq.java:68: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmpnas7dujq.java:69: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpnas7dujq.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpnas7dujq.java:69: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpnas7dujq.java:69:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpnas7dujq.java:79: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ consonants = new ArrayList<>();\n        ArrayList<String> vowels = new ArrayList<>();\n\
    \        ArrayList<String> consonants_vowels = new ArrayList<>();\n        ArrayList<String>\
    \ consonants_vowels_consonants = new ArrayList<>();\n        ArrayList<String>\
    \ consonants_vowels_consonants_vowels = new ArrayList<>();\n        ArrayList<String>\
    \ consonants_vowels_consonants_vowels_consonants = new ArrayList<>();\n      \
    \  ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels = new\
    \ ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_consonants\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1eemgyf_.java:41: error: ';' expected\n        ArrayList<String>\
    \ consonants_vowels_consonants_vowels_consonants_vowels_consonants_vowels_\n \
    \                                                                            \
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> words = new ArrayList<>();\n       \
    \ if (s.isEmpty()) {\n            return words;\n        }\n        ArrayList<String>\
    \ word = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbczdy1di.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> consonants = new ArrayList<>();\n\
    \        ArrayList<String> vowels = new ArrayList<>();\n        ArrayList<String>\
    \ consonants_vowels = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces_spaces\
    \ = new ArrayList<>();\n        ArrayList<String> consonants_vowels_spaces_spaces_spaces_space\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo2xla6jy.java:45: error: ';' expected\n        ArrayList<String>\
    \ consonants_vowels_spaces_spaces_spaces_space\n                             \
    \                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnmyfr4h.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmppnmyfr4h.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpigntl5k_.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpigntl5k_.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy8bojdph.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpy8bojdph.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphqwcnwsx.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmphqwcnwsx.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmphqwcnwsx.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmphqwcnwsx.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmphqwcnwsx.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmphqwcnwsx.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmphqwcnwsx.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmphqwcnwsx.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjd_o6d_u.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpjd_o6d_u.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpjd_o6d_u.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpjd_o6d_u.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpjd_o6d_u.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpjd_o6d_u.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpjd_o6d_u.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpjd_o6d_u.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> word2 = new ArrayList<>();\n\
    \        ArrayList<String> word3 = new ArrayList<>();\n        ArrayList<String>\
    \ word4 = new ArrayList<>();\n        ArrayList<String> word5 = new ArrayList<>();\n\
    \        ArrayList<String> word6 = new ArrayList<>();\n        ArrayList<String>\
    \ word7 = new ArrayList<>();\n        ArrayList<String> word8 = new ArrayList<>();\n\
    \        ArrayList<String> word9 = new ArrayList<>();\n        ArrayList<String>\
    \ word10 = new ArrayList<>();\n        ArrayList<String> word11 = new ArrayList<>();\n\
    \        ArrayList<String> word12 = new ArrayList<>();\n        ArrayList<String>\
    \ word13 = new ArrayList<>();\n        ArrayList<String> word14 = new ArrayList<>();\n\
    \        ArrayList<String> word15 = new ArrayList<>();\n        ArrayList<String>\
    \ word16 = new ArrayList<>();\n        ArrayList<String> word17 = new ArrayList<>();\n\
    \        ArrayList<String> word18 = new ArrayList<>();\n        ArrayList<String>\
    \ word19 = new ArrayList<>();\n        ArrayList<String> word20 = new ArrayList<>();\n\
    \        ArrayList<String> word21 = new ArrayList<>();\n        ArrayList<String>\
    \ word22 = new ArrayList<>();\n        ArrayList<String> word23 = new ArrayList<>();\n\
    \        ArrayList<String> word24 = new ArrayList<>();\n        ArrayList<String>\
    \ word25 = new ArrayList<>();\n        ArrayList<String> word26 = new ArrayList<>();\n\
    \        ArrayList<String> word27 = new ArrayList<>();\n        ArrayList<String>\
    \ word28 = new ArrayList<>();\n        ArrayList<String> word29 = new ArrayList<>();\n\
    \        ArrayList<String> word30 = new ArrayList<>();\n        ArrayList<String>\
    \ word31 = new ArrayList<>();\n        ArrayList<String> word32 = new ArrayList<>();\n\
    \        ArrayList<String> word33 = new ArrayList<>();\n        ArrayList<String>\
    \ word34 = new ArrayList<>();\n        ArrayList<String> word35 = new ArrayList<>();\n\
    \        ArrayList<String> word36 = new ArrayList<>();\n        ArrayList<String>\
    \ word37 = new ArrayList<>();\n        ArrayList<String> word38 = new ArrayList<>();\n\
    \        ArrayList<String> word39 = new ArrayList<>();\n        ArrayList<String>\
    \ word40 = new ArrayList<>();\n        ArrayList<String> word41 = new ArrayList<>();\n\
    \        ArrayList<String> word42 = new ArrayList<>();\n        ArrayList<String>\
    \ word43 = new ArrayList<>();\n        ArrayList<String> word44 = new ArrayList<>();\n\
    \        ArrayList<String> word45 = new ArrayList<>();\n        ArrayList<String>\
    \ word46 = new ArrayList<>();\n        ArrayList<String> word47 = new ArrayList<>();\n\
    \        ArrayList<String> word48 = new ArrayList<>();\n        ArrayList<String>\
    \ word49 = new ArrayList<>();\n        ArrayList<String> word50 = new ArrayList<>();\n\
    \        ArrayList<String> word51 = new ArrayList<>();\n        ArrayList<String>\
    \ word52 = new ArrayList<>();\n        ArrayList<String> word53 = new ArrayList<>();\n\
    \        ArrayList<String> word54 = new ArrayList<>();\n        ArrayList<String>\
    \ \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ifufgd6.java:77: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmp4ifufgd6.java:77: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s == null || s.length() == 0) {\n            return result;\n        }\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ temp = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7viyiiip.java:79: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<>();\n        ArrayList<String> wordList4 = new ArrayList<>();\n\
    \        ArrayList<String> wordList5 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList6 = new ArrayList<>();\n        ArrayList<String> wordList7 = new ArrayList<>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<>();\n        ArrayList<String> wordList10 = new ArrayList<>();\n\
    \        ArrayList<String> wordList11 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList12 = new ArrayList<>();\n        ArrayList<String> wordList13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList14 = new ArrayList<>();\n\
    \        ArrayList<String> wordList15 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList16 = new ArrayList<>();\n        ArrayList<String> wordList17 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList18 = new ArrayList<>();\n\
    \        ArrayList<String> wordList19 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList20 = new ArrayList<>();\n        ArrayList<String> wordList21 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList22 = new ArrayList<>();\n\
    \        ArrayList<String> wordList23 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList24 = new ArrayList<>();\n        ArrayList<String> wordList25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList26 = new ArrayList<>();\n\
    \        ArrayList<String> wordList27 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList28 = new ArrayList<>();\n        ArrayList<String> wordList29 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList30 = new ArrayList<>();\n\
    \        ArrayList<String> wordList31 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList32 = new ArrayList<>();\n        ArrayList<String> wordList33 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList34 = new ArrayList<>();\n\
    \        ArrayList<String> wordList35 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList36 = new ArrayList<>();\n        ArrayList<String> wordList37 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList38 = new ArrayList<>();\n\
    \        ArrayList<String> wordList39 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList40 = new ArrayList<>();\n        ArrayList<String> wordList41 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList42 = new ArrayList<>();\n\
    \        ArrayList<String> wordList43 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList44 = new ArrayList<>();\n        ArrayList<String> wordList45 = new\
    \ ArrayList<>();\n        ArrayList<String> wordList46 = new ArrayList<>();\n\
    \        ArrayList<String> wordList47 = new ArrayList<>();\n        ArrayList<String>\
    \ wordList48 = new ArrayList<>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplsowc24o.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9ibs_5c.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpi9ibs_5c.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpi9ibs_5c.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpi9ibs_5c.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpi9ibs_5c.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpi9ibs_5c.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpi9ibs_5c.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpi9ibs_5c.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> temp = new ArrayList<>();\n\
    \        ArrayList<String> temp2 = new ArrayList<>();\n        ArrayList<String>\
    \ temp3 = new ArrayList<>();\n        ArrayList<String> temp4 = new ArrayList<>();\n\
    \        ArrayList<String> temp5 = new ArrayList<>();\n        ArrayList<String>\
    \ temp6 = new ArrayList<>();\n        ArrayList<String> temp7 = new ArrayList<>();\n\
    \        ArrayList<String> temp8 = new ArrayList<>();\n        ArrayList<String>\
    \ temp9 = new ArrayList<>();\n        ArrayList<String> temp10 = new ArrayList<>();\n\
    \        ArrayList<String> temp11 = new ArrayList<>();\n        ArrayList<String>\
    \ temp12 = new ArrayList<>();\n        ArrayList<String> temp13 = new ArrayList<>();\n\
    \        ArrayList<String> temp14 = new ArrayList<>();\n        ArrayList<String>\
    \ temp15 = new ArrayList<>();\n        ArrayList<String> temp16 = new ArrayList<>();\n\
    \        ArrayList<String> temp17 = new ArrayList<>();\n        ArrayList<String>\
    \ temp18 = new ArrayList<>();\n        ArrayList<String> temp19 = new ArrayList<>();\n\
    \        ArrayList<String> temp20 = new ArrayList<>();\n        ArrayList<String>\
    \ temp21 = new ArrayList<>();\n        ArrayList<String> temp22 = new ArrayList<>();\n\
    \        ArrayList<String> temp23 = new ArrayList<>();\n        ArrayList<String>\
    \ temp24 = new ArrayList<>();\n        ArrayList<String> temp25 = new ArrayList<>();\n\
    \        ArrayList<String> temp26 = new ArrayList<>();\n        ArrayList<String>\
    \ temp27 = new ArrayList<>();\n        ArrayList<String> temp28 = new ArrayList<>();\n\
    \        ArrayList<String> temp29 = new ArrayList<>();\n        ArrayList<String>\
    \ temp30 = new ArrayList<>();\n        ArrayList<String> temp31 = new ArrayList<>();\n\
    \        ArrayList<String> temp32 = new ArrayList<>();\n        ArrayList<String>\
    \ temp33 = new ArrayList<>();\n        ArrayList<String> temp34 = new ArrayList<>();\n\
    \        ArrayList<String> temp35 = new ArrayList<>();\n        ArrayList<String>\
    \ temp36 = new ArrayList<>();\n        ArrayList<String> temp37 = new ArrayList<>();\n\
    \        ArrayList<String> temp38 = new ArrayList<>();\n        ArrayList<String>\
    \ temp39 = new ArrayList<>();\n        ArrayList<String> temp40 = new ArrayList<>();\n\
    \        ArrayList<String> temp41 = new ArrayList<>();\n        ArrayList<String>\
    \ temp42 = new ArrayList<>();\n        ArrayList<String> temp43 = new ArrayList<>();\n\
    \        ArrayList<String> temp44 = new ArrayList<>();\n        ArrayList<String>\
    \ temp45 = new ArrayList<>();\n        ArrayList<String> temp46 = new ArrayList<>();\n\
    \        ArrayList<String> temp47 = new ArrayList<>();\n        ArrayList<String>\
    \ temp48 = new ArrayList<>();\n        ArrayList<String> temp49 = new ArrayList<>();\n\
    \        ArrayList<String> temp50 = new ArrayList<>();\n        ArrayList<String>\
    \ temp51 = new ArrayList<>();\n        ArrayList<String> temp52 = new ArrayList<>();\n\
    \        ArrayList<String> temp53 = new ArrayList<>();\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr2r4t_yc.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> word\
    \ = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \        ArrayList<String> words = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> words = new ArrayList<>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe7d5ogt1.java:24: error: variable words is already defined in method\
    \ selectWords(String,long)\n        ArrayList<String> words = new ArrayList<>();\n\
    \                          ^\n/tmp/tmpe7d5ogt1.java:25: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<>();\n                          ^\n/tmp/tmpe7d5ogt1.java:26:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<>();\n                      \
    \    ^\n/tmp/tmpe7d5ogt1.java:27: error: variable words is already defined in\
    \ method selectWords(String,long)\n        ArrayList<String> words = new ArrayList<>();\n\
    \                          ^\n/tmp/tmpe7d5ogt1.java:28: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<>();\n                          ^\n/tmp/tmpe7d5ogt1.java:29:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<>();\n                      \
    \    ^\n/tmp/tmpe7d5ogt1.java:30: error: variable words is already defined in\
    \ method selectWords(String,long)\n        ArrayList<String> words = new ArrayList<>();\n\
    \                          ^\n/tmp/tmpe7d5ogt1.java:31: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<>();\n                          ^\n/tmp/tmpe7d5ogt1.java:32:\
    \ error: variable words is already defined in method selectWords(String,long)\n\
    \        ArrayList<String> words = new ArrayList<>();\n                      \
    \    ^\n/tmp/tmpe7d5ogt1.java:33: error: variable words is already defined in\
    \ method selectWords(String,long)\n        ArrayList<String> words = new ArrayList<>();\n\
    \                          ^\n/tmp/tmpe7d5ogt1.java:34: error: variable words\
    \ is already defined in method selectWords(String,long)\n        ArrayList<String>\
    \ words = new ArrayList<>();\n                          ^\n/tmp/tmpe7d5ogt1.java:35:\
    \ error: va"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdek83bl.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpfdek83bl.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpfdek83bl.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmpfdek83bl.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpfdek83bl.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpfdek83bl.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpfdek83bl.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpfdek83bl.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  ArrayList<String> words = new ArrayList<>();\n        ArrayList<String> temp\
    \ = new ArrayList<>();\n        ArrayList<String> temp2 = new ArrayList<>();\n\
    \        ArrayList<String> temp3 = new ArrayList<>();\n        ArrayList<String>\
    \ temp4 = new ArrayList<>();\n        ArrayList<String> temp5 = new ArrayList<>();\n\
    \        ArrayList<String> temp6 = new ArrayList<>();\n        ArrayList<String>\
    \ temp7 = new ArrayList<>();\n        ArrayList<String> temp8 = new ArrayList<>();\n\
    \        ArrayList<String> temp9 = new ArrayList<>();\n        ArrayList<String>\
    \ temp10 = new ArrayList<>();\n        ArrayList<String> temp11 = new ArrayList<>();\n\
    \        ArrayList<String> temp12 = new ArrayList<>();\n        ArrayList<String>\
    \ temp13 = new ArrayList<>();\n        ArrayList<String> temp14 = new ArrayList<>();\n\
    \        ArrayList<String> temp15 = new ArrayList<>();\n        ArrayList<String>\
    \ temp16 = new ArrayList<>();\n        ArrayList<String> temp17 = new ArrayList<>();\n\
    \        ArrayList<String> temp18 = new ArrayList<>();\n        ArrayList<String>\
    \ temp19 = new ArrayList<>();\n        ArrayList<String> temp20 = new ArrayList<>();\n\
    \        ArrayList<String> temp21 = new ArrayList<>();\n        ArrayList<String>\
    \ temp22 = new ArrayList<>();\n        ArrayList<String> temp23 = new ArrayList<>();\n\
    \        ArrayList<String> temp24 = new ArrayList<>();\n        ArrayList<String>\
    \ temp25 = new ArrayList<>();\n        ArrayList<String> temp26 = new ArrayList<>();\n\
    \        ArrayList<String> temp27 = new ArrayList<>();\n        ArrayList<String>\
    \ temp28 = new ArrayList<>();\n        ArrayList<String> temp29 = new ArrayList<>();\n\
    \        ArrayList<String> temp30 = new ArrayList<>();\n        ArrayList<String>\
    \ temp31 = new ArrayList<>();\n        ArrayList<String> temp32 = new ArrayList<>();\n\
    \        ArrayList<String> temp33 = new ArrayList<>();\n        ArrayList<String>\
    \ temp34 = new ArrayList<>();\n        ArrayList<String> temp35 = new ArrayList<>();\n\
    \        ArrayList<String> temp36 = new ArrayList<>();\n        ArrayList<String>\
    \ temp37 = new ArrayList<>();\n        ArrayList<String> temp38 = new ArrayList<>();\n\
    \        ArrayList<String> temp39 = new ArrayList<>();\n        ArrayList<String>\
    \ temp40 = new ArrayList<>();\n        ArrayList<String> temp41 = new ArrayList<>();\n\
    \        ArrayList<String> temp42 = new ArrayList<>();\n        ArrayList<String>\
    \ temp43 = new ArrayList<>();\n        ArrayList<String> temp44 = new ArrayList<>();\n\
    \        ArrayList<String> temp45 = new ArrayList<>();\n        ArrayList<String>\
    \ temp46 = new ArrayList<>();\n        ArrayList<String> temp47 = new ArrayList<>();\n\
    \        ArrayList<String> temp48 = new ArrayList<>();\n        ArrayList<String>\
    \ temp49 = new ArrayList<>();\n        ArrayList<String> temp50 = new ArrayList<>();\n\
    \        ArrayList<String> temp51 = new ArrayList<>();\n        ArrayList<String>\
    \ temp52 = new ArrayList<>();\n        ArrayList<String> temp53 = new ArrayList<>();\n\
    \        ArrayList<String> temp54 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0zllxmys.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp0zllxmys.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp0zllxmys.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmp0zllxmys.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp0zllxmys.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp0zllxmys.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp0zllxmys.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp0zllxmys.java:89: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<>();\n      \
    \  if (s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkk8z5vga.java:80: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpkk8z5vga.java:79: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmpkk8z5vga.java:80: error: ';' expected\n    }\n     ^\n/tmp/tmpkk8z5vga.java:81:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpkk8z5vga.java:81: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpkk8z5vga.java:81: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpkk8z5vga.java:81: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpkk8z5vga.java:91: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList = new ArrayList<String>();\n        ArrayList<String> wordList2 = new\
    \ ArrayList<String>();\n        ArrayList<String> wordList3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList5 = new ArrayList<String>();\n        ArrayList<String> wordList6 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList9 = new ArrayList<String>();\n        ArrayList<String> wordList10 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList12 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList13 = new ArrayList<String>();\n        ArrayList<String> wordList14\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList15 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList16 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList17 = new ArrayList<String>();\n        ArrayList<String> wordList18\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList19 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList20 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList21 = new ArrayList<String>();\n        ArrayList<String> wordList22\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList23 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList24 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList25 = new ArrayList<String>();\n        ArrayList<String> wordList26\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList27 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList29 = new ArrayList<String>();\n        ArrayList<String> wordList30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList32 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList33 = new ArrayList<String>();\n        ArrayList<String> wordList34\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList35 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList36 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList37 = new ArrayList<String>();\n        ArrayList<String> wordList38\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList39 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList40 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList41 = new ArrayList<String>();\n        ArrayList<String> wordList42\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList43 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList44 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList45\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1rlzgm6p.java:67: error: ';' expected\n        ArrayList<String>\
    \ wordList45\n                                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
    \ s, long n) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder = new ArrayList<String>();\n        ArrayList<String> wordsInOrder2\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder3 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder4 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder5 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder6\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder7 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder8 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder9 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder10\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder11 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder12 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder13 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder14 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder15\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder16 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder17 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder18 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder23 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder24 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder25\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder26 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder27 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder28 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder29 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder30\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder31 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder32 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder33 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder34 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder35\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder36 = new ArrayList<String>();\n\
    \        ArrayList<String> wordsInOrder37 = new ArrayList<String>();\n       \
    \ ArrayList<String> wordsInOrder38 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<String>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<String>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<String>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl4094sap.java:65: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
