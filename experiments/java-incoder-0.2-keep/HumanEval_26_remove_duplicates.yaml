name: HumanEval_26_remove_duplicates
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // From a list of integers, remove all elements that occur\
  \ more than once.\n    // Keep order of elements left the same as in the input.\n\
  \    // >>> remove_duplicates([1, 2, 3, 2, 4])\n    // [1, 3, 4]\n    public static\
  \ ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)4l, (long)5l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.contains(number)) {\n                continue;\n            }\n       \
    \     set.add(number);\n            result.add(number);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.add(number)) {\n                result.add(number);\n            }\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.contains(number)) {\n                set.add(number);\n\
    \                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.contains(number)) {\n\
    \                set.add(number);\n                result.add(number);\n     \
    \       }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for\
    \ (Long number : numbers) {\n            if (set.add(number)) {\n            \
    \    result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashMap<Long, Long> map = new HashMap<Long, Long>();\n        for (Long\
    \ i : numbers) {\n            if (map.containsKey(i)) {\n                map.put(i,\
    \ map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n  \
    \          }\n        }\n        for (Long i : map.keySet()) {\n            if\
    \ (map.get(i) > 1) {\n                result.add(i);\n            }\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (!seen.add(number)) {\n  \
    \              result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.contains(number)) {\n                set.add(number);\n              \
    \  result.add(number);\n            }\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set\
    \ = new HashSet<Long>();\n        for (Long number : numbers) {\n            if\
    \ (set.contains(number)) {\n                continue;\n            }\n       \
    \     set.add(number);\n            result.add(number);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Map.Entry<Long, Long> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> seen = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!seen.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   HashMap<Long, Long> map = new HashMap<Long, Long>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.contains(number)) {\n\
    \                set.add(number);\n                result.add(number);\n     \
    \       }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for\
    \ (Long number : numbers) {\n            if (!set.add(number)) {\n           \
    \     result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (!seen.add(number)) {\n  \
    \              result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashMap<Long,\
    \ Long> map = new HashMap<Long, Long>();\n        for (Long number : numbers)\
    \ {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.contains(number))\
    \ {\n                set.add(number);\n                result.add(number);\n \
    \           }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long number : numbers) {\n      \
    \      if (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (!seen.contains(number)) {\n\
    \                result.add(number);\n                seen.add(number);\n    \
    \        }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n        for\
    \ (Long number : numbers) {\n            if (!seen.add(number)) {\n          \
    \      result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long number : numbers) {\n      \
    \      if (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long i : numbers) {\n            if (!set.contains(i)) {\n         \
    \       result.add(i);\n                set.add(numbers.get(i));\n           \
    \ }\n        }\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n       \
    \ for (Long number : numbers) {\n            if (map.containsKey(number)) {\n\
    \                map.put(number, map.get(number) + 1);\n            } else {\n\
    \                map.put(number, 1);\n            }\n        }\n        for (Long\
    \ number : map.keySet()) {\n            if (map.get(number) > 1) {\n         \
    \       result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            Long\
    \ count = map.get(number);\n            if (count == null) {\n               \
    \ map.put(number, 1);\n            } else {\n                map.put(number, count\
    \ + 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for (Long\
    \ number : numbers) {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            Long previous = map.get(number);\n\
    \            if (previous == null) {\n                result.add(number);\n  \
    \          } else {\n                map.put(number, previous);\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1L);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.add(number)) {\n                result.add(number);\n            }\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> seen = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!seen.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long i : numbers) {\n            if (!set.contains(i)) {\n         \
    \       result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for (Long\
    \ number : numbers) {\n            if (set.contains(number)) {\n             \
    \   continue;\n            }\n            set.add(number);\n            result.add(number);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Integer>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> seen = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (seen.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (!seen.contains(number)) {\n\
    \                result.add(number);\n                seen.add(number);\n    \
    \        }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n \
    \       for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   Set<Long> set = new HashSet<Long>();\n        for (Long number : numbers)\
    \ {\n            if (!set.contains(number)) {\n                set.add(number);\n\
    \                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> seen = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!seen.contains(number)) {\n                result.add(number);\n\
    \                seen.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> seen = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!seen.contains(number)) {\n                result.add(number);\n\
    \                seen.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> seen = new HashMap<>();\n        for (Long number : numbers) {\n     \
    \       if (seen.containsKey(number)) {\n                continue;\n         \
    \   }\n            seen.put(number, number);\n            result.add(number);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long number : numbers) {\n      \
    \      if (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long i : numbers) {\n\
    \            if (!set.contains(i)) {\n                result.add(i);\n       \
    \         set.add(i);\n            }\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.add(number)) {\n                result.add(number);\n            }\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Map.Entry<Long, Long> entry : map.entrySet()) {\n\
    \            if (entry.getValue() == 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (seen.add(number)) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long i : numbers)\
    \ {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i)\
    \ + 1);\n            } else {\n                map.put(i, 1);\n            }\n\
    \        }\n        for (Long i : map.keySet()) {\n            if (map.get(i)\
    \ > 1) {\n                result.add(i);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long number : numbers) {\n      \
    \      if (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1L);\n        \
    \    }\n        }\n        for (Long number : map.keySet()) {\n            if\
    \ (map.get(number) > 1) {\n                result.add(number);\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> seen = new HashSet<>();\n        for (Long num : numbers) {\n\
    \            if (!seen.add(num)) {\n                result.add(num);\n       \
    \     }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        HashMap<Long, Long> map = new HashMap<Long,\
    \ Long>();\n        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.contains(number))\
    \ {\n                set.add(number);\n                result.add(number);\n \
    \           }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.contains(number))\
    \ {\n                set.add(number);\n                result.add(number);\n \
    \           }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n        for (Long\
    \ number : numbers) {\n            if (!seen.contains(number)) {\n           \
    \     result.add(number);\n                seen.add(number);\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (!seen.contains(number)) {\n\
    \                result.add(number);\n                seen.add(number);\n    \
    \        }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        HashMap<Long, Integer> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.contains(number))\
    \ {\n                set.add(number);\n                result.add(number);\n \
    \           }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set\
    \ = new HashSet<Long>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long number : numbers) {\n      \
    \      if (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : numbers)\
    \ {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num)\
    \ + 1);\n            } else {\n                map.put(num, 1L);\n           \
    \ }\n        }\n        for (Long num : map.keySet()) {\n            if (map.get(num)\
    \ > 1) {\n                result.add(num);\n            }\n        }\n       \
    \ return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      HashMap<Long, Long> map = new HashMap<>();\n        for (Long number :\
    \ numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.contains(number)) {\n\
    \                set.add(number);\n                result.add(number);\n     \
    \       }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for\
    \ (Long number : numbers) {\n            if (set.add(number)) {\n            \
    \    result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long num : numbers) {\n         \
    \   if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n\
    \            } else {\n                map.put(num, 1L);\n            }\n    \
    \    }\n        for (Long num : map.keySet()) {\n            if (map.get(num)\
    \ > 1) {\n                result.add(num);\n            }\n        }\n       \
    \ return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      Set<Long> set = new HashSet<>();\n        for (Long number : numbers) {\n\
    \            if (set.add(number)) {\n                result.add(number);\n   \
    \         }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for\
    \ (Long number : numbers) {\n            if (!set.add(number)) {\n           \
    \     result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            Long\
    \ previous = map.get(number);\n            if (previous == null) {\n         \
    \       map.put(number, number);\n            } else {\n                map.put(number,\
    \ previous + 1);\n            }\n        }\n        for (Long number : map.keySet())\
    \ {\n            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.add(number)) {\n                result.add(number);\n            }\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> seen = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!seen.contains(number))\
    \ {\n                result.add(number);\n                seen.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.add(number)) {\n                result.add(number);\n            }\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> seen = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!seen.contains(number)) {\n                result.add(number);\n\
    \                seen.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        HashMap<Long,\
    \ Long> map = new HashMap<Long, Long>();\n        for (Long number : numbers)\
    \ {\n            Long count = map.get(number);\n            if (count == null)\
    \ {\n                map.put(number, 1);\n            } else {\n             \
    \   map.put(number, count + 1);\n            }\n        }\n        for (Long number\
    \ : map.keySet()) {\n            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (!seen.add(number)) {\n  \
    \              result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ seen = new HashSet<>();\n        for (Long number : numbers) {\n           \
    \ if (!seen.add(number)) {\n                result.add(number);\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.contains(number)) {\n                continue;\n            }\n       \
    \     set.add(number);\n            result.add(number);\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long num : numbers) {\n         \
    \   if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n\
    \            } else {\n                map.put(num, 1L);\n            }\n    \
    \    }\n        for (Map.Entry<Long, Long> entry : map.entrySet()) {\n       \
    \     if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set = new HashSet<Long>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long num : numbers)\
    \ {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num)\
    \ + 1);\n            } else {\n                map.put(num, 1);\n            }\n\
    \        }\n        for (Map.Entry<Long, Long> entry : map.entrySet()) {\n   \
    \         if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.contains(number)) {\n                set.add(number);\n              \
    \  result.add(number);\n            }\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.contains(number))\
    \ {\n                set.add(number);\n                result.add(number);\n \
    \           }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long i : numbers) {\n            map.put(i,\
    \ map.getOrDefault(i, 0L) + 1);\n        }\n        for (Map.Entry<Long, Long>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n      \
    \          result.add(entry.getKey());\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long i : numbers) {\n           \
    \ if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n   \
    \         } else {\n                map.put(i, 1L);\n            }\n        }\n\
    \        for (Long i : map.keySet()) {\n            if (map.get(i) > 1) {\n  \
    \              result.add(i);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> seen = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!seen.contains(number))\
    \ {\n                result.add(number);\n                seen.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set\
    \ = new HashSet<Long>();\n        for (Long i : numbers) {\n            if (!set.contains(i))\
    \ {\n                result.add(i);\n                set.add(i);\n           \
    \ }\n        }\n        return result;\n", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n        for (Long\
    \ number : numbers) {\n            if (seen.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (!seen.add(number)) {\n  \
    \              result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.contains(number)) {\n                set.add(number);\n              \
    \  result.add(number);\n            }\n        }\n        return result;\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.add(number)) {\n                result.add(number);\n            }\n \
    \       }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.contains(number)) {\n\
    \                set.add(number);\n                result.add(number);\n     \
    \       }\n        }\n        return result;\n", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for\
    \ (Long number : numbers) {\n            if (!set.add(number)) {\n           \
    \     result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long number : numbers) {\n      \
    \      if (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.contains(number)) {\n                continue;\n    \
    \        }\n            set.add(number);\n            result.add(number);\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1L);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (set.add(number)) {\n     \
    \           result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Long>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> seen = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (seen.contains(number)) {\n                continue;\n   \
    \         }\n            result.add(number);\n            seen.add(number);\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.contains(number)) {\n                set.add(number);\n\
    \                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long i : numbers) {\n           \
    \ if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n   \
    \         } else {\n                map.put(i, 1L);\n            }\n        }\n\
    \        for (Long i : map.keySet()) {\n            if (map.get(i) > 1) {\n  \
    \              result.add(i);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (!set.contains(number))\
    \ {\n                set.add(number);\n                result.add(number);\n \
    \           }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long number : numbers) {\n            if (!set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n    \
    \    for (Long i : numbers) {\n            if (!set.contains(i)) {\n         \
    \       result.add(i);\n                set.add(i);\n            }\n        }\n\
    \        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long number : numbers) {\n            if (seen.add(number)) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;\n", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> map = new HashMap<>();\n\
    \        for (Long num : numbers) {\n            if (map.containsKey(num)) {\n\
    \                map.put(num, map.get(num) + 1);\n            } else {\n     \
    \           map.put(num, 1);\n            }\n        }\n        for (Long num\
    \ : map.keySet()) {\n            if (map.get(num) > 1) {\n                result.add(num);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n   \
    \     for (Long num : numbers) {\n            if (!seen.contains(num)) {\n   \
    \             result.add(num);\n                seen.add(num);\n            }\n\
    \        }\n        return result;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;\n", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        HashMap<Long, Integer> map = new HashMap<Long,\
    \ Integer>();\n        for (Long number : numbers) {\n            if (map.containsKey(number))\
    \ {\n                map.put(number, map.get(number) + 1);\n            } else\
    \ {\n                map.put(number, 1);\n            }\n        }\n        for\
    \ (Long number : map.keySet()) {\n            if (map.get(number) > 1) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;\n",
  "        ArrayList<Long> result = new ArrayList<>();\n        HashMap<Long, Integer>\
    \ map = new HashMap<>();\n        for (Long number : numbers) {\n            if\
    \ (map.containsKey(number)) {\n                map.put(number, map.get(number)\
    \ + 1);\n            } else {\n                map.put(number, 1);\n         \
    \   }\n        }\n        for (Long number : map.keySet()) {\n            if (map.get(number)\
    \ > 1) {\n                result.add(number);\n            }\n        }\n    \
    \    return result;\n"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
