name: HumanEval_93_encode
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(c);\n            } else {\n           \
    \     sb.append(Character.toLowerCase(c));\n            }\n        }\n       \
    \ return sb.toString();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpff1vcqvb.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8729xhcw.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9si5tqs.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzekfa0t1.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(Character.toUpperCase(chars[++i]));\n \
    \           } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4l9curo.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        for (int k = 0; k < s2.length();\
    \ k++) {\n                            char ch2 = s2.charAt(k);\n             \
    \               if (Character.isLetter(ch2)) {\n                             \
    \   String s3 = Character.toString(ch2);\n                                for\
    \ (int l = 0; l < s3.length(); l++) {\n                                    char\
    \ ch3 = s3.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        for (int m = 0; m < s4.length(); m++)\
    \ {\n                                            char ch4 = s4.charAt(m);\n  \
    \                                          if (Character.isLetter(ch4)) {\n  \
    \                                              String s5 = Character.toString(ch4);\n\
    \                                                for (int n = 0; n < s5.length();\
    \ n++) {\n                                                    char ch5 = s5.charAt(n);\n\
    \                                                    if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toString(ch6);\n                \
    \                                                for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toString(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toString(ch8);\n                              \
    \                                                  for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   for (int s\
    \ = 0; s < s10.length(); s++) {\n                                            \
    \                                                char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toString(ch10);\n                                              \
    \                                                  for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n               \
    \                                                                            \
    \         if (Character.isLetter(ch11\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe8nj17a1.java:68: error: ')' expected\n                       \
    \                                                                            \
    \ if (Character.isLetter(ch11\n                                              \
    \                                                                            \
    \     ^\n/tmp/tmpe8nj17a1.java:69: error: illegal start of statement\n    }\n\
    \    ^\n/tmp/tmpe8nj17a1.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151741.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            char newChar = Character.toUpperCase(chars[++i]);\n    \
    \        newChars[index] = newChar;\n        }\n        return new String(newChars);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 19 out of bounds for length 4\n\tat Problem.encode(tmptleh1ek0.java:26)\n\
    \tat Problem.main(tmptleh1ek0.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            int index2 = Character.toLowerCase(chars[i+1]) - 'a';\n\
    \            if(index != index2) {\n                newChars[i] = c;\n       \
    \     } else {\n                newChars[i] = Character.toUpperCase(chars[i+1]);\n\
    \            }\n        }\n        return new String(newChars);\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpr5bkof5s.java:25)\n\
    \tat Problem.main(tmpr5bkof5s.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length; i++)\
    \ {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                sb2.append(sb.charAt(index));\n\
    \                sb2.append(sb.charAt(index + 1));\n                sb2.append(c);\n\
    \                sb2.append(sb.charAt(index + 2));\n                sb2.append(sb.charAt(index\
    \ + 3));\n                sb2.append(sb.charAt(index + 4));\n                sb2.append(sb.charAt(index\
    \ + 5));\n                sb2.append(sb.charAt(index + 6));\n                sb2.append(sb.charAt(index\
    \ + 7));\n                sb2.append(sb.charAt(index + 8));\n                sb2.append(sb.charAt(index\
    \ + 9));\n                sb2.append(sb.charAt(index + 10));\n               \
    \ sb2.append(sb.charAt(index + 11));\n                sb2.append(sb.charAt(index\
    \ + 12));\n                sb2.append(sb.charAt(index + 13));\n              \
    \  sb2.append(sb.charAt(index + 14));\n                sb2.append(sb.charAt(index\
    \ + 15));\n                sb2.append(sb.charAt(index + 16));\n              \
    \  sb2.append(sb.charAt(index + 17));\n                sb2.append(sb.charAt(index\
    \ + 18));\n                sb2.append(sb.charAt(index + 19));\n              \
    \  sb2.append(sb.charAt(index + 20));\n                sb2.append(sb.charAt(index\
    \ + 21));\n                sb2.append(sb.charAt(index + 22));\n              \
    \  sb2.append(sb.charAt(index + 23));\n                sb2.append(sb.charAt(index\
    \ + 24));\n                sb2.append(sb.charAt(index + 25));\n              \
    \  sb2.append(sb.charAt(index + 26));\n                sb2.append(sb.charAt(index\
    \ + 27));\n                sb2.append(sb.charAt(index + 28));\n              \
    \  sb2.append(sb.charAt(index + 29));\n                sb2.append(sb.charAt(index\
    \ + 30));\n                sb2.append(sb.charAt(index + 31));\n              \
    \  sb2.append(sb.charAt(index + 32));\n                sb2.append(sb.charAt(index\
    \ + 33));\n                sb2.append(sb.charAt(index + 34));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvg07hxf6.java:75: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] newChars = new char[chars.length];\n\
    \        for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            int index = c - 'a';\n            int nextIndex = index + 2;\n  \
    \          char nextChar = vowels[index];\n            newChars[i] = nextChar;\n\
    \        }\n        return new String(newChars);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -13 out of bounds for length 5\n\tat Problem.encode(tmpwkho0ipv.java:27)\n\
    \tat Problem.main(tmpwkho0ipv.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            }\n            else {\n               \
    \ sb.append(c);\n            }\n        }\n        return sb.toString();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1gkokrrf.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length; i++)\
    \ {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                sb2.append(sb.charAt(index));\n\
    \                sb2.append(sb.charAt(index + 1));\n                sb2.append(c);\n\
    \                sb2.append(sb.charAt(index + 2));\n                sb2.append(sb.charAt(index\
    \ + 3));\n            } else {\n                sb2.append(c);\n            }\n\
    \        }\n        return sb.toString().toUpperCase() + sb2.toString();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpl408kc8x.java:36: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(c);\n                        \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[i\
    \ - 1]));\n            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n                sb.append(Character.toUpperCase(chars[i - 1]));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv5fhczkb.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3b6uke6r.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppz0n5oq9.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if('A' <= c && c <= 'Z') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if('a' <= c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else if('0' <= c && c <= '9') {\n                sb.append(c);\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.reverse().toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptcvmsrlj.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv19lsmpj.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ggt6wzd.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \            continue;\n            }\n            int index = c - 'a';\n    \
    \        if(index < 2) {\n                sb.append(c);\n                continue;\n\
    \            }\n            char nextChar = chars[index + 1];\n            char\
    \ nextChar2 = chars[index + 2];\n            if(nextChar == 'a' || nextChar ==\
    \ 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u') {\n          \
    \      sb.append(nextChar);\n                continue;\n            }\n      \
    \      if(nextChar2 == 'a' || nextChar2 == 'e' || nextChar2 == 'i' || nextChar2\
    \ == 'o' || nextChar2 == 'u') {\n                sb.append(nextChar2);\n     \
    \           continue;\n            }\n            char nextChar3 = chars[index\
    \ + 3];\n            if(nextChar3 == 'a' || nextChar3 == 'e' || nextChar3 == 'i'\
    \ || nextChar3 == 'o' || nextChar3 == 'u') {\n                sb.append(nextChar3);\n\
    \                continue;\n            }\n            char nextChar4 = chars[index\
    \ + 4];\n            if(nextChar4 == 'a' || nextChar4 == 'e' || nextChar4 == 'i'\
    \ || nextChar4 == 'o' || nextChar4 == 'u') {\n                sb.append(nextChar4);\n\
    \                continue;\n            }\n            char nextChar5 = chars[index\
    \ + 5];\n            if(nextChar5 == 'a' || nextChar5 == 'e' || nextChar5 == 'i'\
    \ || nextChar5 == 'o' || nextChar5 == 'u') {\n                sb.append(nextChar5);\n\
    \                continue;\n            }\n            char nextChar6 = chars[index\
    \ + 6];\n            if(nextChar6 == 'a' || nextChar6 == 'e' || nextChar6 == 'i'\
    \ || nextChar6 == 'o' || nextChar6 == 'u') {\n                sb.append(nextChar6);\n\
    \                continue;\n            }\n            char nextChar7 = chars[index\
    \ + 7];\n            if(nextChar7 == 'a' || nextChar7 == 'e' || nextChar7 == 'i'\
    \ || nextChar7 == 'o' || nextChar7 == 'u') {\n                sb.append(nextChar7);\n\
    \                continue;\n            }\n            char nextChar8 = chars[index\
    \ + 8];\n            if(nextChar8 == 'a' || nextChar8 == 'e' || nextChar8 == 'i'\
    \ || nextChar\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpn5tsgw4m.java:70: error: ')' expected\n            if(nextChar8\
    \ == 'a' || nextChar8 == 'e' || nextChar8 == 'i' || nextChar\n               \
    \                                                                    ^\n/tmp/tmpn5tsgw4m.java:71:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpn5tsgw4m.java:72: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] letters = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'};\n        char[] newChars = new char[chars.length];\n        for(int i\
    \ = 0; i < chars.length; i++) {\n            char c = chars[i];\n            char\
    \ newChar = c;\n            for(int j = 0; j < vowels.length; j++) {\n       \
    \         if(c == vowels[j]) {\n                    newChar = letters[j];\n  \
    \                  break;\n                }\n            }\n            newChars[i]\
    \ = newChar;\n        }\n        return new String(newChars);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmtte4i4.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(Character.toUpperCase(chars[(i + 2) % chars.length]));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__jinklo.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            int index = c - 'a';\n            if(index >= 2 &&\
    \ index <= 5) {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - 'A';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(chars[i\
    \ - 1]);\n                sb.append(c);\n                continue;\n         \
    \   }\n            index = c - '0';\n            if(index >= 2 && index <= 5)\
    \ {\n                sb.append(chars[i - 2]);\n                sb.append(char\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gdlsc88.java:95: error: '.class' expected\n    }\n    ^\n/tmp/tmp5gdlsc88.java:96:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            int index = c - 'a';\n            char nextChar =\
    \ chars[++i];\n            if(nextChar == 'a' || nextChar == 'e' || nextChar ==\
    \ 'i' || nextChar == 'o' || nextChar == 'u') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            char nextChar2 = chars[++i];\n\
    \            if(nextChar2 == 'a' || nextChar2 == 'e' || nextChar2 == 'i' || nextChar2\
    \ == 'o' || nextChar2 == 'u') {\n                sb.append(nextChar2);\n     \
    \           continue;\n            }\n            char nextChar3 = chars[++i];\n\
    \            if(nextChar3 == 'a' || nextChar3 == 'e' || nextChar3 == 'i' || nextChar3\
    \ == 'o' || nextChar3 == 'u') {\n                sb.append(nextChar3);\n     \
    \           continue;\n            }\n            char nextChar4 = chars[++i];\n\
    \            if(nextChar4 == 'a' || nextChar4 == 'e' || nextChar4 == 'i' || nextChar4\
    \ == 'o' || nextChar4 == 'u') {\n                sb.append(nextChar4);\n     \
    \           continue;\n            }\n            char nextChar5 = chars[++i];\n\
    \            if(nextChar5 == 'a' || nextChar5 == 'e' || nextChar5 == 'i' || nextChar5\
    \ == 'o' || nextChar5 == 'u') {\n                sb.append(nextChar5);\n     \
    \           continue;\n            }\n            char nextChar6 = chars[++i];\n\
    \            if(nextChar6 == 'a' || nextChar6 == 'e' || nextChar6 == 'i' || nextChar6\
    \ == 'o' || nextChar6 == 'u') {\n                sb.append(nextChar6);\n     \
    \           continue;\n            }\n            char nextChar7 = chars[++i];\n\
    \            if(nextChar7 == 'a' || nextChar7 == 'e' || nextChar7 == 'i' || nextChar7\
    \ == 'o' || nextChar7 == 'u') {\n                sb.append(nextChar7);\n     \
    \           continue;\n            }\n            char nextChar8 = chars[++i];\n\
    \            if(nextChar8 == 'a' || nextChar8 == 'e' || nextChar8 == 'i' || nextChar8\
    \ == 'o' || nextChar8 == 'u') {\n                sb.append(nextChar8);\n\n   \
    \ }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpim5hpp0p.java:69: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              sb.append(Character.toUpperCase(c));\n            } else {\n  \
    \              sb.append(c);\n            }\n        }\n        for (int i = 0;\
    \ i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        for (int i = 0; i < chars.length; i++) {\n            char c\
    \ = chars[i];\n            if (Character.isLetter(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp892xkdtn.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                newChars[i] = c;\n            }\
    \ else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n      \
    \          newChars[i] = c;\n            } else {\n                newChars[i]\
    \ = Character.toUpperCase(c);\n            }\n        }\n        return new String(newChars);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqm95cjk3.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmz7hchcv.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \            continue;\n            }\n            int index = c - 'a';\n    \
    \        int index2 = c - 'a';\n            while(index2 >= 0) {\n           \
    \     char c2 = 'a' + index2;\n                if(c2 == 'a' || c2 == 'e' || c2\
    \ == 'i' || c2 == 'o' || c2 == 'u') {\n                    sb.append(c2);\n  \
    \                  index2--;\n                    continue;\n                }\n\
    \                index2--;\n            }\n            sb.append(c);\n       \
    \ }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphuk671ni.java:32: error: incompatible types: possible lossy conversion\
    \ from int to char\n                char c2 = 'a' + index2;\n                \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n                sb.append(c);\n                continue;\n    \
    \        }\n            if(c == 'a' || c == 'A') {\n                sb.append(c);\n\
    \                continue;\n            }\n            if(c == 'e' || c == 'E')\
    \ {\n                sb.append(c);\n                continue;\n            }\n\
    \            if(c == 'i' || c == 'I') {\n                sb.append(c);\n     \
    \           continue;\n            }\n            if(c == 'o' || c == 'O') {\n\
    \                sb.append(c);\n                continue;\n            }\n   \
    \         if(c == 'u' || c == 'U') {\n                sb.append(c);\n        \
    \        continue;\n            }\n            if(c == 'A' || c == 'a') {\n  \
    \              sb.append(c);\n                continue;\n            }\n     \
    \       if(c == 'E' || c == 'e') {\n                sb.append(c);\n          \
    \      continue;\n            }\n            if(c == 'I' || c == 'i') {\n    \
    \            sb.append(c);\n                continue;\n            }\n       \
    \     if(c == 'O' || c == 'o') {\n                sb.append(c);\n            \
    \    continue;\n            }\n            if(c == 'U' || c == 'u') {\n      \
    \          sb.append(c);\n                continue;\n            }\n         \
    \   if(c == 'a' || c == 'A') {\n                sb.append(c);\n              \
    \  continue;\n            }\n            if(c == 'e' || c == 'E') {\n        \
    \        sb.append(c);\n                continue;\n            }\n           \
    \ if(c == 'i' || c == 'I') {\n                sb.append(c);\n                continue;\n\
    \            }\n            if(c == 'o' || c == 'O') {\n                sb.append(c);\n\
    \                continue;\n            }\n            if(c == 'u' || c == 'U')\
    \ {\n                sb.append(c);\n                continue;\n            }\n\
    \            if(c == 'A' || c == 'a') {\n                sb.append(c);\n     \
    \           continue;\n            }\n            if(c == 'E' || c == 'e') {\n\
    \                sb.append(c);\n                continue;\n            }\n   \
    \         if(c == 'I' || c == 'i') {\n                sb.append(c);\n        \
    \        continue;\n            }\n            if(c == 'O' || c == 'o') {\n  \
    \              sb.append(c);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppn8g93pr.java:107: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars,\
    \ 'A');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'E');\n\
    \        Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'I');\n  \
    \      Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'O');\n    \
    \    Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'U');\n      \
    \  Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'A');\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n\
    \        Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'o');\n  \
    \      Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'y');\n    \
    \    Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'A');\n      \
    \  Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars,\
    \ 'i');\n        Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'u');\n\
    \        Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n  \
    \      Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n    \
    \    Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'o');\n      \
    \  Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'A');\n        Arrays.fill(newChars, 'a');\n\
    \        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'i');\n  \
    \      Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'u');\n    \
    \    Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n      \
    \  Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars,\
    \ 'i');\n        Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'u');\n\
    \        Arrays.fill(newChars, 'y');\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbxdhgbn5.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwt58x1sl.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            char newChar = c;\n            for(int\
    \ j = 0; j < 2; j++) {\n                newChar = Character.toLowerCase(newChar);\n\
    \            }\n            for(int j = 0; j < 2; j++) {\n                newChar\
    \ = Character.toUpperCase(newChar);\n            }\n            for(int j = 0;\
    \ j < 2; j++) {\n                newChar = Character.toUpperCase(newChar);\n \
    \           }\n            newChars[i] = newChar;\n        }\n        return new\
    \ String(newChars);\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqir6xli8.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            char newChar = c;\n            if(Character.isUpperCase(c))\
    \ {\n                newChar = Character.toUpperCase(c);\n            }\n    \
    \        else if(Character.isLowerCase(c)) {\n                newChar = Character.toLowerCase(c);\n\
    \            }\n            else if(Character.isLetter(c)) {\n               \
    \ String vowels = \"aeiouAEIOU\";\n                String vowelsArray[] = vowels.split(\"\
    \");\n                for(int j = 0; j < vowelsArray.length; j++) {\n        \
    \            if(vowelsArray[j] == c) {\n                        newChar = vowelsArray[j\
    \ + 1];\n                        break;\n                    }\n             \
    \   }\n            }\n            newChars[i] = newChar;\n        }\n        return\
    \ new String(newChars);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmxuy6mik.java:35: error: bad operand types for binary operator\
    \ '=='\n                    if(vowelsArray[j] == c) {\n                      \
    \                ^\n  first type:  String\n  second type: char\n/tmp/tmpmxuy6mik.java:36:\
    \ error: incompatible types: String cannot be converted to char\n            \
    \            newChar = vowelsArray[j + 1];\n                                 \
    \            ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6ceuwoq.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        for(int i = 0; i < chars.length; i++) {\n       \
    \     char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                sb.append(c);\n            }\n      \
    \      else {\n                sb.append(Character.toUpperCase(c));\n        \
    \    }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpliyawzth.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(Character.toLowerCase(c)));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxqghknp.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            char nextChar = Character.toLowerCase(chars[i + 1]);\n \
    \           int nextIndex = Character.toLowerCase(nextChar) - 'a';\n         \
    \   char nextNextChar = Character.toLowerCase(chars[(i + 2) % chars.length]);\n\
    \            int nextNextIndex = Character.toLowerCase(nextNextChar) - 'a';\n\
    \            char nextNextNextChar = Character.toLowerCase(chars[(i + 3) % chars.length]);\n\
    \            int nextNextNextIndex = Character.toLowerCase(nextNextNextChar) -\
    \ 'a';\n            char nextNextNextNextChar = Character.toLowerCase(chars[(i\
    \ + 4) % chars.length]);\n            int nextNextNextNextIndex = Character.toLowerCase(nextNextNextNextChar)\
    \ - 'a';\n            char nextNextNextNextNextChar = Character.toLowerCase(chars[(i\
    \ + 5) % chars.length]);\n            int nextNextNextNextNextIndex = Character.toLowerCase(nextNextNextNextNextChar)\
    \ - 'a';\n            char nextNextNextNextNextNextChar = Character.toLowerCase(chars[(i\
    \ + 6) % chars.length]);\n            int nextNextNextNextNextNextIndex = Character.toLowerCase(nextNextNextNextNextNextChar)\
    \ - 'a';\n            char nextNextNextNextNextNextNextChar = Character.toLowerCase(chars[(i\
    \ + 7) % chars.length]);\n            int nextNextNextNextNextNextNextIndex =\
    \ Character.toLowerCase(nextNextNextNextNextNextNextChar) - 'a';\n           \
    \ char nextNextNextNextNextNextNextNextChar = Character.toLowerCase(chars[(i +\
    \ 8) % chars.length]);\n            int nextNextNextNextNextNextNextNextIndex\
    \ = Character.toLowerCase(nextNextNextNextNextNextNextNextChar) - 'a';\n     \
    \       char nextNextNextNextNextNextNextNextNextChar = Character.toLowerCase(chars[(i\
    \ + 9) % chars.length]);\n            int nextNextNextNextNextNextNextNextNextIndex\
    \ = Character.toLowerCase(nextNextNextNextNextNextNextNextNextChar) - 'a';\n \
    \           char nextNextNextNextNextNextNextNextNextNextChar = Character.toLowerCase(chars[(i\
    \ + 10) % chars.length]);\n            int nextNextNextNextNextNextNextNextNextNextIndex\
    \ = Character.toLowerCase(nextNextNextNextNextNextNextNextNextNextChar) - 'a';\n\
    \            char nextNextNext\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxf19i60f.java:45: error: ';' expected\n            char nextNextNext\n\
    \                             ^\n/tmp/tmpxf19i60f.java:47: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                char nextLetter = chars[i + 1];\n        \
    \        if(Character.isUpperCase(nextLetter)) {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n                else {\n                    sb.append(Character.toLowerCase(c));\n\
    \                }\n            }\n        }\n        return sb.toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpft07iu8h.java:28)\n\
    \tat Problem.main(tmpft07iu8h.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5n5xpd5.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            int index = c - 'a';\n            if(index < 0 ||\
    \ index > 2) {\n                sb.append(c);\n                continue;\n   \
    \         }\n            char nextChar = chars[++i];\n            if(nextChar\
    \ == 'a' || nextChar == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar\
    \ == 'u') {\n                sb.append(nextChar);\n                continue;\n\
    \            }\n            char nextChar2 = chars[++i];\n            if(nextChar2\
    \ == 'a' || nextChar2 == 'e' || nextChar2 == 'i' || nextChar2 == 'o' || nextChar2\
    \ == 'u') {\n                sb.append(nextChar2);\n                continue;\n\
    \            }\n            char nextChar3 = chars[++i];\n            if(nextChar3\
    \ == 'a' || nextChar3 == 'e' || nextChar3 == 'i' || nextChar3 == 'o' || nextChar3\
    \ == 'u') {\n                sb.append(nextChar3);\n                continue;\n\
    \            }\n            char nextChar4 = chars[++i];\n            if(nextChar4\
    \ == 'a' || nextChar4 == 'e' || nextChar4 == 'i' || nextChar4 == 'o' || nextChar4\
    \ == 'u') {\n                sb.append(nextChar4);\n                continue;\n\
    \            }\n            char nextChar5 = chars[++i];\n            if(nextChar5\
    \ == 'a' || nextChar5 == 'e' || nextChar5 == 'i' || nextChar5 == 'o' || nextChar5\
    \ == 'u') {\n                sb.append(nextChar5);\n                continue;\n\
    \            }\n            char nextChar6 = chars[++i];\n            if(nextChar6\
    \ == 'a' || nextChar6 == 'e' || nextChar6 == 'i' || nextChar6 == 'o' || nextChar6\
    \ == 'u') {\n                sb.append(nextChar6);\n                continue;\n\
    \            }\n            char nextChar7 = chars[++i];\n            if(nextChar7\
    \ == 'a' || nextChar7 == 'e' || nextChar7 == 'i' || nextChar7 == 'o' || nextChar7\
    \ == 'u') {\n                sb.append(nextChar7);\n                continue;\n\
    \            }\n            char nextChar8 = chars[++i];\n            if(nextChar8\
    \ == 'a' || nextChar8 == 'e' || nextChar8 == 'i' || nextChar8\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpofal8bbs.java:69: error: ')' expected\n            if(nextChar8\
    \ == 'a' || nextChar8 == 'e' || nextChar8 == 'i' || nextChar8\n              \
    \                                                                      ^\n/tmp/tmpofal8bbs.java:70:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpofal8bbs.java:71: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            else {\n                char nextLetter = chars[i + 1];\n\
    \                if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                    sb.append(nextLetter);\n                }\n         \
    \       else {\n                    sb.append(Character.toUpperCase(c));\n   \
    \                 sb.append(Character.toLowerCase(nextLetter));\n            \
    \    }\n            }\n        }\n        return sb.toString();\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpsz93pmzz.java:29)\n\
    \tat Problem.main(tmpsz93pmzz.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \            continue;\n            }\n            int index = c - 'a';\n    \
    \        int index2 = index - 2;\n            char replacement = chars[index2];\n\
    \            char replacement2 = chars[index2 + 1];\n            sb.append(replacement);\n\
    \            sb.append(replacement2);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -30 out of bounds for length 4\n\tat Problem.encode(tmpss5jm8so.java:31)\n\
    \tat Problem.main(tmpss5jm8so.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        Arrays.stream(vowels).forEach(v\
    \ -> {\n            int index = Arrays.binarySearch(vowels, v);\n            if\
    \ (index >= 0) {\n                int index2 = index + 1;\n                sb.setCharAt(index,\
    \ sb.charAt(index2));\n            }\n        });\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp4aio2y_t.java:33: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(vowels).forEach(v -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else if(c >= 'A' && c <= 'Z') {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n            else if(c >= 'a' && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u62k0j5.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddl8sljh.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(c);\n            } else {\n           \
    \     sb.append(Character.toLowerCase(c));\n            }\n        }\n       \
    \ for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n  \
    \          if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n  \
    \              sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiskvdua2.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[i\
    \ - 1]));\n            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n                sb.append(Character.toUpperCase(chars[i - 1]));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqsvsngpq.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                newChars[i] = 'A';\n           \
    \ } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n    \
    \            newChars[i] = 'a';\n            } else if(c == 'b' || c == 'c' ||\
    \ c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c ==\
    \ 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n\
    \                newChars[i] = 'B';\n            } else if(c == 'B' || c == 'C'\
    \ || c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c\
    \ == 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                newChars[i] = 'b';\n            } else if(c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v'\
    \ || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n                newChars[i]\
    \ = 'd';\n            } else if(c == 'f' || c == 'g' || c == 'h' || c == 'j' ||\
    \ c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c ==\
    \ 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y'\
    \ || c == 'z') {\n                newChars[i] = 'f';\n            } else if(c\
    \ == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpeqagqaml.java:36: error: ')' expected\n            } else if(c\
    \ == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c\n\
    \                                                                            \
    \                                                                            \
    \                           ^\n/tmp/tmpeqagqaml.java:37: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmpeqagqaml.java:38: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        for(int i = 0; i < chars.length; i++) {\n       \
    \     char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                sb.append(c);\n            }\n      \
    \      else {\n                sb.append(Character.toUpperCase(c));\n        \
    \    }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapvry_eb.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(c);\n            } else {\n           \
    \     sb.append(Character.toLowerCase(c));\n            }\n        }\n       \
    \ for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n  \
    \          if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n  \
    \              sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4kbv36r.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              sb.append(Character.toUpperCase(c));\n            } else {\n  \
    \              sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels2 = {'A', 'E', 'I', 'O',\
    \ 'U'};\n        char[] vowels3 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels4\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowels5 = {'a', 'e', 'i', 'o',\
    \ 'u'};\n        char[] vowels6 = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowels7\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels8 = {'A', 'E', 'I', 'O',\
    \ 'U'};\n        char[] vowels9 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels10\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowels11 = {'a', 'e', 'i', 'o',\
    \ 'u'};\n        char[] vowels12 = {'A', 'E', 'I', 'O', 'U'};\n        char[]\
    \ vowels13 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels14 = {'A', 'E',\
    \ 'I', 'O', 'U'};\n        char[] vowels15 = {'a', 'e', 'i', 'o', 'u'};\n    \
    \    char[] vowels16 = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowels17 = {'a',\
    \ 'e', 'i', 'o', 'u'};\n        char[] vowels18 = {'A', 'E', 'I', 'O', 'U'};\n\
    \        char[] vowels19 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels20\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowels21 = {'a', 'e', 'i', 'o',\
    \ 'u'};\n        char[] vowels22 = {'A', 'E', 'I', 'O', 'U'};\n        char[]\
    \ vowels23 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels24 = {'A', 'E',\
    \ 'I', 'O', 'U'};\n        char[] vowels25 = {'a', 'e', 'i', 'o', 'u'};\n    \
    \    char[] vowels26 = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowels27 = {'a',\
    \ 'e', 'i', 'o', 'u'};\n        char[] vowels28\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdz912e82.java:57: error: ';' expected\n        char[] vowels28\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, '-');\n        Arrays.fill(newChars,\
    \ ' ');\n        Arrays.fill(newChars, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z');\n        Arrays.fill(newChars, 'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z');\n        Arrays.fill(newChars, '0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9');\n        Arrays.fill(newChars, '!', '@', '#', '$', '%',\
    \ '^', '&', '*', '(', ')', '_', '+', '=', '{', '}', '[', ']', '|', ';', ':', '\"\
    ', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~',\
    \ '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';',\
    \ ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"',\
    \ '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~',\
    \ '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';',\
    \ ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"',\
    \ '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~',\
    \ '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';',\
    \ ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"',\
    \ '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~',\
    \ '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';',\
    \ ':', '\"\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpkg4nagdv.java:27: error: unclosed character literal\n        Arrays.fill(newChars,\
    \ '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '{', '}', '[',\
    \ ']', '|', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`',\
    \ ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':',\
    \ '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\\
    '', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`',\
    \ ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':',\
    \ '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\\
    '', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`',\
    \ ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':',\
    \ '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\\
    '', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`',\
    \ ';', ':', '\"', '\\'', '~', '`', ';', ':', '\"', '\\'', '~', '`', ';', ':',\
    \ '\"', '\\'', '~', '`', ';', ':', '\"\n                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcldo1xl_.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            char nextChar = chars[i + 1];\n \
    \           if (Character.isLetter(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \                sb.append(Character.toLowerCase(nextChar));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpsg5l70aw.java:24)\n\
    \tat Problem.main(tmpsg5l70aw.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i+1)]));\n\
    \            }\n            else {\n                sb.append(Character.toLowerCase(chars[(i+1)]));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpotm95833.java:37)\n\
    \tat Problem.main(tmpotm95833.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(c));\n \
    \               sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5nyjrw_u.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            int index = c - 'a';\n            int index2 = index\
    \ - 2;\n            char replacement = chars[index2];\n            sb.append(replacement);\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -15 out of bounds for length 4\n\tat Problem.encode(tmppf9j4foi.java:30)\n\
    \tat Problem.main(tmppf9j4foi.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            }\n            else {\n               \
    \ sb.append(c);\n            }\n        }\n        return sb.toString();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxx2roctj.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \            continue;\n            }\n            int index = c - 'a';\n    \
    \        char nextChar = chars[i + 1];\n            if(nextChar == 'a' || nextChar\
    \ == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u') {\n       \
    \         sb.append(nextChar);\n                continue;\n            }\n   \
    \         char nextChar2 = chars[i + 2];\n            if(nextChar2 == 'a' || nextChar2\
    \ == 'e' || nextChar2 == 'i' || nextChar2 == 'o' || nextChar2 == 'u') {\n    \
    \            sb.append(nextChar2);\n                continue;\n            }\n\
    \            char nextChar3 = chars[i + 3];\n            if(nextChar3 == 'a' ||\
    \ nextChar3 == 'e' || nextChar3 == 'i' || nextChar3 == 'o' || nextChar3 == 'u')\
    \ {\n                sb.append(nextChar3);\n                continue;\n      \
    \      }\n            char nextChar4 = chars[i + 4];\n            if(nextChar4\
    \ == 'a' || nextChar4 == 'e' || nextChar4 == 'i' || nextChar4 == 'o' || nextChar4\
    \ == 'u') {\n                sb.append(nextChar4);\n                continue;\n\
    \            }\n            char nextChar5 = chars[i + 5];\n            if(nextChar5\
    \ == 'a' || nextChar5 == 'e' || nextChar5 == 'i' || nextChar5 == 'o' || nextChar5\
    \ == 'u') {\n                sb.append(nextChar5);\n                continue;\n\
    \            }\n            char nextChar6 = chars[i + 6];\n            if(nextChar6\
    \ == 'a' || nextChar6 == 'e' || nextChar6 == 'i' || nextChar6 == 'o' || nextChar6\
    \ == 'u') {\n                sb.append(nextChar6);\n                continue;\n\
    \            }\n            char nextChar7 = chars[i + 7];\n            if(nextChar7\
    \ == 'a' || nextChar7 == 'e' || nextChar7 == 'i' || nextChar7 == 'o' || nextChar7\
    \ == 'u') {\n                sb.append(nextChar7);\n                continue;\n\
    \            }\n            char nextChar8 = chars[i + 8];\n            if(nextChar8\
    \ == 'a' || nextChar8 == 'e' || nextChar8 == 'i' || nextChar8 == 'o' || nextChar8\
    \ == 'u') {\n                sb.append(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1h6yvthk.java:68: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp1h6yvthk.java:69: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(Character.toUpperCase(chars[i - 1]));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpan5u6ehs.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[++i]));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(chars[++i]));\n         \
    \   } else {\n                sb.append(c);\n            }\n        }\n      \
    \  return sb.toString();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdaoifzm.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        int index = j;\n     \
    \                   for (int k = j + 1; k < s.length(); k++) {\n             \
    \               char ch2 = s.charAt(k);\n                            if (Character.isLetter(ch2))\
    \ {\n                                String s3 = Character.toString(ch2);\n  \
    \                              int index2 = k;\n                             \
    \   for (int l = k + 1; l < s.length(); l++) {\n                             \
    \       char ch3 = s.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        int index3 = l;\n                   \
    \                     for (int m = l + 1; m < s.length(); m++) {\n           \
    \                                 char ch4 = s.charAt(m);\n                  \
    \                          if (Character.isLetter(ch4)) {\n                  \
    \                              String s5 = Character.toString(ch4);\n        \
    \                                        int index4 = m;\n                   \
    \                             for (int n = m + 1; n < s.length(); n++) {\n   \
    \                                                 char ch5 = s.charAt(n);\n  \
    \                                                  if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        int index5 = n;\n   \
    \                                                     for (int o = n + 1; o <\
    \ s.length(); o++) {\n                                                       \
    \     char ch6 = s.charAt(o);\n                                              \
    \              if (Character.isLetter(ch6)) {\n                              \
    \                                  String s7 = Character.toString(ch6);\n    \
    \                                                            int index6 = o;\n\
    \                                                                for (int p =\
    \ o + 1; p < s.length(); p++) {\n                                            \
    \                        char ch7 = s.charAt(p);\n                           \
    \                                         if (Character.isLetter(ch7)) {\n   \
    \                                                                     String s8\
    \ = Character.toString(ch7);\n                                               \
    \                         int index7 = p;\n                                  \
    \                                      for (int q = p + 1; q < s.length(); q++)\
    \ {\n                                                                        \
    \    char ch8 = s.charAt(q);\n                                               \
    \                             if (Character.isLetter(ch8)) {\n               \
    \                                                                 String s9 =\
    \ Character.toString(ch8);\n                                                 \
    \                               int index8 = q;\n                            \
    \                                                    for (int r = q + 1; r < s.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s.charAt(r);\n                                  \
    \                                                  if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   int index9\
    \ = r; \n                                                                    \
    \                    for (int s = r + 1; s < s.length(); s++) {\n            \
    \                                                                            \
    \    char ch10 = s.charAt(s);\n                                              \
    \                                              if (Charact\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36_y4sc_.java:73: error: ')' expected\n                       \
    \                                                                     if (Charact\n\
    \                                                                            \
    \                           ^\n/tmp/tmp36_y4sc_.java:74: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmp36_y4sc_.java:75: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n\
    printing javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151747.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(message.charAt(i));\n                sb.append(message.charAt(i\
    \ + 1));\n                sb.append(message.charAt(i + 2));\n                sb.append(message.charAt(i\
    \ + 3));\n                sb.append(message.charAt(i + 4));\n                sb.append(message.charAt(i\
    \ + 5));\n                sb.append(message.charAt(i + 6));\n                sb.append(message.charAt(i\
    \ + 7));\n                sb.append(message.charAt(i + 8));\n                sb.append(message.charAt(i\
    \ + 9));\n                sb.append(message.charAt(i + 10));\n               \
    \ sb.append(message.charAt(i + 11));\n                sb.append(message.charAt(i\
    \ + 12));\n                sb.append(message.charAt(i + 13));\n              \
    \  sb.append(message.charAt(i + 14));\n                sb.append(message.charAt(i\
    \ + 15));\n                sb.append(message.charAt(i + 16));\n              \
    \  sb.append(message.charAt(i + 17));\n                sb.append(message.charAt(i\
    \ + 18));\n                sb.append(message.charAt(i + 19));\n              \
    \  sb.append(message.charAt(i + 20));\n                sb.append(message.charAt(i\
    \ + 21));\n                sb.append(message.charAt(i + 22));\n              \
    \  sb.append(message.charAt(i + 23));\n                sb.append(message.charAt(i\
    \ + 24));\n                sb.append(message.charAt(i + 25));\n              \
    \  sb.append(message.charAt(i + 26));\n                sb.append(message.charAt(i\
    \ + 27));\n                sb.append(message.charAt(i + 28));\n              \
    \  sb.append(message.charAt(i + 29));\n                sb.append(message.charAt(i\
    \ + 30));\n                sb.append(message.charAt(i + 31));\n              \
    \  sb.append(message.charAt(i + 32));\n                sb.append(message.charAt(i\
    \ + 33));\n                sb.append(message.charAt(i + 34));\n              \
    \  sb.append(message.charAt(i + 35));\n                sb.append(message.charAt(i\
    \ + 36));\n                sb.append(message.charAt(i + 37));\n              \
    \  sb.append(message.charAt(i + 38));\n                sb.append(message.charAt(i\
    \ + 39));\n                sb.append(message.charAt(i + 40));\n              \
    \  sb.append(message.charAt(i + 41));\n                sb.append(message.charAt(i\
    \ + 42));\n                sb.append(message.charAt(i + 43));\n              \
    \  sb.append(message.charAt(i + 44));\n                sb.append(message.charAt(i\
    \ + 45));\n                sb.append(message.charAt(i + \n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqx0qqy1b.java:71: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpqx0qqy1b.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                newChars[i] = 'A';\n           \
    \ } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n    \
    \            newChars[i] = 'a';\n            } else if(c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                newChars[i] = 'b';\n            } else if(c == 'c' || c == 'd'\
    \ || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c\
    \ == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n           \
    \     newChars[i] = 'c';\n            } else if(c == 'd' || c == 'f' || c == 'g'\
    \ || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c\
    \ == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w'\
    \ || c == 'x' || c == 'y' || c == 'z') {\n                newChars[i] = 'd';\n\
    \            } else if(c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'j'\
    \ || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c\
    \ == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y'\
    \ || c == 'z') {\n                newChars[i] = 'e';\n            } else if(c\
    \ == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm'\
    \ || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpx432as_o.java:36: error: ')' expected\n            } else if(c\
    \ == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm'\
    \ || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c\n\
    \                                                                            \
    \                                                                            \
    \                           ^\n/tmp/tmpx432as_o.java:37: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmpx432as_o.java:38: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i+1)]));\n\
    \            }\n            else {\n                sb.append(Character.toLowerCase(chars[(i+1)]));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpwn67xrq_.java:37)\n\
    \tat Problem.main(tmpwn67xrq_.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if('A' <= c && c <= 'Z') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if('a' <= c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else if('0' <= c && c <= '9') {\n                sb.append(c);\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \                sb.append(Character.toLowerCase(c));\n            }\n       \
    \ }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9g9c_98f.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(c));\n \
    \               sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp25x0u70m.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                newChars[i] = 'A';\n           \
    \ }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                newChars[i] = 'a';\n            }\n            if(c == 'b'\
    \ || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c\
    \ == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r'\
    \ || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c\
    \ == 'z') {\n                newChars[i] = 'B';\n            }\n            if(c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J'\
    \ || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c\
    \ == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y'\
    \ || c == 'Z') {\n                newChars[i] = 'b';\n            }\n        \
    \    if(c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' ||\
    \ c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c ==\
    \ 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z')\
    \ {\n                newChars[i] = 'D';\n            }\n            if(c == 'D'\
    \ || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c\
    \ == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T'\
    \ || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n           \
    \     newChars[i] = 'd';\n            }\n            if(c == 'f' || c == 'g' ||\
    \ c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c ==\
    \ 'p' || c == 'q' || c == 'r\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvq3qiwes.java:42: error: unclosed character literal\n         \
    \   if(c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' ||\
    \ c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r\n                  \
    \                                                                            \
    \                                              ^\n/tmp/tmpvq3qiwes.java:44: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        for (int\
    \ i = 0; i < vowels.length; i++) {\n            char vowel = vowels[i];\n    \
    \        int index = sb.indexOf(vowel);\n            if (index != -1) {\n    \
    \            sb.setCharAt(index, Character.toUpperCase(sb.charAt(index + 1)));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2sxag4ii.java:35: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(vowel);\n                    \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toLowerCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toUpperCase(c));\n      \
    \      }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6_8bi17f.java:54)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              char nextChar = Character.toLowerCase(chars[i + 1]);\n        \
    \        if (Character.isLowerCase(c)) {\n                    newChars[i] = nextChar;\n\
    \                } else if (Character.isUpperCase(c)) {\n                    newChars[i]\
    \ = nextChar;\n                } else {\n                    newChars[i] = c;\n\
    \                }\n            } else {\n                newChars[i] = c;\n \
    \           }\n        }\n        return new String(newChars);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmp_1u6spql.java:25)\n\
    \tat Problem.main(tmp_1u6spql.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, '-');\n        Arrays.fill(newChars,\
    \ ' ');\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'A');\n\
    \        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'E');\n  \
    \      Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'I');\n    \
    \    Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'O');\n      \
    \  Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'U');\n        Arrays.fill(newChars,\
    \ 'y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 's');\n\
    \        Arrays.fill(newChars, 'S');\n        Arrays.fill(newChars, 't');\n  \
    \      Arrays.fill(newChars, 'T');\n        Arrays.fill(newChars, 'h');\n    \
    \    Arrays.fill(newChars, 'H');\n        Arrays.fill(newChars, 'k');\n      \
    \  Arrays.fill(newChars, 'K');\n        Arrays.fill(newChars, 'g');\n        Arrays.fill(newChars,\
    \ 'G');\n        Arrays.fill(newChars, 'c');\n        Arrays.fill(newChars, 'C');\n\
    \        Arrays.fill(newChars, 'm');\n        Arrays.fill(newChars, 'M');\n  \
    \      Arrays.fill(newChars, 'g');\n        Arrays.fill(newChars, 'G');\n    \
    \    Arrays.fill(newChars, 's');\n        Arrays.fill(newChars, 'S');\n      \
    \  Arrays.fill(newChars, 'p');\n        Arrays.fill(newChars, 'P');\n        Arrays.fill(newChars,\
    \ 'g');\n        Arrays.fill(newChars, 'G');\n        Arrays.fill(newChars, 'f');\n\
    \        Arrays.fill(newChars, 'F');\n        Arrays.fill(newChars, 'v');\n  \
    \      Arrays.fill(newChars, 'V');\n        Arrays.fill(newChars, 'r');\n    \
    \    Arrays.fill(newChars, 'R');\n        Arrays.fill(newChars, 'b');\n      \
    \  Arrays.fill(newChars, 'B');\n        Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'p');\n        Arrays.fill(newChars, 'P');\n\
    \        Arrays.fill(newChars, 'r');\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsj041mul.java:72: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(getVowel(c)));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kvs5zuw.java:31: error: cannot find symbol\n                sb.append(Character.toUpperCase(getVowel(c)));\n\
    \                                                ^\n  symbol:   method getVowel(char)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else {\n                sb.append(Character.toUpperCase(c));\n    \
    \        }\n        }\n        for(int i = 0; i < chars.length; i++) {\n     \
    \       char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            } else {\n\
    \                sb.append(Character.toLowerCase(c));\n            }\n       \
    \ }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxyx8uwsr.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        Arrays.stream(vowels).forEach((v)\
    \ -> {\n            int index = sb.indexOf(v);\n            if (index != -1) {\n\
    \                sb.deleteCharAt(index);\n                sb.insert(index + 1,\
    \ Character.toUpperCase(sb.charAt(index + 1)));\n            }\n        });\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpof2iyaur.java:33: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(vowels).forEach((v) -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String replacement = \n                    Character.isUpperCase(c)\
    \ ? \n                    Character.toLowerCase(c) : \n                    Character.toUpperCase(c);\n\
    \                for (int j = 0; j < replacement.length(); j++) {\n          \
    \          char replacementChar = replacement.charAt(j);\n                   \
    \ int index = i + j;\n                    if (index >= chars.length) \n      \
    \                  break;\n                    char nextChar = chars[index];\n\
    \                    if (Character.isLetter(nextChar)) {\n                   \
    \     sb.append(replacementChar);\n                        break;\n          \
    \          }\n                }\n            }\n            sb.append(c);\n  \
    \      }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzq1iw4ws.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    Character.isUpperCase(c) ? \n               \
    \                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if((c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z')) {\n                sb.append(c);\n            } else\
    \ if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9jtw01o.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbgcry89.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length; i++)\
    \ {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                sb2.append(sb.charAt(index));\n\
    \                sb2.append(sb.charAt(index + 1));\n                sb2.append(c);\n\
    \                sb2.append(sb.charAt(index + 2));\n                sb2.append(sb.charAt(index\
    \ + 3));\n                sb2.append(sb.charAt(index + 4));\n                sb2.append(sb.charAt(index\
    \ + 5));\n                sb2.append(sb.charAt(index + 6));\n                sb2.append(sb.charAt(index\
    \ + 7));\n                sb2.append(sb.charAt(index + 8));\n                sb2.append(sb.charAt(index\
    \ + 9));\n                sb2.append(sb.charAt(index + 10));\n               \
    \ sb2.append(sb.charAt(index + 11));\n                sb2.append(sb.charAt(index\
    \ + 12));\n                sb2.append(sb.charAt(index + 13));\n              \
    \  sb2.append(sb.charAt(index + 14));\n                sb2.append(sb.charAt(index\
    \ + 15));\n                sb2.append(sb.charAt(index + 16));\n              \
    \  sb2.append(sb.charAt(index + 17));\n                sb2.append(sb.charAt(index\
    \ + 18));\n                sb2.append(sb.charAt(index + 19));\n              \
    \  sb2.append(sb.charAt(index + 20));\n                sb2.append(sb.charAt(index\
    \ + 21));\n                sb2.append(sb.charAt(index + 22));\n              \
    \  sb2.append(sb.charAt(index + 23));\n                sb2.append(sb.charAt(index\
    \ + 24));\n                sb2.append(sb.charAt(index + 25));\n              \
    \  sb2.append(sb.charAt(index + 26));\n                sb2.append(sb.charAt(index\
    \ + 27));\n                sb2.append(sb.charAt(index + 28));\n              \
    \  sb2.append(sb.charAt(index + 29));\n                sb2.append(sb.charAt(index\
    \ + 30));\n                sb2.append(sb.charAt(index + 31));\n              \
    \  sb2.append(sb.charAt(index + 32));\n                sb2.append(sb.charAt(index\
    \ + 33));\n                sb2.append(sb.charAt(index + \n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzy4_p_qx.java:74: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpzy4_p_qx.java:75: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toUpperCase().charAt(0);\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toLowerCase();\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toUpperCase().charAt(0);\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toLowerCase();\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toUpperCase().charAt(0);\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toLowerCase();\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toUpperCase().charAt(0);\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toLowerCase();\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toUpperCase().charAt(0);\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toLowerCase();\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toUpperCase().charAt(0);\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                chars[i] = s.toLowerCase();\n\
    \            }\n        }\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = \n    }\n    public static void main(String[] args) {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04b1hmz0.java:108: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp04b1hmz0.java:109: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              char nextLetter = Character.toUpperCase(chars[i + 1]);\n      \
    \          char nextVowel = Character.toUpperCase(nextLetter);\n             \
    \   if (nextVowel == 'A' || nextVowel == 'E' || nextVowel == 'I' || nextVowel\
    \ == 'O' || nextVowel == 'U') {\n                    newChars[i] = nextLetter;\n\
    \                } else {\n                    newChars[i] = nextVowel;\n    \
    \            }\n            } else {\n                newChars[i] = c;\n     \
    \       }\n        }\n        return new String(newChars);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpoz39kyjg.java:25)\n\
    \tat Problem.main(tmpoz39kyjg.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isUpperCase(c)) {\n\
    \                sb.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ if (Character.isLetter(c)) {\n                sb.append(c);\n            }\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr12r3k5w.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[++i]));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(chars[++i]));\n         \
    \   } else {\n                sb.append(c);\n            }\n        }\n      \
    \  return sb.toString();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptx7h8l2j.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else {\n                sb.append(Character.toUpperCase(c));\n    \
    \        }\n        }\n        for(int i = 0; i < chars.length; i++) {\n     \
    \       char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            } else {\n\
    \                sb.append(Character.toLowerCase(c));\n            }\n       \
    \ }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfc5cttqb.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else if(c == 'B' || c == 'C' || c == 'D' ||\
    \ c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c ==\
    \ 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T'\
    \ || c == 'V' || c == 'W' || c == 'Y') {\n                sb.append(c);\n    \
    \        } else if(c == 'Z') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38wcw28s.java:40)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length; i++)\
    \ {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                sb2.append(sb.charAt(index));\n\
    \                sb2.append(sb.charAt(index + 1));\n                sb2.append(c);\n\
    \                sb2.append(sb.charAt(index + 2));\n                sb2.append(sb.charAt(index\
    \ + 3));\n                sb2.append(sb.charAt(index + 4));\n                sb2.append(sb.charAt(index\
    \ + 5));\n                sb2.append(sb.charAt(index + 6));\n                sb2.append(sb.charAt(index\
    \ + 7));\n                sb2.append(sb.charAt(index + 8));\n                sb2.append(sb.charAt(index\
    \ + 9));\n                sb2.append(sb.charAt(index + 10));\n               \
    \ sb2.append(sb.charAt(index + 11));\n                sb2.append(sb.charAt(index\
    \ + 12));\n                sb2.append(sb.charAt(index + 13));\n              \
    \  sb2.append(sb.charAt(index + 14));\n                sb2.append(sb.charAt(index\
    \ + 15));\n                sb2.append(sb.charAt(index + 16));\n              \
    \  sb2.append(sb.charAt(index + 17));\n                sb2.append(sb.charAt(index\
    \ + 18));\n                sb2.append(sb.charAt(index + 19));\n              \
    \  sb2.append(sb.charAt(index + 20));\n                sb2.append(sb.charAt(index\
    \ + 21));\n                sb2.append(sb.charAt(index + 22));\n              \
    \  sb2.append(sb.charAt(index + 23));\n                sb2.append(sb.charAt(index\
    \ + 24));\n                sb2.append(sb.charAt(index + 25));\n              \
    \  sb2.append(sb.charAt(index + 26));\n                sb2.append(sb.charAt(index\
    \ + 27));\n                sb2.append(sb.charAt(index + 28));\n              \
    \  sb2.append(sb.charAt(index + 29));\n                sb2.append(sb.charAt(index\
    \ + 30));\n                sb2.append(sb.charAt(index + 31));\n              \
    \  sb2.append(sb.charAt(index + 32));\n                sb2.append(sb.charAt(index\
    \ + 33));\n                sb2.append(sb.charAt(index + 34\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpftkb75tn.java:73: error: ')' expected\n                sb2.append(sb.charAt(index\
    \ + 34\n                                               ^\n/tmp/tmpftkb75tn.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn7zf161g.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        int index = j;\n     \
    \                   for (int k = j + 1; k < s.length(); k++) {\n             \
    \               char ch2 = s.charAt(k);\n                            if (Character.isLetter(ch2))\
    \ {\n                                String s3 = Character.toString(ch2);\n  \
    \                              int index2 = k;\n                             \
    \   for (int l = k + 1; l < s.length(); l++) {\n                             \
    \       char ch3 = s.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        int index3 = l;\n                   \
    \                     for (int m = l + 1; m < s.length(); m++) {\n           \
    \                                 char ch4 = s.charAt(m);\n                  \
    \                          if (Character.isLetter(ch4)) {\n                  \
    \                              String s5 = Character.toString(ch4);\n        \
    \                                        int index4 = m;\n                   \
    \                             for (int n = m + 1; n < s.length(); n++) {\n   \
    \                                                 char ch5 = s.charAt(n);\n  \
    \                                                  if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        int index5 = n;\n   \
    \                                                     for (int o = n + 1; o <\
    \ s.length(); o++) {\n                                                       \
    \     char ch6 = s.charAt(o);\n                                              \
    \              if (Character.isLetter(ch6)) {\n                              \
    \                                  String s7 = Character.toString(ch6);\n    \
    \                                                            int index6 = o;\n\
    \                                                                for (int p =\
    \ o + 1; p < s.length(); p++) {\n                                            \
    \                        char ch7 = s.charAt(p);\n                           \
    \                                         if (Character.isLetter(ch7)) {\n   \
    \                                                                     String s8\
    \ = Character.toString(ch7);\n                                               \
    \                         int index7 = p;\n                                  \
    \                                      for (int q = p + 1; q < s.length(); q++)\
    \ {\n                                                                        \
    \    char ch8 = s.charAt(q);\n                                               \
    \                             if (Character.isLetter(ch8)) {\n               \
    \                                                                 String s9 =\
    \ Character.toString(ch8);\n                                                 \
    \                               int index8 = q;\n                            \
    \                                                    for (int r = q + 1; r < s.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s.charAt(r);\n                                  \
    \                                                  if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   int index9\
    \ = r;\n                                                                     \
    \                   for (int s = r + 1; s < s.length(); s++) {\n             \
    \                                                                            \
    \   char ch10 = s.charAt(s);\n                                               \
    \                                             if (Character.is\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp62z0qzai.java:73: error: ')' expected\n                       \
    \                                                                     if (Character.is\n\
    \                                                                            \
    \                                ^\n/tmp/tmp62z0qzai.java:74: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmp62z0qzai.java:75: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n\
    printing javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151750.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        for (int k = 0; k < s2.length();\
    \ k++) {\n                            char ch2 = s2.charAt(k);\n             \
    \               if (Character.isLetter(ch2)) {\n                             \
    \   String s3 = Character.toString(ch2);\n                                for\
    \ (int l = 0; l < s3.length(); l++) {\n                                    char\
    \ ch3 = s3.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        for (int m = 0; m < s4.length(); m++)\
    \ {\n                                            char ch4 = s4.charAt(m);\n  \
    \                                          if (Character.isLetter(ch4)) {\n  \
    \                                              String s5 = Character.toString(ch4);\n\
    \                                                for (int n = 0; n < s5.length();\
    \ n++) {\n                                                    char ch5 = s5.charAt(n);\n\
    \                                                    if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toString(ch6);\n                \
    \                                                for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toString(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toString(ch8);\n                              \
    \                                                  for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   for (int s\
    \ = 0; s < s10.length(); s++) {\n                                            \
    \                                                char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toString(ch10);\n                                              \
    \                                                  for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n               \
    \                                                                            \
    \         if (Character.isLetter(ch11\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdk1fd_wo.java:68: error: ')' expected\n                       \
    \                                                                            \
    \ if (Character.isLetter(ch11\n                                              \
    \                                                                            \
    \     ^\n/tmp/tmpdk1fd_wo.java:69: error: illegal start of statement\n    }\n\
    \    ^\n/tmp/tmpdk1fd_wo.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151750.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              newChars[i] = Character.toUpperCase(c);\n            } else {\n\
    \                newChars[i] = c;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = newChars[i];\n            if (Character.isLetter(c)) {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt412k83b.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \             sb.append(Character.toLowerCase(message.charAt(i + 1)));\n     \
    \       }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 4\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.encode(tmpvy8gtk5e.java:29)\n\
    \tat Problem.main(tmpvy8gtk5e.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \            continue;\n            }\n            int index = c - 'a';\n    \
    \        char nextChar = chars[++i];\n            if(nextChar == 'a' || nextChar\
    \ == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u') {\n       \
    \         sb.append(nextChar);\n                continue;\n            }\n   \
    \         char nextChar2 = chars[++i];\n            if(nextChar2 == 'a' || nextChar2\
    \ == 'e' || nextChar2 == 'i' || nextChar2 == 'o' || nextChar2 == 'u') {\n    \
    \            sb.append(nextChar2);\n                continue;\n            }\n\
    \            char nextChar3 = chars[++i];\n            if(nextChar3 == 'a' ||\
    \ nextChar3 == 'e' || nextChar3 == 'i' || nextChar3 == 'o' || nextChar3 == 'u')\
    \ {\n                sb.append(nextChar3);\n                continue;\n      \
    \      }\n            char nextChar4 = chars[++i];\n            if(nextChar4 ==\
    \ 'a' || nextChar4 == 'e' || nextChar4 == 'i' || nextChar4 == 'o' || nextChar4\
    \ == 'u') {\n                sb.append(nextChar4);\n                continue;\n\
    \            }\n            char nextChar5 = chars[++i];\n            if(nextChar5\
    \ == 'a' || nextChar5 == 'e' || nextChar5 == 'i' || nextChar5 == 'o' || nextChar5\
    \ == 'u') {\n                sb.append(nextChar5);\n                continue;\n\
    \            }\n            char nextChar6 = chars[++i];\n            if(nextChar6\
    \ == 'a' || nextChar6 == 'e' || nextChar6 == 'i' || nextChar6 == 'o' || nextChar6\
    \ == 'u') {\n                sb.append(nextChar6);\n                continue;\n\
    \            }\n            char nextChar7 = chars[++i];\n            if(nextChar7\
    \ == 'a' || nextChar7 == 'e' || nextChar7 == 'i' || nextChar7 == 'o' || nextChar7\
    \ == 'u') {\n                sb.append(nextChar7);\n                continue;\n\
    \            }\n            char nextChar8 = chars[++i];\n            if(nextChar8\
    \ == 'a' || nextChar8 == 'e' || nextChar8 == 'i' || nextChar8 == 'o' || nextChar8\
    \ == 'u') {\n                s\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnruzxll5.java:67: error: not a statement\n                s\n \
    \               ^\n/tmp/tmpnruzxll5.java:67: error: ';' expected\n           \
    \     s\n                 ^\n/tmp/tmpnruzxll5.java:69: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars,\
    \ 'A');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'E');\n\
    \        Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'I');\n  \
    \      Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'O');\n    \
    \    Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'U');\n      \
    \  Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'a');\n        Arrays.fill(newChars, 'A');\n        Arrays.fill(newChars, 'e');\n\
    \        Arrays.fill(newChars, 'E');\n        Arrays.fill(newChars, 'i');\n  \
    \      Arrays.fill(newChars, 'I');\n        Arrays.fill(newChars, 'o');\n    \
    \    Arrays.fill(newChars, 'O');\n        Arrays.fill(newChars, 'u');\n      \
    \  Arrays.fill(newChars, 'U');\n        Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'A');\n        Arrays.fill(newChars, 'a');\n\
    \        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n  \
    \      Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'e');\n    \
    \    Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'i');\n      \
    \  Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars,\
    \ 'o');\n        Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'u');\n\
    \        Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'u');\n  \
    \      Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'y');\n    \
    \    Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n      \
    \  Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n\
    \        Arrays.fill(newChars, 'Y');\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmodo0zsz.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = new char[]{'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n     \
    \   for (int i = 0; i < vowels.length; i++) {\n            char vowel = vowels[i];\n\
    \            int index = sb.indexOf(vowel);\n            if (index != -1) {\n\
    \                sb.setCharAt(index, Character.toUpperCase(sb.charAt(index)));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_kbnzne.java:35: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(vowel);\n                    \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String s = Character.toString(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        int index = s2.indexOf(s.charAt(j\
    \ + 1));\n                        if (index != -1) {\n                       \
    \     String s3 = s2.substring(0, index) + s2.substring(index + 1);\n        \
    \                    sb.append(s3);\n                        }\n             \
    \       }\n                }\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.encode(tmpglkfcajd.java:31)\n\
    \tat Problem.main(tmpglkfcajd.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            String s = Character.toString(c);\n\
    \            String upper = Character.toUpperCase(c);\n            String lower\
    \ = Character.toLowerCase(c);\n            String vowels = \"AEIOUaeiou\";\n \
    \           String vowelsUp = vowels.toUpperCase();\n            String vowelsLow\
    \ = vowels.toLowerCase();\n            String vowelsUp2 = vowelsUp.substring(2);\n\
    \            String vowelsLow2 = vowelsLow.substring(2);\n            String vowelsUp3\
    \ = vowelsUp.substring(3);\n            String vowelsLow3 = vowelsLow.substring(3);\n\
    \            String vowelsUp4 = vowelsUp.substring(4);\n            String vowelsLow4\
    \ = vowelsLow.substring(4);\n            String vowelsUp5 = vowelsUp.substring(5);\n\
    \            String vowelsLow5 = vowelsLow.substring(5);\n            String vowelsUp6\
    \ = vowelsUp.substring(6);\n            String vowelsLow6 = vowelsLow.substring(6);\n\
    \            String vowelsUp7 = vowelsUp.substring(7);\n            String vowelsLow7\
    \ = vowelsLow.substring(7);\n            String vowelsUp8 = vowelsUp.substring(8);\n\
    \            String vowelsLow8 = vowelsLow.substring(8);\n            String vowelsUp9\
    \ = vowelsUp.substring(9);\n            String vowelsLow9 = vowelsLow.substring(9);\n\
    \            String vowelsUp10 = vowelsUp.substring(10);\n            String vowelsLow10\
    \ = vowelsLow.substring(10);\n            String vowelsUp11 = vowelsUp.substring(11);\n\
    \            String vowelsLow11 = vowelsLow.substring(11);\n            String\
    \ vowelsUp12 = vowelsUp.substring(12);\n            String vowelsLow12 = vowelsLow.substring(12);\n\
    \            String vowelsUp13 = vowelsUp.substring(13);\n            String vowelsLow13\
    \ = vowelsLow.substring(13);\n            String vowelsUp14 = vowelsUp.substring(14);\n\
    \            String vowelsLow14 = vowelsLow.substring(14);\n            String\
    \ vowelsUp15 = vowelsUp.substring(15);\n            String vowelsLow15 = vowelsLow.substring(15);\n\
    \            String vowelsUp16 = vowelsUp.substring(16);\n            String vowelsLow16\
    \ = vowelsLow.substring(16);\n            String vowelsUp17 = vowelsUp.substring(17);\n\
    \            String vowelsLow17 = vowel\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ecwdnu2.java:61: error: ';' expected\n            String vowelsLow17\
    \ = vowel\n                                      ^\n/tmp/tmp9ecwdnu2.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            char newChar = c;\n            if((c\
    \ >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                newChar =\
    \ Character.toUpperCase(c);\n            }\n            if((c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z')) {\n                newChar = Character.toLowerCase(c);\n\
    \            }\n            if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\
    \ {\n                newChar = Character.toUpperCase(c);\n            }\n    \
    \        if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            \
    \    newChar = Character.toLowerCase(c);\n            }\n            if((c >=\
    \ 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                newChar = Character.toUpperCase(c);\n\
    \            }\n            if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\
    \ {\n                newChar = Character.toLowerCase(c);\n            }\n    \
    \        if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            \
    \    newChar = Character.toUpperCase(c);\n            }\n            if((c >=\
    \ 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                newChar = Character.toLowerCase(c);\n\
    \            }\n            if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\
    \ {\n                newChar = Character.toUpperCase(c);\n            }\n    \
    \        if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            \
    \    newChar = Character.toLowerCase(c);\n            }\n            if((c >=\
    \ 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                newChar = Character.toUpperCase(c);\n\
    \            }\n            if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\
    \ {\n                newChar = Character.toLowerCase(c);\n            }\n    \
    \        if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            \
    \    newChar = Character.toUpperCase(c);\n            }\n            if((c >=\
    \ 'a' && \n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmph5efdxha.java:65: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmph5efdxha.java:66: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else if(c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                sb.append(c);\n            } else if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n       \
    \     } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else if(c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                sb.append(c);\n            } else if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n       \
    \     } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else if(c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                sb.append(c);\n            } else if(c == 'a' || c == 'e' ||\
    \ c == '\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpwaqnylyv.java:43: error: illegal line end in character literal\n\
    \            } else if(c == 'a' || c == 'e' || c == '\n                      \
    \                             ^\n/tmp/tmpwaqnylyv.java:45: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = new char[]{'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n     \
    \   StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length;\
    \ i++) {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                sb2.append(sb.charAt(index));\n\
    \                sb2.append(sb.charAt(index + 1));\n                sb2.append(c);\n\
    \                sb2.append(sb.charAt(index + 2));\n            } else {\n   \
    \             sb2.append(c);\n            }\n        }\n        return sb.toString().toUpperCase()\
    \ + sb2.toString();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpano2aav8.java:36: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(c);\n                        \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        for (int k = 0; k < s2.length();\
    \ k++) {\n                            char ch2 = s2.charAt(k);\n             \
    \               if (Character.isLetter(ch2)) {\n                             \
    \   String s3 = Character.toString(ch2);\n                                for\
    \ (int l = 0; l < s3.length(); l++) {\n                                    char\
    \ ch3 = s3.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        for (int m = 0; m < s4.length(); m++)\
    \ {\n                                            char ch4 = s4.charAt(m);\n  \
    \                                          if (Character.isLetter(ch4)) {\n  \
    \                                              String s5 = Character.toString(ch4);\n\
    \                                                for (int n = 0; n < s5.length();\
    \ n++) {\n                                                    char ch5 = s5.charAt(n);\n\
    \                                                    if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toString(ch6);\n                \
    \                                                for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toString(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toString(ch8);\n                              \
    \                                                  for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   for (int s\
    \ = 0; s < s10.length(); s++) {\n                                            \
    \                                                char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toString(ch10);\n                                              \
    \                                                  for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n               \
    \                                                                            \
    \         if (Character.isLetter(ch11\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjbxqychf.java:68: error: ')' expected\n                       \
    \                                                                            \
    \ if (Character.isLetter(ch11\n                                              \
    \                                                                            \
    \     ^\n/tmp/tmpjbxqychf.java:69: error: illegal start of statement\n    }\n\
    \    ^\n/tmp/tmpjbxqychf.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151751.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isUpperCase(c)) {\n\
    \                newChars[i] = Character.toLowerCase(c);\n            } else if\
    \ (Character.isLowerCase(c)) {\n                newChars[i] = Character.toUpperCase(c);\n\
    \            } else if (Character.isLetter(c)) {\n                String replacement\
    \ = \n                        (chars[i - 2] + chars[i - 1] + chars[i] + chars[i\
    \ + 1] + chars[i + 2]).toLowerCase();\n                newChars[i] = replacement;\n\
    \            }\n        }\n        return new String(newChars);\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv4hbmlxa.java:30: error: int cannot be dereferenced\n         \
    \               (chars[i - 2] + chars[i - 1] + chars[i] + chars[i + 1] + chars[i\
    \ + 2]).toLowerCase();\n                                                     \
    \                                         ^\n/tmp/tmpv4hbmlxa.java:31: error:\
    \ incompatible types: String cannot be converted to char\n                newChars[i]\
    \ = replacement;\n                              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars,\
    \ 'A');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'E');\n\
    \        Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'I');\n  \
    \      Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'O');\n    \
    \    Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'U');\n      \
    \  Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'A');\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n\
    \        Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'o');\n  \
    \      Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'y');\n    \
    \    Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n      \
    \  Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n\
    \        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n  \
    \      Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n    \
    \    Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n      \
    \  Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n\
    \        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n  \
    \      Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n    \
    \    Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n      \
    \  Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'Y');\n\
    \        Arrays.fill(newChars, 'Y');\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppeohk5cs.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n  \
    \      StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length;\
    \ i++) {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                sb2.append(sb.charAt(index));\n\
    \                sb2.append(sb.charAt(index + 2));\n            } else {\n   \
    \             sb2.append(c);\n            }\n        }\n        return sb.toString()\
    \ + sb2.toString();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph7c7wi57.java:36: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(c);\n                        \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              newChars[i] = Character.toUpperCase(c);\n            } else {\n\
    \                newChars[i] = c;\n            }\n        }\n        return String.valueOf(newChars);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3iusv7db.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2g_9btq2.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            char newChar = Character.toUpperCase(chars[(i + index) %\
    \ chars.length]);\n            newChars[i] = newChar;\n        }\n        return\
    \ new String(newChars);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd4rtb0k1.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            }\n            else {\n               \
    \ sb.append(c);\n            }\n        }\n        return sb.toString();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvuflo2g.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < message.length(); i++) {\n\
    \            char c = message.charAt(i);\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else {\n                sb.append(Character.toLowerCase(c));\n    \
    \        }\n        }\n        for(int i = 0; i < message.length(); i++) {\n \
    \           char c = message.charAt(i);\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n       \
    \     } else {\n                sb.append(Character.toUpperCase(c));\n       \
    \     }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj2afx08e.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String replacement = Character.toUpperCase(Character.toLowerCase(c));\n\
    \                for (int j = i + 1; j < chars.length; j++) {\n              \
    \      if (Character.isLetter(chars[j])) {\n                        replacement\
    \ = replacement + Character.toUpperCase(Character.toLowerCase(chars[j]));\n  \
    \                  }\n                }\n                sb.append(replacement);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0jmzbuah.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                String replacement = Character.toUpperCase(Character.toLowerCase(c));\n\
    \                                                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              sb.append(Character.toUpperCase(c));\n            } else {\n  \
    \              sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] letters = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'};\n        char[] vowelsTwo = { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ lettersTwo = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q',\
    \ 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowelsThree = { 'a',\
    \ 'e', 'i', 'o', 'u' };\n        char[] lettersThree = { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        char[] vowelsFour = { 'A', 'E', 'I', 'O', 'U' };\n        char[]\
    \ lettersFour = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P',\
    \ 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowelsFive =\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] lettersFive = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowelsSix = { 'A', 'E', 'I', 'O', 'U' };\n     \
    \   char[] lettersSix = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N',\
    \ 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowelsSeven\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] lettersSeven = { 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        char[] vowelsEight = { 'A', 'E', 'I', 'O', 'U' };\n   \
    \     char[] lettersEight = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6b46bhj.java:45: error: unclosed character literal\n        char[]\
    \ lettersEight = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P\n\
    \                                                                            \
    \           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        for (int\
    \ i = 0; i < vowels.length; i++) {\n            char vowel = vowels[i];\n    \
    \        int index = sb.indexOf(vowel);\n            if (index != -1) {\n    \
    \            String replacement = String.valueOf(\n                        Character.toUpperCase(\n\
    \                                sb.charAt(index + 1)));\n                sb.replace(index,\
    \ index + 1, replacement);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpa82p8hja.java:35: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(vowel);\n                    \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              sb2.append(Character.toUpperCase(c));\n            } else if (vowels.contains(c))\
    \ {\n                sb2.append(Character.toUpperCase(vowels[vowels.indexOf(c)\
    \ + 1]));\n            } else {\n                sb2.append(c);\n            }\n\
    \        }\n        return sb.toString() + sb2.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3fjbeoa4.java:38: error: cannot find symbol\n            } else\
    \ if (vowels.contains(c)) {\n                             ^\n  symbol:   method\
    \ contains(char)\n  location: variable vowels of type char[]\n/tmp/tmp3fjbeoa4.java:39:\
    \ error: cannot find symbol\n                sb2.append(Character.toUpperCase(vowels[vowels.indexOf(c)\
    \ + 1]));\n                                                              ^\n \
    \ symbol:   method indexOf(char)\n  location: variable vowels of type char[]\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            if (index >= 0 && index < 26) {\n                newChars[i]\
    \ = 'a' + index;\n            } else if (index >= 26) {\n                newChars[i]\
    \ = 'A' + (index - 26);\n            } else {\n                newChars[i] = c;\n\
    \            }\n        }\n        return new String(newChars);\n\n    }\n   \
    \ public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp26l6ebk_.java:26: error: incompatible types: possible lossy conversion\
    \ from int to char\n                newChars[i] = 'a' + index;\n             \
    \                     ^\n/tmp/tmp26l6ebk_.java:28: error: incompatible types:\
    \ possible lossy conversion from int to char\n                newChars[i] = 'A'\
    \ + (index - 26);\n                                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kfefeil.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        StringBuilder\
    \ vowelsSb = new StringBuilder();\n        for (int i = 0; i < vowels.length;\
    \ i++) {\n            char c = vowels[i];\n            vowelsSb.append(c);\n \
    \       }\n        char[] vowelsChars = vowelsSb.toString().toCharArray();\n \
    \       Arrays.sort(vowelsChars);\n        StringBuilder vowelsSb2 = new StringBuilder();\n\
    \        for (int i = 0; i < vowelsChars.length; i++) {\n            char c =\
    \ vowelsChars[i];\n            vowelsSb2.append(c);\n        }\n        char[]\
    \ vowelsChars2 = vowelsSb2.toString().toCharArray();\n        Arrays.sort(vowelsChars2);\n\
    \        StringBuilder vowelsSb3 = new StringBuilder();\n        for (int i =\
    \ 0; i < vowelsChars2.length; i++) {\n            char c = vowelsChars2[i];\n\
    \            vowelsSb3.append(c);\n        }\n        char[] vowelsChars3 = vowelsSb3.toString().toCharArray();\n\
    \        Arrays.sort(vowelsChars3);\n        StringBuilder vowelsSb4 = new StringBuilder();\n\
    \        for (int i = 0; i < vowelsChars3.length; i++) {\n            char c =\
    \ vowelsChars3[i];\n            vowelsSb4.append(c);\n        }\n        char[]\
    \ vowelsChars4 = vowelsSb4.toString().toCharArray();\n        Arrays.sort(vowelsChars4);\n\
    \        StringBuilder vowelsSb5 = new StringBuilder();\n        for (int i =\
    \ 0; i < vowelsChars4.length; i++) {\n            char c = vowelsChars4[i];\n\
    \            vowelsSb5.append(c);\n        }\n        char[] vowelsChars5 = vowelsSb5.toString().toCharArray();\n\
    \        Arrays.sort(vowelsChars5);\n        StringBuilder vowelsSb6 = new StringBuilder();\n\
    \        for (int i = 0; i < vowelsChars5.length; i++) {\n            char c =\
    \ vowelsChars5[i];\n            vowelsSb6.append(c);\n        }\n        char[]\
    \ vowelsChars6 = vowelsSb6.toString().toCharArray();\n        Arrays.sort(vowelsChars6);\n\
    \        StringBuilder vowelsSb7 = new StringBuilder();\n        for \n    }\n\
    \    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6rlqjws8.java:76: error: '(' expected\n        for \n         \
    \  ^\n/tmp/tmp6rlqjws8.java:77: error: illegal start of expression\n    }\n  \
    \  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            }\n            else {\n               \
    \ sb.append(c);\n            }\n        }\n        return sb.toString();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwl7vhs2q.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        for(int i = 0; i < chars.length; i++) {\n       \
    \     char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                sb.append(c);\n            }\n      \
    \      else {\n                sb.append(Character.toUpperCase(c));\n        \
    \    }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_pj__3j.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            if(index >= 0 && index < 26) {\n                newChars[i]\
    \ = 'a' + index;\n            } else if(index >= 26 && index < 52) {\n       \
    \         newChars[i] = 'A' + index - 26;\n            } else {\n            \
    \    newChars[i] = c;\n            }\n        }\n        return new String(newChars);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp1fmad_0a.java:26: error: incompatible types: possible lossy conversion\
    \ from int to char\n                newChars[i] = 'a' + index;\n             \
    \                     ^\n/tmp/tmp1fmad_0a.java:28: error: incompatible types:\
    \ possible lossy conversion from int to char\n                newChars[i] = 'A'\
    \ + index - 26;\n                                          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] vowels\
    \ = new char[]{'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n     \
    \   Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n   \
    \     for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if(vowels.indexOf(c) != -1) {\n                sb.append(vowels[vowels.indexOf(c)\
    \ + 2]);\n            } else {\n                sb.append(c);\n            }\n\
    \        }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7tlvq0yp.java:27: error: cannot find symbol\n            if(vowels.indexOf(c)\
    \ != -1) {\n                     ^\n  symbol:   method indexOf(char)\n  location:\
    \ variable vowels of type char[]\n/tmp/tmp7tlvq0yp.java:28: error: cannot find\
    \ symbol\n                sb.append(vowels[vowels.indexOf(c) + 2]);\n        \
    \                               ^\n  symbol:   method indexOf(char)\n  location:\
    \ variable vowels of type char[]\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu0ecuo_r.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars,\
    \ 'A');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'E');\n\
    \        Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'I');\n  \
    \      Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'O');\n    \
    \    Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'U');\n      \
    \  Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars,\
    \ 'A');\n        Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n\
    \        Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'o');\n  \
    \      Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'y');\n    \
    \    Arrays.fill(newChars, 'Y');\n        Arrays.fill(newChars, 'A');\n      \
    \  Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars,\
    \ 'i');\n        Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'u');\n\
    \        Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n  \
    \      Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n    \
    \    Arrays.fill(newChars, 'i');\n        Arrays.fill(newChars, 'o');\n      \
    \  Arrays.fill(newChars, 'u');\n        Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars,\
    \ 'Y');\n        Arrays.fill(newChars, 'A');\n        Arrays.fill(newChars, 'a');\n\
    \        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars, 'i');\n  \
    \      Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'u');\n    \
    \    Arrays.fill(newChars, 'y');\n        Arrays.fill(newChars, 'Y');\n      \
    \  Arrays.fill(newChars, 'a');\n        Arrays.fill(newChars, 'e');\n        Arrays.fill(newChars,\
    \ 'i');\n        Arrays.fill(newChars, 'o');\n        Arrays.fill(newChars, 'u');\n\
    \        Arrays.fill(newChars, 'y');\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppjunsw5b.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              char newC = Character.toUpperCase(c);\n                char newC2\
    \ = Character.toLowerCase(newC);\n                newChars[i] = newC2;\n     \
    \       }\n        }\n        String newMessage = new String(newChars);\n    \
    \    char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] vowels2\
    \ = new char[]{'A', 'E', 'I', 'O', 'U'};\n        for (int i = 0; i < vowels.length;\
    \ i++) {\n            char vowel = vowels[i];\n            int index = newMessage.indexOf(vowel);\n\
    \            if (index != -1) {\n                char newVowel = vowels2[i];\n\
    \                newMessage = newMessage.substring(0, index) + newVowel + newMessage.substring(index\
    \ + 1);\n            }\n        }\n        return newMessage;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwdws94cr.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            int index = c - 'a';\n            int nextIndex =\
    \ index - 2;\n            char nextChar = chars[nextIndex];\n            char\
    \ nextNextChar = chars[nextIndex + 1];\n            if(c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n                sb.append(c);\n       \
    \         continue;\n            }\n            if(c == 'a' && nextChar == 'e'\
    \ && nextNextChar == 'i' && nextIndex == 1) {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'A' && nextChar\
    \ == 'E' && nextNextChar == 'I' && nextIndex == 1) {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' && nextChar\
    \ == 'e' && nextNextChar == 'i' && nextIndex == 2 && nextNextChar == 'o' && nextIndex\
    \ == 1) {\n                sb.append(nextChar);\n                continue;\n \
    \           }\n            if(c == 'A' && nextChar == 'E' && nextNextChar == 'I'\
    \ && nextIndex == 2 && nextNextChar == 'O' && nextIndex == 1) {\n            \
    \    sb.append(nextChar);\n                continue;\n            }\n        \
    \    if(c == 'a' && nextChar == 'e' && nextNextChar == 'i' && nextIndex == 2 &&\
    \ nextNextChar == 'o' && nextIndex == 2 && nextIndex == 1) {\n               \
    \ sb.append(nextChar);\n                continue;\n            }\n           \
    \ if(c == 'A' && nextChar == 'E' && nextNextChar == 'I' && nextIndex == 2 && nextNextChar\
    \ == 'O' && nextIndex == 2 && nextIndex == 1) {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' && nextChar\
    \ == 'e' && nextNextChar == 'i' && nextIndex == 2 && nextNextChar == 'o' && nextIndex\
    \ == 2 && nextIndex == 2 && nextIndex == 1) {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'A' && nextChar\
    \ == 'E' && nextNextChar == 'I' && nextIndex == 2 && nextNextChar == 'O' && nextIndex\
    \ == 2 && nextIndex == 2 && nextIndex == 1) {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' && nextChar\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpqjv6qjr0.java:68: error: ')' expected\n            if(c == 'a'\
    \ && nextChar\n                                   ^\n/tmp/tmpqjv6qjr0.java:69:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpqjv6qjr0.java:70: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprm2ahgqz.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            } else if(c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n                sb.append(c);\n       \
    \     } else {\n                sb.append(Character.toUpperCase(c));\n       \
    \     }\n        }\n        for(int i = 0; i < message.length(); i++) {\n    \
    \        char c = message.charAt(i);\n            if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7wknwzn.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        for(int i = 0; i < chars.length; i++) {\n       \
    \     char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                sb.append(c);\n            }\n      \
    \      else {\n                sb.append(Character.toUpperCase(c));\n        \
    \    }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoik96kg7.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, '\\0');\n        Arrays.fill(newChars,\
    \ 0, chars.length, ' ');\n        Arrays.fill(newChars, chars.length - 1, chars.length,\
    \ '\\0');\n        Arrays.fill(newChars, chars.length - 1, chars.length - 2, '\
    \ ');\n        Arrays.fill(newChars, chars.length - 2, chars.length - 3, ' ');\n\
    \        Arrays.fill(newChars, chars.length - 3, chars.length - 4, ' ');\n   \
    \     Arrays.fill(newChars, chars.length - 4, chars.length - 5, ' ');\n      \
    \  Arrays.fill(newChars, chars.length - 5, chars.length - 6, ' ');\n        Arrays.fill(newChars,\
    \ chars.length - 6, chars.length - 7, ' ');\n        Arrays.fill(newChars, chars.length\
    \ - 7, chars.length - 8, ' ');\n        Arrays.fill(newChars, chars.length - 8,\
    \ chars.length - 9, ' ');\n        Arrays.fill(newChars, chars.length - 9, chars.length\
    \ - 10, ' ');\n        Arrays.fill(newChars, chars.length - 10, chars.length -\
    \ 11, ' ');\n        Arrays.fill(newChars, chars.length - 11, chars.length - 12,\
    \ ' ');\n        Arrays.fill(newChars, chars.length - 12, chars.length - 13, '\
    \ ');\n        Arrays.fill(newChars, chars.length - 13, chars.length - 14, ' ');\n\
    \        Arrays.fill(newChars, chars.length - 14, chars.length - 15, ' ');\n \
    \       Arrays.fill(newChars, chars.length - 15, chars.length - 16, ' ');\n  \
    \      Arrays.fill(newChars, chars.length - 16, chars.length - 17, ' ');\n   \
    \     Arrays.fill(newChars, chars.length - 17, chars.length - 18, ' ');\n    \
    \    Arrays.fill(newChars, chars.length - 18, chars.length - 19, ' ');\n     \
    \   Arrays.fill(newChars, chars.length - 19, chars.length - 20, ' ');\n      \
    \  Arrays.fill(newChars, chars.length - 20, chars.length - 21, ' ');\n       \
    \ Arrays.fill(newChars, chars.length - 21, chars.length - 22, ' ');\n        Arrays.fill(newChars,\
    \ chars.length - 22, chars.length - 23, ' ');\n        Arrays.fill(newChars, chars.length\
    \ - 23, chars.length - 24, ' ');\n        Arrays.fill(newChars, chars.length -\
    \ 24, chars.length - 25, ' ');\n        Arrays.fill(newChars, chars.length - 25,\
    \ chars.length - 26, ' \n    }\n    public static void main(String[] args) {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuncl8fgo.java:49: error: unclosed character literal\n        Arrays.fill(newChars,\
    \ chars.length - 25, chars.length - 26, ' \n                                 \
    \                                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(c);\n            } else {\n           \
    \     sb.append(Character.toLowerCase(c));\n            }\n        }\n       \
    \ for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n  \
    \          if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n  \
    \              sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbo_q899.java:50)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        int index = s2.indexOf(ch);\n\
    \                        String s2 = s2.substring(index + 1);\n              \
    \          String s2 = s2.toLowerCase();\n                        String s2 =\
    \ s2.replaceAll(\"aeiou\", \"a\");\n                        sb.append(s2.charAt(0));\n\
    \                    }\n                }\n            } else {\n            \
    \    sb.append(c);\n            }\n        }\n        return sb.toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpl6_x1c83.java:31: error: variable s2 is already defined in method\
    \ encode(String)\n                        String s2 = s2.substring(index + 1);\n\
    \                               ^\n/tmp/tmpl6_x1c83.java:32: error: variable s2\
    \ is already defined in method encode(String)\n                        String\
    \ s2 = s2.toLowerCase();\n                               ^\n/tmp/tmpl6_x1c83.java:33:\
    \ error: variable s2 is already defined in method encode(String)\n           \
    \             String s2 = s2.replaceAll(\"aeiou\", \"a\");\n                 \
    \              ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, '\\0');\n        Arrays.fill(newChars,\
    \ 0, chars.length - 1, '\\0');\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \        Arrays.fill(newChars, 0, chars.length - 1, vowels[chars.length - 1]);\n\
    \        Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n     \
    \   Arrays.fill(newChars, chars.length - 1, chars.length - 2, vowels[chars.length\
    \ - 2]);\n        Arrays.fill(newChars, chars.length - 2, chars.length - 3, vowels[chars.length\
    \ - 3]);\n        Arrays.fill(newChars, chars.length - 3, chars.length - 4, vowels[chars.length\
    \ - 4]);\n        Arrays.fill(newChars, chars.length - 4, chars.length - 5, vowels[chars.length\
    \ - 5]);\n        Arrays.fill(newChars, chars.length - 5, chars.length - 6, vowels[chars.length\
    \ - 6]);\n        Arrays.fill(newChars, chars.length - 6, chars.length - 7, vowels[chars.length\
    \ - 7]);\n        Arrays.fill(newChars, chars.length - 7, chars.length - 8, vowels[chars.length\
    \ - 8]);\n        Arrays.fill(newChars, chars.length - 8, chars.length - 9, vowels[chars.length\
    \ - 9]);\n        Arrays.fill(newChars, chars.length - 9, chars.length - 10, vowels[chars.length\
    \ - 10]);\n        Arrays.fill(newChars, chars.length - 10, chars.length - 11,\
    \ vowels[chars.length - 11]);\n        Arrays.fill(newChars, chars.length - 11,\
    \ chars.length - 12, vowels[chars.length - 12]);\n        Arrays.fill(newChars,\
    \ chars.length - 12, chars.length - 13, vowels[chars.length - 13]);\n        Arrays.fill(newChars,\
    \ chars.length - 13, chars.length - 14, vowels[chars.length - 14]);\n        Arrays.fill(newChars,\
    \ chars.length - 14, chars.length - 15, vowels[chars.length - 15]);\n        Arrays.fill(newChars,\
    \ chars.length - 15, chars.length - 16, vowels[chars.length - 16]);\n        Arrays.fill(newChars,\
    \ chars.length - 16, chars.length - 17, vowels[chars.length - 17]);\n        Arrays.fill(newChars,\
    \ chars.length - 17, chars.length - 18, vowels[chars.length - 18]);\n        Arrays.fill(newChars,\
    \ chars.length - 18, chars.length - 19, vowels[chars.length - 19]);\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt517m2m7.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \             sb.append(Character.toLowerCase(message.charAt(i + 1)));\n     \
    \       }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 4\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.encode(tmptvrewaf9.java:29)\n\
    \tat Problem.main(tmptvrewaf9.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[i\
    \ - 1]));\n            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n                sb.append(Character.toUpperCase(chars[i - 1]));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptq3v7522.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            int index = c - 'a';\n            int nextIndex =\
    \ index + 1;\n            char nextChar = chars[nextIndex];\n            if(c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                sb.append(nextChar);\n\
    \                continue;\n            }\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                \n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_nc1icbv.java:78: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        Arrays.stream(vowels).forEach(v\
    \ -> {\n            int index = Arrays.binarySearch(vowels, v);\n            if\
    \ (index >= 0) {\n                sb.append(vowels[index]);\n            }\n \
    \       });\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpypir3yky.java:33: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(vowels).forEach(v -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String s = Character.toString(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        for (int k = 0; k < s2.length();\
    \ k++) {\n                            char ch2 = s2.charAt(k);\n             \
    \               if (Character.isLetter(ch2)) {\n                             \
    \   String s3 = Character.toString(ch2);\n                                for\
    \ (int l = 0; l < s3.length(); l++) {\n                                    char\
    \ ch3 = s3.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        for (int m = 0; m < s4.length(); m++)\
    \ {\n                                            char ch4 = s4.charAt(m);\n  \
    \                                          if (Character.isLetter(ch4)) {\n  \
    \                                              String s5 = Character.toString(ch4);\n\
    \                                                for (int n = 0; n < s5.length();\
    \ n++) {\n                                                    char ch5 = s5.charAt(n);\n\
    \                                                    if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toString(ch6);\n                \
    \                                                for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toString(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toString(ch8);\n                              \
    \                                                  for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   for (int s\
    \ = 0; s < s10.length(); s++) {\n                                            \
    \                                                char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toString(ch10);\n                                              \
    \                                                  for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n               \
    \                                                                            \
    \         if (Charact\n    }\n    public static void main(String[] args) {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzzryntc.java:69: error: ')' expected\n                       \
    \                                                                            \
    \ if (Charact\n                                                              \
    \                                                 ^\n/tmp/tmpfzzryntc.java:70:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpfzzryntc.java:71: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\nprinting javac parameters to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151755.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toUpperCase(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toUpperCase(ch);\n                        for (int k = 0; k <\
    \ s2.length(); k++) {\n                            char ch2 = s2.charAt(k);\n\
    \                            if (Character.isLetter(ch2)) {\n                \
    \                String s3 = Character.toUpperCase(ch2);\n                   \
    \             for (int l = 0; l < s3.length(); l++) {\n                      \
    \              char ch3 = s3.charAt(l);\n                                    if\
    \ (Character.isLetter(ch3)) {\n                                        String\
    \ s4 = Character.toUpperCase(ch3);\n                                        for\
    \ (int m = 0; m < s4.length(); m++) {\n                                      \
    \      char ch4 = s4.charAt(m);\n                                            if\
    \ (Character.isLetter(ch4)) {\n                                              \
    \  String s5 = Character.toUpperCase(ch4);\n                                 \
    \               for (int n = 0; n < s5.length(); n++) {\n                    \
    \                                char ch5 = s5.charAt(n);\n                  \
    \                                  if (Character.isLetter(ch5)) {\n          \
    \                                              String s6 = Character.toUpperCase(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toUpperCase(ch6);\n             \
    \                                                   for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toUpperCase(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toUpperCase(ch8);\n                           \
    \                                                     for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toUpperCase(ch9);\n                  \
    \                                                                      for (int\
    \ s = 0; s < s10.length(); s++) {\n                                          \
    \                                                  char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toUpperCase(ch10);\n                                           \
    \                                                     for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0mm9expw.java:69: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151755.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toUpperCase(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toUpperCase(ch);\n                        for (int k = 0; k <\
    \ s2.length(); k++) {\n                            char ch2 = s2.charAt(k);\n\
    \                            if (Character.isLetter(ch2)) {\n                \
    \                String s3 = Character.toUpperCase(ch2);\n                   \
    \             for (int l = 0; l < s3.length(); l++) {\n                      \
    \              char ch3 = s3.charAt(l);\n                                    if\
    \ (Character.isLetter(ch3)) {\n                                        String\
    \ s4 = Character.toUpperCase(ch3);\n                                        for\
    \ (int m = 0; m < s4.length(); m++) {\n                                      \
    \      char ch4 = s4.charAt(m);\n                                            if\
    \ (Character.isLetter(ch4)) {\n                                              \
    \  String s5 = Character.toUpperCase(ch4);\n                                 \
    \               for (int n = 0; n < s5.length(); n++) {\n                    \
    \                                char ch5 = s5.charAt(n);\n                  \
    \                                  if (Character.isLetter(ch5)) {\n          \
    \                                              String s6 = Character.toUpperCase(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toUpperCase(ch6);\n             \
    \                                                   for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toUpperCase(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toUpperCase(ch8);\n                           \
    \                                                     for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toUpperCase(ch9);\n                  \
    \                                                                      for (int\
    \ s = 0; s < s10.length(); s++) {\n                                          \
    \                                                  char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toUpperCase(ch10);\n                                           \
    \                                                     for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps8xmit76.java:69: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151755.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        for (int\
    \ i = 0; i < vowels.length; i++) {\n            char c = vowels[i];\n        \
    \    int index = sb.indexOf(c);\n            if (index != -1) {\n            \
    \    int nextIndex = index + 1;\n                if (nextIndex < sb.length())\
    \ {\n                    sb.setCharAt(index, sb.charAt(nextIndex));\n        \
    \        }\n            }\n        }\n        return sb.toString();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpccspbpgo.java:35: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(c);\n                        \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkkrfk59.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Arrays.binarySearch(vowels,\
    \ c);\n            if(index >= 0) {\n                sb.append(vowels[index]);\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp26llc1fq.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(Character.toLowerCase(c)));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvd_ezfs.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[i\
    \ - 1]));\n            }\n            else {\n                sb.append(Character.toLowerCase(chars[i\
    \ - 1]));\n            }\n        }\n        return sb.toString();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 4\n\tat Problem.encode(tmpm7n62dqa.java:37)\n\
    \tat Problem.main(tmpm7n62dqa.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = new char[]{'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n     \
    \   StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length;\
    \ i++) {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                sb2.append(sb.charAt(index));\n\
    \                sb2.append(sb.charAt(index + 2));\n            } else {\n   \
    \             sb2.append(c);\n            }\n        }\n        return sb.toString()\
    \ + sb2.toString();\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7572w3uo.java:36: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(c);\n                        \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                newChars[i] = c;\n            }\n\
    \            else {\n                char nextC = chars[i+1];\n              \
    \  if(nextC == 'a' || nextC == 'e' || nextC == 'i' || nextC == 'o' || nextC ==\
    \ 'u') {\n                    newChars[i] = nextC;\n                }\n      \
    \          else {\n                    newChars[i] = Character.toUpperCase(c);\n\
    \                }\n            }\n        }\n        return new String(newChars);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpfdl1ijvz.java:28)\n\
    \tat Problem.main(tmpfdl1ijvz.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhw7k32k.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              sb.append(Character.toUpperCase(c));\n            } else {\n  \
    \              sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowelsV2 = {'A', 'E', 'I', 'O',\
    \ 'U'};\n        char[] vowelsV3 = {'a', 'e', 'i', 'o', 'u'};\n        char[]\
    \ vowelsV4 = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowelsV5 = {'a', 'e',\
    \ 'i', 'o', 'u'};\n        char[] vowelsV6 = {'A', 'E', 'I', 'O', 'U'};\n    \
    \    char[] vowelsV7 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowelsV8 = {'A',\
    \ 'E', 'I', 'O', 'U'};\n        char[] vowelsV9 = {'a', 'e', 'i', 'o', 'u'};\n\
    \        char[] vowelsV10 = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowelsV11\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowelsV12 = {'A', 'E', 'I', 'O',\
    \ 'U'};\n        char[] vowelsV13 = {'a', 'e', 'i', 'o', 'u'};\n        char[]\
    \ vowelsV14 = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowelsV15 = {'a', 'e',\
    \ 'i', 'o', 'u'};\n        char[] vowelsV16 = {'A', 'E', 'I', 'O', 'U'};\n   \
    \     char[] vowelsV17 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowelsV18\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowelsV19 = {'a', 'e', 'i', 'o',\
    \ 'u'};\n        char[] vowelsV20 = {'A', 'E', 'I', 'O', 'U'};\n        char[]\
    \ vowelsV21 = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowelsV22 = {'A', 'E',\
    \ 'I', 'O', 'U'};\n        char[] vowelsV23 = {'a', 'e', 'i', 'o', 'u'};\n   \
    \     char[] vowelsV24 = {'A', 'E', 'I', 'O', 'U'};\n        char[] vowelsV25\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowelsV26 = {'A', 'E', 'I', 'O',\
    \ 'U'\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmptrf7c4tq.java:56: error: ';' expected\n    }\n     ^\n/tmp/tmptrf7c4tq.java:57:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            } else if(c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpksbo19ev.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < chars.length; i++) {\n            char c =\
    \ chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                sb.append(Character.toUpperCase(chars[++i]));\n \
    \           } else {\n                sb.append(Character.toLowerCase(c));\n \
    \           }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpogyl75th.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(message.charAt(i));\n            }\n            else\
    \ {\n                sb.append(Character.toUpperCase(c));\n            }\n   \
    \     }\n        for(int i = 0; i < message.length(); i++) {\n            char\
    \ c = message.charAt(i);\n            if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                sb.append(message.charAt(i));\n     \
    \       }\n            else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfqh1oww6.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8u7q1yc.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            char newChar = Character.toUpperCase(c);\n\
    \            int index = c - 'A';\n            char newChar2 = Character.toUpperCase(chars[index\
    \ + 2]);\n            newChars[i] = newChar;\n            newChars[i + 2] = newChar2;\n\
    \        }\n        return new String(newChars);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 21 out of bounds for length 4\n\tat Problem.encode(tmpk5o_hgyf.java:26)\n\
    \tat Problem.main(tmpk5o_hgyf.java:34)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2b0rvmc3.java:37)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            }\n            else {\n               \
    \ sb.append(c);\n            }\n        }\n        return sb.toString();\n\n \
    \   }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6r09o29l.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              char nextLetter = Character.toUpperCase(chars[i + 1]);\n      \
    \          if (nextLetter == 'A' || nextLetter == 'E' || nextLetter == 'I' ||\
    \ nextLetter == 'O' || nextLetter == 'U') {\n                    newChars[i] =\
    \ nextLetter;\n                } else {\n                    newChars[i] = Character.toLowerCase(c);\n\
    \                }\n            } else {\n                newChars[i] = c;\n \
    \           }\n        }\n        return new String(newChars);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpxb19m4h6.java:25)\n\
    \tat Problem.main(tmpxb19m4h6.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                continue;\n\
    \            }\n            int index = c - 'a';\n            int index2 = index\
    \ - 2;\n            char letter = chars[index2];\n            char letter2 = chars[index2\
    \ + 1];\n            char letter3 = chars[index2 + 2];\n            char letter4\
    \ = chars[index2 + 3];\n            char letter5 = chars[index2 + 4];\n      \
    \      char letter6 = chars[index2 + 5];\n            char letter7 = chars[index2\
    \ + 6];\n            char letter8 = chars[index2 + 7];\n            char letter9\
    \ = chars[index2 + 8];\n            char letter10 = chars[index2 + 9];\n     \
    \       char letter11 = chars[index2 + 10];\n            char letter12 = chars[index2\
    \ + 11];\n            char letter13 = chars[index2 + 12];\n            char letter14\
    \ = chars[index2 + 13];\n            char letter15 = chars[index2 + 14];\n   \
    \         char letter16 = chars[index2 + 15];\n            char letter17 = chars[index2\
    \ + 16];\n            char letter18 = chars[index2 + 17];\n            char letter19\
    \ = chars[index2 + 18];\n            char letter20 = chars[index2 + 19];\n   \
    \         char letter21 = chars[index2 + 20];\n            char letter22 = chars[index2\
    \ + 21];\n            char letter23 = chars[index2 + 22];\n            char letter24\
    \ = chars[index2 + 23];\n            char letter25 = chars[index2 + 24];\n   \
    \         char letter26 = chars[index2 + 25];\n            char letter27 = chars[index2\
    \ + 26];\n            char letter28 = chars[index2 + 27];\n            char letter29\
    \ = chars[index2 + 28];\n            char letter30 = chars[index2 + 29];\n   \
    \         char letter31 = chars[index2 + 30];\n            char letter32 = chars[index2\
    \ + 31];\n            char letter33 = chars[index2 + 32];\n            char letter34\
    \ = chars[index2 + 33];\n            char letter35 = chars[index2 + 34];\n   \
    \         char letter36 = chars[index2 + 35];\n            char letter37 = chars[index2\
    \ + 36];\n            char letter38 = chars[index2 + 37];\n            char letter39\
    \ = chars[index2 + 38];\n            char letter40 = chars[index2 + 39];\n   \
    \         char letter41 = \n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfk_lfn37.java:71: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfk_lfn37.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n    \
    \        else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4yry6eu.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[++i]));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptkvrak0f.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n                sb.append(c);\n            }\n            if(c == 'a'\
    \ || c == 'A') {\n                sb.append(c);\n            }\n            if(c\
    \ == 'e' || c == 'E') {\n                sb.append(c);\n            }\n      \
    \      if(c == 'i' || c == 'I') {\n                sb.append(c);\n           \
    \ }\n            if(c == 'o' || c == 'O') {\n                sb.append(c);\n \
    \           }\n            if(c == 'u' || c == 'U') {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf5f1zxe4.java:51)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxd1fw2df.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String s = Character.toString(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isUpperCase(ch)) {\n                      \
    \  sb.append(Character.toLowerCase(ch));\n                    } else if (Character.isLowerCase(ch))\
    \ {\n                        sb.append(Character.toUpperCase(ch));\n         \
    \           }\n                }\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj20dcygp.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toLowerCase(c));\n   \
    \         }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq05v5f4e.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ ++i) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else if(c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                sb.append(c);\n            } else if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n       \
    \     } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else if(c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                sb.append(c);\n            } else if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n       \
    \     } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else if(c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \                sb.append(c);\n            } else if(c == 'a' || c == 'e' ||\
    \ c\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp480y6hrg.java:43: error: ')' expected\n            } else if(c\
    \ == 'a' || c == 'e' || c\n                                               ^\n\
    /tmp/tmp480y6hrg.java:44: error: illegal start of statement\n    }\n    ^\n/tmp/tmp480y6hrg.java:45:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            }\n            else {\n          \
    \      sb.append(Character.toUpperCase(c));\n            }\n        }\n      \
    \  for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            }\n            else {\n          \
    \      sb.append(Character.toLowerCase(c));\n            }\n        }\n      \
    \  for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                sb.append(c);\n            }\n            else {\n          \
    \      sb.append(Character.toUpperCase(c));\n            }\n        }\n      \
    \  return sb.toString();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp68px0y5g.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[i\
    \ - 1]));\n            }\n            else {\n                sb.append(Character.toLowerCase(chars[i\
    \ - 1]));\n            }\n        }\n        return sb.toString();\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 4\n\tat Problem.encode(tmp_rqnvi_9.java:37)\n\
    \tat Problem.main(tmp_rqnvi_9.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n                sb.append(chars[(i+1)%chars.length]);\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \                sb.append(Character.toLowerCase(chars[(i+1)%chars.length]));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkomdi9mw.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] letters = { 'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n        Arrays.sort(vowels);\n        Arrays.sort(letters);\n      \
    \  StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (vowels.contains(c))\
    \ {\n                sb.append(letters[vowels.indexOf(c)]);\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpjqmddwub.java:28: error: cannot find symbol\n            if (vowels.contains(c))\
    \ {\n                      ^\n  symbol:   method contains(char)\n  location: variable\
    \ vowels of type char[]\n/tmp/tmpjqmddwub.java:29: error: cannot find symbol\n\
    \                sb.append(letters[vowels.indexOf(c)]);\n                    \
    \                    ^\n  symbol:   method indexOf(char)\n  location: variable\
    \ vowels of type char[]\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else if(c >= 'A' && c <= 'Z') {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n            else if(c >= 'a' && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujpskl2b.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl87fqovi.java:47)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[i\
    \ - 1]));\n            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n                sb.append(Character.toUpperCase(chars[i - 1]));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxit_nlcj.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhfmq3qb.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(c));\n \
    \           }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpke9ywilj.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              sb2.append(Character.toUpperCase(c));\n            } else if (vowels.contains(c))\
    \ {\n                int index = vowels.indexOf(c);\n                sb2.append(vowels.get(index\
    \ + 1));\n            } else {\n                sb2.append(c);\n            }\n\
    \        }\n        return sb.toString() + sb2.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkklg0xp4.java:38: error: cannot find symbol\n            } else\
    \ if (vowels.contains(c)) {\n                             ^\n  symbol:   method\
    \ contains(char)\n  location: variable vowels of type char[]\n/tmp/tmpkklg0xp4.java:39:\
    \ error: cannot find symbol\n                int index = vowels.indexOf(c);\n\
    \                                  ^\n  symbol:   method indexOf(char)\n  location:\
    \ variable vowels of type char[]\n/tmp/tmpkklg0xp4.java:40: error: cannot find\
    \ symbol\n                sb2.append(vowels.get(index + 1));\n               \
    \                  ^\n  symbol:   method get(int)\n  location: variable vowels\
    \ of type char[]\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        for (int k = 0; k < s2.length();\
    \ k++) {\n                            char ch2 = s2.charAt(k);\n             \
    \               if (Character.isLetter(ch2)) {\n                             \
    \   String s3 = Character.toString(ch2);\n                                for\
    \ (int l = 0; l < s3.length(); l++) {\n                                    char\
    \ ch3 = s3.charAt(l);\n                                    if (Character.isLetter(ch3))\
    \ {\n                                        String s4 = Character.toString(ch3);\n\
    \                                        for (int m = 0; m < s4.length(); m++)\
    \ {\n                                            char ch4 = s4.charAt(m);\n  \
    \                                          if (Character.isLetter(ch4)) {\n  \
    \                                              String s5 = Character.toString(ch4);\n\
    \                                                for (int n = 0; n < s5.length();\
    \ n++) {\n                                                    char ch5 = s5.charAt(n);\n\
    \                                                    if (Character.isLetter(ch5))\
    \ {\n                                                        String s6 = Character.toString(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toString(ch6);\n                \
    \                                                for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toString(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toString(ch8);\n                              \
    \                                                  for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toString(ch9);\n                     \
    \                                                                   for (int s\
    \ = 0; s < s10.length(); s++) {\n                                            \
    \                                                char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toString(ch10);\n                                              \
    \                                                  for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n               \
    \                                                                            \
    \         if (Character.isLetter(ch11\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphqs6xt3l.java:68: error: ')' expected\n                       \
    \                                                                            \
    \ if (Character.isLetter(ch11\n                                              \
    \                                                                            \
    \     ^\n/tmp/tmphqs6xt3l.java:69: error: illegal start of statement\n    }\n\
    \    ^\n/tmp/tmphqs6xt3l.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151759.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            } else if(c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2cknyp8k.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                String s = Character.toString(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toString(ch);\n                        int index = s2.indexOf(ch);\n\
    \                        if (index != -1) {\n                            int index2\
    \ = s2.indexOf(\"A\");\n                            if (index2 != -1) {\n    \
    \                            String s3 = s2.substring(0, index2);\n          \
    \                      String s4 = s2.substring(index2 + 1);\n               \
    \                 sb.append(s3.toUpperCase());\n                             \
    \   sb.append(s4);\n                            } else {\n                   \
    \             String s3 = s2.substring(0, index);\n                          \
    \      String s4 = s2.substring(index + 1);\n                                sb.append(s3.toUpperCase());\n\
    \                                sb.append(s4);\n                            }\n\
    \                        } else {\n                            sb.append(ch);\n\
    \                        }\n                    } else {\n                   \
    \     sb.append(ch);\n                    }\n                }\n            }\
    \ else {\n                sb.append(c);\n            }\n        }\n        return\
    \ sb.toString();\n\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z_sm32r.java:60)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \             sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcbocuaac.java:36)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < vowels.length; i++)\
    \ {\n            char c = vowels[i];\n            int index = sb.indexOf(c);\n\
    \            if (index != -1) {\n                int count = 1;\n            \
    \    for (int j = index + 1; j < sb.length(); j++) {\n                    if (sb.charAt(j)\
    \ == c) {\n                        count++;\n                    }\n         \
    \       }\n                if (count == 2) {\n                    sb2.append(c);\n\
    \                }\n            }\n        }\n        return sb.toString().concat(sb2.toString());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqqyktcu.java:36: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(c);\n                        \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        Arrays.stream(vowels).forEach(v\
    \ -> {\n            int index = sb.indexOf(v);\n            if (index != -1) {\n\
    \                sb.setCharAt(index, sb.charAt(index) + v);\n            }\n \
    \       });\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfmotru1g.java:33: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(vowels).forEach(v -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            } else if(c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n                sb.append(Character.toUpperCase(chars[(i\
    \ + 2) % chars.length]));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmponll8_zs.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isUpperCase(ch)) {\n                        sb.append(Character.toLowerCase(ch));\n\
    \                    } else if (Character.isLowerCase(ch)) {\n               \
    \         sb.append(Character.toUpperCase(ch));\n                    } else {\n\
    \                        sb.append(ch);\n                    }\n             \
    \   }\n            } else {\n                sb.append(c);\n            }\n  \
    \      }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvau6w0r.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toUpperCase(c));\n   \
    \         }\n        }\n        for(int i = 0; i < chars.length; i++) {\n    \
    \        char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[++i]));\n\
    \            }\n            else {\n                sb.append(Character.toLowerCase(chars[++i]));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2msawtt7.java:44)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            char newChar = c;\n            if(c\
    \ == 'a') {\n                newChar = 'A';\n            } else if(c == 'e') {\n\
    \                newChar = 'E';\n            } else if(c == 'i') {\n         \
    \       newChar = 'I';\n            } else if(c == 'o') {\n                newChar\
    \ = 'O';\n            } else if(c == 'u') {\n                newChar = 'U';\n\
    \            }\n            newChars[i] = newChar;\n        }\n        return\
    \ new String(newChars);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpel47eiya.java:42)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toUpperCase(c);\n                for (int\
    \ j = 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n\
    \                    if (Character.isLetter(ch)) {\n                        String\
    \ s2 = Character.toUpperCase(ch);\n                        for (int k = 0; k <\
    \ s2.length(); k++) {\n                            char ch2 = s2.charAt(k);\n\
    \                            if (Character.isLetter(ch2)) {\n                \
    \                String s3 = Character.toUpperCase(ch2);\n                   \
    \             for (int l = 0; l < s3.length(); l++) {\n                      \
    \              char ch3 = s3.charAt(l);\n                                    if\
    \ (Character.isLetter(ch3)) {\n                                        String\
    \ s4 = Character.toUpperCase(ch3);\n                                        for\
    \ (int m = 0; m < s4.length(); m++) {\n                                      \
    \      char ch4 = s4.charAt(m);\n                                            if\
    \ (Character.isLetter(ch4)) {\n                                              \
    \  String s5 = Character.toUpperCase(ch4);\n                                 \
    \               for (int n = 0; n < s5.length(); n++) {\n                    \
    \                                char ch5 = s5.charAt(n);\n                  \
    \                                  if (Character.isLetter(ch5)) {\n          \
    \                                              String s6 = Character.toUpperCase(ch5);\n\
    \                                                        for (int o = 0; o < s6.length();\
    \ o++) {\n                                                            char ch6\
    \ = s6.charAt(o);\n                                                          \
    \  if (Character.isLetter(ch6)) {\n                                          \
    \                      String s7 = Character.toUpperCase(ch6);\n             \
    \                                                   for (int p = 0; p < s7.length();\
    \ p++) {\n                                                                   \
    \ char ch7 = s7.charAt(p);\n                                                 \
    \                   if (Character.isLetter(ch7)) {\n                         \
    \                                               String s8 = Character.toUpperCase(ch7);\n\
    \                                                                        for (int\
    \ q = 0; q < s8.length(); q++) {\n                                           \
    \                                 char ch8 = s8.charAt(q);\n                 \
    \                                                           if (Character.isLetter(ch8))\
    \ {\n                                                                        \
    \        String s9 = Character.toUpperCase(ch8);\n                           \
    \                                                     for (int r = 0; r < s9.length();\
    \ r++) {\n                                                                   \
    \                 char ch9 = s9.charAt(r);\n                                 \
    \                                                   if (Character.isLetter(ch9))\
    \ {\n                                                                        \
    \                String s10 = Character.toUpperCase(ch9);\n                  \
    \                                                                      for (int\
    \ s = 0; s < s10.length(); s++) {\n                                          \
    \                                                  char ch10 = s10.charAt(s);\n\
    \                                                                            \
    \                if (Character.isLetter(ch10)) {\n                           \
    \                                                                     String s11\
    \ = Character.toUpperCase(ch10);\n                                           \
    \                                                     for (int t = 0; t < s11.length();\
    \ t++) {\n                                                                   \
    \                                 char ch11 = s11.charAt(t);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8kkm_hho.java:69: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\nprinting javac parameters\
    \ to: /home/ubuntu/repos/polyglot-codegen-evaluation-java/src/javac.20220730_151801.args\n"
  exit_code: 4
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfgdqy41t.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                newChars[i] = c;\n            }\n\
    \            else {\n                char nextChar = chars[i+1];\n           \
    \     if(nextChar == 'a' || nextChar == 'e' || nextChar == 'i' || nextChar ==\
    \ 'o' || nextChar == 'u') {\n                    newChars[i] = nextChar;\n   \
    \             }\n                else {\n                    newChars[i] = Character.toUpperCase(c);\n\
    \                }\n            }\n        }\n        return new String(newChars);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.encode(tmpf4ptr95h.java:28)\n\
    \tat Problem.main(tmpf4ptr95h.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else {\n                sb.append(Character.toUpperCase(c));\n    \
    \        }\n        }\n        for(int i = 0; i < chars.length; i++) {\n     \
    \       char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_jcvfcj.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            char newChar = Character.toUpperCase(c);\n\
    \            char newChar2 = Character.toLowerCase(c);\n            char newChar3\
    \ = Character.toUpperCase(newChar2);\n            char newChar4 = Character.toLowerCase(newChar2);\n\
    \            char newChar5 = Character.toUpperCase(newChar3);\n            char\
    \ newChar6 = Character.toLowerCase(newChar3);\n            char newChar7 = Character.toUpperCase(newChar4);\n\
    \            char newChar8 = Character.toLowerCase(newChar4);\n            char\
    \ newChar9 = Character.toUpperCase(newChar5);\n            char newChar10 = Character.toLowerCase(newChar5);\n\
    \            char newChar11 = Character.toUpperCase(newChar6);\n            char\
    \ newChar12 = Character.toLowerCase(newChar6);\n            char newChar13 = Character.toUpperCase(newChar7);\n\
    \            char newChar14 = Character.toLowerCase(newChar7);\n            char\
    \ newChar15 = Character.toUpperCase(newChar8);\n            char newChar16 = Character.toLowerCase(newChar8);\n\
    \            char newChar17 = Character.toUpperCase(newChar9);\n            char\
    \ newChar18 = Character.toLowerCase(newChar9);\n            char newChar19 = Character.toUpperCase(newChar10);\n\
    \            char newChar20 = Character.toLowerCase(newChar10);\n            char\
    \ newChar21 = Character.toUpperCase(newChar11);\n            char newChar22 =\
    \ Character.toLowerCase(newChar11);\n            char newChar23 = Character.toUpperCase(newChar12);\n\
    \            char newChar24 = Character.toLowerCase(newChar12);\n            char\
    \ newChar25 = Character.toUpperCase(newChar13);\n            char newChar26 =\
    \ Character.toLowerCase(newChar13);\n            char newChar27 = Character.toUpperCase(newChar14);\n\
    \            char newChar28 = Character.toLowerCase(newChar14);\n            char\
    \ newChar29 = Character.toUpperCase(newChar15);\n            char newChar30 =\
    \ Character.toLowerCase(newChar15);\n            char newChar31 = Character.toUpperCase(newChar16);\n\
    \            char newChar32 = Character.toLowerCase(newChar16);\n            char\
    \ newChar33 = Character.toUpperCase(newChar17);\n            char newChar34 =\
    \ Character.toLowerCase(newChar17);\n            char newChar35 = Character.toUpperCase(newChar18);\n\
    \            char newChar36 = Character.toLowerCase(newChar18);\n            char\
    \ newChar37\n    }\n    public static void main(String[] args) {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp87yjntxu.java:60: error: ';' expected\n            char newChar37\n\
    \                          ^\n/tmp/tmp87yjntxu.java:62: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \            continue;\n            }\n            int index = c - 'a';\n    \
    \        int index2 = index - 2;\n            char replacement = chars[index2];\n\
    \            sb.append(replacement);\n        }\n        return sb.toString();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -30 out of bounds for length 4\n\tat Problem.encode(tmpjv9bn23b.java:31)\n\
    \tat Problem.main(tmpjv9bn23b.java:38)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(c);\n            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pilx0tn.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(c));\n \
    \               sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qv1h69u.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              String s = Character.toString(c);\n                for (int j =\
    \ 0; j < s.length(); j++) {\n                    char ch = s.charAt(j);\n    \
    \                if (Character.isUpperCase(ch)) {\n                        ch\
    \ = Character.toLowerCase(ch);\n                    }\n                    sb.append(ch);\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8tz8oud.java:41)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        }\n            else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            }\n \
    \           else {\n                sb.append(Character.toLowerCase(c));\n   \
    \         }\n        }\n        return sb.toString();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n\
    \    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplv3ljgxu.java:45)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        for (int\
    \ i = 0; i < vowels.length; i++) {\n            char c = vowels[i];\n        \
    \    int index = sb.indexOf(c);\n            if (index != -1) {\n            \
    \    int count = 1;\n                for (int j = index + 1; j < sb.length();\
    \ j++) {\n                    if (sb.charAt(j) == c) {\n                     \
    \   count++;\n                    }\n                }\n                if (count\
    \ == 2) {\n                    sb.insert(index, Character.toUpperCase(c));\n \
    \               }\n            }\n        }\n        return sb.toString();\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzox9dhj.java:35: error: incompatible types: char cannot be converted\
    \ to String\n            int index = sb.indexOf(c);\n                        \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                sb.append(c);\n    \
    \        } else {\n                sb.append(Character.toUpperCase(c));\n    \
    \        }\n        }\n        for(int i = 0; i < chars.length; i++) {\n     \
    \       char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n                sb.append(c);\n            } else {\n\
    \                sb.append(Character.toLowerCase(c));\n            }\n       \
    \ }\n        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ys_wezi.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if('A' <= c && c <= 'Z') {\n    \
    \            sb.append(Character.toUpperCase(c));\n            } else if('a' <=\
    \ c && c <= 'z') {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else if('0' <= c && c <= '9') {\n                sb.append(c);\n \
    \           } else {\n                sb.append(Character.toUpperCase(c));\n \
    \               sb.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return sb.toString();\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpymw396.java:39)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        char[] vowels2\
    \ = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels2);\n        char[]\
    \ vowels3 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels3);\n      \
    \  char[] vowels4 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels4);\n\
    \        char[] vowels5 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels5);\n\
    \        char[] vowels6 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels6);\n\
    \        char[] vowels7 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels7);\n\
    \        char[] vowels8 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels8);\n\
    \        char[] vowels9 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels9);\n\
    \        char[] vowels10 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels10);\n\
    \        char[] vowels11 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels11);\n\
    \        char[] vowels12 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels12);\n\
    \        char[] vowels13 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels13);\n\
    \        char[] vowels14 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels14);\n\
    \        char[] vowels15 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels15);\n\
    \        char[] vowels16 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels16);\n\
    \        char[] vowels17 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels17);\n\
    \        char[] vowels18 = {'A', 'E', 'I', 'O', 'U'};\n        Arrays.sort(vowels18);\n\
    \        char[] vowels19 = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels19\n\
    \    }\n    public static void main(String[] args) {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  stdout: ''
  stderr: "/tmp/tmp8c_6rokg.java:68: error: ')' expected\n        Arrays.sort(vowels19\n\
    \                            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, '\\0');\n        Arrays.fill(newChars,\
    \ 0, chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1,\
    \ chars.length, '\\0');\n        Arrays.fill(newChars, chars.length - 2, chars.length\
    \ - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1, chars.length,\
    \ '\\0');\n        Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\\
    0');\n        Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n\
    \        Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\0');\n \
    \       Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n      \
    \  Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\0');\n       \
    \ Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n        Arrays.fill(newChars,\
    \ chars.length - 2, chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length\
    \ - 1, chars.length, '\\0');\n        Arrays.fill(newChars, chars.length - 2,\
    \ chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1, chars.length,\
    \ '\\0');\n        Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\\
    0');\n        Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n\
    \        Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\0');\n \
    \       Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n      \
    \  Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\0');\n       \
    \ Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n        Arrays.fill(newChars,\
    \ chars.length - 2, chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length\
    \ - 1, chars.length, '\\0');\n        Arrays.fill(newChars, chars.length - 2,\
    \ chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1, chars.length,\
    \ '\\0');\n        Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\\
    0');\n        Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n\
    \        Arrays.fill(newChars, chars.length - 2, chars.length - 1, '\\0');\n \
    \       Arrays.fill(newChars, chars.length\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpepx33yyw.java:50: error: ')' expected\n        Arrays.fill(newChars,\
    \ chars.length\n                                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            int index = Character.toLowerCase(c)\
    \ - 'a';\n            if(index >= 0 && index < 26) {\n                newChars[i]\
    \ = 'a' + index;\n            } else {\n                newChars[i] = c;\n   \
    \         }\n        }\n        return new String(newChars);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_w8ov6di.java:26: error: incompatible types: possible lossy conversion\
    \ from int to char\n                newChars[i] = 'a' + index;\n             \
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              newChars[i] = Character.toUpperCase(c);\n            } else {\n\
    \                newChars[i] = c;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = newChars[i];\n            if (Character.isLetter(c)) {\n\
    \                sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjijbumq.java:43)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        char[] newChars\
    \ = new char[chars.length];\n        Arrays.fill(newChars, '\\0');\n        Arrays.fill(newChars,\
    \ 0, chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1,\
    \ chars.length, '\\0');\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \        Arrays.fill(newChars, 0, chars.length - 1, vowels);\n        Arrays.fill(newChars,\
    \ chars.length - 1, chars.length, vowels);\n        Arrays.fill(newChars, 0, chars.length\
    \ - 1, vowels);\n        Arrays.fill(newChars, chars.length - 1, chars.length,\
    \ vowels);\n        Arrays.fill(newChars, 0, chars.length - 1, '\\0');\n     \
    \   Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n        Arrays.fill(newChars,\
    \ 0, chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1,\
    \ chars.length, '\\0');\n        Arrays.fill(newChars, 0, chars.length - 1, '\\\
    0');\n        Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n\
    \        Arrays.fill(newChars, 0, chars.length - 1, '\\0');\n        Arrays.fill(newChars,\
    \ chars.length - 1, chars.length, '\\0');\n        Arrays.fill(newChars, 0, chars.length\
    \ - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1, chars.length,\
    \ '\\0');\n        Arrays.fill(newChars, 0, chars.length - 1, '\\0');\n      \
    \  Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n        Arrays.fill(newChars,\
    \ 0, chars.length - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1,\
    \ chars.length, '\\0');\n        Arrays.fill(newChars, 0, chars.length - 1, '\\\
    0');\n        Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n\
    \        Arrays.fill(newChars, 0, chars.length - 1, '\\0');\n        Arrays.fill(newChars,\
    \ chars.length - 1, chars.length, '\\0');\n        Arrays.fill(newChars, 0, chars.length\
    \ - 1, '\\0');\n        Arrays.fill(newChars, chars.length - 1, chars.length,\
    \ '\\0');\n        Arrays.fill(newChars, 0, chars.length - 1, '\\0');\n      \
    \  Arrays.fill(newChars, chars.length - 1, chars.length, '\\0');\n        Arrays.fill(newChars,\
    \ 0, chars.length - 1, '\\0');\n        Array\n    }\n    public static void main(String[]\
    \ args) {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp05h_oena.java:53: error: not a statement\n        Array\n     \
    \   ^\n/tmp/tmp05h_oena.java:53: error: ';' expected\n        Array\n        \
    \     ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that takes a message, and encodes in\
    \ such a \n    // way that it swaps case of all letters, replaces all vowels in\
    \ \n    // the message with the letter that appears 2 places ahead of that \n\
    \    // vowel in the english alphabet. \n    // Assume only letters. \n    //\
    \ Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This\
    \ is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String\
    \ message) {\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(c);\n            } else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     sb.append(c);\n            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        for(int i = 0; i < chars.length; i++) {\n \
    \           char c = chars[i];\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                sb.append(Character.toUpperCase(chars[++i]));\n\
    \            } else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n                sb.append(Character.toUpperCase(chars[++i]));\n         \
    \   } else {\n                sb.append(c);\n            }\n        }\n      \
    \  return sb.toString();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppervp8ck.java:46)\n"
  exit_code: 1
  status: Exception
