name: HumanEval_14_all_prefixes
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkohnhe70.java:50: error: <identifier> expected\n        prefixes.addAll(Arrays.\n\
    \                               ^\n/tmp/tmpkohnhe70.java:51: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpkohnhe70.java:52: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpkohnhe70.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpkohnhe70.java:52: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpkohnhe70.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkohnhe70.java:58: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx304f8pw.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd9nh_ej7.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpikav8qtm.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvzgnrp_a.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfm48ufio.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjfmit9nv.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa2yoi3n3.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl9uu8li_.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpue6esm88.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.addAll(allPrefixes(string.substring(1)));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1931)\n\
    \tat Problem.allPrefixes(tmpk26r512k.java:15)\n\tat Problem.main(tmpk26r512k.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpba60w43l.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRec(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdkkgc5u0.java:14: error: cannot find symbol\n        allPrefixesRec(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfkpd_unv.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppo5e9p5q.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5criljqu.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.sort(Comparator.comparing(s -> s.length()));\n      \
    \  return prefixes;\n\n    }\n    public static void main(String[] args) {\n \
    \   assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5myx_lyq.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgxxp2g8e.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcu9aae75.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpytjbnze7.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmpk05vwst1.java:15)\n\tat Problem.main(tmpk05vwst1.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesHelper(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdnifd81.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.addAll(allPrefixes(string.substring(1)));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1931)\n\
    \tat Problem.allPrefixes(tmprnhmzcpk.java:15)\n\tat Problem.main(tmprnhmzcpk.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> currentPrefixes\
    \ = new ArrayList<String>();\n        prefixes.add(\"\");\n        currentPrefixes.add(\"\
    \");\n        for(int i = 0; i < string.length(); i++) {\n            String prefix\
    \ = currentPrefixes.get(i);\n            String suffix = string.substring(i, string.length());\n\
    \            prefixes.add(prefix + suffix);\n            currentPrefixes.add(prefix\
    \ + suffix);\n        }\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnw7uvk_e.java:27)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpue5szln5.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa_8myt1m.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(string);\n        prefix.add(string);\n\
    \        prefix.add(string);\n        prefix.add(\n    }\n    public static void\
    \ main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo5wpt9bi.java:98: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpo5wpt9bi.java:98: error: ';' expected\n    }\n     ^\n/tmp/tmpo5wpt9bi.java:99:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpo5wpt9bi.java:99: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpo5wpt9bi.java:99: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpo5wpt9bi.java:99: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpo5wpt9bi.java:105: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxt5evgeo.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwzd3b1jl.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1zh9_fqm.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp1xnlln1.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_mtpoi4.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpds56g9ts.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8yy6mqv.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdyfcp044.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9exv1qlo.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmp0w4a7zio.java:16)\n\tat Problem.main(tmp0w4a7zio.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbnzafeas.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesHelper(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dj1zy_a.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphyxddg2c.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        ArrayList<String> prefix = new ArrayList<>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n        prefix.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwa29ud3r.java:61: error: <identifier> expected\n        prefix.\n\
    \               ^\n/tmp/tmpwa29ud3r.java:61: error: not a statement\n        prefix.\n\
    \              ^\n/tmp/tmpwa29ud3r.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpwa29ud3r.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpwa29ud3r.java:63: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpwa29ud3r.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpwa29ud3r.java:63: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpwa29ud3r.java:69: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpilhuowyk.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmp5q5_4atn.java:16)\n\tat Problem.main(tmp5q5_4atn.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhf6tans.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9qldzw0z.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc4hndq8z.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm7q9frqx.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes2 = new\
    \ ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes2.add(\"\"\
    );\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\
    \");\n        prefixes2.add(\"\");\n        prefixes2.add(\"\");\n        prefix\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf9ublrs2.java:85: error: not a statement\n        prefix\n    \
    \    ^\n/tmp/tmpf9ublrs2.java:85: error: ';' expected\n        prefix\n      \
    \        ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd260glrw.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph66i8qzk.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpec40bj6f.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa45h70vf.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0zdcej93.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0rh4vuj1.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmpporx0mev.java:16)\n\tat Problem.main(tmpporx0mev.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf7u5nxz1.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp71pxgyi8.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(allPrefixes(string,\
    \ 0));\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpye3s7m8f.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(string, 0));\n\
    \                        ^\n  required: String\n  found: String,int\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt4tg_r2f.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        ArrayList<String> prefix = new ArrayList<>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n        prefix.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoww0zror.java:61: error: <identifier> expected\n        prefix.\n\
    \               ^\n/tmp/tmpoww0zror.java:61: error: not a statement\n        prefix.\n\
    \              ^\n/tmp/tmpoww0zror.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpoww0zror.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpoww0zror.java:63: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpoww0zror.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpoww0zror.java:63: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpoww0zror.java:69: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnjxb7z_7.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.addAll(allPrefixes(string.substring(0,\
    \ string.length() - 1)));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmpvofmszqa.java:15)\n\tat Problem.main(tmpvofmszqa.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvmx_j758.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgowcyjj.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpolnbadc5.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0shk4x3.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp26290isz.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeev6601q.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv6nm2rwb.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmppldc_76_.java:15)\n\tat Problem.main(tmppldc_76_.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> prefix = new ArrayList<String>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptuqw86sg.java:62: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjw4l_dvb.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewhhzdqq.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvnk891r_.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdi5mgmmw.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1e76niq2.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpichs3ble.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_iyhrogj.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdntyur2.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcnkqn4la.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp55zp_1xb.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpquda9eya.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpodif1ikc.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0qukxvpx.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkli_lvcc.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqeacjuii.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc5nbah7h.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp92qx58rz.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegk85cgp.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7pj1n5sy.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgaus_85o.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36vohwqv.java:57: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp36vohwqv.java:57: error: ')' expected\n    }\n     ^\n/tmp/tmp36vohwqv.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp36vohwqv.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp36vohwqv.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp36vohwqv.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp36vohwqv.java:64: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25jk805h.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpub__7ysy.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4j8bzqfq.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp60v2nevn.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0,\
    \ i));\n        }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzbhwn98.java:22)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6s6fdotl.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes2 = new\
    \ ArrayList<String>();\n        ArrayList<String> prefixes3 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<String>();\n        ArrayList<String> prefixes6 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes7 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes8 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes9 = new ArrayList<String>();\n        ArrayList<String> prefixes10 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes11 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes12 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes13 = new ArrayList<String>();\n        ArrayList<String> prefixes14\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes15 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes16 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes17 = new ArrayList<String>();\n        ArrayList<String> prefixes18\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes19 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes20 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes21 = new ArrayList<String>();\n        ArrayList<String> prefixes22\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes23 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes24 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes25 = new ArrayList<String>();\n        ArrayList<String> prefixes26\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes27 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes28 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes29 = new ArrayList<String>();\n        ArrayList<String> prefixes30\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes31 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes32 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes33 = new ArrayList<String>();\n        ArrayList<String> prefixes34\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes35 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes36 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes37 = new ArrayList<String>();\n        ArrayList<String> prefixes38\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes39 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes40 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes41 = new ArrayList<String>();\n        ArrayList<String> prefixes42\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes43 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes44 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes45 = new ArrayList<String>();\n        ArrayList<String> prefixes46\
    \ = new ArrayList<String>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqg0dgsn.java:60: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(1)).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1931)\n\
    \tat Problem.lambda$allPrefixes$0(tmphhrk46r0.java:16)\n\tat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n\
    \tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)\n\
    \tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\n\t\
    at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\n\
    \tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\n\
    \tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\t\
    at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\n\t\
    at Problem.allPrefixes(tmphhrk46r0.java:16)\n\tat Problem.main(tmphhrk46r0.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp679drave.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8snr3t3.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplvvq808p.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd0txsb_1.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjn29qutf.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgmw8rbkf.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2reszkrh.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        ArrayList<String> prefix = new ArrayList<>();\n\
    \        prefix.add(\"\");\n        prefix.add(string);\n        prefix.add(string.substring(0,\
    \ string.length() - 1));\n        prefix.add(string.substring(0, string.length()\
    \ - 2));\n        prefix.add(string.substring(0, string.length() - 3));\n    \
    \    prefix.add(string.substring(0, string.length() - 4));\n        prefix.add(string.substring(0,\
    \ string.length() - 5));\n        prefix.add(string.substring(0, string.length()\
    \ - 6));\n        prefix.add(string.substring(0, string.length() - 7));\n    \
    \    prefix.add(string.substring(0, string.length() - 8));\n        prefix.add(string.substring(0,\
    \ string.length() - 9));\n        prefix.add(string.substring(0, string.length()\
    \ - 10));\n        prefix.add(string.substring(0, string.length() - 11));\n  \
    \      prefix.add(string.substring(0, string.length() - 12));\n        prefix.add(string.substring(0,\
    \ string.length() - 13));\n        prefix.add(string.substring(0, string.length()\
    \ - 14));\n        prefix.add(string.substring(0, string.length() - 15));\n  \
    \      prefix.add(string.substring(0, string.length() - 16));\n        prefix.add(string.substring(0,\
    \ string.length() - 17));\n        prefix.add(string.substring(0, string.length()\
    \ - 18));\n        prefix.add(string.substring(0, string.length() - 19));\n  \
    \      prefix.add(string.substring(0, string.length() - 20));\n        prefix.add(string.substring(0,\
    \ string.length() - 21));\n        prefix.add(string.substring(0, string.length()\
    \ - 22));\n        prefix.add(string.substring(0, string.length() - 23));\n  \
    \      prefix.add(string.substring(0, string.length() - 24));\n        prefix.add(string.substring(0,\
    \ string.length() - 25));\n        prefix.add(string.substring(0, string.length()\
    \ - 26));\n        prefix.add(string.substring(0, string.length() - 27));\n  \
    \      prefix.add(string.substring(0, string.length() - 28));\n        prefix.add(string.substring(0,\
    \ string.length() - 29));\n        prefix.add(string.substring(0, string.length()\
    \ - 30));\n        prefix.add(string.substring(0, string.length() - 31));\n  \
    \      prefix.add(string.substring(0, string.length() - 32));\n        prefix.add(string.substring(0,\
    \ string.length() - 33));\n        prefix.add(string.substring(0, string.length()\
    \ - 34));\n        prefix.add(string.substring(0, string.length() - 35));\n  \
    \      prefix.add(string.substring(0, string.length() - 36));\n        prefix.add(string.substring(0,\
    \ string.length() - 37));\n        prefix.add(string.substring(0, string.length()\
    \ - 38));\n        prefix.add(string.substring(0, string.length() - 39));\n  \
    \      prefix.add(string.substring(0, string.length() - 40));\n        prefix.add(string.substring(0,\
    \ string.length() - 41));\n        prefix.add(string.substring(0, string.length()\
    \ - 42));\n        prefix.add(string.substring(0, string.length() - 43));\n  \
    \      prefix.add(string.substring(0, string.length() - 44));\n        prefix.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsusw20yg.java:61: error: <identifier> expected\n        prefix.\n\
    \               ^\n/tmp/tmpsusw20yg.java:61: error: not a statement\n        prefix.\n\
    \              ^\n/tmp/tmpsusw20yg.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpsusw20yg.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpsusw20yg.java:63: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpsusw20yg.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpsusw20yg.java:63: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpsusw20yg.java:69: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvv1cxlon.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n        prefixes.add(string.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpus35o4lj.java:56: error: <identifier> expected\n        prefixes.add(string.\n\
    \                            ^\n/tmp/tmpus35o4lj.java:57: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpus35o4lj.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpus35o4lj.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpus35o4lj.java:58: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpus35o4lj.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpus35o4lj.java:64: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp99y7fmi3.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmp8k0plym0.java:16)\n\tat Problem.main(tmp8k0plym0.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_4h1_gjc.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpic_hodjp.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(allPrefixes(\"\
    \", string));\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm5nypf1r.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(\"\", string));\n\
    \                        ^\n  required: String\n  found: String,String\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvjwyqddj.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbo8pd15d.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8gyzqh5m.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.asList(string.split(\"\")));\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(Arrays.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoie9j2fb.java:50: error: <identifier> expected\n        prefixes.addAll(Arrays.\n\
    \                               ^\n/tmp/tmpoie9j2fb.java:51: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpoie9j2fb.java:52: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpoie9j2fb.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpoie9j2fb.java:52: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpoie9j2fb.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpoie9j2fb.java:58: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(string, \"\")) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmm76op3_.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(string,\
    \ \"\")) {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnawl9vhw.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4d1vey6.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(1)).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1931)\n\
    \tat Problem.lambda$allPrefixes$0(tmpiy_2jzbc.java:16)\n\tat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n\
    \tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)\n\
    \tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\n\t\
    at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\n\
    \tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\n\
    \tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\t\
    at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\n\t\
    at Problem.allPrefixes(tmpiy_2jzbc.java:16)\n\tat Problem.main(tmpiy_2jzbc.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptolm77tt.java:57: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmptolm77tt.java:57: error: ')' expected\n    }\n     ^\n/tmp/tmptolm77tt.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmptolm77tt.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmptolm77tt.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmptolm77tt.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmptolm77tt.java:64: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoapqk09d.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe71qxu1i.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n        prefixes.add(string.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8_4udk7.java:56: error: <identifier> expected\n        prefixes.add(string.\n\
    \                            ^\n/tmp/tmpk8_4udk7.java:57: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmpk8_4udk7.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpk8_4udk7.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpk8_4udk7.java:58: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpk8_4udk7.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk8_4udk7.java:64: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(0, s.length())).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpelja9t48.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnjx396_4.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptz13we8k.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy1set0tf.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmpnl6pmvl_.java:16)\n\tat Problem.main(tmpnl6pmvl_.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpycp6_t55.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_j7kuao5.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp_z4j0r3.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihdyuzsa.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfgxiyhlu.java:57: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfgxiyhlu.java:57: error: ')' expected\n    }\n     ^\n/tmp/tmpfgxiyhlu.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpfgxiyhlu.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpfgxiyhlu.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpfgxiyhlu.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpfgxiyhlu.java:64: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpacyj65c0.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_ag8eal.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0b0d6d6z.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n        prefixes.add(string.\n\
    \    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2h_ij_f0.java:56: error: <identifier> expected\n        prefixes.add(string.\n\
    \                            ^\n/tmp/tmp2h_ij_f0.java:57: error: ';' expected\n\
    \    }\n     ^\n/tmp/tmp2h_ij_f0.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmp2h_ij_f0.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmp2h_ij_f0.java:58: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmp2h_ij_f0.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2h_ij_f0.java:64: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0r4twcyy.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppsk85te0.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjf0bumy.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(string);\n       \
    \ prefixes.add(string.substring(0, string.length() - 1));\n        return prefixes;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmpe2hsu984.java:15)\n\tat Problem.main(tmpe2hsu984.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm4rknr52.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuvm0f_rv.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppglxutte.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzuk5h_54.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_y7o50iz.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rxothzt.java:57: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8rxothzt.java:57: error: ')' expected\n    }\n     ^\n/tmp/tmp8rxothzt.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp8rxothzt.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp8rxothzt.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp8rxothzt.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp8rxothzt.java:64: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRec(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxy4qzg4t.java:14: error: cannot find symbol\n        allPrefixesRec(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxd05gnym.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt0bdyfuy.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixesHelper(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc8bvwdg4.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", prefixes);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvkq8wx0k.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbi3_sg91.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkmrajdjs.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzm95b35v.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmp8cpza7r8.java:16)\n\tat Problem.main(tmp8cpza7r8.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0h7v5xsn.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqkxxlq84.java:57: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpast3yawi.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyqz8d2i2.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnzcmtspk.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx8ueborc.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        allPrefixes(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_h1oc_1n.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmpic5q6i7u.java:15)\n\tat Problem.main(tmpic5q6i7u.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi4u165o5.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnjjpqaam.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp243_x5rt.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRec(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp764fcr5q.java:14: error: cannot find symbol\n        allPrefixesRec(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRec(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj68q6ice.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7mhos7_m.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4qybfr0b.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxw37c1q.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpknl0at_j.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes2 = new\
    \ ArrayList<String>();\n        ArrayList<String> prefixes3 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes4 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes5 = new ArrayList<String>();\n        ArrayList<String> prefixes6 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes7 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes8 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes9 = new ArrayList<String>();\n        ArrayList<String> prefixes10 =\
    \ new ArrayList<String>();\n        ArrayList<String> prefixes11 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes12 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes13 = new ArrayList<String>();\n        ArrayList<String> prefixes14\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes15 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes16 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes17 = new ArrayList<String>();\n        ArrayList<String> prefixes18\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes19 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes20 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes21 = new ArrayList<String>();\n        ArrayList<String> prefixes22\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes23 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes24 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes25 = new ArrayList<String>();\n        ArrayList<String> prefixes26\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes27 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes28 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes29 = new ArrayList<String>();\n        ArrayList<String> prefixes30\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes31 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes32 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes33 = new ArrayList<String>();\n        ArrayList<String> prefixes34\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes35 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes36 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes37 = new ArrayList<String>();\n        ArrayList<String> prefixes38\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes39 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes40 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes41 = new ArrayList<String>();\n        ArrayList<String> prefixes42\
    \ = new ArrayList<String>();\n        ArrayList<String> prefixes43 = new ArrayList<String>();\n\
    \        ArrayList<String> prefixes44 = new ArrayList<String>();\n        ArrayList<String>\
    \ prefixes45 = new ArrayList<String>();\n        ArrayList<String> prefixes46\
    \ = new ArrayList<String>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl48miylh.java:60: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp312vdxjv.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        prefixes.add(string.substring(0, string.length()\
    \ - 2));\n        prefixes.add(string.substring(0, string.length() - 3));\n  \
    \      prefixes.add(string.substring(0, string.length() - 4));\n        prefixes.add(string.substring(0,\
    \ string.length() - 5));\n        prefixes.add(string.substring(0, string.length()\
    \ - 6));\n        prefixes.add(string.substring(0, string.length() - 7));\n  \
    \      prefixes.add(string.substring(0, string.length() - 8));\n        prefixes.add(string.substring(0,\
    \ string.length() - 9));\n        prefixes.add(string.substring(0, string.length()\
    \ - 10));\n        prefixes.add(string.substring(0, string.length() - 11));\n\
    \        prefixes.add(string.substring(0, string.length() - 12));\n        prefixes.add(string.substring(0,\
    \ string.length() - 13));\n        prefixes.add(string.substring(0, string.length()\
    \ - 14));\n        prefixes.add(string.substring(0, string.length() - 15));\n\
    \        prefixes.add(string.substring(0, string.length() - 16));\n        prefixes.add(string.substring(0,\
    \ string.length() - 17));\n        prefixes.add(string.substring(0, string.length()\
    \ - 18));\n        prefixes.add(string.substring(0, string.length() - 19));\n\
    \        prefixes.add(string.substring(0, string.length() - 20));\n        prefixes.add(string.substring(0,\
    \ string.length() - 21));\n        prefixes.add(string.substring(0, string.length()\
    \ - 22));\n        prefixes.add(string.substring(0, string.length() - 23));\n\
    \        prefixes.add(string.substring(0, string.length() - 24));\n        prefixes.add(string.substring(0,\
    \ string.length() - 25));\n        prefixes.add(string.substring(0, string.length()\
    \ - 26));\n        prefixes.add(string.substring(0, string.length() - 27));\n\
    \        prefixes.add(string.substring(0, string.length() - 28));\n        prefixes.add(string.substring(0,\
    \ string.length() - 29));\n        prefixes.add(string.substring(0, string.length()\
    \ - 30));\n        prefixes.add(string.substring(0, string.length() - 31));\n\
    \        prefixes.add(string.substring(0, string.length() - 32));\n        prefixes.add(string.substring(0,\
    \ string.length() - 33));\n        prefixes.add(string.substring(0, string.length()\
    \ - 34));\n        prefixes.add(string.substring(0, string.length() - 35));\n\
    \        prefixes.add(string.substring(0, string.length() - 36));\n        prefixes.add(string.substring(0,\
    \ string.length() - 37));\n        prefixes.add(string.substring(0, string.length()\
    \ - 38));\n        prefixes.add(string.substring(0, string.length() - 39));\n\
    \        prefixes.add(string.substring(0, string.length() - 40));\n        prefixes.add(string.substring(0,\
    \ string.length() - 41));\n        prefixes.add(string.substring(0, \n    }\n\
    \    public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4j_e597y.java:57: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4j_e597y.java:57: error: ')' expected\n    }\n     ^\n/tmp/tmp4j_e597y.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp4j_e597y.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp4j_e597y.java:58:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp4j_e597y.java:58: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp4j_e597y.java:64: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpijlupgrm.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5rsh91nz.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string.split(\"\
    \")));\n        prefixes.addAll(prefixes.stream().map(s -> s.substring(0, s.length())).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ca1b7he.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixesHelper(string, \"\", result);\n\
    \        return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwyu7a6rf.java:14: error: cannot find symbol\n        allPrefixesHelper(string,\
    \ \"\", result);\n        ^\n  symbol:   method allPrefixesHelper(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(allPrefixes(\"\
    \", string));\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9oym5ovj.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        prefixes.addAll(allPrefixes(\"\", string));\n\
    \                        ^\n  required: String\n  found: String,String\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(string);\n        prefixes.add(string.substring(0,\
    \ string.length() - 1));\n        return prefixes;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmpmau_68f0.java:15)\n\tat Problem.main(tmpmau_68f0.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixesRecursive(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpde4v5w3o.java:14: error: cannot find symbol\n        allPrefixesRecursive(string,\
    \ \"\", prefixes);\n        ^\n  symbol:   method allPrefixesRecursive(String,String,ArrayList<String>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        return\
    \ prefixes;\n\n    }\n    public static void main(String[] args) {\n    assert(allPrefixes((\"\
    \")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"\
    asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\
    as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\"\
    )))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.allPrefixes(tmptxn5haym.java:16)\n\tat Problem.main(tmptxn5haym.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5o026a2j.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpci3xjdam.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn0dxspxh.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.addAll(Arrays.asList(string));\n\
    \        prefixes.addAll(prefixes.stream().map(s -> s.substring(0, s.length()-1)).collect(Collectors.toList()));\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.lang.String.substring(String.java:1967)\n\
    \tat Problem.lambda$allPrefixes$0(tmp5wm7yq8w.java:16)\n\tat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n\
    \tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)\n\
    \tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\n\t\
    at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\n\
    \tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\n\
    \tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\t\
    at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\n\t\
    at Problem.allPrefixes(tmp5wm7yq8w.java:16)\n\tat Problem.main(tmp5wm7yq8w.java:21)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphro0wdoq.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkskqjsag.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppgyacvqm.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        allPrefixes(string, \"\", prefixes);\n\
    \        return prefixes;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpra58qpbu.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", prefixes);\n \
    \       ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnugspgrr.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        prefixes.add(string);\n\
    \        prefixes.add(string.substring(0, string.length() - 1));\n        prefixes.add(string.substring(0,\
    \ string.length() - 2));\n        prefixes.add(string.substring(0, string.length()\
    \ - 3));\n        prefixes.add(string.substring(0, string.length() - 4));\n  \
    \      prefixes.add(string.substring(0, string.length() - 5));\n        prefixes.add(string.substring(0,\
    \ string.length() - 6));\n        prefixes.add(string.substring(0, string.length()\
    \ - 7));\n        prefixes.add(string.substring(0, string.length() - 8));\n  \
    \      prefixes.add(string.substring(0, string.length() - 9));\n        prefixes.add(string.substring(0,\
    \ string.length() - 10));\n        prefixes.add(string.substring(0, string.length()\
    \ - 11));\n        prefixes.add(string.substring(0, string.length() - 12));\n\
    \        prefixes.add(string.substring(0, string.length() - 13));\n        prefixes.add(string.substring(0,\
    \ string.length() - 14));\n        prefixes.add(string.substring(0, string.length()\
    \ - 15));\n        prefixes.add(string.substring(0, string.length() - 16));\n\
    \        prefixes.add(string.substring(0, string.length() - 17));\n        prefixes.add(string.substring(0,\
    \ string.length() - 18));\n        prefixes.add(string.substring(0, string.length()\
    \ - 19));\n        prefixes.add(string.substring(0, string.length() - 20));\n\
    \        prefixes.add(string.substring(0, string.length() - 21));\n        prefixes.add(string.substring(0,\
    \ string.length() - 22));\n        prefixes.add(string.substring(0, string.length()\
    \ - 23));\n        prefixes.add(string.substring(0, string.length() - 24));\n\
    \        prefixes.add(string.substring(0, string.length() - 25));\n        prefixes.add(string.substring(0,\
    \ string.length() - 26));\n        prefixes.add(string.substring(0, string.length()\
    \ - 27));\n        prefixes.add(string.substring(0, string.length() - 28));\n\
    \        prefixes.add(string.substring(0, string.length() - 29));\n        prefixes.add(string.substring(0,\
    \ string.length() - 30));\n        prefixes.add(string.substring(0, string.length()\
    \ - 31));\n        prefixes.add(string.substring(0, string.length() - 32));\n\
    \        prefixes.add(string.substring(0, string.length() - 33));\n        prefixes.add(string.substring(0,\
    \ string.length() - 34));\n        prefixes.add(string.substring(0, string.length()\
    \ - 35));\n        prefixes.add(string.substring(0, string.length() - 36));\n\
    \        prefixes.add(string.substring(0, string.length() - 37));\n        prefixes.add(string.substring(0,\
    \ string.length() - 38));\n        prefixes.add(string.substring(0, string.length()\
    \ - 39));\n        prefixes.add(string.substring(0, string.length() - 40));\n\
    \        prefixes.add(string.substring(0, string.length() - 41));\n\n    }\n \
    \   public static void main(String[] args) {\n    assert(allPrefixes((\"\")).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    assert(allPrefixes((\"asdfgh\")).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"a\", (String)\"as\", (String)\"asd\"\
    , (String)\"asdf\", (String)\"asdfg\", (String)\"asdfgh\")))));\n    assert(allPrefixes((\"\
    WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"W\", (String)\"\
    WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp47vp95j7.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ prefixes = new ArrayList<>();\n        prefixes.add(\"\");\n        for (String\
    \ prefix : allPrefixes(\"\", string)) {\n            prefixes.add(prefix);\n \
    \       }\n        return prefixes;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ex7ijzq.java:15: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        for (String prefix : allPrefixes(\"\", string))\
    \ {\n                             ^\n  required: String\n  found: String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of all prefixes from shortest to longest of\
    \ the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n\
    \    public static ArrayList<String> allPrefixes(String string) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        allPrefixes(string, \"\", result);\n  \
    \      return result;\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(allPrefixes((\"\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(allPrefixes((\"asdfgh\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    a\", (String)\"as\", (String)\"asd\", (String)\"asdf\", (String)\"asdfg\", (String)\"\
    asdfgh\")))));\n    assert(allPrefixes((\"WWW\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    W\", (String)\"WW\", (String)\"WWW\")))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuj43w_u1.java:14: error: method allPrefixes in class Problem cannot\
    \ be applied to given types;\n        allPrefixes(string, \"\", result);\n   \
    \     ^\n  required: String\n  found: String,String,ArrayList<String>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
