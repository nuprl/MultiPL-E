name: HumanEval_141_file_name_check
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"\
  1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
  \    public static String fileNameCheck(String file_name) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        // Your code here\n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        ", "        // Your code here\n\
    \        \n        String pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\";\n        \n\
    \        if(file_name.matches(pattern)){\n            if(file_name.indexOf('.')\
    \ != -1){\n                if(file_name.substring(0, 1).isEmpty()){\n        \
    \            return \"No\";\n                }\n                else{\n      \
    \              if(file_name.substring(file_name.indexOf('.'), file_name.indexOf('.')\
    \ + 3).equals(\"txt\") || file_name.substring(file_name.indexOf('.'), file_name.indexOf('.')\
    \ + 3).equals(\"exe\") || file_name.substring(file_name.indexOf('.'), file_name.indexOf('.')\
    \ + 3).equals(\"dll\")){\n                        return \"Yes\";\n          \
    \          }\n                    else{\n                        return \"No\"\
    ;\n                    }\n                }\n            }\n            else{\n\
    \                return \"No\";\n            }\n        }\n        else{\n   \
    \         return \"No\";\n        }\n", "        boolean valid = false;\n    \
    \    \n        int dotIndex = file_name.indexOf(\".\");\n        \n        if\
    \ (dotIndex == -1) {\n            valid = true;\n        }\n        else {\n \
    \           String fileName = file_name.substring(0, dotIndex);\n            \n\
    \            valid = fileName.matches(\"^[a-zA-Z]+$\");\n            \n      \
    \      if (!valid) {\n                valid = fileName.matches(\"^[0-9]{3}$\"\
    );\n            }\n            \n            if (!valid) {\n                valid\
    \ = fileName.matches(\"^[a-zA-Z]+\\\\.[a-zA-Z]+$\");\n            }\n        }\n\
    \        \n        if (valid) {\n            String fileExtension = file_name.substring(dotIndex\
    \ + 1);\n            \n            if (fileExtension.equals(\"txt\") || fileExtension.equals(\"\
    exe\") || fileExtension.equals(\"dll\")) {\n                return \"Yes\";\n\
    \            }\n            else {\n                return \"No\";\n         \
    \   }\n        }\n        else {\n            return \"No\";\n        }\n", " \
    \       boolean valid = false;\n        if (file_name.length() > 3) {\n      \
    \      valid = true;\n        }\n        if (file_name.indexOf('.') != -1) {\n\
    \            valid = true;\n        }\n        if (file_name.substring(0, 1).isEmpty())\
    \ {\n            valid = false;\n        }\n        if (file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"exe\") || file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    dll\")) {\n            valid = true;\n        }\n        return valid ? \"Yes\"\
    \ : \"No\";\n", "        boolean valid = false;\n        String[] file_name_parts\
    \ = file_name.split(\"\\\\.\");\n        if (file_name_parts.length != 3) {\n\
    \            valid = false;\n        } else {\n            valid = true;\n   \
    \         String first_part = file_name_parts[0];\n            String last_part\
    \ = file_name_parts[1];\n            if (first_part.isEmpty() || first_part.charAt(0)\
    \ != 'a' || first_part.charAt(0) != 'A') {\n                valid = false;\n \
    \           } else {\n                valid = true;\n            }\n         \
    \   if (last_part.isEmpty() || last_part.charAt(0) != 'a' || last_part.charAt(0)\
    \ != 'A') {\n                valid = false;\n            } else {\n          \
    \      valid = true;\n            }\n        }\n        if (valid) {\n       \
    \     valid = file_name_parts[2].equals(\"txt\") || file_name_parts[2].equals(\"\
    exe\") || file_name_parts[2].equals(\"dll\");\n        }\n        if (valid) {\n\
    \            return file_name;\n        } else {\n            return \"No\";\n\
    \        }\n", "        // Your code here\n        \n        \n        return\
    \ file_name;\n", "        // Your code here\n        \n        // return 'Yes'\
    \ if all conditions are met\n        if (file_name.length() > 3 && file_name.contains(\"\
    .\") && file_name.substring(0, 1).matches(\"[a-zA-Z]\") && file_name.substring(file_name.indexOf(\"\
    .\") + 1).matches(\"[txt|exe|dll]\"))\n            return \"Yes\";\n        else\n\
    \            return \"No\";\n", "        boolean valid = false;\n        \n  \
    \      // Validate file name\n        valid = file_name.matches(\"^[0-9]{3}\\\\\
    .[a-zA-Z]+$\");\n        \n        // Validate file extension\n        valid =\
    \ valid && file_name.substring(file_name.lastIndexOf(\".\") + 1).equals(\"txt\"\
    ) || \n                file_name.substring(file_name.lastIndexOf(\".\") + 1).equals(\"\
    exe\") || \n                file_name.substring(file_name.lastIndexOf(\".\") +\
    \ 1).equals(\"dll\");\n        \n        // Validate file name\n        valid\
    \ = valid && file_name.substring(0, 1).matches(\"[a-zA-Z]\");\n        \n    \
    \    // Validate file name\n        valid = valid && file_name.substring(1).matches(\"\
    ^[a-zA-Z]+$\");\n        \n        // Validate file name\n        valid = valid\
    \ && file_name.substring(1).length() == 3;\n        \n        // Validate file\
    \ name\n        valid = valid && file_name.substring(1).indexOf('.') != -1;\n\
    \        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'a';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'z';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'A';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'Z';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).length()\
    \ == 1;\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == '0';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == '9';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).length()\
    \ == 3;\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).indexOf('.')\
    \ != -1;\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'a';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'z';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'A';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == 'Z';\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).length()\
    \ == 1;\n        \n        // Validate file name\n        valid = valid && file_name.substring(1).charAt(0)\
    \ == '0';\n        \n        // Validate file name\n", "        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n", "        boolean valid = false;\n        int count = 0;\n      \
    \  while(!valid && count < 3) {\n            valid = file_name.matches(\"^[0-9]{3}\\\
    \\.[a-z][a-z]+$\");\n            if(!valid) {\n                System.out.println(\"\
    Invalid file name\");\n            }\n            count++;\n        }\n      \
    \  if(!valid) {\n            System.out.println(\"Invalid file name\");\n    \
    \    }\n        return valid;\n", "        boolean isValid = false;\n        if\
    \ (file_name.length() > 3) {\n            isValid = false;\n        } else {\n\
    \            isValid = true;\n        }\n        if (file_name.contains(\".\"\
    )) {\n            isValid = false;\n        } else {\n            isValid = true;\n\
    \        }\n        if (file_name.substring(0, 1).isEmpty()) {\n            isValid\
    \ = false;\n        } else {\n            isValid = true;\n        }\n       \
    \ if (file_name.substring(file_name.length() - 1, file_name.length()).equals(\"\
    exe\") || file_name.substring(file_name.length() - 1, file_name.length()).equals(\"\
    dll\")) {\n            isValid = true;\n        } else {\n            isValid\
    \ = false;\n        }\n        if (isValid) {\n            return \"Yes\";\n \
    \       } else {\n            return \"No\";\n        }\n", "        // Your code\
    \ here\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "        // Your code here\n        \n        \n        return\
    \ file_name;\n", "        boolean valid = false;\n        int dotIndex = file_name.indexOf(\"\
    .\");\n        if (dotIndex != -1) {\n            String fileName = file_name.substring(0,\
    \ dotIndex);\n            valid = fileName.matches(\"^[a-zA-Z][a-zA-Z0-9]*$\"\
    );\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n     \
    \       valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid\
    \ = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid\
    \ && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"\
    ^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\"\
    );\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n     \
    \       valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid\
    \ = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid\
    \ && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"\
    ^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\"\
    );\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n     \
    \       valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid\
    \ = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid\
    \ && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"\
    ^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\"\
    );\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n     \
    \       valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid\
    \ = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid\
    \ && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"\
    ^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\"\
    );\n            valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n     \
    \       valid = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid\
    \ = valid && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid\
    \ && fileName.matches(\"^[a-zA-Z0-9]*$\");\n            valid = valid && fileName.matches(\"\
    ^[a-zA-Z0-9]*$\");\n            valid", "        boolean valid = false;\n    \
    \    int count = 0;\n        for(int i = 0; i < file_name.length(); i++) {\n \
    \           if(file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9') {\n \
    \               count++;\n            }\n        }\n        if(count > 3) {\n\
    \            valid = false;\n        }\n        else {\n            valid = true;\n\
    \            for(int i = 0; i < file_name.length(); i++) {\n                if(file_name.charAt(i)\
    \ == '.') {\n                    if(file_name.substring(i-1, i).isEmpty()) {\n\
    \                        valid = false;\n                    }\n             \
    \       else {\n                        if(file_name.substring(i-1, i).charAt(0)\
    \ >= 'a' && file_name.substring(i-1, i).charAt(0) <= 'z') {\n                \
    \            if(file_name.substring(i+1, i).equals(\"txt\") || file_name.substring(i+1,\
    \ i).equals(\"exe\") || file_name.substring(i+1, i).equals(\"dll\")) {\n     \
    \                           valid = true;\n                            }\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n        if(valid) {\n            return \"Yes\";\n        }\n\
    \        else {\n            return \"No\";\n        }\n", "        if (file_name.length()\
    \ > 3 || file_name.indexOf('.') < 1 || file_name.substring(0, 1).isEmpty() ||\
    \ file_name.substring(file_name.indexOf('.') + 1).matches(\"^[a-zA-Z]\"))\n  \
    \          return \"No\";\n        else\n            return \"Yes\";\n", "   \
    \     // Your code here\n        \n        \n        \n        return file_name;\n",
  "        // Your code here\n        \n        \n        return file_name;\n", " \
    \       boolean valid = false;\n        \n        // Your code here\n        \n\
    \        return valid ? \"Yes\" : \"No\";\n", "        String file_extension =\
    \ file_name.substring(file_name.lastIndexOf('.'));\n        if (file_extension.equals(\"\
    txt\") || file_extension.equals(\"exe\") || file_extension.equals(\"dll\")) {\n\
    \            return \"Yes\";\n        } else {\n            return \"No\";\n \
    \       }\n", "        boolean valid = false;\n        String[] file_name = file_name.split(\"\
    \\\\.\");\n        if (file_name.length != 3) {\n            valid = false;\n\
    \        } else {\n            valid = true;\n            String first_letter\
    \ = file_name[0].substring(0, 1);\n            if (first_letter < 'a' || first_letter\
    \ > 'z') {\n                valid = false;\n            } else {\n           \
    \     valid = true;\n                String extension = file_name[1];\n      \
    \          String extension_array = extension.split(\"\\\\.\");\n            \
    \    if (extension_array.length != 2) {\n                    valid = false;\n\
    \                } else {\n                    valid = true;\n               \
    \     String extension_array_2 = extension_array[1];\n                    if (extension_array_2.equals(\"\
    txt\") || extension_array_2.equals(\"exe\") || extension_array_2.equals(\"dll\"\
    )) {\n                        valid = true;\n                    }\n         \
    \       }\n            }\n        }\n        if (valid) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n", "    \
    \    \n        // Your code here\n        \n        return file_name;\n", "  \
    \      boolean valid = false;\n        int count = 0;\n        char firstChar\
    \ = file_name.charAt(0);\n        char lastChar = file_name.charAt(file_name.length()\
    \ - 1);\n        char dotChar = file_name.charAt(file_name.length() - 2);\n  \
    \      if (file_name.length() > 3 && firstChar >= 'a' && firstChar <= 'z' && lastChar\
    \ >= 'a' && lastChar <= 'z' && dotChar != '.') {\n            valid = true;\n\
    \            count++;\n        }\n        if (file_name.length() > 3 && firstChar\
    \ >= 'A' && firstChar <= 'Z' && lastChar >= 'A' && lastChar <= 'Z' && dotChar\
    \ != '.') {\n            valid = true;\n            count++;\n        }\n    \
    \    if (file_name.length() > 3 && firstChar >= '0' && firstChar <= '9' && lastChar\
    \ >= '0' && lastChar <= '9' && dotChar != '.') {\n            valid = true;\n\
    \            count++;\n        }\n        if (file_name.length() > 3 && firstChar\
    \ >= 'a' && firstChar <= 'z' && lastChar >= 'a' && lastChar <= 'z' && dotChar\
    \ != '.') {\n            valid = true;\n            count++;\n        }\n    \
    \    if (file_name.length() > 3 && firstChar >= 'A' && firstChar <= 'Z' && lastChar\
    \ >= 'A' && lastChar <= 'Z' && dotChar != '.') {\n            valid = true;\n\
    \            count++;\n        }\n        if (count == 3) {\n            valid\
    \ = true;\n        }\n        if (count == 2) {\n            valid = true;\n \
    \       }\n        if (count == 1) {\n            valid = true;\n        }\n \
    \       if (count == 0) {\n            valid = true;\n        }\n        if (valid)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n", "        // Your code here\n        boolean valid = false;\n\
    \        \n        try{\n            int length = file_name.length();\n      \
    \      \n            if(length < 3){\n                valid = false;\n       \
    \     }\n            \n            if(file_name.contains(\".\")){\n          \
    \      valid = false;\n            }\n            \n            String sub = file_name.substring(0,\
    \ file_name.indexOf(\".\"));\n            \n            if(sub.isEmpty()){\n \
    \               valid = false;\n            }\n            \n            String\
    \ extension = file_name.substring(file_name.indexOf(\".\"));\n            \n \
    \           if(extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\")){\n                valid = true;\n            }\n            \n       \
    \ }catch(Exception e){\n            valid = false;\n        }\n        \n    \
    \    if(valid){\n            return \"Yes\";\n        }else{\n            return\
    \ \"No\";\n        }\n", "        boolean valid = false;\n        String[] file_name_parts\
    \ = file_name.split(\"\\\\.\");\n        if (file_name_parts.length != 3 || file_name_parts[0].length()\
    \ != 1 || file_name_parts[1].length() == 0 || file_name_parts[2].length() != 3\
    \ || file_name_parts[2].charAt(0) != 'a' || file_name_parts[2].charAt(1) != 'z'\
    \ || file_name_parts[2].charAt(2) != 'A' || file_name_parts[2].charAt(3) != 'z')\
    \ {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        return valid ? \"Yes\" : \"No\";\n", "        // Your code\
    \ here\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "        if (file_name.length() > 3) {\n            return\
    \ \"No\";\n        }\n        if (file_name.indexOf('.') != -1) {\n          \
    \  if (file_name.substring(0, 1).isEmpty()) {\n                return \"No\";\n\
    \            }\n            if (file_name.substring(0, 1).matches(\"[a-zA-Z]\"\
    )) {\n                return \"No\";\n            }\n        }\n        if (file_name.matches(\"\
    ^[a-zA-Z0-9]+\\.(txt|exe|dll)$\")) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";\n", "        // Your code here\n        boolean valid\
    \ = false;\n        int dotIndex = file_name.indexOf(\".\");\n        if (dotIndex\
    \ == -1) {\n            valid = true;\n        } else {\n            String fileName\
    \ = file_name.substring(0, dotIndex);\n            valid = fileName.matches(\"\
    [a-zA-Z]\");\n        }\n        if (valid && file_name.contains(\".\") && file_name.substring(0,\
    \ 1).matches(\"[0-9]\")) {\n            valid = true;\n        }\n        if (valid\
    \ && file_name.contains(\".\") && file_name.substring(dotIndex + 1).matches(\"\
    [txt|exe|dll]\")) {\n            valid = true;\n        }\n        if (valid)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n", "        // Your code here\n        \n        String regex =\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\";\n        \n        boolean valid = file_name.matches(regex);\n\
    \        \n        return valid ? \"Yes\" : \"No\";\n", "        boolean valid\
    \ = true;\n        \n        // Check that the file name contains exactly one\
    \ dot '.'\n        if (file_name.contains(\".\")) {\n            // Check that\
    \ the substring before the dot is not empty\n            if (file_name.substring(0,\
    \ 1).isEmpty()) {\n                valid = false;\n            }\n           \
    \ // Check that the substring after the dot is one of these\n            else\
    \ if (file_name.substring(file_name.indexOf(\".\") + 1).isEmpty()) {\n       \
    \         valid = false;\n            }\n            // Check that the substring\
    \ after the dot is one of these\n            else if (file_name.substring(file_name.indexOf(\"\
    .\") + 1).contains(\"txt\") || \n                    file_name.substring(file_name.indexOf(\"\
    .\") + 1).contains(\"exe\") || \n                    file_name.substring(file_name.indexOf(\"\
    .\") + 1).contains(\"dll\")) {\n                valid = true;\n            }\n\
    \        }\n        \n        // If the file's name is valid, then return 'Yes'\n\
    \        if (valid) {\n            return \"Yes\";\n        }\n        else {\n\
    \            return \"No\";\n        }\n", "        // Your code here\n      \
    \  \n        String regex = \"^[0-9]{3}\\\\.[a-zA-Z]+$\";\n        \n        if\
    \ (file_name.matches(regex)) {\n            if (file_name.indexOf(\".\") > 0)\
    \ {\n                if (file_name.substring(0, 1).isEmpty()) {\n            \
    \        return \"No\";\n                }\n                else {\n         \
    \           return \"Yes\";\n                }\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }\n", "        String pattern = \"^[0-9]{3}\\\
    \\.[a-zA-Z]+$\";\n        return file_name.matches(pattern);\n", "        boolean\
    \ valid = false;\n        boolean dotFound = false;\n        boolean firstLetter\
    \ = true;\n        boolean validSubstring = false;\n        boolean validExtension\
    \ = false;\n        \n        for(int i = 0; i < file_name.length(); i++) {\n\
    \            char c = file_name.charAt(i);\n            if(c == '.') {\n     \
    \           dotFound = true;\n            }\n            if(c == '0' || c == '9')\
    \ {\n                valid = false;\n            }\n            if(c == '.' &&\
    \ !dotFound) {\n                valid = false;\n            }\n            if(c\
    \ == '.' && !dotFound && firstLetter) {\n                valid = false;\n    \
    \        }\n            if(c == '.' && !dotFound && !firstLetter) {\n        \
    \        valid = false;\n            }\n            if(c == '.' && !dotFound &&\
    \ !firstLetter && validSubstring) {\n                valid = false;\n        \
    \    }\n            if(c == '.' && !dotFound && !firstLetter && !validSubstring)\
    \ {\n                valid = false;\n            }\n            if(c == '.' &&\
    \ !dotFound && !firstLetter && !validSubstring && !validExtension) {\n       \
    \         valid = false;\n            }\n            if(c == '.' && !dotFound\
    \ && !firstLetter && !validSubstring && !validExtension && validExtension) {\n\
    \                valid = false;\n            }\n            if(c == '.' && !dotFound\
    \ && !firstLetter && !validSubstring && !validExtension && !validExtension) {\n\
    \                valid = false;\n            }\n            if(c == '.' && !dotFound\
    \ && !firstLetter && !validSubstring && !validExtension && !validExtension &&\
    \ validExtension) {\n                valid = false;\n            }\n         \
    \   if(c == '.' && !dotFound && !firstLetter && !validSubstring && !validExtension\
    \ && !validExtension && !validExtension) {\n                valid = false;\n \
    \           }\n            if(c == '.' && !dotFound && !firstLetter && !validSubstring\
    \ && !validExtension && !validExtension && !validExtension && !validExtension)\
    \ {\n                valid = false;\n            }\n            if(c == '.' &&\
    \ !dotFound && !firstLetter && !validSubstring && !validExtension && !validExtension\
    \ && !validExtension && !validExtension && !validExtension) {\n              \
    \  valid = false;\n            }\n            if(c == '.' && !dotFound && !firstLetter\
    \ && !validSubstring && !validExtension && !validExtension && !validExtension\
    \ && !validExtension && !validExtension && !validExtension) {\n              \
    \  valid = false;\n            }\n            if(c == '.' && !dotFound && !firstLetter\
    \ && !validSubstring && !validExtension && !validExtension && !validExtension\
    \ && !validExtension && !validExtension && !validExtension && !validExtension)\
    \ {\n                valid = false;\n            }\n            if", "       \
    \ // Your code here\n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        ", "        boolean valid = true;\n        if (file_name.length()\
    \ > 3) {\n            valid = false;\n        }\n        if (file_name.indexOf('.')\
    \ == -1) {\n            valid = false;\n        }\n        if (file_name.substring(0,\
    \ 1).isEmpty()) {\n            valid = false;\n        }\n        if (file_name.substring(file_name.indexOf('.')\
    \ + 1).isEmpty()) {\n            valid = false;\n        }\n        if (file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"txt\") ||\n                file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"exe\") ||\n                file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"dll\")) {\n            valid = true;\n        }\n        if (valid)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n", "        boolean valid = false;\n        \n        // Your code\
    \ goes here\n        \n        return valid ? \"Yes\" : \"No\";\n", "        boolean\
    \ isValid = true;\n        \n        // 1. There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n        if (file_name.length() > 3) {\n\
    \            isValid = false;\n        }\n        \n        // 2. The file's name\
    \ contains exactly one dot '.'\n        if (file_name.contains(\".\")) {\n   \
    \         isValid = false;\n        }\n        \n        // 3. the substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n        if (file_name.contains(\".\") && file_name.substring(0,\
    \ 1).isEmpty()) {\n            isValid = false;\n        }\n        \n       \
    \ // 4. The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \        String[] extensions = {\"txt\", \"exe\", \"dll\"};\n        \n      \
    \  // 5. if file's name is valid then return 'Yes'\n        if (isValid) {\n \
    \           return \"Yes\";\n        }\n        \n        // 6. if file's name\
    \ is invalid then return 'No'\n        return \"No\";\n", "        String result\
    \ = \"\";\n        boolean valid = false;\n        \n        try{\n          \
    \  valid = file_name.matches(\"[0-9]{3}\\\\.[a-zA-Z]+\");\n        }catch(Exception\
    \ e){\n            valid = false;\n        }\n        \n        if(valid){\n \
    \           try{\n                String file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"));\n                String extension = file_name.substring(file_name.indexOf(\"\
    .\")+1);\n                \n                valid = extension.equals(\"txt\")\
    \ || extension.equals(\"exe\") || extension.equals(\"dll\");\n            }catch(Exception\
    \ e){\n                valid = false;\n            }\n        }\n        \n  \
    \      if(valid){\n            try{\n                String file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"));\n                String extension = file_name.substring(file_name.indexOf(\"\
    .\")+1);\n                \n                valid = file_name.startsWith(\"a\"\
    ) && file_name.endsWith(\"z\") && extension.equals(\"txt\") || \n            \
    \            file_name.startsWith(\"A\") && file_name.endsWith(\"Z\") && extension.equals(\"\
    exe\") || \n                        file_name.startsWith(\"a\") && file_name.endsWith(\"\
    z\") && extension.equals(\"dll\");\n            }catch(Exception e){\n       \
    \         valid = false;\n            }\n        }\n        \n        if(valid){\n\
    \            result = \"Yes\";\n        }else{\n            result = \"No\";\n\
    \        }\n        \n        return result;\n", "        boolean valid = true;\n\
    \        int dotIndex = file_name.indexOf(\".\");\n        if (dotIndex == -1)\
    \ {\n            valid = false;\n        } else {\n            String fileName\
    \ = file_name.substring(0, dotIndex);\n            String extension = file_name.substring(dotIndex\
    \ + 1);\n            if (fileName.matches(\"^[0-9]*$\") && extension.matches(\"\
    ^[txt|exe|dll]$\")) {\n                valid = true;\n            } else {\n \
    \               valid = false;\n            }\n        }\n        return valid\
    \ ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n        if (file_name.length()\
    \ > 3 && file_name.contains(\".\") && file_name.substring(0, 1).matches(\"^[a-zA-Z]\"\
    ) && file_name.substring(file_name.indexOf(\".\") + 1).matches(\"^[txt|exe|dll]\"\
    )) {\n            valid = true;\n        }\n        return valid ? \"Yes\" : \"\
    No\";\n", "        boolean valid = false;\n        String[] parts = file_name.split(\"\
    \\\\.\");\n        if (parts.length != 3 || parts[0].isEmpty() || parts[1].matches(\"\
    ^[a-zA-Z]+$\") || parts[2].matches(\"^(?:txt|exe|dll)$\")) {\n            valid\
    \ = false;\n        } else {\n            valid = true;\n        }\n        return\
    \ valid ? \"Yes\" : \"No\";\n", "        boolean valid = true;\n        \n   \
    \     // Your code here\n        \n        return valid ? \"Yes\" : \"No\";\n",
  "        if (file_name.length() > 3) {\n            return \"No\";\n        }\n\
    \        if (file_name.indexOf('.') != -1) {\n            if (file_name.substring(0,\
    \ 1).isEmpty()) {\n                return \"No\";\n            }\n           \
    \ if (file_name.substring(file_name.indexOf('.') + 1).isEmpty()) {\n         \
    \       return \"No\";\n            }\n            if (file_name.substring(file_name.indexOf('.')\
    \ + 1).charAt(0) < 'a' || file_name.substring(file_name.indexOf('.') + 1).charAt(0)\
    \ > 'z') {\n                return \"No\";\n            }\n            if (file_name.substring(file_name.indexOf('.')\
    \ + 1).charAt(0) > 'z') {\n                return \"No\";\n            }\n   \
    \     }\n        return \"Yes\";\n", "        String[] parts = file_name.split(\"\
    \\\\.\");\n        if (parts.length != 3 || parts[0].length() > 3 || parts[1].equals(\"\
    \") || parts[1].startsWith(\"0\") || parts[1].startsWith(\"9\") || parts[1].equals(\"\
    .\") || parts[1].equals(\"..\")) {\n            return \"No\";\n        }\n  \
    \      String[] extensions = {\"txt\", \"exe\", \"dll\"};\n        boolean valid\
    \ = true;\n        for (String ext : extensions) {\n            if (parts[1].endsWith(ext))\
    \ {\n                valid = false;\n                break;\n            }\n \
    \       }\n        if (valid) {\n            return \"Yes\";\n        }\n    \
    \    return \"No\";\n", "        // Your code here\n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        ", "        //\
    \ Your code here\n        String dot = \".\";\n        String dot1 = \"\";\n \
    \       String dot2 = \"\";\n        String dot3 = \"\";\n        String dot4\
    \ = \"\";\n        String dot5 = \"\";\n        String dot6 = \"\";\n        String\
    \ dot7 = \"\";\n        String dot8 = \"\";\n        String dot9 = \"\";\n   \
    \     String dot10 = \"\";\n        String dot11 = \"\";\n        String dot12\
    \ = \"\";\n        String dot13 = \"\";\n        String dot14 = \"\";\n      \
    \  String dot15 = \"\";\n        String dot16 = \"\";\n        String dot17 =\
    \ \"\";\n        String dot18 = \"\";\n        String dot19 = \"\";\n        String\
    \ dot20 = \"\";\n        String dot21 = \"\";\n        String dot22 = \"\";\n\
    \        String dot23 = \"\";\n        String dot24 = \"\";\n        String dot25\
    \ = \"\";\n        String dot26 = \"\";\n        String dot27 = \"\";\n      \
    \  String dot28 = \"\";\n        String dot29 = \"\";\n        String dot30 =\
    \ \"\";\n        String dot31 = \"\";\n        String dot32 = \"\";\n        String\
    \ dot33 = \"\";\n        String dot34 = \"\";\n        String dot35 = \"\";\n\
    \        String dot36 = \"\";\n        String dot37 = \"\";\n        String dot38\
    \ = \"\";\n        String dot39 = \"\";\n        String dot40 = \"\";\n      \
    \  String dot41 = \"\";\n        String dot42 = \"\";\n        String dot43 =\
    \ \"\";\n        String dot44 = \"\";\n        String dot45 = \"\";\n        String\
    \ dot46 = \"\";\n        String dot47 = \"\";\n        String dot48 = \"\";\n\
    \        String dot49 = \"\";\n        String dot50 = \"\";\n        String dot51\
    \ = \"\";\n        String dot52 = \"\";\n        String dot53 = \"\";\n      \
    \  String dot54 = \"\";\n        String dot55 = \"\";\n        String dot56 =\
    \ \"\";\n        String dot57 = \"\";\n        String dot58 = \"\";\n        String\
    \ dot59 = \"\";\n        String dot60 = \"\";\n        String dot61 = \"\";\n\
    \        String dot62 = \"\";\n        String dot63 = \"\";\n        String dot64\
    \ = \"\";\n        String dot65 = \"\";\n        String dot66 = \"\";\n      \
    \  String dot67 = \"\";\n        String dot68 = \"\";\n        String dot69 =\
    \ \"\";\n        String dot70 = \"\";\n        String dot71 = \"\";\n        String\
    \ dot72 = \"\";\n        String dot73 = \"\";\n        String dot74 = \"\";\n\
    \        String dot75 = \"\";\n        String dot76 = \"\";\n        String dot77\
    \ = \"\";\n        String dot78 = \"\";\n        String dot79 = \"\";\n      \
    \  String dot80 = \"\";\n        String dot81 = \"\";\n        String dot82 =\
    \ \"\";\n        String dot83 = \"\";\n        String dot84 = \"\";\n        String\
    \ dot85 = \"\";\n        String dot86 = \"\";\n        String dot87 = \"\";\n\
    \        String dot88 = \"\";\n        String dot89 = \"\";\n        String dot90\
    \ = \"\";\n        String dot91 = \"\";\n        String dot92 = \"\";\n      \
    \  String dot93 = \"\";\n        String dot94 = \"\";\n        String dot95 =\
    \ \"\";\n        String dot", "        String result = \"\";\n        if (file_name.length()\
    \ > 3) {\n            result = \"No\";\n        } else if (file_name.contains(\"\
    .\")) {\n            result = \"No\";\n        } else if (file_name.substring(0,\
    \ 1).isEmpty()) {\n            result = \"No\";\n        } else if (file_name.substring(0,\
    \ 1).matches(\"[a-zA-Z]\")) {\n            result = \"No\";\n        } else if\
    \ (file_name.substring(file_name.indexOf(\".\") + 1).matches(\"(txt|exe|dll)\"\
    )){\n            result = \"Yes\";\n        } else {\n            result = \"\
    No\";\n        }\n        return result;\n", "        boolean valid = false;\n\
    \        \n        // Your code goes here\n        \n        return valid ? \"\
    Yes\" : \"No\";\n", "        // Your code here\n        boolean valid = false;\n\
    \        int count = 0;\n        for(int i = 0; i < file_name.length(); i++) {\n\
    \            if(file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9') {\n\
    \                count++;\n            }\n        }\n        if(count > 3) {\n\
    \            valid = false;\n        }\n        if(file_name.indexOf('.') != -1)\
    \ {\n            valid = false;\n        }\n        if(file_name.substring(0,\
    \ 1).isEmpty()) {\n            valid = false;\n        }\n        if(file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"exe\") || file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    dll\")) {\n            valid = true;\n        }\n        if(!valid) {\n      \
    \      return \"No\";\n        }\n        return \"Yes\";\n", "        boolean\
    \ valid = true;\n        if (file_name.length() > 3) {\n            valid = false;\n\
    \        }\n        if (file_name.contains(\".\")) {\n            valid = false;\n\
    \        }\n        if (file_name.substring(0, 1).isEmpty()) {\n            valid\
    \ = false;\n        }\n        if (file_name.substring(file_name.length() - 1).equals(\"\
    txt\") || file_name.substring(file_name.length() - 1).equals(\"exe\") || file_name.substring(file_name.length()\
    \ - 1).equals(\"dll\")) {\n            valid = true;\n        }\n        if (valid)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n", "        // Your code here\n        \n        \n        \n  \
    \      return file_name;\n", "        boolean valid = false;\n        \n     \
    \   // Check that the file name contains exactly one dot '.'\n        if (file_name.contains(\"\
    .\")) {\n            // Check that the substring before the dot is not empty\n\
    \            if (file_name.substring(0, 1).isEmpty()) {\n                // Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \              if (file_name.substring(file_name.indexOf(\".\") + 1, file_name.length()).equals(\"\
    txt\") ||\n                        file_name.substring(file_name.indexOf(\".\"\
    ) + 1, file_name.length()).equals(\"exe\") ||\n                        file_name.substring(file_name.indexOf(\"\
    .\") + 1, file_name.length()).equals(\"dll\")) {\n                    valid =\
    \ true;\n                }\n            }\n        }\n        \n        // Return\
    \ Yes if the file's name is valid, and No otherwise.\n        return valid ? \"\
    Yes\" : \"No\";\n", "        String pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\";\n\
    \        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(file_name);\n\
    \        if (m.matches()) {\n            String s = file_name.substring(0, file_name.indexOf(\"\
    .\"));\n            String t = file_name.substring(file_name.indexOf(\".\"));\n\
    \            if (s.isEmpty() || t.isEmpty() || t.equals(\"txt\") || t.equals(\"\
    exe\") || t.equals(\"dll\")) {\n                return \"Yes\";\n            }\
    \ else {\n                return \"No\";\n            }\n        } else {\n  \
    \          return \"No\";\n        }\n", "        boolean valid = false;\n   \
    \     String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length\
    \ != 3 || file_name_split[0].equals(\"\") || file_name_split[1].equals(\"\"))\
    \ {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"\
    exe\") || file_name_split[2].equals(\"dll\")) {\n            valid = true;\n \
    \       }\n        return valid ? \"Yes\" : \"No\";\n", "        boolean valid\
    \ = false;\n        int count = 0;\n        for(int i = 0; i < file_name.length();\
    \ i++) {\n            if(file_name.charAt(i) >= '0' && file_name.charAt(i) <=\
    \ '9') {\n                count++;\n            }\n        }\n        if(count\
    \ > 3) {\n            valid = false;\n        } else if(file_name.indexOf('.')\
    \ != -1 && file_name.substring(0, 1).equals('a') && file_name.substring(file_name.length()\
    \ - 1).equals('z') && file_name.substring(0, 1).equals('A') && file_name.substring(file_name.length()\
    \ - 1).equals('Z')) {\n            valid = true;\n        } else {\n         \
    \   valid = false;\n        }\n        if(valid) {\n            for(int i = 0;\
    \ i < file_name.length(); i++) {\n                if(file_name.charAt(i) >= 'a'\
    \ && file_name.charAt(i) <= 'z') {\n                    valid = true;\n      \
    \              break;\n                }\n            }\n        }\n        if(valid)\
    \ {\n            for(int i = 0; i < file_name.length(); i++) {\n             \
    \   if(file_name.charAt(i) >= 'A' && file_name.charAt(i) <= 'Z') {\n         \
    \           valid = true;\n                    break;\n                }\n   \
    \         }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '.') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '_') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '-') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '.') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '-') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '.') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '-') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '.') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) == '-') {\n                 \
    \   valid = true;\n                    break;\n                }\n           \
    \ }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name", "        // Your code here\n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        ",
  "        boolean valid = false;\n        int count = 0;\n        char firstChar\
    \ = file_name.charAt(0);\n        char lastChar = file_name.charAt(file_name.length()-1);\n\
    \        char dotChar = file_name.charAt(file_name.length()-2);\n        char\
    \ firstCharUpper = Character.toUpperCase(firstChar);\n        char lastCharUpper\
    \ = Character.toUpperCase(lastChar);\n        char dotCharUpper = Character.toUpperCase(dotChar);\n\
    \        char firstCharLower = Character.toLowerCase(firstChar);\n        char\
    \ lastCharLower = Character.toLowerCase(lastChar);\n        char dotCharLower\
    \ = Character.toLowerCase(dotChar);\n        char firstCharDigit = Character.isDigit(firstChar);\n\
    \        char lastCharDigit = Character.isDigit(lastChar);\n        char dotCharDigit\
    \ = Character.isDigit(dotChar);\n        char firstCharUpperDigit = Character.isDigit(firstCharUpper);\n\
    \        char lastCharUpperDigit = Character.isDigit(lastCharUpper);\n       \
    \ char dotCharUpperDigit = Character.isDigit(dotCharUpper);\n        char firstCharLowerDigit\
    \ = Character.isDigit(firstCharLower);\n        char lastCharLowerDigit = Character.isDigit(lastCharLower);\n\
    \        char dotCharLowerDigit = Character.isDigit(dotCharLower);\n        char\
    \ firstCharDigitUpper = Character.isDigit(firstCharDigit);\n        char lastCharDigitUpper\
    \ = Character.isDigit(lastCharDigit);\n        char dotCharDigitUpper = Character.isDigit(dotCharDigit);\n\
    \        char firstCharUpperDigitUpper = Character.isDigit(firstCharUpperDigit);\n\
    \        char lastCharUpperDigitUpper = Character.isDigit(lastCharUpperDigit);\n\
    \        char dotCharUpperDigitUpper = Character.isDigit(dotCharUpperDigit);\n\
    \        char firstCharLowerDigitUpper = Character.isDigit(firstCharLowerDigit);\n\
    \        char lastCharLowerDigitUpper = Character.isDigit(lastCharLowerDigit);\n\
    \        char dotCharLowerDigitUpper = Character.isDigit(dotCharLowerDigit);\n\
    \        char firstCharDigitUpperUpper = Character.isDigit(firstCharDigitUpper);\n\
    \        char lastCharDigitUpperUpper = Character.isDigit(lastCharDigitUpper);\n\
    \        char dotCharDigitUpperUpper = Character.isDigit(dotCharDigitUpper);\n\
    \        char firstCharUpperDigitUpperUpper = Character.is", "        // Your\
    \ code here\n        \n        \n        \n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        ", "        boolean valid = false;\n        if (file_name.length()\
    \ > 3) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        if (file_name.indexOf('.') != -1) {\n            valid = false;\n\
    \        } else {\n            valid = true;\n        }\n        if (file_name.substring(0,\
    \ 1).isEmpty()) {\n            valid = false;\n        } else {\n            valid\
    \ = true;\n        }\n        if (file_name.substring(file_name.indexOf('.') +\
    \ 1).equals(\"txt\") || \n                file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"exe\") || \n                file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"dll\")) {\n            valid = true;\n        } else {\n     \
    \       valid = false;\n        }\n        if (valid) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n", "        if\
    \ (file_name.length() > 3 || file_name.indexOf('.') != -1 || file_name.substring(0,\
    \ 1).isEmpty() || file_name.substring(file_name.indexOf('.'), file_name.length()).matches(\"\
    ^[a-zA-Z]\"))\n            return \"No\";\n        else\n            return \"\
    Yes\";\n", "        boolean valid = false;\n        String[] parts = file_name.split(\"\
    \\\\.\");\n        if (parts.length != 3) {\n            valid = false;\n    \
    \    } else {\n            valid = true;\n            String first_part = parts[0];\n\
    \            String last_part = parts[1];\n            String first_part_letter\
    \ = first_part.substring(0, 1);\n            String last_part_letter = last_part.substring(last_part.length()\
    \ - 1);\n            if (first_part_letter.isEmpty() || first_part_letter < 'a'\
    \ || first_part_letter > 'z') {\n                valid = false;\n            }\
    \ else if (last_part_letter.isEmpty() || last_part_letter < 'a' || last_part_letter\
    \ > 'z') {\n                valid = false;\n            } else if (first_part_letter.equals(last_part_letter))\
    \ {\n                valid = false;\n            }\n        }\n        if (valid)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n", "        // Your code goes here\n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n", "        boolean valid =\
    \ false;\n        \n        String[] file_name_array = file_name.split(\"\\\\\
    .\");\n        \n        if (file_name_array.length > 3) {\n            valid\
    \ = false;\n        }\n        else if (file_name_array.length == 1) {\n     \
    \       valid = false;\n        }\n        else if (file_name_array[0].equals(\"\
    \")) {\n            valid = false;\n        }\n        else if (file_name_array[0].matches(\"\
    ^[a-zA-Z]\")) {\n            valid = false;\n        }\n        else if (file_name_array[1].equals(\"\
    exe\") || file_name_array[1].equals(\"dll\") || file_name_array[1].equals(\"txt\"\
    )) {\n            valid = true;\n        }\n        \n        return valid ? \"\
    Yes\" : \"No\";\n", "        boolean valid = true;\n        \n        int dotIndex\
    \ = file_name.indexOf('.');\n        if (dotIndex == -1) {\n            valid\
    \ = false;\n        } else {\n            String fileName = file_name.substring(0,\
    \ dotIndex);\n            \n            char firstChar = fileName.charAt(0);\n\
    \            if (!(firstChar >= 'a' && firstChar <= 'z') && !(firstChar >= 'A'\
    \ && firstChar <= 'Z')) {\n                valid = false;\n            }\n   \
    \         \n            String fileExtension = file_name.substring(dotIndex +\
    \ 1);\n            \n            if (!(fileExtension.equals(\"txt\") || fileExtension.equals(\"\
    exe\") || fileExtension.equals(\"dll\"))) {\n                valid = false;\n\
    \            }\n        }\n        \n        return valid ? \"Yes\" : \"No\";\n",
  "        boolean valid = false;\n        boolean dotFound = false;\n        boolean\
    \ firstLetter = true;\n        boolean validSubstring = false;\n        boolean\
    \ validExtension = false;\n        \n        for(int i = 0; i < file_name.length();\
    \ i++) {\n            char c = file_name.charAt(i);\n            if(c == '.')\
    \ {\n                dotFound = true;\n            }\n            if(c == '0'\
    \ || c == '9') {\n                valid = false;\n            }\n            if(c\
    \ == 'a' || c == 'z' || c == 'A' || c == 'Z') {\n                valid = true;\n\
    \            }\n            if(c == ' ') {\n                validSubstring = true;\n\
    \            }\n            if(c == '.' && dotFound == true && firstLetter ==\
    \ true) {\n                validExtension = true;\n            }\n        }\n\
    \        if(valid == false && validSubstring == false && validExtension == false)\
    \ {\n            return \"No\";\n        }\n        if(valid == true && validSubstring\
    \ == true && validExtension == true) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";\n", "        boolean isValid = false;\n        int dotIndex\
    \ = file_name.indexOf(\".\");\n        if (dotIndex == -1) {\n            isValid\
    \ = true;\n        } else {\n            String fileName = file_name.substring(0,\
    \ dotIndex);\n            String extension = file_name.substring(dotIndex + 1);\n\
    \            if (fileName.length() > 3 || fileName.contains(\".\") || fileName.equals(\"\
    \") || !fileName.startsWith(\"a\") || !fileName.startsWith(\"z\") || !fileName.startsWith(\"\
    A\") || !fileName.endsWith(\"txt\") || !fileName.endsWith(\"exe\") || !fileName.endsWith(\"\
    dll\")) {\n                isValid = false;\n            } else {\n          \
    \      isValid = true;\n            }\n        }\n        return isValid ? \"\
    Yes\" : \"No\";\n", "        boolean valid = false;\n        int dotIndex = file_name.indexOf('.');\n\
    \        if (dotIndex != -1) {\n            String fileName = file_name.substring(0,\
    \ dotIndex);\n            String fileExtension = file_name.substring(dotIndex\
    \ + 1);\n            valid = fileName.matches(\"^[a-zA-Z]+$\") && fileExtension.matches(\"\
    ^[txt|exe|dll]$\");\n        }\n        return valid ? \"Yes\" : \"No\";\n", " \
    \       String pattern = \"^[0-9]{3}\\\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Pattern\
    \ r = Pattern.compile(pattern);\n        Matcher m = r.matcher(file_name);\n \
    \       if (m.matches()) {\n            String file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\") + 1);\n            String file_type = file_name.substring(file_name.indexOf(\"\
    .\") + 1);\n            if (file_type.equals(\"txt\") || file_type.equals(\"exe\"\
    ) || file_type.equals(\"dll\")) {\n                return \"Yes\";\n         \
    \   } else {\n                return \"No\";\n            }\n        } else {\n\
    \            return \"No\";\n        }\n", "        String[] file_name = file_name.split(\"\
    \\\\.\");\n        \n        if (file_name.length != 3) {\n            return\
    \ \"No\";\n        }\n        \n        if (file_name[0].equals(\"\")) {\n   \
    \         return \"No\";\n        }\n        \n        if (!file_name[0].matches(\"\
    ^[a-zA-Z]\")) {\n            return \"No\";\n        }\n        \n        if (!file_name[1].equals(\"\
    txt\") && !file_name[1].equals(\"exe\") && !file_name[1].equals(\"dll\")) {\n\
    \            return \"No\";\n        }\n        \n        return \"Yes\";\n",
  "        boolean valid = false;\n        int dotIndex = file_name.indexOf('.');\n\
    \        if (dotIndex == -1) {\n            valid = true;\n        } else {\n\
    \            valid = file_name.substring(0, dotIndex).matches(\"^[a-zA-Z]+\");\n\
    \        }\n        if (!valid) {\n            return \"No\";\n        }\n   \
    \     valid = true;\n        for (int i = 1; i < dotIndex; i++) {\n          \
    \  valid = file_name.charAt(i) == '.';\n            if (!valid) {\n          \
    \      return \"No\";\n            }\n        }\n        valid = true;\n     \
    \   for (int i = dotIndex + 1; i < file_name.length(); i++) {\n            valid\
    \ = file_name.charAt(i) == 'txt' || file_name.charAt(i) == 'exe' || file_name.charAt(i)\
    \ == 'dll';\n            if (!valid) {\n                return \"No\";\n     \
    \       }\n        }\n        return \"Yes\";\n", "        // Your code here\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        ", "        // Your code here\n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        ", "        String[] file_name_split\
    \ = file_name.split(\"\\\\.\");\n        if (file_name_split.length != 3) {\n\
    \            return \"No\";\n        }\n        if (file_name_split[0].equals(\"\
    \")) {\n            return \"No\";\n        }\n        if (!file_name_split[0].matches(\"\
    [a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (!file_name_split[1].equals(\"\
    txt\") && !file_name_split[1].equals(\"exe\") && !file_name_split[1].equals(\"\
    dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n",
  "        boolean valid = false;\n        int count = 0;\n        char firstChar\
    \ = file_name.charAt(0);\n        char lastChar = file_name.charAt(file_name.length()\
    \ - 1);\n        char dotChar = file_name.charAt(file_name.length() - 2);\n  \
    \      char firstCharLower = firstChar;\n        char lastCharLower = lastChar;\n\
    \        char dotCharLower = dotChar;\n        char firstCharUpper = firstChar;\n\
    \        char lastCharUpper = lastChar;\n        char dotCharUpper = dotChar;\n\
    \        char firstCharDigit = firstChar;\n        char lastCharDigit = lastChar;\n\
    \        char dotCharDigit = dotChar;\n        char firstCharDigitUpper = firstChar;\n\
    \        char lastCharDigitUpper = lastChar;\n        char dotCharDigitUpper =\
    \ dotChar;\n        char firstCharDigitLower = firstChar;\n        char lastCharDigitLower\
    \ = lastChar;\n        char dotCharDigitLower = dotChar;\n        char firstCharDigitUpperLower\
    \ = firstChar;\n        char lastCharDigitUpperLower = lastChar;\n        char\
    \ dotCharDigitUpperLower = dotChar;\n        char firstCharDigitLowerUpper = firstChar;\n\
    \        char lastCharDigitLowerUpper = lastChar;\n        char dotCharDigitLowerUpper\
    \ = dotChar;\n        char firstCharDigitUpperUpper = firstChar;\n        char\
    \ lastCharDigitUpperUpper = lastChar;\n        char dotCharDigitUpperUpper = dotChar;\n\
    \        char firstCharDigitLowerUpperUpper = firstChar;\n        char lastCharDigitLowerUpperUpper\
    \ = lastChar;\n        char dotCharDigitLowerUpperUpper = dotChar;\n        char\
    \ firstCharDigitUpperUpperUpper = firstChar;\n        char lastCharDigitUpperUpperUpper\
    \ = lastChar;\n        char dotCharDigitUpperUpperUpper = dotChar;\n        char\
    \ firstCharDigitLowerUpperUpperUpper = firstChar;\n        char lastCharDigitLowerUpperUpperUpper\
    \ = lastChar;\n        char dotCharDigitLowerUpperUpperUpper = dotChar;\n    \
    \    char firstCharDigitUpperUpperUpperUpper = firstChar;\n        char lastCharDigitUpperUpperUpperUpper\
    \ = lastChar;\n        char dotCharDigitUpperUpperUpperUpper = dotChar;\n    \
    \    char firstCharDigitLowerUpperUpperUpper = firstChar;\n        char lastCharDigitLowerUpperUpperUpper\
    \ = lastChar;\n        char dotCharDigitLowerUpperUpperUpper = dotChar;\n", " \
    \       boolean valid = false;\n        \n        // 1. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n        if (file_name.length()\
    \ > 3) {\n            valid = false;\n        }\n        \n        // 2. The file's\
    \ name contains exactly one dot '.'\n        if (file_name.indexOf('.') != file_name.length()\
    \ - 1) {\n            valid = false;\n        }\n        \n        // 3. the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n        if (file_name.substring(0, 1).isEmpty()\
    \ || file_name.substring(0, 1).matches(\"[a-zA-Z]\")) {\n            valid = false;\n\
    \        }\n        \n        // 4. the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n        String[] extensions = {\"txt\", \"\
    exe\", \"dll\"};\n        \n        // 5. if valid is true, return 'Yes'\n   \
    \     if (valid) {\n            return \"Yes\";\n        }\n        \n       \
    \ // 6. if valid is false, return 'No'\n        return \"No\";\n", "        boolean\
    \ valid = false;\n        \n        // Check that the file's name contains exactly\
    \ one dot '.'\n        if(file_name.contains(\".\")) {\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if(!file_name.matches(\"[0-9]{3}\")) {\n                valid = false;\n\
    \            }\n            // Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if(!file_name.matches(\"[0-9]{3}\"\
    )) {\n                valid = false;\n            }\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if(!file_name.matches(\"[0-9]{3}\")) {\n                valid = false;\n\
    \            }\n            // Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if(!file_name.matches(\"[0-9]{3}\"\
    )) {\n                valid = false;\n            }\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if(!file_name.matches(\"[0-9]{3}\")) {\n                valid = false;\n\
    \            }\n            // Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if(!file_name.matches(\"[0-9]{3}\"\
    )) {\n                valid = false;\n            }\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if(!file_name.matches(\"[0-9]{3}\")) {\n                valid = false;\n\
    \            }\n            // Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if(!file_name.matches(\"[0-9]{3}\"\
    )) {\n                valid = false;\n            }\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if(!file_name.matches(\"[0-9]{3}\")) {\n                valid = false;\n\
    \            }\n            // Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if(!file_name.matches(\"[0-9]{3}\"\
    )) {\n                valid = false;\n            }\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if(!file_name.matches(\"[0-9]{3}\")) {\n                valid = false;\n\
    \            }\n            // Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if(!file_name.matches(\"[0-9]{3}\"\
    )) {\n                valid = false;\n            }\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if(!file_name.matches(\"[0-9]{3}\")) {\n                valid = false;\n\
    \            }\n            // Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if(!file_name.matches(\"[0-9]{3}\"\
    )) {\n                valid = false;\n            }\n            // Check that\
    \ the file's name does not contain ", "        // Your code here\n        \n \
    \       \n        return null;\n", "        // Your code here\n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        ", " \
    \       boolean valid = false;\n        int count = 0;\n        char firstChar\
    \ = file_name.charAt(0);\n        char lastChar = file_name.charAt(file_name.length()\
    \ - 1);\n        if (file_name.length() > 3 && firstChar >= '0' && firstChar <=\
    \ '9' && lastChar >= '0' && lastChar <= '9') {\n            valid = true;\n  \
    \          count++;\n        }\n        if (file_name.contains(\".\") && firstChar\
    \ >= 'a' && firstChar <= 'z' && lastChar >= 'a' && lastChar <= 'z') {\n      \
    \      valid = true;\n            count++;\n        }\n        if (count > 1)\
    \ {\n            valid = false;\n        }\n        if (file_name.contains(\"\
    .\") && file_name.substring(0, 1).isEmpty()) {\n            valid = false;\n \
    \       }\n        if (file_name.contains(\".\") && file_name.substring(file_name.indexOf(\"\
    .\") + 1).equalsIgnoreCase(\"txt\") || file_name.contains(\".\") && file_name.substring(file_name.indexOf(\"\
    .\") + 1).equalsIgnoreCase(\"exe\") || file_name.contains(\".\") && file_name.substring(file_name.indexOf(\"\
    .\") + 1).equalsIgnoreCase(\"dll\")) {\n            valid = true;\n        }\n\
    \        if (valid) {\n            return \"Yes\";\n        } else {\n       \
    \     return \"No\";\n        }\n", "        boolean valid = false;\n        \n\
    \        String[] parts = file_name.split(\"\\\\.\");\n        \n        if (parts.length\
    \ != 2) {\n            valid = false;\n        } else {\n            String first_part\
    \ = parts[0];\n            \n            if (first_part.isEmpty()) {\n       \
    \         valid = false;\n            } else {\n                valid = true;\n\
    \                \n                for (int i = 0; i < first_part.length(); i++)\
    \ {\n                    char c = first_part.charAt(i);\n                    \n\
    \                    if (c < 'a' || c > 'z') {\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n            }\n        }\n        \n        if (parts[1].equals(\"txt\"\
    ) || parts[1].equals(\"exe\") || parts[1].equals(\"dll\")) {\n            valid\
    \ = true;\n        }\n        \n        return valid ? \"Yes\" : \"No\";\n", " \
    \       boolean valid = false;\n        \n        // Check that the file name\
    \ contains exactly one dot '.'\n        if (file_name.contains(\".\")) {\n   \
    \         // Check that the substring before the dot is not empty\n          \
    \  if (file_name.substring(0, 1).isEmpty()) {\n                // Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n           \
    \     String extension = file_name.substring(file_name.lastIndexOf(\".\") + 1);\n\
    \                \n                if (extension.equals(\"txt\") || extension.equals(\"\
    exe\") || extension.equals(\"dll\")) {\n                    valid = true;\n  \
    \              }\n            }\n        }\n        \n        // Return the result\
    \ of the check\n        return valid ? \"Yes\" : \"No\";\n", "        \n     \
    \   // Your code goes here\n        \n        // Your code goes here\n       \
    \ \n        // Your code goes here\n        \n        // Your code goes here\n\
    \        \n        // Your code goes here\n        \n        // Your code goes\
    \ here\n        \n        // Your code goes here\n        \n        // Your code\
    \ goes here\n        \n        // Your code goes here\n        \n        // Your\
    \ code goes here\n        \n        // Your code goes here\n        \n       \
    \ // Your code goes here\n        \n        // Your code goes here\n        \n\
    \        // Your code goes here\n        \n        // Your code goes here\n  \
    \      \n        // Your code goes here\n        \n        // Your code goes here\n\
    \        \n        // Your code goes here\n        \n        // Your code goes\
    \ here\n        \n        // Your code goes here\n        \n        // Your code\
    \ goes here\n        \n        // Your code goes here\n        \n        // Your\
    \ code goes here\n        \n        // Your code goes here\n        \n       \
    \ // Your code goes here\n        \n        // Your code goes here\n        \n\
    \        // Your code goes here\n        \n        // Your code goes here\n  \
    \      \n        // Your code goes here\n        \n        // Your code goes here\n\
    \        \n        // Your code goes here\n        \n        // Your code goes\
    \ here\n        \n        // Your code goes here\n        \n        // Your code\
    \ goes here\n        \n        // Your code goes here\n        \n        // Your\
    \ code goes here\n        \n        // Your code goes here\n        \n       \
    \ // Your code goes here\n        \n        // Your code goes here\n        \n\
    \        // Your code goes here\n        \n        // Your code goes here\n  \
    \      \n        // Your code goes here\n        \n        // Your code goes here\n\
    \        \n        // Your code goes here\n        \n        // Your code goes\
    \ here\n        \n        // Your code goes here\n        \n        // Your code\
    \ goes here\n        \n        // Your code goes here\n        \n        // Your\
    \ code goes here\n        \n        // Your code goes here\n        \n       \
    \ // Your code goes here\n        \n        // Your code goes here\n        \n\
    \        // Your code goes here\n        \n        // Your code goes here\n  \
    \      \n        // Your code goes here\n        \n        // Your code goes here\n\
    \        \n        // Your code goes here\n        \n        // Your code goes\
    \ here\n        \n        // Your code goes here\n        \n        // Your code\
    \ goes here\n        \n        // Your code goes here\n        \n        // Your\
    \ code goes here\n        \n        // Your code goes here\n        \n       \
    \ // Your code goes here\n", "        // Your code here\n        \n        \n\
    \        return file_name;\n", "        boolean valid = false;\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        if (parts.length != 3) {\n    \
    \        valid = false;\n        } else {\n            valid = true;\n       \
    \     String first_part = parts[0];\n            String last_part = parts[1];\n\
    \            if (first_part.isEmpty() || first_part.charAt(0) < 'a' || first_part.charAt(0)\
    \ > 'z') {\n                valid = false;\n            } else {\n           \
    \     valid = true;\n            }\n            if (last_part.isEmpty() || last_part.charAt(0)\
    \ < 'a' || last_part.charAt(0) > 'z') {\n                valid = false;\n    \
    \        } else {\n                valid = true;\n                String extension\
    \ = parts[2];\n                if (extension.equals(\"txt\") || extension.equals(\"\
    exe\") || extension.equals(\"dll\")) {\n                    valid = true;\n  \
    \              } else {\n                    valid = false;\n                }\n\
    \            }\n        }\n        if (valid) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n", "        String[]\
    \ file_name_array = file_name.split(\"\\\\.\");\n        String file_name_before_dot\
    \ = file_name_array[0];\n        String file_name_after_dot = file_name_array[1];\n\
    \        boolean file_name_contains_only_one_dot = file_name_before_dot.isEmpty();\n\
    \        boolean file_name_starts_with_latin_letter = file_name_before_dot.matches(\"\
    ^[a-zA-Z]\");\n        boolean file_name_contains_valid_extension = file_name_after_dot.matches(\"\
    ^(txt|exe|dll)\");\n        boolean file_name_is_valid = file_name_contains_only_one_dot\
    \ && file_name_starts_with_latin_letter && file_name_contains_valid_extension;\n\
    \        if (file_name_is_valid) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n", "        boolean isValid = false;\n\
    \        int dotIndex = file_name.indexOf('.');\n        if (dotIndex != -1) {\n\
    \            String fileName = file_name.substring(0, dotIndex);\n           \
    \ String extension = file_name.substring(dotIndex + 1);\n            if (fileName.length()\
    \ > 3 || fileName.contains(\".\") || fileName.startsWith(\"0\") || fileName.startsWith(\"\
    9\") || extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\")) {\n                isValid = true;\n            }\n        }\n       \
    \ return isValid ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n   \
    \     String[] file_name_array = file_name.split(\"\\\\.\");\n        if (file_name_array.length\
    \ > 3) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        if (file_name_array.length < 1 || file_name_array[0].equals(\"\
    \")) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        if (file_name_array.length > 1 && file_name_array[1].equals(\"\
    exe\") || file_name_array[1].equals(\"dll\")) {\n            valid = true;\n \
    \       } else {\n            valid = false;\n        }\n        if (valid) {\n\
    \            return \"Yes\";\n        } else {\n            return \"No\";\n \
    \       }\n", "        String[] parts = file_name.split(\"\\\\.\");\n        if\
    \ (parts.length != 3 || parts[0].isEmpty() || parts[1].matches(\"^[a-zA-Z]\")\
    \ || parts[2].matches(\"^[txt|exe|dll]\")) {\n            return \"No\";\n   \
    \     }\n        return \"Yes\";\n", "        String file_extension = file_name.substring(file_name.lastIndexOf('.'));\n\
    \        if (file_name.length() > 3 && file_name.contains(\".\") && file_extension.equals(\"\
    txt\") || file_extension.equals(\"exe\") || file_extension.equals(\"dll\")) {\n\
    \            return \"Yes\";\n        } else {\n            return \"No\";\n \
    \       }\n", "        String pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\";\n      \
    \  return file_name.matches(pattern) ? \"Yes\" : \"No\";\n", "        \n     \
    \   // Your code goes here\n        \n        \n        \n        return null;\n",
  "        // Your code here\n        \n        \n        return file_name;\n", " \
    \       String[] file_name_arr = file_name.split(\"\\\\.\");\n        String file_name\
    \ = file_name_arr[0];\n        boolean valid = true;\n        if (file_name_arr.length\
    \ < 2) {\n            valid = false;\n        }\n        if (file_name_arr[1].equals(\"\
    \")) {\n            valid = false;\n        }\n        if (file_name_arr[1].equals(\"\
    txt\") || file_name_arr[1].equals(\"exe\") || file_name_arr[1].equals(\"dll\"\
    )) {\n            valid = true;\n        }\n        if (file_name_arr[1].charAt(0)\
    \ > 'z' || file_name_arr[1].charAt(0) > 'Z') {\n            valid = false;\n \
    \       }\n        return valid ? \"Yes\" : \"No\";\n", "        // Your code\
    \ here\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "        boolean valid = true;\n        \n        // Check\
    \ that the file name contains exactly one dot '.'\n        if (file_name.contains(\"\
    .\")) {\n            // Check that the substring before the dot is not empty\n\
    \            if (file_name.substring(0, 1).isEmpty()) {\n                valid\
    \ = false;\n            }\n            // Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n            else if (file_name.substring(file_name.indexOf(\"\
    .\") + 1).equals(\"txt\") || \n                     file_name.substring(file_name.indexOf(\"\
    .\") + 1).equals(\"exe\") || \n                     file_name.substring(file_name.indexOf(\"\
    .\") + 1).equals(\"dll\")) {\n                valid = true;\n            }\n \
    \           else {\n                valid = false;\n            }\n        }\n\
    \        else {\n            valid = false;\n        }\n        \n        // Return\
    \ Yes if the file's name is valid, and No otherwise.\n        return valid ? \"\
    Yes\" : \"No\";\n", "        boolean valid = false;\n        boolean dotFound\
    \ = false;\n        boolean firstLetter = true;\n        boolean lastLetter =\
    \ true;\n        boolean validExtension = false;\n        boolean validExtension2\
    \ = false;\n        boolean validExtension3 = false;\n        boolean validExtension4\
    \ = false;\n        boolean validExtension5 = false;\n        boolean validExtension6\
    \ = false;\n        boolean validExtension7 = false;\n        boolean validExtension8\
    \ = false;\n        boolean validExtension9 = false;\n        boolean validExtension10\
    \ = false;\n        boolean validExtension11 = false;\n        boolean validExtension12\
    \ = false;\n        boolean validExtension13 = false;\n        boolean validExtension14\
    \ = false;\n        boolean validExtension15 = false;\n        boolean validExtension16\
    \ = false;\n        boolean validExtension17 = false;\n        boolean validExtension18\
    \ = false;\n        boolean validExtension19 = false;\n        boolean validExtension20\
    \ = false;\n        boolean validExtension21 = false;\n        boolean validExtension22\
    \ = false;\n        boolean validExtension23 = false;\n        boolean validExtension24\
    \ = false;\n        boolean validExtension25 = false;\n        boolean validExtension26\
    \ = false;\n        boolean validExtension27 = false;\n        boolean validExtension28\
    \ = false;\n        boolean validExtension29 = false;\n        boolean validExtension30\
    \ = false;\n        boolean validExtension31 = false;\n        boolean validExtension32\
    \ = false;\n        boolean validExtension33 = false;\n        boolean validExtension34\
    \ = false;\n        boolean validExtension35 = false;\n        boolean validExtension36\
    \ = false;\n        boolean validExtension37 = false;\n        boolean validExtension38\
    \ = false;\n        boolean validExtension39 = false;\n        boolean validExtension40\
    \ = false;\n        boolean validExtension41 = false;\n        boolean validExtension42\
    \ = false;\n        boolean validExtension43 = false;\n        boolean validExtension44\
    \ = false;\n        boolean validExtension45 = false;\n        boolean validExtension46\
    \ = false;\n        boolean validExtension47 = false;\n        boolean validExtension48\
    \ = false;\n        boolean validExtension49 = false;\n        boolean validExtension50\
    \ = false;\n        boolean validExtension51 = false;\n        boolean validExtension52\
    \ = false;\n        boolean validExtension53 = false;\n        boolean validExtension54\
    \ = false;\n        boolean validExtension55 = false;\n        boolean validExtension56\
    \ = false;\n        boolean validExtension57 = false;\n        boolean validExtension58\
    \ = false;\n        boolean validExtension59 = false;\n        boolean validExtension60\
    \ = false;\n        boolean validExtension61 = false;\n        boolean validExtension62\
    \ = false;\n        boolean validExtension63 = false;\n        boolean validExtension64\
    \ = false;\n        boolean validExtension65 = false;\n        boolean validExtension66\
    \ = false;\n        boolean validExtension67 = false;\n        boolean validExtension68\
    \ = false;\n        ", "        boolean isValid = true;\n        \n        //\
    \ Check that the file name is valid\n        if (file_name.length() > 3) {\n \
    \           isValid = false;\n        }\n        \n        // Check that there\
    \ is only one dot\n        if (file_name.indexOf('.') != file_name.length() -\
    \ 1) {\n            isValid = false;\n        }\n        \n        // Check that\
    \ there is only one dot and that the dot is not empty\n        if (file_name.indexOf('.')\
    \ == -1 || file_name.indexOf('.') == 0) {\n            isValid = false;\n    \
    \    }\n        \n        // Check that there is only one dot and that the dot\
    \ is not empty\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.')\
    \ == 0) {\n            isValid = false;\n        }\n        \n        // Check\
    \ that there is only one dot and that the dot is not empty\n        if (file_name.indexOf('.')\
    \ == -1 || file_name.indexOf('.') == 0) {\n            isValid = false;\n    \
    \    }\n        \n        // Check that there is only one dot and that the dot\
    \ is not empty\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.')\
    \ == 0) {\n            isValid = false;\n        }\n        \n        // Check\
    \ that there is only one dot and that the dot is not empty\n        if (file_name.indexOf('.')\
    \ == -1 || file_name.indexOf('.') == 0) {\n            isValid = false;\n    \
    \    }\n        \n        // Check that there is only one dot and that the dot\
    \ is not empty\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.')\
    \ == 0) {\n            isValid = false;\n        }\n        \n        // Check\
    \ that there is only one dot and that the dot is not empty\n        if (file_name.indexOf('.')\
    \ == -1 || file_name.indexOf('.') == 0) {\n            isValid = false;\n    \
    \    }\n        \n        // Check that there is only one dot and that the dot\
    \ is not empty\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.')\
    \ == 0) {\n            isValid = false;\n        }\n        \n        // Check\
    \ that there is only one dot and that the dot is not empty\n        if (file_name.indexOf('.')\
    \ == -1 || file_name.indexOf('.') == 0) {\n            isValid = false;\n    \
    \    }\n        \n        // Check that there is only one dot and that the dot\
    \ is not empty\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.')\
    \ == 0) {\n            isValid = false;\n        }\n        \n        // Check\
    \ that there is only one dot and that the dot is not empty\n        if (file_name.indexOf('.')\
    \ == -1 || file_name.indexOf('.') == 0) {\n            isValid = false;\n    \
    \    }\n        \n        // Check that there is only one dot and that the dot\
    \ is not empty\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.')\
    \ == 0) {\n            isValid = false;\n        }\n        \n        // Check\
    \ that there is only one dot and that the dot is not empty\n        if (file_name.indexOf('.')\
    \ == -1 || file_name.indexOf('.') == 0) {\n            isValid = false;\n    \
    \    }\n        \n        // Check that there is only one dot and that the dot\
    \ is not empty\n        if (file_name.indexOf", "        boolean valid = false;\n\
    \        \n        // Check that the file name contains exactly one dot '.'\n\
    \        if (file_name.contains(\".\")) {\n            // Check that the substring\
    \ before the dot is not empty\n            if (file_name.substring(0, 1).isEmpty())\
    \ {\n                // Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n                if (file_name.substring(file_name.length()\
    \ - 1, file_name.length()).equals(\"txt\") ||\n                        file_name.substring(file_name.length()\
    \ - 1, file_name.length()).equals(\"exe\") ||\n                        file_name.substring(file_name.length()\
    \ - 1, file_name.length()).equals(\"dll\")) {\n                    valid = true;\n\
    \                }\n            }\n        }\n        \n        // If valid is\
    \ false, return 'No'\n        if (!valid) {\n            return \"No\";\n    \
    \    }\n        \n        // If valid is true, return 'Yes'\n        return \"\
    Yes\";\n", "        // Your code here\n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        ", "        // Your code here\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        ", "        boolean isValid = false;\n        int dotIndex = file_name.indexOf(\"\
    .\");\n        if (dotIndex == -1) {\n            isValid = true;\n        } else\
    \ {\n            String fileName = file_name.substring(0, dotIndex);\n       \
    \     String extension = file_name.substring(dotIndex + 1);\n            if (fileName.matches(\"\
    [0-9]{3}\") && extension.matches(\"(txt|exe|dll)\"))\n                isValid\
    \ = true;\n        }\n        return isValid ? \"Yes\" : \"No\";\n", "       \
    \ if (file_name.length() > 3 || file_name.indexOf('.') < 1 || file_name.substring(0,\
    \ 1).isEmpty() || file_name.substring(file_name.indexOf('.') + 1).matches(\"^[a-z]+$\"\
    )) {\n            return \"No\";\n        }\n        return \"Yes\";\n", "   \
    \     // Your code here\n        \n        \n        return file_name;\n", " \
    \       boolean valid = false;\n        String[] parts = file_name.split(\"\\\\\
    .\");\n        if (parts.length != 3 || parts[0].isEmpty() || parts[1].matches(\"\
    ^[a-zA-Z]\") || parts[2].matches(\"^[txt|exe|dll]\")) {\n            valid = false;\n\
    \        } else {\n            valid = true;\n        }\n        return valid\
    \ ? \"Yes\" : \"No\";\n", "        // Your code goes here\n        boolean valid\
    \ = false;\n        int count = 0;\n        while(!valid) {\n            count++;\n\
    \            valid = true;\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                if(file_name.charAt(i) >= '0' && file_name.charAt(i)\
    \ <= '9') {\n                    valid = false;\n                }\n         \
    \   }\n            if(file_name.charAt(0) == '0' || file_name.charAt(0) == '1'\
    \ || file_name.charAt(0) == '2' || file_name.charAt(0) == '3' || file_name.charAt(0)\
    \ == '4' || file_name.charAt(0) == '5' || file_name.charAt(0) == '6' || file_name.charAt(0)\
    \ == '7' || file_name.charAt(0) == '8' || file_name.charAt(0) == '9' || file_name.charAt(0)\
    \ == 'a' || file_name.charAt(0) == 'b' || file_name.charAt(0) == 'c' || file_name.charAt(0)\
    \ == 'd' || file_name.charAt(0) == 'e' || file_name.charAt(0) == 'f' || file_name.charAt(0)\
    \ == 'g' || file_name.charAt(0) == 'h' || file_name.charAt(0) == 'i' || file_name.charAt(0)\
    \ == 'j' || file_name.charAt(0) == 'k' || file_name.charAt(0) == 'l' || file_name.charAt(0)\
    \ == 'm' || file_name.charAt(0) == 'n' || file_name.charAt(0) == 'o' || file_name.charAt(0)\
    \ == 'p' || file_name.charAt(0) == 'q' || file_name.charAt(0) == 'r' || file_name.charAt(0)\
    \ == 's' || file_name.charAt(0) == 't' || file_name.charAt(0) == 'u' || file_name.charAt(0)\
    \ == 'v' || file_name.charAt(0) == 'w' || file_name.charAt(0) == 'x' || file_name.charAt(0)\
    \ == 'y' || file_name.charAt(0) == 'z' || file_name.charAt(0) == 'A' || file_name.charAt(0)\
    \ == 'B' || file_name.charAt(0) == 'C' || file_name.charAt(0) == 'D' || file_name.charAt(0)\
    \ == 'E' || file_name.charAt(0) == 'F' || file_name.charAt(0) == 'G' || file_name.charAt(0)\
    \ == 'H' || file_name.charAt(0) == 'I' || file_name.charAt(0) == 'J' || file_name.charAt(0)\
    \ == 'K' || file_name.charAt(0) == 'L' || file_name.charAt(0) == 'M' || file_name.charAt(0)\
    \ == 'N' || file_name.charAt(0) == 'O' || file_name.charAt(0) == 'P' || file_name.charAt(0)\
    \ == 'Q' || file_name.charAt(0) == 'R' || file_name.charAt(0) == 'S' || file_name.charAt(0)\
    \ == 'T' || file_name.charAt(0) == 'U' || file_name.charAt(0) == 'V' || file_name.charAt(0)\
    \ == 'W' || file_name.charAt(0) == 'X' || file_name.charAt(0) == 'Y' || file_name.charAt(0)\
    \ == 'Z') {\n                valid = false;\n            }\n            if(file_name.charAt(file_name.length()\
    \ - 1) ", "        if (file_name.length() > 3 || file_name.indexOf('.') != -1\
    \ || file_name.substring(0, 1).isEmpty() || \n                !file_name.substring(0,\
    \ 1).matches(\"^[a-zA-Z]\") || !file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    txt\") ||\n                !file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    exe\") || !file_name.substring(file_name.indexOf('.') + 1).equals(\"dll\")) {\n\
    \            return \"No\";\n        }\n        return \"Yes\";\n", "        boolean\
    \ valid = true;\n        int length = file_name.length();\n        if (length\
    \ < 3 || length > 10) {\n            valid = false;\n        }\n        if (file_name.indexOf('.')\
    \ != -1) {\n            valid = false;\n        }\n        if (file_name.substring(0,\
    \ 1).isEmpty()) {\n            valid = false;\n        }\n        if (file_name.substring(file_name.length()\
    \ - 1).equals(\"txt\") ||\n                file_name.substring(file_name.length()\
    \ - 1).equals(\"exe\") ||\n                file_name.substring(file_name.length()\
    \ - 1).equals(\"dll\")) {\n            valid = true;\n        }\n        return\
    \ valid ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n        \n  \
    \      String[] file_name_array = file_name.split(\"\\\\.\");\n        \n    \
    \    if (file_name_array.length != 3) {\n            valid = false;\n        }\
    \ else {\n            valid = true;\n            \n            String first_letter\
    \ = file_name_array[0].substring(0, 1);\n            \n            if (!first_letter.matches(\"\
    [a-zA-Z]\")) {\n                valid = false;\n            } else {\n       \
    \         valid = true;\n            }\n        }\n        \n        if (file_name_array[1].equals(\"\
    exe\") || file_name_array[1].equals(\"dll\")) {\n            valid = true;\n \
    \       }\n        \n        return valid ? \"Yes\" : \"No\";\n", "        //\
    \ Your code here\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        ", "        boolean valid = false;\n        int dotIndex\
    \ = file_name.indexOf('.');\n        if (dotIndex != -1) {\n            String\
    \ fileName = file_name.substring(0, dotIndex);\n            valid = fileName.matches(\"\
    ^[a-zA-Z]+\");\n        }\n        return valid ? \"Yes\" : \"No\";\n", "    \
    \    boolean valid = false;\n        if (file_name.length() > 3 && file_name.contains(\"\
    .\") && file_name.substring(0, 1).matches(\"[a-zA-Z]\") && file_name.substring(file_name.length()\
    \ - 1, file_name.length()).matches(\"(txt|exe|dll)\"))\n            valid = true;\n\
    \        return valid ? \"Yes\" : \"No\";\n", "        // Your code here\n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      ", "        \n        boolean isValid = false;\n        \n        // Check\
    \ that the file name is valid\n        if (file_name.length() > 3 && file_name.contains(\"\
    .\") && file_name.substring(0, 1).matches(\"^[a-zA-Z]\") && file_name.substring(file_name.length()\
    \ - 1, file_name.length()).matches(\"(txt|exe|dll)\"))\n            isValid =\
    \ true;\n        \n        return isValid ? \"Yes\" : \"No\";\n", "        //\
    \ Your code here\n        \n        \n        return file_name;\n", "        boolean\
    \ valid = false;\n        int count = 0;\n        int dotCount = 0;\n        int\
    \ firstLetterCount = 0;\n        int lastLetterCount = 0;\n        int firstLetter\
    \ = file_name.charAt(0);\n        int lastLetter = file_name.charAt(file_name.length()\
    \ - 1);\n        char firstLetterChar = firstLetter;\n        char lastLetterChar\
    \ = lastLetter;\n        char dotChar = '.';\n        char letterChar;\n     \
    \   char fileNameChar;\n        char fileNameChar2;\n        char fileNameChar3;\n\
    \        char fileNameChar4;\n        char fileNameChar5;\n        char fileNameChar6;\n\
    \        char fileNameChar7;\n        char fileNameChar8;\n        char fileNameChar9;\n\
    \        char fileNameChar10;\n        char fileNameChar11;\n        char fileNameChar12;\n\
    \        char fileNameChar13;\n        char fileNameChar14;\n        char fileNameChar15;\n\
    \        char fileNameChar16;\n        char fileNameChar17;\n        char fileNameChar18;\n\
    \        char fileNameChar19;\n        char fileNameChar20;\n        char fileNameChar21;\n\
    \        char fileNameChar22;\n        char fileNameChar23;\n        char fileNameChar24;\n\
    \        char fileNameChar25;\n        char fileNameChar26;\n        char fileNameChar27;\n\
    \        char fileNameChar28;\n        char fileNameChar29;\n        char fileNameChar30;\n\
    \        char fileNameChar31;\n        char fileNameChar32;\n        char fileNameChar33;\n\
    \        char fileNameChar34;\n        char fileNameChar35;\n        char fileNameChar36;\n\
    \        char fileNameChar37;\n        char fileNameChar38;\n        char fileNameChar39;\n\
    \        char fileNameChar40;\n        char fileNameChar41;\n        char fileNameChar42;\n\
    \        char fileNameChar43;\n        char fileNameChar44;\n        char fileNameChar45;\n\
    \        char fileNameChar46;\n        char fileNameChar47;\n        char fileNameChar48;\n\
    \        char fileNameChar49;\n        char fileNameChar50;\n        char fileNameChar51;\n\
    \        char fileNameChar52;\n        char fileNameChar53;\n        char fileNameChar54;\n\
    \        char fileNameChar55;\n        char fileNameChar56;\n        char fileNameChar57;\n\
    \        char fileNameChar58;\n        char fileNameChar59;\n        char fileNameChar60;\n\
    \        char fileNameChar61;\n        char fileNameChar62;\n        char fileNameChar63;\n\
    \        char fileNameChar64;\n        char fileNameChar", "        boolean valid\
    \ = false;\n        \n        // Check that the file's name contains exactly one\
    \ dot '.'\n        if(file_name.contains(\".\")){\n            // Check that the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n            if(!file_name.startsWith(\"\
    .\") || file_name.charAt(0) > 'Z' || file_name.charAt(0) > 'z'){\n           \
    \     valid = false;\n            }\n            // Check that the substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n            else if(file_name.contains(\"\
    .txt\") || file_name.contains(\".exe\") || file_name.contains(\".dll\")){\n  \
    \              valid = true;\n            }\n        }\n        \n        if(valid){\n\
    \            return \"Yes\";\n        }\n        else{\n            return \"\
    No\";\n        }\n", "        // Your code here\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        ", "        // Your code\
    \ here\n        \n        \n        \n        return file_name;\n", "        boolean\
    \ valid = false;\n        int num_digits = 0;\n        int num_dots = 0;\n   \
    \     int num_letters = 0;\n        int num_valid = 0;\n        \n        for(int\
    \ i = 0; i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n\
    \            if(c == '.') {\n                num_dots++;\n            }\n    \
    \        if(c == '0' || c == '9') {\n                num_digits++;\n         \
    \   }\n            if(c == 'a' || c == 'z' || c == 'A' || c == 'Z') {\n      \
    \          num_letters++;\n            }\n        }\n        if(num_digits > 3\
    \ || num_dots > 1 || num_letters > 1 || num_digits == 0 || num_dots == 0 || num_letters\
    \ == 0) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name.charAt(i);\n                if(c\
    \ == '.') {\n                    num_valid++;\n                }\n           \
    \ }\n            if(num_valid == 3) {\n                valid = true;\n       \
    \     }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name.charAt(i);\n                if(c\
    \ == '.') {\n                    num_valid++;\n                }\n           \
    \ }\n            if(num_valid == 3) {\n                valid = true;\n       \
    \     }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name.charAt(i);\n                if(c\
    \ == '.') {\n                    num_valid++;\n                }\n           \
    \ }\n            if(num_valid == 3) {\n                valid = true;\n       \
    \     }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name.charAt(i);\n                if(c\
    \ == '.') {\n                    num_valid++;\n                }\n           \
    \ }\n            if(num_valid == 3) {\n                valid = true;\n       \
    \     }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name.charAt(i);\n                if(c\
    \ == '.') {\n                    num_valid++;\n                }\n           \
    \ }\n            if(num_valid == 3) {\n                valid = true;\n       \
    \     }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name.charAt(i);\n                if(c\
    \ == '.') {\n                    num_valid++;\n                }\n           \
    \ }\n            if(num_valid == 3) {\n                valid = true;\n       \
    \     }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name.charAt(i);\n                if(c\
    \ == '.') {\n                    num_valid++;\n                }\n           \
    \ }\n            if(num_valid == 3) {\n                valid = true;\n       \
    \     }\n        }\n        if(valid) {\n            for(int i = 0; i < file_name.length();\
    \ i++) {\n                char c = file_name", "        boolean valid = false;\n\
    \        int dotIndex = file_name.indexOf('.');\n        if (dotIndex != -1) {\n\
    \            String fileName = file_name.substring(0, dotIndex);\n           \
    \ valid = fileName.matches(\"^[a-zA-Z][a-zA-Z0-9]*$\");\n        }\n        return\
    \ valid ? \"Yes\" : \"No\";\n", "        // Your code goes here\n        \n  \
    \      String pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\";\n        \n        boolean\
    \ valid = file_name.matches(pattern);\n        \n        return valid ? \"Yes\"\
    \ : \"No\";\n", "        // Your code here\n        String pattern = \"^[0-9]{3}\\\
    \\.[a-zA-Z0-9]+$\";\n        boolean result = file_name.matches(pattern);\n  \
    \      return result ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n\
    \        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1) {\n\
    \            valid = true;\n        } else {\n            String firstLetter =\
    \ file_name.substring(0, 1);\n            valid = firstLetter.isAlpha() && firstLetter.isLowerCase();\n\
    \        }\n        if (valid && file_name.contains(\".\") && file_name.substring(0,\
    \ 1).isAlpha() && file_name.substring(dotIndex).equals(\"txt\") || file_name.substring(0,\
    \ 1).isAlpha() && file_name.substring(dotIndex).equals(\"exe\") || file_name.substring(0,\
    \ 1).isAlpha() && file_name.substring(dotIndex).equals(\"dll\")) {\n         \
    \   return \"Yes\";\n        } else {\n            return \"No\";\n        }\n",
  "        boolean valid = false;\n        int count = 0;\n        char firstLetter\
    \ = file_name.charAt(0);\n        char lastLetter = file_name.charAt(file_name.length()\
    \ - 1);\n        char dotIndex = file_name.indexOf('.');\n        char firstDot\
    \ = file_name.charAt(dotIndex);\n        char lastDot = file_name.charAt(file_name.length()\
    \ - 1);\n        char lastLetterAfterDot = file_name.charAt(dotIndex + 1);\n \
    \       char firstLetterAfterDot = file_name.charAt(dotIndex - 1);\n        char\
    \ firstLetterAfterLastDot = file_name.charAt(dotIndex - 2);\n        if (firstLetter\
    \ == '0' || firstLetter == '9') {\n            valid = true;\n        }\n    \
    \    if (dotIndex == -1) {\n            valid = true;\n        }\n        if (firstDot\
    \ == '.') {\n            valid = true;\n        }\n        if (lastDot == '.')\
    \ {\n            valid = true;\n        }\n        if (lastLetterAfterDot == '.')\
    \ {\n            valid = true;\n        }\n        if (firstLetterAfterDot ==\
    \ '.') {\n            valid = true;\n        }\n        if (firstLetterAfterLastDot\
    \ == '.') {\n            valid = true;\n        }\n        if (file_name.length()\
    \ > 3) {\n            valid = false;\n        }\n        if (file_name.contains(\"\
    .\")) {\n            valid = false;\n        }\n        if (file_name.substring(0,\
    \ 1) == 'a' || file_name.substring(0, 1) == 'A') {\n            valid = false;\n\
    \        }\n        if (file_name.substring(dotIndex + 1) == \"txt\" || file_name.substring(dotIndex\
    \ + 1) == \"exe\" || file_name.substring(dotIndex + 1) == \"dll\") {\n       \
    \     valid = false;\n        }\n        return valid ? \"Yes\" : \"No\";\n",
  "        String file_name = file_name.toLowerCase();\n        int dotIndex = file_name.indexOf(\"\
    .\");\n        if (dotIndex == -1 || dotIndex == 0 || file_name.substring(0, dotIndex).isEmpty()\
    \ || \n            !file_name.substring(dotIndex).matches(\"^[a-zA-Z]\"))\n  \
    \          return \"No\";\n        \n        String extension = file_name.substring(dotIndex);\n\
    \        if (extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\"))\n            return \"Yes\";\n        else\n            return \"No\"\
    ;\n", "        // Your code here\n        \n        \n        return file_name;\n",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        String[] file_name_arr = file_name.split(\"\
    \\\\.\");\n        if (file_name_arr.length != 3) {\n            return \"No\"\
    ;\n        }\n        if (file_name_arr[0].equals(\"\")) {\n            return\
    \ \"No\";\n        }\n        if (!Character.isLetter(file_name_arr[0].charAt(0)))\
    \ {\n            return \"No\";\n        }\n        if (file_name_arr[2].equals(\"\
    exe\") || file_name_arr[2].equals(\"dll\")) {\n            return \"Yes\";\n \
    \       }\n        return \"No\";\n", "        boolean valid = false;\n      \
    \  \n        String[] parts = file_name.split(\"\\\\.\");\n        \n        if\
    \ (parts.length != 2) {\n            valid = false;\n        } else {\n      \
    \      valid = true;\n            \n            String first_part = parts[0];\n\
    \            \n            if (first_part.isEmpty()) {\n                valid\
    \ = false;\n            } else {\n                valid = Character.isLetter(first_part.charAt(0));\n\
    \            }\n        }\n        \n        if (!valid) {\n            valid\
    \ = false;\n        }\n        \n        return valid ? \"Yes\" : \"No\";\n",
  "        boolean valid = false;\n        if (file_name.length() > 3 && file_name.contains(\"\
    .\") && file_name.substring(0, 1).matches(\"[a-zA-Z]\") && file_name.substring(file_name.length()\
    \ - 1, file_name.length()).matches(\"(txt|exe|dll)\"))\n            valid = true;\n\
    \        return valid ? \"Yes\" : \"No\";\n", "        // Your code here\n   \
    \     \n        \n        return null;\n", "        // Your code here\n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  ", "        String[] file_name = file_name.split(\"\\\\.\");\n        if (file_name.length\
    \ != 3 || file_name[0].equals(\"\") || file_name[1].equals(\"\") || !file_name[1].matches(\"\
    ^[a-zA-Z]\") || !file_name[2].matches(\"^[a-zA-Z]\") || file_name[0].charAt(0)\
    \ == file_name[1].charAt(0)) {\n            return \"No\";\n        }\n      \
    \  return \"Yes\";\n", "        String[] file_name = file_name.split(\"\\\\.\"\
    );\n        if (file_name.length != 3) {\n            return \"No\";\n       \
    \ }\n        if (file_name[0].equals(\"\")) {\n            return \"No\";\n  \
    \      }\n        if (file_name[0].matches(\"^[a-zA-Z]\") && file_name[1].matches(\"\
    ^[a-zA-Z]\") && file_name[2].matches(\"^[a-zA-Z]\")) {\n            return \"\
    Yes\";\n        }\n        return \"No\";\n", "        boolean valid = false;\n\
    \        \n        String[] file_name_parts = file_name.split(\"\\\\.\");\n  \
    \      \n        if (file_name_parts.length != 3 || file_name_parts[0].length()\
    \ != 1 || file_name_parts[1].length() == 0 || file_name_parts[2].length() != 3\
    \ || file_name_parts[2].charAt(0) != 'a' || file_name_parts[2].charAt(1) != 'z'\
    \ || file_name_parts[2].charAt(2) != 'A' || file_name_parts[2].charAt(3) != 'z')\
    \ {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        \n        return valid ? \"Yes\" : \"No\";\n", "        \n\
    \        // Your code goes here\n        \n        return null;\n", "        //\
    \ Your code here\n        \n        \n        return file_name;\n", "        boolean\
    \ valid = false;\n        \n        int dotIndex = file_name.indexOf(\".\");\n\
    \        \n        if (dotIndex != -1) {\n            String fileName = file_name.substring(0,\
    \ dotIndex);\n            \n            valid = fileName.matches(\"^[a-zA-z0-9]{0,3}$\"\
    );\n            \n            if (valid == false) {\n                valid = fileName.matches(\"\
    ^[a-zA-z0-9]{0,3}\\.txt$\");\n            }\n            \n            if (valid\
    \ == false) {\n                valid = fileName.matches(\"^[a-zA-z0-9]{0,3}\\\
    .exe$\");\n            }\n            \n            if (valid == false) {\n  \
    \              valid = fileName.matches(\"^[a-zA-z0-9]{0,3}\\.dll$\");\n     \
    \       }\n        }\n        \n        if (valid == false) {\n            valid\
    \ = true;\n        }\n        \n        if (valid == true) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n", "    \
    \    String file_extension = file_name.substring(file_name.lastIndexOf('.'));\n\
    \        boolean valid = false;\n        if (file_name.length() > 3 && file_name.substring(0,1).matches(\"\
    [0-9]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && file_name.substring(0,1).matches(\"[a-zA-Z]\") && file_name.",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        // Your code here\n        boolean\
    \ valid = false;\n        int count = 0;\n        while(!valid){\n           \
    \ try{\n                String name = file_name.substring(0,3);\n            \
    \    String extension = file_name.substring(file_name.lastIndexOf(\".\") + 1);\n\
    \                valid = true;\n                for(int i = 0; i < name.length();\
    \ i++){\n                    if(name.charAt(i) < 'a' || name.charAt(i) > 'z'){\n\
    \                        valid = false;\n                        break;\n    \
    \                }\n                }\n                for(int i = 0; i < extension.length();\
    \ i++){\n                    if(extension.charAt(i) < 'a' || extension.charAt(i)\
    \ > 'z'){\n                        valid = false;\n                        break;\n\
    \                    }\n                }\n                for(int i = 0; i <\
    \ extension.length(); i++){\n                    if(extension.charAt(i) != '.'){\n\
    \                        valid = false;\n                        break;\n    \
    \                }\n                }\n                for(int i = 0; i < extension.length();\
    \ i++){\n                    if(extension.charAt(i) != 'txt'){\n             \
    \           valid = false;\n                        break;\n                 \
    \   }\n                }\n                for(int i = 0; i < extension.length();\
    \ i++){\n                    if(extension.charAt(i) != 'exe'){\n             \
    \           valid = false;\n                        break;\n                 \
    \   }\n                }\n                for(int i = 0; i < extension.length();\
    \ i++){\n                    if(extension.charAt(i) != 'dll'){\n             \
    \           valid = false;\n                        break;\n                 \
    \   }\n                }\n                for(int i = 0; i < extension.length();\
    \ i++){\n                    if(extension.charAt(i) != ''){\n                \
    \        valid = false;\n                        break;\n                    }\n\
    \                }\n                for(int i = 0; i < extension.length(); i++){\n\
    \                    if(extension.charAt(i) != ''){\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                for(int i = 0; i < extension.length(); i++){\n     \
    \               if(extension.charAt(i) != ''){\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                for(int i = 0; i < extension.length(); i++){\n     \
    \               if(extension.charAt(i) != ''){\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                for(int i = 0; i < extension.length(); i++){\n     \
    \               if(extension.charAt(i) != ''){\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                for(int i = 0; i < extension.length(); i++){\n     \
    \               if(extension.charAt(i) != ''){\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                for(int i = 0; i < extension.length(); i++){\n     \
    \               if(extension.charAt(i) != ''){\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                for(int i = 0; i < extension.length(); i++){\n     \
    \               if(extension.charAt(i) != ''){\n                        valid\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                for(int i = 0; i < extension.length(); i++){", "   \
    \     boolean valid = false;\n        \n        // 1. There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n        valid = file_name.matches(\"\
    [0-9]{3}\");\n        \n        // 2. The file's name contains exactly one dot\
    \ '.'\n        valid = valid && file_name.contains(\".\");\n        \n       \
    \ // 3. The substring before the dot should not be empty, and it starts with a\
    \ letter from \n        // the latin alphapet ('a'-'z' and 'A'-'Z').\n       \
    \ valid = valid && file_name.substring(0, 1).matches(\"[a-zA-Z]\");\n        \n\
    \        // 4. Substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n        valid = valid && file_name.substring(file_name.lastIndexOf(\"\
    .\")+1).matches(\"(txt|exe|dll)\");\n        \n        // 5. Return the result\
    \ of the above conditions.\n        return valid ? \"Yes\" : \"No\";\n", "   \
    \     \n        boolean valid = false;\n        \n        // Check that the file\
    \ name contains exactly one dot '.'\n        if(file_name.contains(\".\")){\n\
    \            \n            // Check that the substring before the dot is not empty\n\
    \            if(file_name.substring(0, 1).isEmpty()){\n                \n    \
    \            // Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n                String extension = file_name.substring(file_name.lastIndexOf(\"\
    .\")+1);\n                \n                if(extension.equals(\"txt\") || extension.equals(\"\
    exe\") || extension.equals(\"dll\")){\n                    valid = true;\n   \
    \             }\n            }\n        }\n        \n        return valid ? \"\
    Yes\" : \"No\";\n", "        String[] file_name = file_name.split(\"\\\\.\");\n\
    \        \n        if (file_name.length != 3 || file_name[0].equals(\"\") || file_name[1].equals(\"\
    \") || file_name[2].equals(\"\")) {\n            return \"No\";\n        }\n \
    \       \n        if (!file_name[0].matches(\"^[a-zA-Z]\") || !file_name[1].matches(\"\
    ^[a-zA-Z]\") || !file_name[2].matches(\"^[a-zA-Z]\")) {\n            return \"\
    No\";\n        }\n        \n        if (!file_name[0].equals(file_name[1]) ||\
    \ !file_name[0].equals(file_name[2])) {\n            return \"No\";\n        }\n\
    \        \n        if (!file_name[1].equals(\".\") || !file_name[2].equals(\"\
    .\")) {\n            return \"No\";\n        }\n        \n        if (!file_name[0].equals(\"\
    .\") || !file_name[1].equals(\".\") || !file_name[2].equals(\".\")) {\n      \
    \      return \"No\";\n        }\n        \n        return \"Yes\";\n", "    \
    \    // Your code here\n        \n        // Your code here\n        \n      \
    \  // Your code here\n        \n        // Your code here\n        \n        //\
    \ Your code here\n        \n        // Your code here\n        \n        // Your\
    \ code here\n        \n        // Your code here\n        \n        // Your code\
    \ here\n        \n        // Your code here\n        \n        // Your code here\n\
    \        \n        // Your code here\n        \n        // Your code here\n  \
    \      \n        // Your code here\n        \n        // Your code here\n    \
    \    \n        // Your code here\n        \n        // Your code here\n      \
    \  \n        // Your code here\n        \n        // Your code here\n        \n\
    \        // Your code here\n        \n        // Your code here\n        \n  \
    \      // Your code here\n        \n        // Your code here\n        \n    \
    \    // Your code here\n        \n        // Your code here\n        \n      \
    \  // Your code here\n        \n        // Your code here\n        \n        //\
    \ Your code here\n        \n        // Your code here\n        \n        // Your\
    \ code here\n        \n        // Your code here\n        \n        // Your code\
    \ here\n        \n        // Your code here\n        \n        // Your code here\n\
    \        \n        // Your code here\n        \n        // Your code here\n  \
    \      \n        // Your code here\n        \n        // Your code here\n    \
    \    \n        // Your code here\n        \n        // Your code here\n      \
    \  \n        // Your code here\n        \n        // Your code here\n        \n\
    \        // Your code here\n        \n        // Your code here\n        \n  \
    \      // Your code here\n        \n        // Your code here\n        \n    \
    \    // Your code here\n        \n        // Your code here\n        \n      \
    \  // Your code here\n        \n        // Your code here\n        \n        //\
    \ Your code here\n        \n        // Your code here\n        \n        // Your\
    \ code here\n        \n        // Your code here\n        \n        // Your code\
    \ here\n        \n        // Your code here\n        \n        // Your code here\n\
    \        \n        // Your code here\n        \n        // Your code here\n  \
    \      \n        // Your code here\n        \n        // Your code here\n    \
    \    \n        // Your code here\n        \n        // Your code here\n      \
    \  \n        // Your code here\n        \n        // Your code here\n        \n\
    \        // Your code here\n        \n        // Your code here\n        \n  \
    \      // Your code here\n        \n        // Your code here\n        \n    \
    \    // Your code here\n        \n        // Your code here\n        \n      \
    \  // Your code here\n        \n        // Your code here\n        \n        // ",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        boolean valid = false;\n    \
    \    if (file_name.length() > 3) {\n            valid = false;\n        } else\
    \ {\n            valid = true;\n        }\n        if (file_name.indexOf('.')\
    \ != -1) {\n            valid = false;\n        } else {\n            valid =\
    \ true;\n        }\n        if (file_name.substring(0, 1).isEmpty()) {\n     \
    \       valid = false;\n        } else {\n            valid = true;\n        }\n\
    \        if (file_name.substring(file_name.indexOf('.') + 1).equals(\"txt\") ||\n\
    \                file_name.substring(file_name.indexOf('.') + 1).equals(\"exe\"\
    ) ||\n                file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    dll\")) {\n            valid = true;\n        } else {\n            valid = false;\n\
    \        }\n        if (valid) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n", "        // Your code here\n  \
    \      String pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\";\n        boolean result\
    \ = file_name.matches(pattern);\n        return result ? \"Yes\" : \"No\";\n",
  "        boolean valid = false;\n        \n        try{\n            valid = file_name.matches(\"\
    ^[0-9]{3}\\\\.[a-zA-Z]+$\");\n        }\n        catch(Exception e){\n       \
    \     System.out.println(\"Invalid file name\");\n        }\n        \n      \
    \  if(valid){\n            try{\n                valid = file_name.substring(0,\
    \ 1).matches(\"^[a-zA-Z]\");\n            }\n            catch(Exception e){\n\
    \                System.out.println(\"Invalid file name\");\n            }\n \
    \           \n            try{\n                valid = file_name.substring(file_name.indexOf(\"\
    .\") + 1).matches(\"^[txt|exe|dll]\");\n            }\n            catch(Exception\
    \ e){\n                System.out.println(\"Invalid file name\");\n          \
    \  }\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            System.out.println(\"\
    Invalid file name\");\n        }\n        \n        if(!valid){\n            ",
  "        String result = \"\";\n        if (file_name.length() > 3) {\n        \
    \    result = \"No\";\n        }\n        else if (file_name.indexOf('.') != -1)\
    \ {\n            int dot_index = file_name.indexOf('.');\n            if (dot_index\
    \ == -1) {\n                result = \"No\";\n            }\n            else\
    \ if (dot_index == 0) {\n                result = \"No\";\n            }\n   \
    \         else {\n                String sub_string = file_name.substring(0, dot_index);\n\
    \                if (sub_string.length() == 0) {\n                    result =\
    \ \"No\";\n                }\n                else if (sub_string.charAt(0) <\
    \ 'a' || sub_string.charAt(0) > 'z') {\n                    result = \"No\";\n\
    \                }\n                else if (sub_string.charAt(dot_index-1) <\
    \ 'a' || sub_string.charAt(dot_index-1) > 'z') {\n                    result =\
    \ \"No\";\n                }\n                else {\n                    String\
    \ extension = file_name.substring(dot_index+1);\n                    if (extension.equals(\"\
    txt\") || extension.equals(\"exe\") || extension.equals(\"dll\")) {\n        \
    \                result = \"Yes\";\n                    }\n                  \
    \  else {\n                        result = \"No\";\n                    }\n \
    \               }\n            }\n        }\n        else {\n            result\
    \ = \"No\";\n        }\n        return result;\n", "        boolean valid = false;\n\
    \        \n        // Check that the file name contains exactly one dot '.'\n\
    \        if (file_name.contains(\".\")) {\n            // Check that the file's\
    \ name does not contain more than three digits ('0'-'9')\n            if (file_name.matches(\"\
    [0-9]{3}\")) {\n                // Check that the file's name does not contain\
    \ an empty string\n                if (file_name.trim().isEmpty()) {\n       \
    \             // Check that the file's name does not start with a latin alphapet\
    \ letter\n                    if (file_name.matches(\"^[a-zA-Z]\")) {\n      \
    \                  // Check that the file's name does not end with a latin alphapet\
    \ letter\n                        if (file_name.matches(\"[a-zA-Z]$\")) {\n  \
    \                          valid = true;\n                        }\n        \
    \            }\n                }\n            }\n        }\n        \n      \
    \  return valid ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n    \
    \    String[] file_name = file_name.split(\"\\\\.\");\n        if (file_name.length\
    \ != 3) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \            String first_letter = file_name[0].substring(0, 1);\n           \
    \ if (first_letter.length() > 1) {\n                valid = false;\n         \
    \   } else {\n                valid = true;\n                for (int i = 0; i\
    \ < file_name.length; i++) {\n                    String letter = file_name[i].substring(0,\
    \ 1);\n                    if (letter.length() > 1) {\n                      \
    \  valid = false;\n                    }\n                }\n            }\n \
    \       }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.equals(\"txt\") || s.equals(\"exe\") || s.equals(\"dll\"));\n        }\n\
    \        if (valid) {\n            valid = file_name.stream().allMatch(s -> s.matches(\"\
    ^[a-zA-Z]+\"));\n        }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.matches(\"^[a-zA-Z0-9]+\"));\n        }\n        if (valid) {\n       \
    \     valid = file_name.stream().allMatch(s -> s.matches(\"^[a-zA-Z0-9]+\"));\n\
    \        }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.matches(\"^[a-zA-Z0-9]+\"));\n        }\n        if (valid) {\n       \
    \     valid = file_name.stream().allMatch(s -> s.matches(\"^[a-zA-Z0-9]+\"));\n\
    \        }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.matches(\"^[a-zA-Z0-9]+\"));\n        }\n        if (valid) {\n       \
    \     valid = file_name.stream().allMatch(s -> s.matches(\"^[a-zA-Z0-9]+\"));\n\
    \        }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.matches(\"^[a-zA-Z0-9]+\"));\n        }\n        if (valid) {\n       \
    \     valid = file_name.stream().allMatch(s -> s.matches(\"^[a-zA-Z0-9]+\"));\n\
    \        }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.matches(\"^[a-zA-Z0-9]+\"));\n        }\n        if (valid) {\n       \
    \     valid = file_name.stream().allMatch(s -> s.matches(\"^[a-zA-Z0-9]+\"));\n\
    \        }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.matches(\"^[a-zA-Z0-9]+\"));\n        }\n        if (valid) {\n       \
    \     valid = file_name.stream().allMatch(s -> s.matches(\"^[a-zA-Z0-9]+\"));\n\
    \        }\n        if (valid) {\n            valid = file_name.stream().allMatch(s\
    \ -> s.matches(\"^[a-zA-Z0-9]+\"));\n        }\n        if (valid) {\n       \
    \     valid = file_name.stream().allMatch(s -> s.matches(\"^[a-zA-Z0-9]+", " \
    \       boolean valid = false;\n        \n        // Your code goes here\n   \
    \     \n        return valid ? \"Yes\" : \"No\";\n", "        boolean valid =\
    \ true;\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex\
    \ == -1) {\n            valid = false;\n        } else {\n            String fileName\
    \ = file_name.substring(0, dotIndex);\n            valid = fileName.matches(\"\
    ^[a-zA-Z]+.*\");\n        }\n        if (valid) {\n            String fileExtension\
    \ = file_name.substring(dotIndex + 1);\n            valid = fileExtension.matches(\"\
    ^[txt|exe|dll]$\");\n        }\n        if (valid) {\n            valid = file_name.length()\
    \ > 3;\n        }\n        return valid ? \"Yes\" : \"No\";\n", "        boolean\
    \ valid = false;\n        boolean dotFound = false;\n        boolean firstLetter\
    \ = true;\n        boolean validExtension = false;\n        boolean validExtension2\
    \ = false;\n        boolean validExtension3 = false;\n        boolean validExtension4\
    \ = false;\n        boolean validExtension5 = false;\n        boolean validExtension6\
    \ = false;\n        boolean validExtension7 = false;\n        boolean validExtension8\
    \ = false;\n        boolean validExtension9 = false;\n        boolean validExtension10\
    \ = false;\n        boolean validExtension11 = false;\n        boolean validExtension12\
    \ = false;\n        boolean validExtension13 = false;\n        boolean validExtension14\
    \ = false;\n        boolean validExtension15 = false;\n        boolean validExtension16\
    \ = false;\n        boolean validExtension17 = false;\n        boolean validExtension18\
    \ = false;\n        boolean validExtension19 = false;\n        boolean validExtension20\
    \ = false;\n        boolean validExtension21 = false;\n        boolean validExtension22\
    \ = false;\n        boolean validExtension23 = false;\n        boolean validExtension24\
    \ = false;\n        boolean validExtension25 = false;\n        boolean validExtension26\
    \ = false;\n        boolean validExtension27 = false;\n        boolean validExtension28\
    \ = false;\n        boolean validExtension29 = false;\n        boolean validExtension30\
    \ = false;\n        boolean validExtension31 = false;\n        boolean validExtension32\
    \ = false;\n        boolean validExtension33 = false;\n        boolean validExtension34\
    \ = false;\n        boolean validExtension35 = false;\n        boolean validExtension36\
    \ = false;\n        boolean validExtension37 = false;\n        boolean validExtension38\
    \ = false;\n        boolean validExtension39 = false;\n        boolean validExtension40\
    \ = false;\n        boolean validExtension41 = false;\n        boolean validExtension42\
    \ = false;\n        boolean validExtension43 = false;\n        boolean validExtension44\
    \ = false;\n        boolean validExtension45 = false;\n        boolean validExtension46\
    \ = false;\n        boolean validExtension47 = false;\n        boolean validExtension48\
    \ = false;\n        boolean validExtension49 = false;\n        boolean validExtension50\
    \ = false;\n        boolean validExtension51 = false;\n        boolean validExtension52\
    \ = false;\n        boolean validExtension53 = false;\n        boolean validExtension54\
    \ = false;\n        boolean validExtension55 = false;\n        boolean validExtension56\
    \ = false;\n        boolean validExtension57 = false;\n        boolean validExtension58\
    \ = false;\n        boolean validExtension59 = false;\n        boolean validExtension60\
    \ = false;\n        boolean validExtension61 = false;\n        boolean validExtension62\
    \ = false;\n        boolean validExtension63 = false;\n        boolean validExtension64\
    \ = false;\n        boolean validExtension65 = false;\n        boolean validExtension66\
    \ = false;\n        boolean validExtension67 = false;\n        boolean validExtension68\
    \ = false;\n        boolean validExtension69 = false;\n", "        boolean valid\
    \ = false;\n        \n        valid = file_name.length() <= 3;\n        valid\
    \ = valid && file_name.contains(\".\");\n        valid = valid && file_name.substring(0,\
    \ 1).matches(\"^[a-zA-Z]\");\n        valid = valid && file_name.substring(file_name.indexOf(\"\
    .\") + 1).matches(\"(txt|exe|dll)\");\n        \n        if (valid) {\n      \
    \      return \"Yes\";\n        } else {\n            return \"No\";\n       \
    \ }\n", "        boolean valid = false;\n        if (file_name.length() > 3) {\n\
    \            valid = false;\n        } else {\n            valid = true;\n   \
    \     }\n        if (file_name.indexOf('.') != -1) {\n            valid = false;\n\
    \        } else {\n            valid = true;\n        }\n        if (file_name.substring(0,\
    \ 1).isEmpty()) {\n            valid = false;\n        } else {\n            valid\
    \ = true;\n        }\n        if (file_name.substring(file_name.indexOf('.') +\
    \ 1).equals(\"txt\") ||\n                file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"exe\") ||\n                file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"dll\")) {\n            valid = true;\n        } else {\n     \
    \       valid = false;\n        }\n        if (valid) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n", "        //\
    \ Your code here\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        ", "        String file_extension = file_name.substring(file_name.lastIndexOf('.'));\n\
    \        if (file_name.length() > 3 || file_name.contains(\".\") || file_extension.equals(\"\
    txt\") || file_extension.equals(\"exe\") || file_extension.equals(\"dll\")) {\n\
    \            return \"Yes\";\n        }\n        return \"No\";\n", "        //\
    \ Your code here\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        ", "        // Your code here\n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        ", "      \
    \  boolean valid = false;\n        int dotIndex = file_name.indexOf(\".\");\n\
    \        if (dotIndex == -1) {\n            valid = true;\n        } else {\n\
    \            valid = file_name.substring(0, dotIndex).matches(\"^[a-zA-Z]+\");\n\
    \        }\n        if (valid && file_name.substring(dotIndex).matches(\"^[txt|exe|dll]$\"\
    )) {\n            return file_name;\n        } else {\n            return \"No\"\
    ;\n        }\n", "        boolean valid = false;\n        int dotIndex = file_name.indexOf('.');\n\
    \        if (dotIndex == -1) {\n            valid = true;\n        } else {\n\
    \            valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[0-9]\");\n        }\n        if (!valid) {\n          \
    \  valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9]\");\n      \
    \  }\n        if (!valid) {\n            valid = file_name.substring(0, dotIndex).matches(\"\
    [a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex).matches(\"[a-zA-Z0-9.]\");\n\
    \        }\n        if (!valid) {\n            valid = file_name.substring(0,\
    \ dotIndex).matches(\"[a-zA-Z0-9.]\");\n        }\n        if (!valid) {\n   \
    \         valid = file_name.substring(0, dotIndex", "        // Your code here\n\
    \        \n        \n        return file_name;\n", "        boolean valid = false;\n\
    \        int dotIndex = file_name.indexOf(\".\");\n        if (dotIndex == -1)\
    \ {\n            valid = true;\n        } else {\n            String fileName\
    \ = file_name.substring(0, dotIndex);\n            valid = fileName.matches(\"\
    ^[a-zA-Z]+.*\");\n        }\n        return valid ? \"Yes\" : \"No\";\n", "  \
    \      \n        // Your code here\n        \n", "        boolean valid = false;\n\
    \        \n        try{\n            valid = file_name.matches(\"^[0-9]{3}\\\\\
    .[a-zA-Z]+$\");\n        }catch(Exception e){\n            valid = false;\n  \
    \      }\n        \n        if(valid){\n            try{\n                valid\
    \ = file_name.substring(0, 1).matches(\"^[a-zA-Z]\");\n            }catch(Exception\
    \ e){\n                valid = false;\n            }\n        }\n        \n  \
    \      if(valid){\n            try{\n                valid = file_name.substring(1).matches(\"\
    ^[txt|exe|dll]\");\n            }catch(Exception e){\n                valid =\
    \ false;\n            }\n        }\n        \n        if(valid){\n           \
    \ try{\n                valid = file_name.substring(0,1).matches(\"^[a-zA-Z]\"\
    );\n            }catch(Exception e){\n                valid = false;\n       \
    \     }\n        }\n        \n        if(valid){\n            try{\n         \
    \       valid = file_name.substring(0,2).matches(\"^[0-9]\");\n            }catch(Exception\
    \ e){\n                valid = false;\n            }\n        }\n        \n  \
    \      if(valid){\n            try{\n                valid = file_name.substring(0,3).matches(\"\
    ^[0-9]\");\n            }catch(Exception e){\n                valid = false;\n\
    \            }\n        }\n        \n        if(valid){\n            try{\n  \
    \              valid = file_name.substring(0,4).matches(\"^[0-9]\");\n       \
    \     }catch(Exception e){\n                valid = false;\n            }\n  \
    \      }\n        \n        if(valid){\n            try{\n                valid\
    \ = file_name.substring(0,5).matches(\"^[0-9]\");\n            }catch(Exception\
    \ e){\n                valid = false;\n            }\n        }\n        \n  \
    \      if(valid){\n            try{\n                valid = file_name.substring(0,6).matches(\"\
    ^[0-9]\");\n            }catch(Exception e){\n                valid = false;\n\
    \            }\n        }\n        \n        if(valid){\n            try{\n  \
    \              valid = file_name.substring(0,7).matches(\"^[0-9]\");\n       \
    \     }catch(Exception e){\n                valid = false;\n            }\n  \
    \      }\n        \n        if(valid){\n            try{\n                valid\
    \ = file_name.substring(0,8).matches(\"^[0-9]\");\n            }catch(Exception\
    \ e){\n                valid = false;\n            }\n        }\n        \n  \
    \      if(valid){\n            try{\n                valid = file_name.substring(0,9).matches(\"\
    ^[0-9]\");\n            }catch(Exception e){\n                valid = false;\n\
    \            }\n        }\n        \n        if(valid){\n            try{\n  \
    \              valid = file_name.substring(0,10).matches(\"^[0-9]\");\n      \
    \      }catch(Exception e){\n                valid", "        // Your code goes\
    \ here\n        \n        String file_name = file_name.toLowerCase();\n      \
    \  \n        int dotIndex = file_name.indexOf(\".\");\n        \n        if (dotIndex\
    \ == -1) {\n            return \"No\";\n        }\n        \n        String file_name\
    \ = file_name.substring(0, dotIndex);\n        \n        if (file_name.length()\
    \ > 3 || file_name.contains(\".\") || file_name.startsWith(\"a\") || file_name.startsWith(\"\
    z\") || file_name.startsWith(\"A\") || file_name.startsWith(\"Z\")) {\n      \
    \      return \"No\";\n        }\n        \n        String file_type = file_name.substring(dotIndex\
    \ + 1, file_name.length());\n        \n        if (file_type.equals(\"txt\") ||\
    \ file_type.equals(\"exe\") || file_type.equals(\"dll\")) {\n            return\
    \ \"Yes\";\n        }\n        \n        return \"No\";\n", "        boolean valid\
    \ = false;\n        \n        // Your code goes here\n        \n        return\
    \ valid ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n        \n  \
    \      // Check that the file name contains exactly one dot '.'\n        if (file_name.contains(\"\
    .\")) {\n            // Check that the substring before the dot should not be\
    \ empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \            if (file_name.substring(0, 1).matches(\"[a-zA-Z]\")) {\n        \
    \        // Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n                String extension = file_name.substring(file_name.lastIndexOf('.'));\n\
    \                if (extension.equals(\"txt\") || extension.equals(\"exe\") ||\
    \ extension.equals(\"dll\")) {\n                    valid = true;\n          \
    \      }\n            }\n        }\n        \n        // Return the result of\
    \ the check\n        return valid ? \"Yes\" : \"No\";\n", "        // Your code\
    \ here\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "        String pattern = \"^[0-9]{3}\\\\.[a-z][a-z]+$\";\n\
    \        return file_name.matches(pattern);\n", "        // Your code here\n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        ", "        // Your code here\n        boolean valid = false;\n     \
    \   int count = 0;\n        for(int i = 0; i < file_name.length(); i++) {\n  \
    \          if(file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9') {\n  \
    \              count++;\n            }\n        }\n        if(count > 3) {\n \
    \           valid = false;\n        }\n        if(file_name.indexOf('.') != -1\
    \ && file_name.substring(0, 1).equals('.')) {\n            valid = false;\n  \
    \      }\n        if(file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    exe\") || file_name.substring(file_name.indexOf('.') + 1).equals(\"dll\")) {\n\
    \            valid = true;\n        }\n        if(valid) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";\n", "        \n        // Your code\
    \ here\n        \n", "        // Your code here\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        ", "        if (file_name.length()\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.indexOf('.')\
    \ != -1) {\n            if (file_name.substring(0, 1).isEmpty()) {\n         \
    \       return \"No\";\n            }\n            if (file_name.substring(1,\
    \ 2).isEmpty()) {\n                return \"No\";\n            }\n           \
    \ if (file_name.substring(1, 2).matches(\"^[a-zA-Z]\")) {\n                return\
    \ \"No\";\n            }\n        }\n        return \"Yes\";\n", "        String\
    \ dot = \".\";\n        String dot1 = \"\";\n        String dot2 = \"\";\n   \
    \     String dot3 = \"\";\n        String dot4 = \"\";\n        String dot5 =\
    \ \"\";\n        String dot6 = \"\";\n        String dot7 = \"\";\n        String\
    \ dot8 = \"\";\n        String dot9 = \"\";\n        String dot10 = \"\";\n  \
    \      String dot11 = \"\";\n        String dot12 = \"\";\n        String dot13\
    \ = \"\";\n        String dot14 = \"\";\n        String dot15 = \"\";\n      \
    \  String dot16 = \"\";\n        String dot17 = \"\";\n        String dot18 =\
    \ \"\";\n        String dot19 = \"\";\n        String dot20 = \"\";\n        String\
    \ dot21 = \"\";\n        String dot22 = \"\";\n        String dot23 = \"\";\n\
    \        String dot24 = \"\";\n        String dot25 = \"\";\n        String dot26\
    \ = \"\";\n        String dot27 = \"\";\n        String dot28 = \"\";\n      \
    \  String dot29 = \"\";\n        String dot30 = \"\";\n        String dot31 =\
    \ \"\";\n        String dot32 = \"\";\n        String dot33 = \"\";\n        String\
    \ dot34 = \"\";\n        String dot35 = \"\";\n        String dot36 = \"\";\n\
    \        String dot37 = \"\";\n        String dot38 = \"\";\n        String dot39\
    \ = \"\";\n        String dot40 = \"\";\n        String dot41 = \"\";\n      \
    \  String dot42 = \"\";\n        String dot43 = \"\";\n        String dot44 =\
    \ \"\";\n        String dot45 = \"\";\n        String dot46 = \"\";\n        String\
    \ dot47 = \"\";\n        String dot48 = \"\";\n        String dot49 = \"\";\n\
    \        String dot50 = \"\";\n        String dot51 = \"\";\n        String dot52\
    \ = \"\";\n        String dot53 = \"\";\n        String dot54 = \"\";\n      \
    \  String dot55 = \"\";\n        String dot56 = \"\";\n        String dot57 =\
    \ \"\";\n        String dot58 = \"\";\n        String dot59 = \"\";\n        String\
    \ dot60 = \"\";\n        String dot61 = \"\";\n        String dot62 = \"\";\n\
    \        String dot63 = \"\";\n        String dot64 = \"\";\n        String dot65\
    \ = \"\";\n        String dot66 = \"\";\n        String dot67 = \"\";\n      \
    \  String dot68 = \"\";\n        String dot69 = \"\";\n        String dot70 =\
    \ \"\";\n        String dot71 = \"\";\n        String dot72 = \"\";\n        String\
    \ dot73 = \"\";\n        String dot74 = \"\";\n        String dot75 = \"\";\n\
    \        String dot76 = \"\";\n        String dot77 = \"\";\n        String dot78\
    \ = \"\";\n        String dot79 = \"\";\n        String dot80 = \"\";\n      \
    \  String dot81 = \"\";\n        String dot82 = \"\";\n        String dot83 =\
    \ \"\";\n        String dot84 = \"\";\n        String dot85 = \"\";\n        String\
    \ dot86 = \"\";\n        String dot87 = \"\";\n        String dot88 = \"\";\n\
    \        String dot89 = \"\";\n        String dot90 = \"\";\n        String dot91\
    \ = \"\";\n        String dot92 = \"\";\n        String dot93 = \"\";\n      \
    \  String dot94 = \"\";\n        String dot95 = \"\";\n        String dot96 =\
    \ \"\";\n        String ", "        // Your code here\n        boolean valid =\
    \ false;\n        \n        \n        \n        return valid;\n", "        boolean\
    \ valid = false;\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex\
    \ != -1) {\n            String fileExtension = file_name.substring(dotIndex+1);\n\
    \            valid = Arrays.stream(fileExtension.split(\"\\\\.\")).anyMatch(ext\
    \ -> ext.equals(\"txt\") || ext.equals(\"exe\") || ext.equals(\"dll\"));\n   \
    \     }\n        return valid ? \"Yes\" : \"No\";\n", "        if (file_name.length()\
    \ > 3 || file_name.indexOf('.') != -1 || file_name.substring(0, 1).isEmpty() ||\
    \ \n            !file_name.substring(0, 1).matches(\"^[a-zA-Z]\") || file_name.substring(file_name.indexOf('.')\
    \ + 1).matches(\"^[txt|exe|dll]\"))\n            return \"No\";\n        return\
    \ \"Yes\";\n", "        if (file_name.length() > 3 || file_name.indexOf('.') !=\
    \ -1 || file_name.substring(0, 1).isEmpty() || file_name.substring(file_name.indexOf('.')).toLowerCase().contains(\"\
    exe\") || file_name.substring(file_name.indexOf('.')).toLowerCase().contains(\"\
    dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n",
  "        // Your code here\n        \n        \n        \n        return file_name;\n",
  "        boolean valid = false;\n        String[] file_name_split = file_name.split(\"\
    \\\\.\");\n        if (file_name_split.length == 2) {\n            valid = true;\n\
    \            String file_name_before_dot = file_name_split[0];\n            String\
    \ file_name_after_dot = file_name_split[1];\n            if (file_name_before_dot.length()\
    \ > 3 || file_name_before_dot.isEmpty() || \n                    !Character.isLetter(file_name_before_dot[0])\
    \ || \n                    !Character.isLetter(file_name_before_dot[1])) {\n \
    \               valid = false;\n            }\n            if (file_name_after_dot.length()\
    \ > 3 || file_name_after_dot.isEmpty() || \n                    !file_name_after_dot.contains(\"\
    txt\") && !file_name_after_dot.contains(\"exe\") && !file_name_after_dot.contains(\"\
    dll\")) {\n                valid = false;\n            }\n        }\n        return\
    \ valid ? \"Yes\" : \"No\";\n", "        // Your code here\n        \n       \
    \ \n        return file_name;\n", "        boolean valid = false;\n        int\
    \ count = 0;\n        int dotCount = 0;\n        String file_name = file_name.toLowerCase();\n\
    \        char firstChar = file_name.charAt(0);\n        char lastChar = file_name.charAt(file_name.length()\
    \ - 1);\n        char firstCharUpper = Character.toUpperCase(firstChar);\n   \
    \     char lastCharUpper = Character.toUpperCase(lastChar);\n        char firstCharLower\
    \ = firstChar;\n        char lastCharLower = lastChar;\n        if (file_name.length()\
    \ > 3) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \            while (!valid) {\n                if (file_name.charAt(count) ==\
    \ '.') {\n                    dotCount++;\n                    if (dotCount >\
    \ 1) {\n                        valid = false;\n                    }\n      \
    \          } else {\n                    valid = true;\n                }\n  \
    \              count++;\n            }\n        }\n        if (file_name.charAt(0)\
    \ == firstCharUpper && file_name.charAt(file_name.length() - 1) == lastCharUpper)\
    \ {\n            valid = true;\n        }\n        if (file_name.charAt(0) ==\
    \ firstCharLower && file_name.charAt(file_name.length() - 1) == lastCharLower)\
    \ {\n            valid = true;\n        }\n        if (valid) {\n            if\
    \ (file_name.contains(\".\") && file_name.substring(0, 1).matches(\"[a-zA-Z]\"\
    ) && file_name.substring(file_name.length() - 1, file_name.length()).matches(\"\
    [txt|exe|dll]\")) {\n                valid = true;\n            }\n        }\n\
    \        if (valid) {\n            return file_name;\n        } else {\n     \
    \       return \"No\";\n        }\n", "        // Your code here\n        \n \
    \       \n        \n        return file_name;\n", "        // Your code here\n\
    \        \n        // Your code here\n        \n        // Your code here\n  \
    \      \n        // Your code here\n        \n        // Your code here\n    \
    \    \n        // Your code here\n        \n        // Your code here\n      \
    \  \n        // Your code here\n        \n        // Your code here\n        \n\
    \        // Your code here\n        \n        // Your code here\n        \n  \
    \      // Your code here\n        \n        // Your code here\n        \n    \
    \    // Your code here\n        \n        // Your code here\n        \n      \
    \  // Your code here\n        \n        // Your code here\n        \n        //\
    \ Your code here\n        \n        // Your code here\n        \n        // Your\
    \ code here\n        \n        // Your code here\n        \n        // Your code\
    \ here\n        \n        // Your code here\n        \n        // Your code here\n\
    \        \n        // Your code here\n        \n        // Your code here\n  \
    \      \n        // Your code here\n        \n        // Your code here\n    \
    \    \n        // Your code here\n        \n        // Your code here\n      \
    \  \n        // Your code here\n        \n        // Your code here\n        \n\
    \        // Your code here\n        \n        // Your code here\n        \n  \
    \      // Your code here\n        \n        // Your code here\n        \n    \
    \    // Your code here\n        \n        // Your code here\n        \n      \
    \  // Your code here\n        \n        // Your code here\n        \n        //\
    \ Your code here\n        \n        // Your code here\n        \n        // Your\
    \ code here\n        \n        // Your code here\n        \n        // Your code\
    \ here\n        \n        // Your code here\n        \n        // Your code here\n\
    \        \n        // Your code here\n        \n        // Your code here\n  \
    \      \n        // Your code here\n        \n        // Your code here\n    \
    \    \n        // Your code here\n        \n        // Your code here\n      \
    \  \n        // Your code here\n        \n        // Your code here\n        \n\
    \        // Your code here\n        \n        // Your code here\n        \n  \
    \      // Your code here\n        \n        // Your code here\n        \n    \
    \    // Your code here\n        \n        // Your code here\n        \n      \
    \  // Your code here\n        \n        // Your code here\n        \n        //\
    \ Your code here\n        \n        // Your code here\n        \n        // Your\
    \ code here\n        \n        // Your code here\n        \n        // Your code\
    \ here\n        \n        // Your code here\n        \n        // Your code here\n\
    \        \n        // Your code here\n        \n        // Your code here\n  \
    \      \n        // Your code here\n        \n        // ", "        if (file_name.length()\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.indexOf('.')\
    \ != -1) {\n            if (file_name.substring(0, 1).isEmpty()) {\n         \
    \       return \"No\";\n            }\n            if (file_name.substring(0,\
    \ 1).matches(\"[a-zA-Z]\")) {\n                return \"No\";\n            }\n\
    \        }\n        if (file_name.matches(\".*\\\\.(txt|exe|dll)$\")) {\n    \
    \        return \"Yes\";\n        }\n        return \"No\";\n", "        boolean\
    \ valid = false;\n        if (file_name.length() > 3) {\n            valid = false;\n\
    \        } else {\n            valid = true;\n        }\n        if (file_name.contains(\"\
    .\")) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \        }\n        if (file_name.substring(0, 1).isEmpty()) {\n            valid\
    \ = false;\n        } else {\n            valid = true;\n        }\n        if\
    \ (file_name.substring(file_name.indexOf(\".\") + 1).equals(\"txt\") ||\n    \
    \            file_name.substring(file_name.indexOf(\".\") + 1).equals(\"exe\"\
    ) ||\n                file_name.substring(file_name.indexOf(\".\") + 1).equals(\"\
    dll\")) {\n            valid = true;\n        } else {\n            valid = false;\n\
    \        }\n        if (valid) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n", "        boolean valid = false;\n\
    \        \n        // Check that the file name contains exactly one dot '.'\n\
    \        if(file_name.contains(\".\")){\n            // Check that the file's\
    \ name contains exactly three digits ('0'-'9')\n            valid = file_name.matches(\"\
    ^[0-9]{3}$\");\n        }\n        \n        // Check that the file's name starts\
    \ with a latin alphapet letter\n        if(file_name.matches(\"^[a-zA-Z]\")){\n\
    \            // Check that the substring before the dot should not be empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    \
    \        valid = file_name.matches(\"^[^.]*$\");\n        }\n        \n      \
    \  // Check that the substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n        valid = file_name.matches(\"^[txt|exe|dll]$\");\n        \n\
    \        // Return Yes if the file's name is valid, and No if it is invalid\n\
    \        return valid ? \"Yes\" : \"No\";\n", "        String pattern = \"^[0-9]{3}\\\
    \\.[a-zA-Z]+$\";\n        boolean isValid = file_name.matches(pattern);\n    \
    \    return isValid ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n\
    \        \n        // Your code goes here\n        \n        return valid ? \"\
    Yes\" : \"No\";\n", "        // Your code here\n        \n        \n        return\
    \ file_name;\n", "        boolean valid = false;\n        String[] file_name =\
    \ file_name.split(\"\\\\.\");\n        if (file_name.length != 3 || file_name[0].equals(\"\
    \") || file_name[1].equals(\"\") || file_name[2].equals(\"\")) {\n           \
    \ valid = false;\n        } else {\n            valid = true;\n        }\n   \
    \     return valid ? \"Yes\" : \"No\";\n", "        boolean valid = false;\n \
    \       \n        // Your code goes here\n        \n        return valid ? \"\
    Yes\" : \"No\";\n", "        // Your code here\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        ", "        boolean valid\
    \ = false;\n        \n        // Check that the file's name contains exactly one\
    \ dot '.'\n        if (file_name.contains(\".\")) {\n            // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \    if (file_name.matches(\"[0-9]{3}\")) {\n                // Check that the\
    \ file's name does not contain more than three digits ('0'-'9')\n            \
    \    if (file_name.matches(\"[0-9]{3}\")) {\n                    // Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n        \
    \            if (file_name.matches(\"[0-9]{3}\")) {\n                        //\
    \ Check that the file's name does not contain more than three digits ('0'-'9')\n\
    \                        if (file_name.matches(\"[0-9]{3}\")) {\n            \
    \                // Check that the file's name does not contain more than three\
    \ digits ('0'-'9')\n                            if (file_name.matches(\"[0-9]{3}\"\
    )) {\n                                // Check that the file's name does not contain\
    \ more than three digits ('0'-'9')\n                                if (file_name.matches(\"\
    [0-9]{3}\")) {\n                                    // Check that the file's name\
    \ does not contain more than three digits ('0'-'9')\n                        \
    \            if (file_name.matches(\"[0-9]{3}\")) {\n                        \
    \                // Check that the file's name does not contain more than three\
    \ digits ('0'-'9')\n                                        if (file_name.matches(\"\
    [0-9]{3}\")) {\n                                            // Check that the\
    \ file's name does not contain more than three digits ('0'-'9')\n            \
    \                                if (file_name.matches(\"[0-9]{3}\")) {\n    \
    \                                            // Check that the file's name does\
    \ not contain more than three digits ('0'-'9')\n                             \
    \                   if (file_name.matches(\"[0-9]{3}\")) {\n                 \
    \                                   // Check that the file's name does not contain\
    \ more than three digits ('0'-'9')\n                                         \
    \           if (file_name.matches(\"[0-9]{3}\")) {\n                         \
    \                               // Check that the file's name does not contain\
    \ more than three digits ('0'-'9')\n                                         \
    \               if (file_name.matches(\"[0-9]{3}\")) {\n                     \
    \                                       // Check that the file's name does not\
    \ contain more than three digits ('0'-'9')\n                                 \
    \                           if (file_name.matches(\"[0-9]{3}\")) {\n         \
    \                                                       // Check that the file's\
    \ name does not contain more than three digits ('0'-'9')\n                   \
    \                                             if (file_name.matches(\"[0-9]{3}\"\
    )) {\n                                                                    // Check\
    \ that the file's name does not contain more than three digits ('0'-'9')\n   \
    \                                                                 if (file_name.matches(\"\
    [0-9]{3}\")) {\n                                                             \
    \           // Check that the file's name does not contain more than three digits\
    \ ('0'-'9')\n                                                                \
    \        if (file_name.matches(\"[0-9]{3}\")) {\n                            \
    \                                                // Check that the file's name\
    \ does not contain more than three digits ('0'-'9')\n                        \
    \                                                    if (file_name.matches(\"",
  "        // Your code here\n        \n        String file_name = file_name.toLowerCase();\n\
    \        \n        int dot_index = file_name.indexOf(\".\");\n        \n     \
    \   if (dot_index == -1) {\n            return \"No\";\n        }\n        \n\
    \        String file_name = file_name.substring(0, dot_index);\n        \n   \
    \     char first_letter = file_name.charAt(0);\n        \n        if (first_letter\
    \ < 'a' || first_letter > 'z') {\n            return \"No\";\n        }\n    \
    \    \n        String[] extensions = {\"txt\", \"exe\", \"dll\"};\n        \n\
    \        if (extensions.contains(file_name.substring(dot_index + 1).toLowerCase()))\
    \ {\n            return \"Yes\";\n        }\n        \n        return \"No\";\n",
  "        // Your code here\n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        "]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
