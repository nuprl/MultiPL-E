name: HumanEval_139_special_factorial
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long counter = 1;\n        while (counter <= n) {\n          \
    \  factorial *= counter;\n            counter++;\n        }\n        return factorial;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6m6tmvm0.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfnr782il.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz09169jm.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwj356y4.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_1 = 1;\n        long factorial_2 = 1;\n       \
    \ long factorial_3 = 1;\n        long factorial_4 = 1;\n        long factorial_5\
    \ = 1;\n        long factorial_6 = 1;\n        long factorial_7 = 1;\n       \
    \ long factorial_8 = 1;\n        long factorial_9 = 1;\n        long factorial_10\
    \ = 1;\n        long factorial_11 = 1;\n        long factorial_12 = 1;\n     \
    \   long factorial_13 = 1;\n        long factorial_14 = 1;\n        long factorial_15\
    \ = 1;\n        long factorial_16 = 1;\n        long factorial_17 = 1;\n     \
    \   long factorial_18 = 1;\n        long factorial_19 = 1;\n        long factorial_20\
    \ = 1;\n        long factorial_21 = 1;\n        long factorial_22 = 1;\n     \
    \   long factorial_23 = 1;\n        long factorial_24 = 1;\n        long factorial_25\
    \ = 1;\n        long factorial_26 = 1;\n        long factorial_27 = 1;\n     \
    \   long factorial_28 = 1;\n        long factorial_29 = 1;\n        long factorial_30\
    \ = 1;\n        long factorial_31 = 1;\n        long factorial_32 = 1;\n     \
    \   long factorial_33 = 1;\n        long factorial_34 = 1;\n        long factorial_35\
    \ = 1;\n        long factorial_36 = 1;\n        long factorial_37 = 1;\n     \
    \   long factorial_38 = 1;\n        long factorial_39 = 1;\n        long factorial_40\
    \ = 1;\n        long factorial_41 = 1;\n        long factorial_42 = 1;\n     \
    \   long factorial_43 = 1;\n        long factorial_44 = 1;\n        long factorial_45\
    \ = 1;\n        long factorial_46 = 1;\n        long factorial_47 = 1;\n     \
    \   long factorial_48 = 1;\n        long factorial_49 = 1;\n        long factorial_50\
    \ = 1;\n        long factorial_51 = 1;\n        long factorial_52 = 1;\n     \
    \   long factorial_53 = 1;\n        long factorial_54 = 1;\n        long factorial_55\
    \ = 1;\n        long factorial_56 = 1;\n        long factorial_57 = 1;\n     \
    \   long factorial_58 = 1;\n        long factorial_59 = 1;\n        long factorial_60\
    \ = 1;\n        long factorial_61 = 1;\n        long factorial_62 = 1;\n     \
    \   long factorial_63 = 1;\n        long factorial_64 = 1;\n        long factorial_65\
    \ = 1;\n        long factorial_66 = 1;\n        long factorial_67 = 1;\n     \
    \   long factorial_68 = 1;\n        long factorial_69 = 1;\n        long factorial_70\
    \ = 1;\n        long factorial_71 = 1;\n        long factorial_72 = \n    }\n\
    \    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpgj_klcsv.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpgj_klcsv.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpgj_klcsv.java:92: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpgj_klcsv.java:92:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpgj_klcsv.java:92: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpgj_klcsv.java:92:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpgj_klcsv.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgqbsdr1o.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbj2t_err.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpggwtbp63.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbciq_8b0.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3xd8vfll.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpekbu4ztl.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi45o8_uj.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpelil7i2o.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnuggy7mj.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzlc7sjc2.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzrbksdk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphu5rhssl.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn3magfyd.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidvtu_5f.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnlwzx0u.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52jvtruf.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2noe83en.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptauncr63.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4q0oidke.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzsu15bki.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp33sn5fu3.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_of_n = (long) Math.pow(n, factorial);\n       \
    \ factorial++;\n        return factorial_of_n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7x7o4hg0.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0221iejv.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgto8pywq.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprgru81xr.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92nita3n.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvt9nk6ri.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_1 = 1;\n        long factorial_2 = 1;\n       \
    \ long factorial_3 = 1;\n        long factorial_4 = 1;\n        long factorial_5\
    \ = 1;\n        long factorial_6 = 1;\n        long factorial_7 = 1;\n       \
    \ long factorial_8 = 1;\n        long factorial_9 = 1;\n        long factorial_10\
    \ = 1;\n        long factorial_11 = 1;\n        long factorial_12 = 1;\n     \
    \   long factorial_13 = 1;\n        long factorial_14 = 1;\n        long factorial_15\
    \ = 1;\n        long factorial_16 = 1;\n        long factorial_17 = 1;\n     \
    \   long factorial_18 = 1;\n        long factorial_19 = 1;\n        long factorial_20\
    \ = 1;\n        long factorial_21 = 1;\n        long factorial_22 = 1;\n     \
    \   long factorial_23 = 1;\n        long factorial_24 = 1;\n        long factorial_25\
    \ = 1;\n        long factorial_26 = 1;\n        long factorial_27 = 1;\n     \
    \   long factorial_28 = 1;\n        long factorial_29 = 1;\n        long factorial_30\
    \ = 1;\n        long factorial_31 = 1;\n        long factorial_32 = 1;\n     \
    \   long factorial_33 = 1;\n        long factorial_34 = 1;\n        long factorial_35\
    \ = 1;\n        long factorial_36 = 1;\n        long factorial_37 = 1;\n     \
    \   long factorial_38 = 1;\n        long factorial_39 = 1;\n        long factorial_40\
    \ = 1;\n        long factorial_41 = 1;\n        long factorial_42 = 1;\n     \
    \   long factorial_43 = 1;\n        long factorial_44 = 1;\n        long factorial_45\
    \ = 1;\n        long factorial_46 = 1;\n        long factorial_47 = 1;\n     \
    \   long factorial_48 = 1;\n        long factorial_49 = 1;\n        long factorial_50\
    \ = 1;\n        long factorial_51 = 1;\n        long factorial_52 = 1;\n     \
    \   long factorial_53 = 1;\n        long factorial_54 = 1;\n        long factorial_55\
    \ = 1;\n        long factorial_56 = 1;\n        long factorial_57 = 1;\n     \
    \   long factorial_58 = 1;\n        long factorial_59 = 1;\n        long factorial_60\
    \ = 1;\n        long factorial_61 = 1;\n        long factorial_62 = 1;\n     \
    \   long factorial_63 = 1;\n        long factorial_64 = 1;\n        long factorial_65\
    \ = 1;\n        long factorial_66 = 1;\n        long factorial_67 = 1;\n     \
    \   long factorial_68 = 1;\n        long factorial_69 = 1;\n        long factorial_70\
    \ = 1;\n        long factorial_71 = 1;\n        long factorial_72 = \n    }\n\
    \    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcwx2ujtb.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcwx2ujtb.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpcwx2ujtb.java:92: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpcwx2ujtb.java:92:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpcwx2ujtb.java:92: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpcwx2ujtb.java:92:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpcwx2ujtb.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppujpxals.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj6ym5zpx.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp91dr5ayk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwjinitpj.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_of_n = 0;\n        long factorial_of_n_minus_1\
    \ = 1;\n        long factorial_of_n_minus_2 = 1;\n        long factorial_of_n_minus_3\
    \ = 1;\n        long factorial_of_n_minus_4 = 1;\n        long factorial_of_n_minus_5\
    \ = 1;\n        long factorial_of_n_minus_6 = 1;\n        long factorial_of_n_minus_7\
    \ = 1;\n        long factorial_of_n_minus_8 = 1;\n        long factorial_of_n_minus_9\
    \ = 1;\n        long factorial_of_n_minus_10 = 1;\n        long factorial_of_n_minus_11\
    \ = 1;\n        long factorial_of_n_minus_12 = 1;\n        long factorial_of_n_minus_13\
    \ = 1;\n        long factorial_of_n_minus_14 = 1;\n        long factorial_of_n_minus_15\
    \ = 1;\n        long factorial_of_n_minus_16 = 1;\n        long factorial_of_n_minus_17\
    \ = 1;\n        long factorial_of_n_minus_18 = 1;\n        long factorial_of_n_minus_19\
    \ = 1;\n        long factorial_of_n_minus_20 = 1;\n        long factorial_of_n_minus_21\
    \ = 1;\n        long factorial_of_n_minus_22 = 1;\n        long factorial_of_n_minus_23\
    \ = 1;\n        long factorial_of_n_minus_24 = 1;\n        long factorial_of_n_minus_25\
    \ = 1;\n        long factorial_of_n_minus_26 = 1;\n        long factorial_of_n_minus_27\
    \ = 1;\n        long factorial_of_n_minus_28 = 1;\n        long factorial_of_n_minus_29\
    \ = 1;\n        long factorial_of_n_minus_30 = 1;\n        long factorial_of_n_minus_31\
    \ = 1;\n        long factorial_of_n_minus_32 = 1;\n        long factorial_of_n_minus_33\
    \ = 1;\n        long factorial_of_n_minus_34 = 1;\n        long factorial_of_n_minus_35\
    \ = 1;\n        long factorial_of_n_minus_36 = 1;\n        long factorial_of_n_minus_37\
    \ = 1;\n        long factorial_of_n_minus_38 = 1;\n        long factorial_of_n_minus_39\
    \ = 1;\n        long factorial_of_n_minus_40 = 1;\n        long factorial_of_n_minus_41\
    \ = 1;\n        long factorial_of_n_minus_42 = 1;\n        long factorial_of_n_minus_43\
    \ = 1;\n        long factorial_of_n_minus_44 = 1;\n        long factorial_of_n_minus_45\
    \ = 1;\n        long factorial_\n    }\n    public static void main(String[] args)\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpogu7h3om.java:65: error: ';' expected\n        long factorial_\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8seh8zjl.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4jycc5ci.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphgcg7a8v.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0or3nqb0.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0ih78v9.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc5xj430p.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjchli3b2.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp8b3peov.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqpg1lgog.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdk9949th.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1oa_u3m5.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpooz759n3.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpw5k6hh.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqt7mfit.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihvs1w4h.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_oycs_o.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhxqaqv4.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ch_ea9h.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzx9h7d4t.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxwfjp1y6.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzb74wpm.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfi78bhth.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcw9hc7a8.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvwqg2269.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        long factorial = 1;\n        while (n > 1) {\n            factorial\
    \ *= n;\n            n--;\n        }\n        while (factorial > 1) {\n      \
    \      result *= factorial;\n            factorial /= n;\n        }\n        return\
    \ result;\n\n    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1gm2zx_.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzo1x8brf.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9fdny7pd.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfy6umrpr.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplprhsam5.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpsj0m4d.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvafw2zl.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwwzj6g_.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprb4oqv9i.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkxhear81.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3pnvq9p.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp196l01i3.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuii5wu73.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdcbnmhw6.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppihc5lwq.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwv1_dwsv.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpff3hwflq.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4wirncbk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqsewl059.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_z2hlhon.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwo2w5so7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nk1dux7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_of_n = 0;\n        long factorial_of_n_minus_1\
    \ = 1;\n        long factorial_of_n_minus_2 = 1;\n        long factorial_of_n_minus_3\
    \ = 1;\n        long factorial_of_n_minus_4 = 1;\n        long factorial_of_n_minus_5\
    \ = 1;\n        long factorial_of_n_minus_6 = 1;\n        long factorial_of_n_minus_7\
    \ = 1;\n        long factorial_of_n_minus_8 = 1;\n        long factorial_of_n_minus_9\
    \ = 1;\n        long factorial_of_n_minus_10 = 1;\n        long factorial_of_n_minus_11\
    \ = 1;\n        long factorial_of_n_minus_12 = 1;\n        long factorial_of_n_minus_13\
    \ = 1;\n        long factorial_of_n_minus_14 = 1;\n        long factorial_of_n_minus_15\
    \ = 1;\n        long factorial_of_n_minus_16 = 1;\n        long factorial_of_n_minus_17\
    \ = 1;\n        long factorial_of_n_minus_18 = 1;\n        long factorial_of_n_minus_19\
    \ = 1;\n        long factorial_of_n_minus_20 = 1;\n        long factorial_of_n_minus_21\
    \ = 1;\n        long factorial_of_n_minus_22 = 1;\n        long factorial_of_n_minus_23\
    \ = 1;\n        long factorial_of_n_minus_24 = 1;\n        long factorial_of_n_minus_25\
    \ = 1;\n        long factorial_of_n_minus_26 = 1;\n        long factorial_of_n_minus_27\
    \ = 1;\n        long factorial_of_n_minus_28 = 1;\n        long factorial_of_n_minus_29\
    \ = 1;\n        long factorial_of_n_minus_30 = 1;\n        long factorial_of_n_minus_31\
    \ = 1;\n        long factorial_of_n_minus_32 = 1;\n        long factorial_of_n_minus_33\
    \ = 1;\n        long factorial_of_n_minus_34 = 1;\n        long factorial_of_n_minus_35\
    \ = 1;\n        long factorial_of_n_minus_36 = 1;\n        long factorial_of_n_minus_37\
    \ = 1;\n        long factorial_of_n_minus_38 = 1;\n        long factorial_of_n_minus_39\
    \ = 1;\n        long factorial_of_n_minus_40 = 1;\n        long factorial_of_n_minus_41\
    \ = 1;\n        long factorial_of_n_minus_42 = 1;\n        long factorial_of_n_minus_43\
    \ = 1;\n        long factorial_of_n_minus_44 = 1;\n        long factorial_of_n_minus_45\
    \ = 1;\n        long factorial_\n    }\n    public static void main(String[] args)\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8qbop996.java:65: error: ';' expected\n        long factorial_\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_of_n = 0;\n        long factorial_of_nminus1 =\
    \ factorial;\n        long factorial_of_nminus2 = factorial;\n        long factorial_of_nminus3\
    \ = factorial;\n        long factorial_of_nminus4 = factorial;\n        long factorial_of_nminus5\
    \ = factorial;\n        long factorial_of_nminus6 = factorial;\n        long factorial_of_nminus7\
    \ = factorial;\n        long factorial_of_nminus8 = factorial;\n        long factorial_of_nminus9\
    \ = factorial;\n        long factorial_of_nminus10 = factorial;\n        long\
    \ factorial_of_nminus11 = factorial;\n        long factorial_of_nminus12 = factorial;\n\
    \        long factorial_of_nminus13 = factorial;\n        long factorial_of_nminus14\
    \ = factorial;\n        long factorial_of_nminus15 = factorial;\n        long\
    \ factorial_of_nminus16 = factorial;\n        long factorial_of_nminus17 = factorial;\n\
    \        long factorial_of_nminus18 = factorial;\n        long factorial_of_nminus19\
    \ = factorial;\n        long factorial_of_nminus20 = factorial;\n        long\
    \ factorial_of_nminus21 = factorial;\n        long factorial_of_nminus22 = factorial;\n\
    \        long factorial_of_nminus23 = factorial;\n        long factorial_of_nminus24\
    \ = factorial;\n        long factorial_of_nminus25 = factorial;\n        long\
    \ factorial_of_nminus26 = factorial;\n        long factorial_of_nminus27 = factorial;\n\
    \        long factorial_of_nminus28 = factorial;\n        long factorial_of_nminus29\
    \ = factorial;\n        long factorial_of_nminus30 = factorial;\n        long\
    \ factorial_of_nminus31 = factorial;\n        long factorial_of_nminus32 = factorial;\n\
    \        long factorial_of_nminus33 = factorial;\n        long factorial_of_nminus34\
    \ = factorial;\n        long factorial_of_nminus35 = factorial;\n        long\
    \ factorial_of_nminus36 = factorial;\n        long factorial_of_nminus37 = factorial;\n\
    \        long factorial_of_nminus38 = factorial;\n        long factorial_of_nminus39\
    \ = factorial;\n        long factori\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvc7rrgoi.java:59: error: ';' expected\n        long factori\n \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptv3q14d3.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo7yh76_3.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorialFactor = 1;\n        for (int i = 1; i <= n; i++)\
    \ {\n            factorial *= i;\n            factorialFactor *= factorial;\n\
    \        }\n        return factorialFactor;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyvcahe0v.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ybam8x8.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnsdwppry.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt_nx90qz.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6qoa150.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7fjezup4.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial1 = 1;\n        long factorial2 = 1;\n        long\
    \ factorial3 = 1;\n        long factorial4 = 1;\n        long factorial5 = 1;\n\
    \        long factorial6 = 1;\n        long factorial7 = 1;\n        long factorial8\
    \ = 1;\n        long factorial9 = 1;\n        long factorial10 = 1;\n        long\
    \ factorial11 = 1;\n        long factorial12 = 1;\n        long factorial13 =\
    \ 1;\n        long factorial14 = 1;\n        long factorial15 = 1;\n        long\
    \ factorial16 = 1;\n        long factorial17 = 1;\n        long factorial18 =\
    \ 1;\n        long factorial19 = 1;\n        long factorial20 = 1;\n        long\
    \ factorial21 = 1;\n        long factorial22 = 1;\n        long factorial23 =\
    \ 1;\n        long factorial24 = 1;\n        long factorial25 = 1;\n        long\
    \ factorial26 = 1;\n        long factorial27 = 1;\n        long factorial28 =\
    \ 1;\n        long factorial29 = 1;\n        long factorial30 = 1;\n        long\
    \ factorial31 = 1;\n        long factorial32 = 1;\n        long factorial33 =\
    \ 1;\n        long factorial34 = 1;\n        long factorial35 = 1;\n        long\
    \ factorial36 = 1;\n        long factorial37 = 1;\n        long factorial38 =\
    \ 1;\n        long factorial39 = 1;\n        long factorial40 = 1;\n        long\
    \ factorial41 = 1;\n        long factorial42 = 1;\n        long factorial43 =\
    \ 1;\n        long factorial44 = 1;\n        long factorial45 = 1;\n        long\
    \ factorial46 = 1;\n        long factorial47 = 1;\n        long factorial48 =\
    \ 1;\n        long factorial49 = 1;\n        long factorial50 = 1;\n        long\
    \ factorial51 = 1;\n        long factorial52 = 1;\n        long factorial53 =\
    \ 1;\n        long factorial54 = 1;\n        long factorial55 = 1;\n        long\
    \ factorial56 = 1;\n        long factorial57 = 1;\n        long factorial58 =\
    \ 1;\n        long factorial59 = 1;\n        long factorial60 = 1;\n        long\
    \ factorial61 = 1;\n        long factorial62 = 1;\n        long factorial63 =\
    \ 1;\n        long factorial64 = 1;\n        long factorial65 = 1;\n        long\
    \ factorial66 = 1;\n        long factorial67 = 1;\n        long factorial68 =\
    \ 1;\n        long factorial69 = 1;\n        long factorial70 = 1;\n        long\
    \ factorial71 = 1;\n        long factorial72 = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4b5zg9jl.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4b5zg9jl.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp4b5zg9jl.java:92: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp4b5zg9jl.java:92:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp4b5zg9jl.java:92: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp4b5zg9jl.java:92:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp4b5zg9jl.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpja7lz_nq.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpikn73zyn.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyulviw9a.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzc09u9mq.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_2 = 1;\n        long factorial_3 = 1;\n       \
    \ long factorial_4 = 1;\n        long factorial_5 = 1;\n        long factorial_6\
    \ = 1;\n        long factorial_7 = 1;\n        long factorial_8 = 1;\n       \
    \ long factorial_9 = 1;\n        long factorial_10 = 1;\n        long factorial_11\
    \ = 1;\n        long factorial_12 = 1;\n        long factorial_13 = 1;\n     \
    \   long factorial_14 = 1;\n        long factorial_15 = 1;\n        long factorial_16\
    \ = 1;\n        long factorial_17 = 1;\n        long factorial_18 = 1;\n     \
    \   long factorial_19 = 1;\n        long factorial_20 = 1;\n        long factorial_21\
    \ = 1;\n        long factorial_22 = 1;\n        long factorial_23 = 1;\n     \
    \   long factorial_24 = 1;\n        long factorial_25 = 1;\n        long factorial_26\
    \ = 1;\n        long factorial_27 = 1;\n        long factorial_28 = 1;\n     \
    \   long factorial_29 = 1;\n        long factorial_30 = 1;\n        long factorial_31\
    \ = 1;\n        long factorial_32 = 1;\n        long factorial_33 = 1;\n     \
    \   long factorial_34 = 1;\n        long factorial_35 = 1;\n        long factorial_36\
    \ = 1;\n        long factorial_37 = 1;\n        long factorial_38 = 1;\n     \
    \   long factorial_39 = 1;\n        long factorial_40 = 1;\n        long factorial_41\
    \ = 1;\n        long factorial_42 = 1;\n        long factorial_43 = 1;\n     \
    \   long factorial_44 = 1;\n        long factorial_45 = 1;\n        long factorial_46\
    \ = 1;\n        long factorial_47 = 1;\n        long factorial_48 = 1;\n     \
    \   long factorial_49 = 1;\n        long factorial_50 = 1;\n        long factorial_51\
    \ = 1;\n        long factorial_52 = 1;\n        long factorial_53 = 1;\n     \
    \   long factorial_54 = 1;\n        long factorial_55 = 1;\n        long factorial_56\
    \ = 1;\n        long factorial_57 = 1;\n        long factorial_58 = 1;\n     \
    \   long factorial_59 = 1;\n        long factorial_60 = 1;\n        long factorial_61\
    \ = 1;\n        long factorial_62 = 1;\n        long factorial_63 = 1;\n     \
    \   long factorial_64 = 1;\n        long factorial_65 = 1;\n        long factorial_66\
    \ = 1;\n        long factorial_67 = 1;\n        long factorial_68 = 1;\n     \
    \   long factorial_69 = 1;\n        long factorial_70 = 1;\n        long factorial_71\
    \ = 1;\n        long factorial_72 = 1;\n        long factorial_\n    }\n    public\
    \ static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprpm4tea7.java:90: error: ';' expected\n        long factorial_\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq50_gjfm.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long counter = 1;\n        while (counter <= n) {\n          \
    \  factorial *= counter;\n            counter++;\n        }\n        return factorial;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6s54coix.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8s1qtzh6.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4pspxpt.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1zdv_too.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_1 = 1;\n        long factorial_2 = 1;\n       \
    \ long factorial_3 = 1;\n        long factorial_4 = 1;\n        long factorial_5\
    \ = 1;\n        long factorial_6 = 1;\n        long factorial_7 = 1;\n       \
    \ long factorial_8 = 1;\n        long factorial_9 = 1;\n        long factorial_10\
    \ = 1;\n        long factorial_11 = 1;\n        long factorial_12 = 1;\n     \
    \   long factorial_13 = 1;\n        long factorial_14 = 1;\n        long factorial_15\
    \ = 1;\n        long factorial_16 = 1;\n        long factorial_17 = 1;\n     \
    \   long factorial_18 = 1;\n        long factorial_19 = 1;\n        long factorial_20\
    \ = 1;\n        long factorial_21 = 1;\n        long factorial_22 = 1;\n     \
    \   long factorial_23 = 1;\n        long factorial_24 = 1;\n        long factorial_25\
    \ = 1;\n        long factorial_26 = 1;\n        long factorial_27 = 1;\n     \
    \   long factorial_28 = 1;\n        long factorial_29 = 1;\n        long factorial_30\
    \ = 1;\n        long factorial_31 = 1;\n        long factorial_32 = 1;\n     \
    \   long factorial_33 = 1;\n        long factorial_34 = 1;\n        long factorial_35\
    \ = 1;\n        long factorial_36 = 1;\n        long factorial_37 = 1;\n     \
    \   long factorial_38 = 1;\n        long factorial_39 = 1;\n        long factorial_40\
    \ = 1;\n        long factorial_41 = 1;\n        long factorial_42 = 1;\n     \
    \   long factorial_43 = 1;\n        long factorial_44 = 1;\n        long factorial_45\
    \ = 1;\n        long factorial_46 = 1;\n        long factorial_47 = 1;\n     \
    \   long factorial_48 = 1;\n        long factorial_49 = 1;\n        long factorial_50\
    \ = 1;\n        long factorial_51 = 1;\n        long factorial_52 = 1;\n     \
    \   long factorial_53 = 1;\n        long factorial_54 = 1;\n        long factorial_55\
    \ = 1;\n        long factorial_56 = 1;\n        long factorial_57 = 1;\n     \
    \   long factorial_58 = 1;\n        long factorial_59 = 1;\n        long factorial_60\
    \ = 1;\n        long factorial_61 = 1;\n        long factorial_62 = 1;\n     \
    \   long factorial_63 = 1;\n        long factorial_64 = 1;\n        long factorial_65\
    \ = 1;\n        long factorial_66 = 1;\n        long factorial_67 = 1;\n     \
    \   long factorial_68 = 1;\n        long factorial_69 = 1;\n        long factorial_70\
    \ = 1;\n        long factorial_71 = 1;\n        long factorial_72 = \n    }\n\
    \    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpedoq4fro.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpedoq4fro.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpedoq4fro.java:92: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpedoq4fro.java:92:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpedoq4fro.java:92: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpedoq4fro.java:92:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpedoq4fro.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptgga8ieu.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzb2latr.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07_ca_a2.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgsub9gw5.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua_4sm24.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7mzc5izt.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2uj047rn.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kwtom7i.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxtg9_n72.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzw5o2emp.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprlfqg0mb.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpclag7iuy.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7y850ybw.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03rb36lq.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8egx_n1y.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23qp51kv.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvh1jvfhc.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nbzng_h.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe297k8gy.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8mouwnt.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for(long i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplx7zt8xo.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8annm51g.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_of_n = 0;\n        for(int i = 1; i <= n; i++)\
    \ {\n            factorial_of_n = factorial_of_n * i;\n        }\n        factorial\
    \ = factorial * factorial_of_n;\n        return factorial;\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_g8c22lw.java:28)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdzklo79m.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse7yz9zs.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_g6yy_1.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpttjybfqa.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbwvi0ofa.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1jw_iakl.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv8w_1pno.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zrms3xk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1oeehdr.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8smgdh7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp37j_rxtt.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63vut7vg.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphupu3z0w.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprpsbb7bp.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_1 = 1;\n        long factorial_2 = 1;\n       \
    \ long factorial_3 = 1;\n        long factorial_4 = 1;\n        long factorial_5\
    \ = 1;\n        long factorial_6 = 1;\n        long factorial_7 = 1;\n       \
    \ long factorial_8 = 1;\n        long factorial_9 = 1;\n        long factorial_10\
    \ = 1;\n        long factorial_11 = 1;\n        long factorial_12 = 1;\n     \
    \   long factorial_13 = 1;\n        long factorial_14 = 1;\n        long factorial_15\
    \ = 1;\n        long factorial_16 = 1;\n        long factorial_17 = 1;\n     \
    \   long factorial_18 = 1;\n        long factorial_19 = 1;\n        long factorial_20\
    \ = 1;\n        long factorial_21 = 1;\n        long factorial_22 = 1;\n     \
    \   long factorial_23 = 1;\n        long factorial_24 = 1;\n        long factorial_25\
    \ = 1;\n        long factorial_26 = 1;\n        long factorial_27 = 1;\n     \
    \   long factorial_28 = 1;\n        long factorial_29 = 1;\n        long factorial_30\
    \ = 1;\n        long factorial_31 = 1;\n        long factorial_32 = 1;\n     \
    \   long factorial_33 = 1;\n        long factorial_34 = 1;\n        long factorial_35\
    \ = 1;\n        long factorial_36 = 1;\n        long factorial_37 = 1;\n     \
    \   long factorial_38 = 1;\n        long factorial_39 = 1;\n        long factorial_40\
    \ = 1;\n        long factorial_41 = 1;\n        long factorial_42 = 1;\n     \
    \   long factorial_43 = 1;\n        long factorial_44 = 1;\n        long factorial_45\
    \ = 1;\n        long factorial_46 = 1;\n        long factorial_47 = 1;\n     \
    \   long factorial_48 = 1;\n        long factorial_49 = 1;\n        long factorial_50\
    \ = 1;\n        long factorial_51 = 1;\n        long factorial_52 = 1;\n     \
    \   long factorial_53 = 1;\n        long factorial_54 = 1;\n        long factorial_55\
    \ = 1;\n        long factorial_56 = 1;\n        long factorial_57 = 1;\n     \
    \   long factorial_58 = 1;\n        long factorial_59 = 1;\n        long factorial_60\
    \ = 1;\n        long factorial_61 = 1;\n        long factorial_62 = 1;\n     \
    \   long factorial_63 = 1;\n        long factorial_64 = 1;\n        long factorial_65\
    \ = 1;\n        long factorial_66 = 1;\n        long factorial_67 = 1;\n     \
    \   long factorial_68 = 1;\n        long factorial_69 = 1;\n        long factorial_70\
    \ = 1;\n        long factorial_71 = 1;\n        long factorial_72 = \n    }\n\
    \    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjzir6er8.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpjzir6er8.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpjzir6er8.java:92: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpjzir6er8.java:92:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpjzir6er8.java:92: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpjzir6er8.java:92:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpjzir6er8.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgeq86n9v.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ggaxm6t.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01ur5yc5.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp59unm91j.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx9xxy1ng.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpicf27gbh.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0pt12ej.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_9nml0y7.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe6ioz5jk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx48to97w.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy_wbudsc.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial1 = 1;\n        long factorial2 = 1;\n        long\
    \ factorial3 = 1;\n        long factorial4 = 1;\n        long factorial5 = 1;\n\
    \        long factorial6 = 1;\n        long factorial7 = 1;\n        long factorial8\
    \ = 1;\n        long factorial9 = 1;\n        long factorial10 = 1;\n        long\
    \ factorial11 = 1;\n        long factorial12 = 1;\n        long factorial13 =\
    \ 1;\n        long factorial14 = 1;\n        long factorial15 = 1;\n        long\
    \ factorial16 = 1;\n        long factorial17 = 1;\n        long factorial18 =\
    \ 1;\n        long factorial19 = 1;\n        long factorial20 = 1;\n        long\
    \ factorial21 = 1;\n        long factorial22 = 1;\n        long factorial23 =\
    \ 1;\n        long factorial24 = 1;\n        long factorial25 = 1;\n        long\
    \ factorial26 = 1;\n        long factorial27 = 1;\n        long factorial28 =\
    \ 1;\n        long factorial29 = 1;\n        long factorial30 = 1;\n        long\
    \ factorial31 = 1;\n        long factorial32 = 1;\n        long factorial33 =\
    \ 1;\n        long factorial34 = 1;\n        long factorial35 = 1;\n        long\
    \ factorial36 = 1;\n        long factorial37 = 1;\n        long factorial38 =\
    \ 1;\n        long factorial39 = 1;\n        long factorial40 = 1;\n        long\
    \ factorial41 = 1;\n        long factorial42 = 1;\n        long factorial43 =\
    \ 1;\n        long factorial44 = 1;\n        long factorial45 = 1;\n        long\
    \ factorial46 = 1;\n        long factorial47 = 1;\n        long factorial48 =\
    \ 1;\n        long factorial49 = 1;\n        long factorial50 = 1;\n        long\
    \ factorial51 = 1;\n        long factorial52 = 1;\n        long factorial53 =\
    \ 1;\n        long factorial54 = 1;\n        long factorial55 = 1;\n        long\
    \ factorial56 = 1;\n        long factorial57 = 1;\n        long factorial58 =\
    \ 1;\n        long factorial59 = 1;\n        long factorial60 = 1;\n        long\
    \ factorial61 = 1;\n        long factorial62 = 1;\n        long factorial63 =\
    \ 1;\n        long factorial64 = 1;\n        long factorial65 = 1;\n        long\
    \ factorial66 = 1;\n        long factorial67 = 1;\n        long factorial68 =\
    \ 1;\n        long factorial69 = 1;\n        long factorial70 = 1;\n        long\
    \ factorial71 = 1;\n        long factorial72 = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7wbvi7h.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpg7wbvi7h.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpg7wbvi7h.java:92: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpg7wbvi7h.java:92:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpg7wbvi7h.java:92: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpg7wbvi7h.java:92:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpg7wbvi7h.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpks6abl77.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_8ylp94e.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx3ob0h7c.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial1 = 1;\n        long factorial2 = 1;\n        long\
    \ factorial3 = 1;\n        long factorial4 = 1;\n        long factorial5 = 1;\n\
    \        long factorial6 = 1;\n        long factorial7 = 1;\n        long factorial8\
    \ = 1;\n        long factorial9 = 1;\n        long factorial10 = 1;\n        long\
    \ factorial11 = 1;\n        long factorial12 = 1;\n        long factorial13 =\
    \ 1;\n        long factorial14 = 1;\n        long factorial15 = 1;\n        long\
    \ factorial16 = 1;\n        long factorial17 = 1;\n        long factorial18 =\
    \ 1;\n        long factorial19 = 1;\n        long factorial20 = 1;\n        long\
    \ factorial21 = 1;\n        long factorial22 = 1;\n        long factorial23 =\
    \ 1;\n        long factorial24 = 1;\n        long factorial25 = 1;\n        long\
    \ factorial26 = 1;\n        long factorial27 = 1;\n        long factorial28 =\
    \ 1;\n        long factorial29 = 1;\n        long factorial30 = 1;\n        long\
    \ factorial31 = 1;\n        long factorial32 = 1;\n        long factorial33 =\
    \ 1;\n        long factorial34 = 1;\n        long factorial35 = 1;\n        long\
    \ factorial36 = 1;\n        long factorial37 = 1;\n        long factorial38 =\
    \ 1;\n        long factorial39 = 1;\n        long factorial40 = 1;\n        long\
    \ factorial41 = 1;\n        long factorial42 = 1;\n        long factorial43 =\
    \ 1;\n        long factorial44 = 1;\n        long factorial45 = 1;\n        long\
    \ factorial46 = 1;\n        long factorial47 = 1;\n        long factorial48 =\
    \ 1;\n        long factorial49 = 1;\n        long factorial50 = 1;\n        long\
    \ factorial51 = 1;\n        long factorial52 = 1;\n        long factorial53 =\
    \ 1;\n        long factorial54 = 1;\n        long factorial55 = 1;\n        long\
    \ factorial56 = 1;\n        long factorial57 = 1;\n        long factorial58 =\
    \ 1;\n        long factorial59 = 1;\n        long factorial60 = 1;\n        long\
    \ factorial61 = 1;\n        long factorial62 = 1;\n        long factorial63 =\
    \ 1;\n        long factorial64 = 1;\n        long factorial65 = 1;\n        long\
    \ factorial66 = 1;\n        long factorial67 = 1;\n        long factorial68 =\
    \ 1;\n        long factorial69 = 1;\n        long factorial70 = 1;\n        long\
    \ factorial71 = 1;\n        long factorial72 = \n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ewq1vin.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp1ewq1vin.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp1ewq1vin.java:92: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp1ewq1vin.java:92:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp1ewq1vin.java:92: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp1ewq1vin.java:92:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp1ewq1vin.java:99: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe9crhtq1.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxvyvm6hs.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqkdf5at.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n   \
    \     }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jyojjks.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9tnj3mik.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyqvtvtk7.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorialFactorial = 1;\n        long factorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorial = 1;\n        long factorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorial =\
    \ 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial\
    \ = 1;\n        long factorialFactorialFactorialFactorialFactorialFactorialFactor\n\
    \    }\n    public static void main(String[] args) {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpoggxnjj0.java:37: error: ';' expected\n        long factorialFactorialFactorialFactorialFactorialFactorialFactor\n\
    \                                                                         ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuakt2_c1.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzif3yoif.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp96hhywed.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial_of_n = (long) Math.pow(n, factorial);\n       \
    \ factorial++;\n        return factorial_of_n;\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1u3mn_c.java:25)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_xalp4v3.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzda9vmop.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp28196n2u.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn3y025bk.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwh_emnox.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmcaoqsi.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_jp19rj.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6a9n97lw.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n  \
    \      }\n        return result;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpihe9nzw0.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyau2vnv.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82ck62c6.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnvujb46.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7bmhjgl.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8vuudpiq.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp94m_eqh_.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxm80a54.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgf81voes.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbj2uygq.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        long factorial2 = 1;\n        long factorial3 = 1;\n        long\
    \ factorial4 = 1;\n        long factorial5 = 1;\n        long factorial6 = 1;\n\
    \        long factorial7 = 1;\n        long factorial8 = 1;\n        long factorial9\
    \ = 1;\n        long factorial10 = 1;\n        long factorial11 = 1;\n       \
    \ long factorial12 = 1;\n        long factorial13 = 1;\n        long factorial14\
    \ = 1;\n        long factorial15 = 1;\n        long factorial16 = 1;\n       \
    \ long factorial17 = 1;\n        long factorial18 = 1;\n        long factorial19\
    \ = 1;\n        long factorial20 = 1;\n        long factorial21 = 1;\n       \
    \ long factorial22 = 1;\n        long factorial23 = 1;\n        long factorial24\
    \ = 1;\n        long factorial25 = 1;\n        long factorial26 = 1;\n       \
    \ long factorial27 = 1;\n        long factorial28 = 1;\n        long factorial29\
    \ = 1;\n        long factorial30 = 1;\n        long factorial31 = 1;\n       \
    \ long factorial32 = 1;\n        long factorial33 = 1;\n        long factorial34\
    \ = 1;\n        long factorial35 = 1;\n        long factorial36 = 1;\n       \
    \ long factorial37 = 1;\n        long factorial38 = 1;\n        long factorial39\
    \ = 1;\n        long factorial40 = 1;\n        long factorial41 = 1;\n       \
    \ long factorial42 = 1;\n        long factorial43 = 1;\n        long factorial44\
    \ = 1;\n        long factorial45 = 1;\n        long factorial46 = 1;\n       \
    \ long factorial47 = 1;\n        long factorial48 = 1;\n        long factorial49\
    \ = 1;\n        long factorial50 = 1;\n        long factorial51 = 1;\n       \
    \ long factorial52 = 1;\n        long factorial53 = 1;\n        long factorial54\
    \ = 1;\n        long factorial55 = 1;\n        long factorial56 = 1;\n       \
    \ long factorial57 = 1;\n        long factorial58 = 1;\n        long factorial59\
    \ = 1;\n        long factorial60 = 1;\n        long factorial61 = 1;\n       \
    \ long factorial62 = 1;\n        long factorial63 = 1;\n        long factorial64\
    \ = 1;\n        long factorial65 = 1;\n        long factorial66 = 1;\n       \
    \ long factorial67 = 1;\n        long factorial68 = 1;\n        long factorial69\
    \ = 1;\n        long factorial70 = 1;\n        long factorial71 = 1;\n       \
    \ long factorial72 = 1;\n        long factorial\n    }\n    public static void\
    \ main(String[] args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_n_zn5m_.java:90: error: ';' expected\n        long factorial\n\
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokqmslxo.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n \
    \       }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdbuvhz6u.java:26)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> special_factorial(4)\n    // 288\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long specialFactorial(long n) {\n        long factorial\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n\
    \        }\n        return factorial;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0p5soopg.java:26)\n"
  exit_code: 1
  status: Exception
